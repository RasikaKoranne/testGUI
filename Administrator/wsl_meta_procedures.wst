WSPARAMETERREAD,FUNCTION,1,FUNCTION WsParameterRead (
WSPARAMETERREAD,FUNCTION,2, v_parameter varchar2
WSPARAMETERREAD,FUNCTION,3, )
WSPARAMETERREAD,FUNCTION,4, RETURN varchar2
WSPARAMETERREAD,FUNCTION,5, AUTHID CURRENT_USER
WSPARAMETERREAD,FUNCTION,6, IS
WSPARAMETERREAD,FUNCTION,7,
WSPARAMETERREAD,FUNCTION,8, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSPARAMETERREAD,FUNCTION,9,
WSPARAMETERREAD,FUNCTION,10, -- ============================================================================
WSPARAMETERREAD,FUNCTION,11, -- DBMS Name : Oracle
WSPARAMETERREAD,FUNCTION,12, -- Script Name : WsParameterRead.sql
WSPARAMETERREAD,FUNCTION,13, -- Description : Reads an entry from the parameter table
WSPARAMETERREAD,FUNCTION,14, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSPARAMETERREAD,FUNCTION,15, -- =============================================================================
WSPARAMETERREAD,FUNCTION,16,
WSPARAMETERREAD,FUNCTION,17, v_value varchar2(2000);
WSPARAMETERREAD,FUNCTION,18,
WSPARAMETERREAD,FUNCTION,19,BEGIN
WSPARAMETERREAD,FUNCTION,20, -- =========================================================================
WSPARAMETERREAD,FUNCTION,21, -- Select the parameter from the table and return the value
WSPARAMETERREAD,FUNCTION,22, -- =========================================================================
WSPARAMETERREAD,FUNCTION,23,
WSPARAMETERREAD,FUNCTION,24, Select dss_parameter_value into v_value
WSPARAMETERREAD,FUNCTION,25, from dss_parameter
WSPARAMETERREAD,FUNCTION,26, where upper(ltrim(rtrim(dss_parameter_name))) = upper(ltrim(rtrim(v_parameter)));
WSPARAMETERREAD,FUNCTION,27,
WSPARAMETERREAD,FUNCTION,28, Return v_value; -- return the parameter value
WSPARAMETERREAD,FUNCTION,29,
WSPARAMETERREAD,FUNCTION,30,EXCEPTION
WSPARAMETERREAD,FUNCTION,31, WHEN OTHERS Then
WSPARAMETERREAD,FUNCTION,32, v_value := '';
WSPARAMETERREAD,FUNCTION,33, Return v_value; -- return null
WSPARAMETERREAD,FUNCTION,34,END WsParameterRead;
WSPARAMETERREAD,FUNCTION,35,
WSPARAMETERREADG,FUNCTION,1,FUNCTION WsParameterReadG (
WSPARAMETERREADG,FUNCTION,2, p_parameter IN varchar2,
WSPARAMETERREADG,FUNCTION,3, p_job_id IN number,
WSPARAMETERREADG,FUNCTION,4, p_task_id IN number
WSPARAMETERREADG,FUNCTION,5, )
WSPARAMETERREADG,FUNCTION,6, RETURN varchar2
WSPARAMETERREADG,FUNCTION,7, AUTHID CURRENT_USER
WSPARAMETERREADG,FUNCTION,8, IS
WSPARAMETERREADG,FUNCTION,9,
WSPARAMETERREADG,FUNCTION,10, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSPARAMETERREADG,FUNCTION,11,
WSPARAMETERREADG,FUNCTION,12, -- ============================================================================
WSPARAMETERREADG,FUNCTION,13, -- DBMS Name : Oracle
WSPARAMETERREADG,FUNCTION,14, -- Script Name : WsParameterReadG.sql
WSPARAMETERREADG,FUNCTION,15, -- Description : Reads a Global parameter
WSPARAMETERREADG,FUNCTION,16, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSPARAMETERREADG,FUNCTION,17, -- =============================================================================
WSPARAMETERREADG,FUNCTION,18,
WSPARAMETERREADG,FUNCTION,19, --=====================================================
WSPARAMETERREADG,FUNCTION,20, -- Constants
WSPARAMETERREADG,FUNCTION,21, --=====================================================
WSPARAMETERREADG,FUNCTION,22, v_ws_obj_procedure constant number := 1;
WSPARAMETERREADG,FUNCTION,23, v_ws_obj_directive constant number := 2;
WSPARAMETERREADG,FUNCTION,24, v_ws_obj_script constant number := 3;
WSPARAMETERREADG,FUNCTION,25, v_ws_obj_template constant number := 4;
WSPARAMETERREADG,FUNCTION,26, v_ws_obj_fact constant number := 5;
WSPARAMETERREADG,FUNCTION,27, v_ws_obj_dim constant number := 6;
WSPARAMETERREADG,FUNCTION,28, v_ws_obj_stage constant number := 7;
WSPARAMETERREADG,FUNCTION,29, v_ws_obj_load constant number := 8;
WSPARAMETERREADG,FUNCTION,30, v_ws_obj_agg constant number := 9;
WSPARAMETERREADG,FUNCTION,31, v_ws_obj_index constant number := 10;
WSPARAMETERREADG,FUNCTION,32, v_ws_obj_connect constant number := 11;
WSPARAMETERREADG,FUNCTION,33, v_ws_obj_dim_view constant number := 12;
WSPARAMETERREADG,FUNCTION,34,
WSPARAMETERREADG,FUNCTION,35, --=====================================================
WSPARAMETERREADG,FUNCTION,36, -- Variables
WSPARAMETERREADG,FUNCTION,37, --=====================================================
WSPARAMETERREADG,FUNCTION,38, v_value varchar2(2000);
WSPARAMETERREADG,FUNCTION,39, v_obj_key integer := 0;
WSPARAMETERREADG,FUNCTION,40, v_obj_type integer := 0;
WSPARAMETERREADG,FUNCTION,41,
WSPARAMETERREADG,FUNCTION,42,BEGIN
WSPARAMETERREADG,FUNCTION,43, -- =========================================================================
WSPARAMETERREADG,FUNCTION,44, -- If the job number is zero then the task number is the object id
WSPARAMETERREADG,FUNCTION,45, -- otherwise we need to find the object from the task.
WSPARAMETERREADG,FUNCTION,46, -- =========================================================================
WSPARAMETERREADG,FUNCTION,47, IF p_job_id IS NULL or p_job_id = 0 THEN
WSPARAMETERREADG,FUNCTION,48, v_obj_key := p_task_id;
WSPARAMETERREADG,FUNCTION,49, ELSE
WSPARAMETERREADG,FUNCTION,50, SELECT wtr_obj_key INTO v_obj_key
WSPARAMETERREADG,FUNCTION,51, FROM ws_wrk_task_run
WSPARAMETERREADG,FUNCTION,52, WHERE wtr_task_key = p_task_id
WSPARAMETERREADG,FUNCTION,53,-- RED-6790: Dont match on the job key, because a child job gets given the job key of its parent job (if any) so that auditing is all accurate.
WSPARAMETERREADG,FUNCTION,54,-- AND wtr_job_key = p_job_id
WSPARAMETERREADG,FUNCTION,55, ;
WSPARAMETERREADG,FUNCTION,56, END IF;
WSPARAMETERREADG,FUNCTION,57,
WSPARAMETERREADG,FUNCTION,58, -- =========================================================================
WSPARAMETERREADG,FUNCTION,59, -- make sure we have a valid object key else quit
WSPARAMETERREADG,FUNCTION,60, -- =========================================================================
WSPARAMETERREADG,FUNCTION,61, IF v_obj_key IS NULL OR v_obj_key = 0 THEN
WSPARAMETERREADG,FUNCTION,62, v_value := '';
WSPARAMETERREADG,FUNCTION,63, RETURN v_value; -- return null
WSPARAMETERREADG,FUNCTION,64, END IF;
WSPARAMETERREADG,FUNCTION,65,
WSPARAMETERREADG,FUNCTION,66, -- =========================================================================
WSPARAMETERREADG,FUNCTION,67, -- get the object type
WSPARAMETERREADG,FUNCTION,68, -- =========================================================================
WSPARAMETERREADG,FUNCTION,69, SELECT oo_type_key INTO v_obj_type
WSPARAMETERREADG,FUNCTION,70, FROM ws_obj_object
WSPARAMETERREADG,FUNCTION,71, WHERE oo_obj_key = v_obj_key;
WSPARAMETERREADG,FUNCTION,72,
WSPARAMETERREADG,FUNCTION,73, -- =========================================================================
WSPARAMETERREADG,FUNCTION,74, -- make sure we have a valid object type else quit
WSPARAMETERREADG,FUNCTION,75, -- =========================================================================
WSPARAMETERREADG,FUNCTION,76, IF v_obj_type IS NULL OR v_obj_type = 0 THEN
WSPARAMETERREADG,FUNCTION,77, v_value := '';
WSPARAMETERREADG,FUNCTION,78, RETURN v_value; -- return null
WSPARAMETERREADG,FUNCTION,79, END IF;
WSPARAMETERREADG,FUNCTION,80,
WSPARAMETERREADG,FUNCTION,81, -- =========================================================================
WSPARAMETERREADG,FUNCTION,82, -- If the parameter is $$TABLE_NAME then return the table name
WSPARAMETERREADG,FUNCTION,83, -- =========================================================================
WSPARAMETERREADG,FUNCTION,84, IF UPPER(LTRIM(RTRIM(p_parameter))) = '$$TABLE_NAME' THEN
WSPARAMETERREADG,FUNCTION,85, IF v_obj_type = v_ws_obj_load THEN
WSPARAMETERREADG,FUNCTION,86, v_value := '';
WSPARAMETERREADG,FUNCTION,87, SELECT lt_table_name INTO v_value
WSPARAMETERREADG,FUNCTION,88, FROM ws_load_tab
WSPARAMETERREADG,FUNCTION,89, WHERE lt_obj_key = v_obj_key;
WSPARAMETERREADG,FUNCTION,90, RETURN v_value;
WSPARAMETERREADG,FUNCTION,91, END IF;
WSPARAMETERREADG,FUNCTION,92, END IF;
WSPARAMETERREADG,FUNCTION,93,
WSPARAMETERREADG,FUNCTION,94, -- =========================================================================
WSPARAMETERREADG,FUNCTION,95, -- If the parameter is $$SOURCE_TABLE then return the source table
WSPARAMETERREADG,FUNCTION,96, -- =========================================================================
WSPARAMETERREADG,FUNCTION,97, IF UPPER(LTRIM(RTRIM(p_parameter))) = '$$SOURCE_TABLE' THEN
WSPARAMETERREADG,FUNCTION,98, IF v_obj_type = v_ws_obj_load THEN
WSPARAMETERREADG,FUNCTION,99, v_value := '';
WSPARAMETERREADG,FUNCTION,100, SELECT max(lc_src_table) INTO v_value
WSPARAMETERREADG,FUNCTION,101, FROM ws_load_col
WSPARAMETERREADG,FUNCTION,102, WHERE lc_obj_key = v_obj_key;
WSPARAMETERREADG,FUNCTION,103, RETURN v_value;
WSPARAMETERREADG,FUNCTION,104, END IF;
WSPARAMETERREADG,FUNCTION,105, END IF;
WSPARAMETERREADG,FUNCTION,106,
WSPARAMETERREADG,FUNCTION,107,
WSPARAMETERREADG,FUNCTION,108, v_value := '';
WSPARAMETERREADG,FUNCTION,109, Return v_value; -- return null
WSPARAMETERREADG,FUNCTION,110,
WSPARAMETERREADG,FUNCTION,111,EXCEPTION
WSPARAMETERREADG,FUNCTION,112, WHEN OTHERS Then
WSPARAMETERREADG,FUNCTION,113, v_value := '';
WSPARAMETERREADG,FUNCTION,114, Return v_value; -- return null
WSPARAMETERREADG,FUNCTION,115,END WsParameterReadG;
WSPARAMETERREADG,FUNCTION,116,
WSPARAMETERREADJ,FUNCTION,1,FUNCTION WsParameterReadJ (
WSPARAMETERREADJ,FUNCTION,2, p_parameter IN varchar2,
WSPARAMETERREADJ,FUNCTION,3, p_job_id IN number
WSPARAMETERREADJ,FUNCTION,4, )
WSPARAMETERREADJ,FUNCTION,5, RETURN varchar2
WSPARAMETERREADJ,FUNCTION,6, AUTHID CURRENT_USER
WSPARAMETERREADJ,FUNCTION,7, IS
WSPARAMETERREADJ,FUNCTION,8,
WSPARAMETERREADJ,FUNCTION,9, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSPARAMETERREADJ,FUNCTION,10,
WSPARAMETERREADJ,FUNCTION,11, -- ============================================================================
WSPARAMETERREADJ,FUNCTION,12, -- DBMS Name : Oracle
WSPARAMETERREADJ,FUNCTION,13, -- Script Name : WsParameterReadJ.sql
WSPARAMETERREADJ,FUNCTION,14, -- Description : Reads job parameters
WSPARAMETERREADJ,FUNCTION,15, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSPARAMETERREADJ,FUNCTION,16, -- =============================================================================
WSPARAMETERREADJ,FUNCTION,17,
WSPARAMETERREADJ,FUNCTION,18, --=====================================================
WSPARAMETERREADJ,FUNCTION,19, -- Variables
WSPARAMETERREADJ,FUNCTION,20, --=====================================================
WSPARAMETERREADJ,FUNCTION,21, v_value varchar2(2000);
WSPARAMETERREADJ,FUNCTION,22,
WSPARAMETERREADJ,FUNCTION,23,BEGIN
WSPARAMETERREADJ,FUNCTION,24,
WSPARAMETERREADJ,FUNCTION,25, -- =========================================================================
WSPARAMETERREADJ,FUNCTION,26, -- make sure we have a valid job key else quit
WSPARAMETERREADJ,FUNCTION,27, -- =========================================================================
WSPARAMETERREADJ,FUNCTION,28, IF p_job_id IS NULL OR p_job_id = 0 THEN
WSPARAMETERREADJ,FUNCTION,29, v_value := '';
WSPARAMETERREADJ,FUNCTION,30, RETURN v_value; -- return null
WSPARAMETERREADJ,FUNCTION,31, END IF;
WSPARAMETERREADJ,FUNCTION,32,
WSPARAMETERREADJ,FUNCTION,33, -- =========================================================================
WSPARAMETERREADJ,FUNCTION,34, -- If the parameter is NAME then return the job name
WSPARAMETERREADJ,FUNCTION,35, -- =========================================================================
WSPARAMETERREADJ,FUNCTION,36, IF UPPER(LTRIM(RTRIM(p_parameter))) = 'NAME' THEN
WSPARAMETERREADJ,FUNCTION,37, v_value := '';
WSPARAMETERREADJ,FUNCTION,38, SELECT wjr_name INTO v_value
WSPARAMETERREADJ,FUNCTION,39, FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,40, WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,41, RETURN v_value;
WSPARAMETERREADJ,FUNCTION,42, END IF;
WSPARAMETERREADJ,FUNCTION,43,
WSPARAMETERREADJ,FUNCTION,44,
WSPARAMETERREADJ,FUNCTION,45,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,46,-- -- If the parameter is DESCRIPTION then return the job description
WSPARAMETERREADJ,FUNCTION,47,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,48,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = DESCRIPTION THEN
WSPARAMETERREADJ,FUNCTION,49,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,50,-- SELECT wjr_description INTO v_value
WSPARAMETERREADJ,FUNCTION,51,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,52,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,53,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,54,-- END IF;
WSPARAMETERREADJ,FUNCTION,55,--
WSPARAMETERREADJ,FUNCTION,56,--
WSPARAMETERREADJ,FUNCTION,57,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,58,-- -- If the parameter is ATRRIBUTE1 then return the attribute
WSPARAMETERREADJ,FUNCTION,59,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,60,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE1 THEN
WSPARAMETERREADJ,FUNCTION,61,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,62,-- SELECT wjr_attribute1 INTO v_value
WSPARAMETERREADJ,FUNCTION,63,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,64,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,65,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,66,-- END IF;
WSPARAMETERREADJ,FUNCTION,67,--
WSPARAMETERREADJ,FUNCTION,68,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,69,-- -- If the parameter is ATRRIBUTE2 then return the attribute
WSPARAMETERREADJ,FUNCTION,70,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,71,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE2 THEN
WSPARAMETERREADJ,FUNCTION,72,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,73,-- SELECT wjr_attribute2 INTO v_value
WSPARAMETERREADJ,FUNCTION,74,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,75,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,76,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,77,-- END IF;
WSPARAMETERREADJ,FUNCTION,78,--
WSPARAMETERREADJ,FUNCTION,79,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,80,-- -- If the parameter is ATRRIBUTE3 then return the attribute
WSPARAMETERREADJ,FUNCTION,81,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,82,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE3 THEN
WSPARAMETERREADJ,FUNCTION,83,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,84,-- SELECT wjr_attribute3 INTO v_value
WSPARAMETERREADJ,FUNCTION,85,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,86,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,87,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,88,-- END IF;
WSPARAMETERREADJ,FUNCTION,89,--
WSPARAMETERREADJ,FUNCTION,90,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,91,-- -- If the parameter is ATRRIBUTE4 then return the attribute
WSPARAMETERREADJ,FUNCTION,92,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,93,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE4 THEN
WSPARAMETERREADJ,FUNCTION,94,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,95,-- SELECT wjr_attribute4 INTO v_value
WSPARAMETERREADJ,FUNCTION,96,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,97,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,98,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,99,-- END IF;
WSPARAMETERREADJ,FUNCTION,100,--
WSPARAMETERREADJ,FUNCTION,101,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,102,-- -- If the parameter is ATRRIBUTE5 then return the attribute
WSPARAMETERREADJ,FUNCTION,103,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,104,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE5 THEN
WSPARAMETERREADJ,FUNCTION,105,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,106,-- SELECT wjr_attribute5 INTO v_value
WSPARAMETERREADJ,FUNCTION,107,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,108,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,109,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,110,-- END IF;
WSPARAMETERREADJ,FUNCTION,111,--
WSPARAMETERREADJ,FUNCTION,112,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,113,-- -- If the parameter is ATRRIBUTE6 then return the attribute
WSPARAMETERREADJ,FUNCTION,114,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,115,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE6 THEN
WSPARAMETERREADJ,FUNCTION,116,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,117,-- SELECT wjr_attribute6 INTO v_value
WSPARAMETERREADJ,FUNCTION,118,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,119,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,120,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,121,-- END IF;
WSPARAMETERREADJ,FUNCTION,122,--
WSPARAMETERREADJ,FUNCTION,123,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,124,-- -- If the parameter is ATRRIBUTE7 then return the attribute
WSPARAMETERREADJ,FUNCTION,125,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,126,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE7 THEN
WSPARAMETERREADJ,FUNCTION,127,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,128,-- SELECT wjr_attribute7 INTO v_value
WSPARAMETERREADJ,FUNCTION,129,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,130,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,131,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,132,-- END IF;
WSPARAMETERREADJ,FUNCTION,133,--
WSPARAMETERREADJ,FUNCTION,134,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,135,-- -- If the parameter is ATRRIBUTE8 then return the attribute
WSPARAMETERREADJ,FUNCTION,136,-- -- =========================================================================
WSPARAMETERREADJ,FUNCTION,137,-- IF UPPER(LTRIM(RTRIM(p_parameter))) = ATTRIBUTE8 THEN
WSPARAMETERREADJ,FUNCTION,138,-- v_value := ;
WSPARAMETERREADJ,FUNCTION,139,-- SELECT wjr_attribute8 INTO v_value
WSPARAMETERREADJ,FUNCTION,140,-- FROM ws_wrk_job_run
WSPARAMETERREADJ,FUNCTION,141,-- WHERE wjr_job_key = p_job_id;
WSPARAMETERREADJ,FUNCTION,142,-- RETURN v_value;
WSPARAMETERREADJ,FUNCTION,143,-- END IF;
WSPARAMETERREADJ,FUNCTION,144,
WSPARAMETERREADJ,FUNCTION,145,
WSPARAMETERREADJ,FUNCTION,146, v_value := '';
WSPARAMETERREADJ,FUNCTION,147, Return v_value; -- return null
WSPARAMETERREADJ,FUNCTION,148,
WSPARAMETERREADJ,FUNCTION,149,EXCEPTION
WSPARAMETERREADJ,FUNCTION,150, WHEN OTHERS Then
WSPARAMETERREADJ,FUNCTION,151, v_value := '';
WSPARAMETERREADJ,FUNCTION,152, Return v_value; -- return null
WSPARAMETERREADJ,FUNCTION,153,END WsParameterReadJ;
WSPARAMETERREADJ,FUNCTION,154,
WSPARAMETERREPLACE,FUNCTION,1,FUNCTION WsParameterReplace (
WSPARAMETERREPLACE,FUNCTION,2, p_incoming varchar2
WSPARAMETERREPLACE,FUNCTION,3, ,p_max integer
WSPARAMETERREPLACE,FUNCTION,4, )
WSPARAMETERREPLACE,FUNCTION,5, RETURN varchar2
WSPARAMETERREPLACE,FUNCTION,6, AUTHID CURRENT_USER
WSPARAMETERREPLACE,FUNCTION,7, IS
WSPARAMETERREPLACE,FUNCTION,8,
WSPARAMETERREPLACE,FUNCTION,9, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSPARAMETERREPLACE,FUNCTION,10,
WSPARAMETERREPLACE,FUNCTION,11, -- :============================================================================
WSPARAMETERREPLACE,FUNCTION,12, -- DBMS Name : ORACLE
WSPARAMETERREPLACE,FUNCTION,13, -- Script Name : WsParameterReplace.sql
WSPARAMETERREPLACE,FUNCTION,14, -- Description : Replaces occurrences of Parameters in a string
WSPARAMETERREPLACE,FUNCTION,15, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSPARAMETERREPLACE,FUNCTION,16, -- :=============================================================================
WSPARAMETERREPLACE,FUNCTION,17,
WSPARAMETERREPLACE,FUNCTION,18, v_return_status integer; -- Update result status
WSPARAMETERREPLACE,FUNCTION,19, v_row_count integer; -- General row count
WSPARAMETERREPLACE,FUNCTION,20, v_work varchar2(32767);
WSPARAMETERREPLACE,FUNCTION,21, v_work2 varchar2(32767);
WSPARAMETERREPLACE,FUNCTION,22, v_parameter varchar2(32767);
WSPARAMETERREPLACE,FUNCTION,23, v_spos integer;
WSPARAMETERREPLACE,FUNCTION,24, v_epos integer;
WSPARAMETERREPLACE,FUNCTION,25, v_qspos integer;
WSPARAMETERREPLACE,FUNCTION,26, v_qepos integer;
WSPARAMETERREPLACE,FUNCTION,27, v_search_value varchar2(32767);
WSPARAMETERREPLACE,FUNCTION,28, v_return_value varchar2(32767);
WSPARAMETERREPLACE,FUNCTION,29,
WSPARAMETERREPLACE,FUNCTION,30,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSPARAMETERREPLACE,FUNCTION,31,BEGIN
WSPARAMETERREPLACE,FUNCTION,32, v_return_value := '';
WSPARAMETERREPLACE,FUNCTION,33, v_search_value := p_incoming;
WSPARAMETERREPLACE,FUNCTION,34, -- look for first $P
WSPARAMETERREPLACE,FUNCTION,35, v_spos := INSTR(v_search_value,'$P');
WSPARAMETERREPLACE,FUNCTION,36, WHILE v_spos > 0
WSPARAMETERREPLACE,FUNCTION,37, LOOP
WSPARAMETERREPLACE,FUNCTION,38, -- look for first dbl quote
WSPARAMETERREPLACE,FUNCTION,39, v_qspos := 0; -- (forced removal of this check) INSTR(v_search_value,);
WSPARAMETERREPLACE,FUNCTION,40,
WSPARAMETERREPLACE,FUNCTION,41, -- Check if Quotes before or after the parameter
WSPARAMETERREPLACE,FUNCTION,42, IF v_qspos < v_spos
WSPARAMETERREPLACE,FUNCTION,43, AND v_qspos > 0
WSPARAMETERREPLACE,FUNCTION,44, THEN -- have double quotes somewhere before the first parameter
WSPARAMETERREPLACE,FUNCTION,45, -- append up to the
WSPARAMETERREPLACE,FUNCTION,46, v_return_value := v_return_value || SUBSTR(v_search_value,1,v_qspos);
WSPARAMETERREPLACE,FUNCTION,47,
WSPARAMETERREPLACE,FUNCTION,48, -- remove up to and including the quote from the search string
WSPARAMETERREPLACE,FUNCTION,49, v_search_value := SUBSTR(v_search_value,v_qspos+1,LENGTH(v_search_value)-v_qspos );
WSPARAMETERREPLACE,FUNCTION,50,
WSPARAMETERREPLACE,FUNCTION,51, -- find terminating quote
WSPARAMETERREPLACE,FUNCTION,52, v_qepos := INSTR(v_search_value,'"');
WSPARAMETERREPLACE,FUNCTION,53,
WSPARAMETERREPLACE,FUNCTION,54, IF v_qepos > 0
WSPARAMETERREPLACE,FUNCTION,55, THEN
WSPARAMETERREPLACE,FUNCTION,56, -- append up to the
WSPARAMETERREPLACE,FUNCTION,57, v_return_value := v_return_value || SUBSTR(v_search_value,1,v_qepos);
WSPARAMETERREPLACE,FUNCTION,58,
WSPARAMETERREPLACE,FUNCTION,59, -- remove up to and including the quote from the search string
WSPARAMETERREPLACE,FUNCTION,60, v_search_value := SUBSTR(v_search_value,v_qepos+1,LENGTH(v_search_value)-v_qepos );
WSPARAMETERREPLACE,FUNCTION,61,
WSPARAMETERREPLACE,FUNCTION,62, END IF;
WSPARAMETERREPLACE,FUNCTION,63, -- look for any more $P
WSPARAMETERREPLACE,FUNCTION,64, v_spos := INSTR(v_search_value,'$P');
WSPARAMETERREPLACE,FUNCTION,65,
WSPARAMETERREPLACE,FUNCTION,66, ELSE
WSPARAMETERREPLACE,FUNCTION,67, -- append up to the $P
WSPARAMETERREPLACE,FUNCTION,68, v_return_value := v_return_value || SUBSTR(v_search_value,1,v_spos-1);
WSPARAMETERREPLACE,FUNCTION,69, --remove up to and including the $P from the search string
WSPARAMETERREPLACE,FUNCTION,70, v_search_value := SUBSTR(v_search_value,v_spos+2,LENGTH(v_search_value)-v_spos-1);
WSPARAMETERREPLACE,FUNCTION,71,
WSPARAMETERREPLACE,FUNCTION,72, --find terminating $
WSPARAMETERREPLACE,FUNCTION,73, v_epos := INSTR(v_search_value,'$');
WSPARAMETERREPLACE,FUNCTION,74,
WSPARAMETERREPLACE,FUNCTION,75, IF v_epos = 0
WSPARAMETERREPLACE,FUNCTION,76, THEN
WSPARAMETERREPLACE,FUNCTION,77, v_spos := 0;
WSPARAMETERREPLACE,FUNCTION,78, v_return_value := v_return_value || '$P';
WSPARAMETERREPLACE,FUNCTION,79, ELSE
WSPARAMETERREPLACE,FUNCTION,80, -- determine the parameter name
WSPARAMETERREPLACE,FUNCTION,81, v_work := SUBSTR(v_search_value,1,v_epos-1);
WSPARAMETERREPLACE,FUNCTION,82,
WSPARAMETERREPLACE,FUNCTION,83, -- extract the parameter value
WSPARAMETERREPLACE,FUNCTION,84, SELECT WsParameterRead(v_work) into v_parameter FROM DUAL;
WSPARAMETERREPLACE,FUNCTION,85,
WSPARAMETERREPLACE,FUNCTION,86, IF v_parameter IS NULL
WSPARAMETERREPLACE,FUNCTION,87, THEN
WSPARAMETERREPLACE,FUNCTION,88, -- leave the search string alone and just append the $P to the return value
WSPARAMETERREPLACE,FUNCTION,89, v_return_value := v_return_value || '$P';
WSPARAMETERREPLACE,FUNCTION,90, ELSE
WSPARAMETERREPLACE,FUNCTION,91, -- append the parameter value
WSPARAMETERREPLACE,FUNCTION,92, v_return_value := v_return_value || v_parameter;
WSPARAMETERREPLACE,FUNCTION,93,
WSPARAMETERREPLACE,FUNCTION,94, -- remove up to terminating $ from the search string
WSPARAMETERREPLACE,FUNCTION,95, v_search_value := SUBSTR(v_search_value,v_epos+1,LENGTH(v_search_value)-v_epos);
WSPARAMETERREPLACE,FUNCTION,96, END IF;
WSPARAMETERREPLACE,FUNCTION,97,
WSPARAMETERREPLACE,FUNCTION,98, -- look for any more $P
WSPARAMETERREPLACE,FUNCTION,99, v_spos := INSTR(v_search_value,'$P');
WSPARAMETERREPLACE,FUNCTION,100,
WSPARAMETERREPLACE,FUNCTION,101, END IF;
WSPARAMETERREPLACE,FUNCTION,102, END IF;
WSPARAMETERREPLACE,FUNCTION,103, END LOOP;
WSPARAMETERREPLACE,FUNCTION,104,
WSPARAMETERREPLACE,FUNCTION,105, -- Append rest of string
WSPARAMETERREPLACE,FUNCTION,106, v_return_value := v_return_value || v_search_value;
WSPARAMETERREPLACE,FUNCTION,107,
WSPARAMETERREPLACE,FUNCTION,108, -- If going to be too big then NULL it out to be handled on return
WSPARAMETERREPLACE,FUNCTION,109, IF LENGTH(v_return_value) > p_max THEN
WSPARAMETERREPLACE,FUNCTION,110, v_return_value := NULL;
WSPARAMETERREPLACE,FUNCTION,111, END IF;
WSPARAMETERREPLACE,FUNCTION,112,
WSPARAMETERREPLACE,FUNCTION,113, RETURN v_return_value;
WSPARAMETERREPLACE,FUNCTION,114,
WSPARAMETERREPLACE,FUNCTION,115,EXCEPTION
WSPARAMETERREPLACE,FUNCTION,116, WHEN OTHERS Then
WSPARAMETERREPLACE,FUNCTION,117, v_return_value := '';
WSPARAMETERREPLACE,FUNCTION,118, Return v_return_value; -- return null
WSPARAMETERREPLACE,FUNCTION,119,END WsParameterReplace;
WSPARAMETERREPLACE,FUNCTION,120,
WSPARAMETERREPLACE,FUNCTION,121,
WSPARAMETERWRITE,FUNCTION,1,FUNCTION WsParameterWrite (
WSPARAMETERWRITE,FUNCTION,2, v_parameter IN varchar2,
WSPARAMETERWRITE,FUNCTION,3, v_value IN varchar2,
WSPARAMETERWRITE,FUNCTION,4, v_comments IN varchar2
WSPARAMETERWRITE,FUNCTION,5, )
WSPARAMETERWRITE,FUNCTION,6, RETURN varchar2
WSPARAMETERWRITE,FUNCTION,7, AUTHID CURRENT_USER
WSPARAMETERWRITE,FUNCTION,8, AS PRAGMA AUTONOMOUS_TRANSACTION;
WSPARAMETERWRITE,FUNCTION,9,
WSPARAMETERWRITE,FUNCTION,10, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSPARAMETERWRITE,FUNCTION,11,
WSPARAMETERWRITE,FUNCTION,12, -- ============================================================================
WSPARAMETERWRITE,FUNCTION,13, -- DBMS Name : Oracle
WSPARAMETERWRITE,FUNCTION,14, -- Script Name : WsParameterWrite.sql
WSPARAMETERWRITE,FUNCTION,15, -- Description : Write or update an entry in the parameter table
WSPARAMETERWRITE,FUNCTION,16, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSPARAMETERWRITE,FUNCTION,17, -- =============================================================================
WSPARAMETERWRITE,FUNCTION,18,
WSPARAMETERWRITE,FUNCTION,19, v_result integer;
WSPARAMETERWRITE,FUNCTION,20, v_comment varchar2(256);
WSPARAMETERWRITE,FUNCTION,21,
WSPARAMETERWRITE,FUNCTION,22,
WSPARAMETERWRITE,FUNCTION,23,BEGIN
WSPARAMETERWRITE,FUNCTION,24, -- =========================================================================
WSPARAMETERWRITE,FUNCTION,25, -- Update or Insert the parameter
WSPARAMETERWRITE,FUNCTION,26, -- =========================================================================
WSPARAMETERWRITE,FUNCTION,27, v_comment := v_comments;
WSPARAMETERWRITE,FUNCTION,28,
WSPARAMETERWRITE,FUNCTION,29, Update dss_parameter
WSPARAMETERWRITE,FUNCTION,30, Set dss_parameter_value = v_value,
WSPARAMETERWRITE,FUNCTION,31, dss_parameter_comments = NVL(v_comment, dss_parameter_comments)
WSPARAMETERWRITE,FUNCTION,32, where upper(ltrim(rtrim(dss_parameter_name))) = upper(ltrim(rtrim(v_parameter)));
WSPARAMETERWRITE,FUNCTION,33,
WSPARAMETERWRITE,FUNCTION,34, IF SQL%NOTFOUND THEN
WSPARAMETERWRITE,FUNCTION,35,
WSPARAMETERWRITE,FUNCTION,36, Insert into dss_parameter (dss_parameter_name, dss_parameter_value,
WSPARAMETERWRITE,FUNCTION,37, dss_parameter_comments)
WSPARAMETERWRITE,FUNCTION,38, Values (
WSPARAMETERWRITE,FUNCTION,39, v_parameter,
WSPARAMETERWRITE,FUNCTION,40, v_value,
WSPARAMETERWRITE,FUNCTION,41, NVL(v_comment,'Inserted via WsParamaterWrite'));
WSPARAMETERWRITE,FUNCTION,42, v_result := 2;
WSPARAMETERWRITE,FUNCTION,43, Else
WSPARAMETERWRITE,FUNCTION,44, v_result := 1;
WSPARAMETERWRITE,FUNCTION,45, End If;
WSPARAMETERWRITE,FUNCTION,46,
WSPARAMETERWRITE,FUNCTION,47, COMMIT;
WSPARAMETERWRITE,FUNCTION,48,
WSPARAMETERWRITE,FUNCTION,49, Return v_result; -- return an indicator 1=done, 2 = added
WSPARAMETERWRITE,FUNCTION,50,
WSPARAMETERWRITE,FUNCTION,51,EXCEPTION
WSPARAMETERWRITE,FUNCTION,52, WHEN OTHERS Then
WSPARAMETERWRITE,FUNCTION,53, v_result := -3;
WSPARAMETERWRITE,FUNCTION,54, Return v_result; -- return an error
WSPARAMETERWRITE,FUNCTION,55,END WsParameterWrite;
WSPARAMETERWRITE,FUNCTION,56,
WSWRKAUDIT,FUNCTION,1,FUNCTION WsWrkAudit (
WSWRKAUDIT,FUNCTION,2, v_status_code varchar2,
WSWRKAUDIT,FUNCTION,3, v_job_name varchar2,
WSWRKAUDIT,FUNCTION,4, v_task_name varchar2,
WSWRKAUDIT,FUNCTION,5, v_sequence number,
WSWRKAUDIT,FUNCTION,6, v_message varchar2,
WSWRKAUDIT,FUNCTION,7, v_db_code varchar2,
WSWRKAUDIT,FUNCTION,8, v_db_msg varchar2,
WSWRKAUDIT,FUNCTION,9, v_task_key number,
WSWRKAUDIT,FUNCTION,10, v_job_key number
WSWRKAUDIT,FUNCTION,11, )
WSWRKAUDIT,FUNCTION,12, RETURN integer
WSWRKAUDIT,FUNCTION,13, AUTHID CURRENT_USER
WSWRKAUDIT,FUNCTION,14, IS
WSWRKAUDIT,FUNCTION,15, PRAGMA AUTONOMOUS_TRANSACTION;
WSWRKAUDIT,FUNCTION,16,
WSWRKAUDIT,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSWRKAUDIT,FUNCTION,18,
WSWRKAUDIT,FUNCTION,19, -- ============================================================================
WSWRKAUDIT,FUNCTION,20, -- DBMS Name : Oracle
WSWRKAUDIT,FUNCTION,21, -- Script Name : WsWrkAudit.sql
WSWRKAUDIT,FUNCTION,22, -- Description : Writes row to audit log and if applicable to job_run and task_run
WSWRKAUDIT,FUNCTION,23, -- Author : Wayne Richmond
WSWRKAUDIT,FUNCTION,24, -- Date : 2 December 1996
WSWRKAUDIT,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKAUDIT,FUNCTION,26, -- =============================================================================
WSWRKAUDIT,FUNCTION,27,
WSWRKAUDIT,FUNCTION,28, v_okay_count number := 0;
WSWRKAUDIT,FUNCTION,29, v_info_count number := 0;
WSWRKAUDIT,FUNCTION,30, v_warn_count number := 0;
WSWRKAUDIT,FUNCTION,31, v_error_count number := 0;
WSWRKAUDIT,FUNCTION,32, v_return number := 1;
WSWRKAUDIT,FUNCTION,33,
WSWRKAUDIT,FUNCTION,34,BEGIN
WSWRKAUDIT,FUNCTION,35, -- =========================================================================
WSWRKAUDIT,FUNCTION,36, -- Insert the message into the audit log. Catch all errors as we do not want to halt the
WSWRKAUDIT,FUNCTION,37, -- calling procedure in the case of an insert failure
WSWRKAUDIT,FUNCTION,38, -- =========================================================================
WSWRKAUDIT,FUNCTION,39,
WSWRKAUDIT,FUNCTION,40, Insert into ws_wrk_audit_log
WSWRKAUDIT,FUNCTION,41, (
WSWRKAUDIT,FUNCTION,42, wa_time_stamp,
WSWRKAUDIT,FUNCTION,43, wa_sequence,
WSWRKAUDIT,FUNCTION,44, wa_job,
WSWRKAUDIT,FUNCTION,45, wa_task,
WSWRKAUDIT,FUNCTION,46, wa_status,
WSWRKAUDIT,FUNCTION,47, wa_message,
WSWRKAUDIT,FUNCTION,48, wa_db_msg_code,
WSWRKAUDIT,FUNCTION,49, wa_db_msg_desc,
WSWRKAUDIT,FUNCTION,50, wa_task_key,
WSWRKAUDIT,FUNCTION,51, wa_job_key,
WSWRKAUDIT,FUNCTION,52, wa_row_number
WSWRKAUDIT,FUNCTION,53, )
WSWRKAUDIT,FUNCTION,54, Values
WSWRKAUDIT,FUNCTION,55, (
WSWRKAUDIT,FUNCTION,56, sysdate,
WSWRKAUDIT,FUNCTION,57, v_sequence,
WSWRKAUDIT,FUNCTION,58, v_job_name,
WSWRKAUDIT,FUNCTION,59, v_task_name,
WSWRKAUDIT,FUNCTION,60, v_status_code,
WSWRKAUDIT,FUNCTION,61, v_message,
WSWRKAUDIT,FUNCTION,62, v_db_code,
WSWRKAUDIT,FUNCTION,63, v_db_msg,
WSWRKAUDIT,FUNCTION,64, v_task_key,
WSWRKAUDIT,FUNCTION,65, v_job_key,
WSWRKAUDIT,FUNCTION,66, ws_audit_log_seq.nextval
WSWRKAUDIT,FUNCTION,67, );
WSWRKAUDIT,FUNCTION,68,
WSWRKAUDIT,FUNCTION,69, -- =========================================================================
WSWRKAUDIT,FUNCTION,70, -- If the task or job key is not zero we need to know which counter to increment
WSWRKAUDIT,FUNCTION,71, -- =========================================================================
WSWRKAUDIT,FUNCTION,72,
WSWRKAUDIT,FUNCTION,73, If v_task_key <> 0 Or v_job_key <> 0 Then
WSWRKAUDIT,FUNCTION,74, If v_status_code = 'S' Then
WSWRKAUDIT,FUNCTION,75, v_okay_count := 1;
WSWRKAUDIT,FUNCTION,76, ElsIf v_status_code = 'I' Then
WSWRKAUDIT,FUNCTION,77, v_info_count := 1;
WSWRKAUDIT,FUNCTION,78, ElsIf v_status_code = 'W' Then
WSWRKAUDIT,FUNCTION,79, v_warn_count := 1;
WSWRKAUDIT,FUNCTION,80, ElsIf v_status_code = 'E' Then
WSWRKAUDIT,FUNCTION,81, v_error_count := 1;
WSWRKAUDIT,FUNCTION,82, ElsIf v_status_code = 'F' Then
WSWRKAUDIT,FUNCTION,83, v_error_count := 1;
WSWRKAUDIT,FUNCTION,84, End If;
WSWRKAUDIT,FUNCTION,85, End If;
WSWRKAUDIT,FUNCTION,86,
WSWRKAUDIT,FUNCTION,87, -- =========================================================================
WSWRKAUDIT,FUNCTION,88, -- If the task key is not zero attempt to update the counters in the task_run table.
WSWRKAUDIT,FUNCTION,89, -- =========================================================================
WSWRKAUDIT,FUNCTION,90, If ( v_task_key <> 0 ) Then
WSWRKAUDIT,FUNCTION,91, BEGIN
WSWRKAUDIT,FUNCTION,92, Update ws_wrk_task_run
WSWRKAUDIT,FUNCTION,93, Set
WSWRKAUDIT,FUNCTION,94, wtr_info_count = wtr_info_count + v_info_count,
WSWRKAUDIT,FUNCTION,95, wtr_warning_count = wtr_warning_count + v_warn_count
WSWRKAUDIT,FUNCTION,96, Where wtr_task_key = v_task_key
WSWRKAUDIT,FUNCTION,97, And wtr_sequence = v_sequence;
WSWRKAUDIT,FUNCTION,98, EXCEPTION WHEN OTHERS THEN
WSWRKAUDIT,FUNCTION,99, v_return := 0;
WSWRKAUDIT,FUNCTION,100, END;
WSWRKAUDIT,FUNCTION,101,
WSWRKAUDIT,FUNCTION,102, End If;
WSWRKAUDIT,FUNCTION,103,
WSWRKAUDIT,FUNCTION,104, -- =========================================================================
WSWRKAUDIT,FUNCTION,105, -- If the job key is not zero attempt to update the counters in the job_run table.
WSWRKAUDIT,FUNCTION,106, -- =========================================================================
WSWRKAUDIT,FUNCTION,107, If ( v_job_key <> 0 ) Then
WSWRKAUDIT,FUNCTION,108, BEGIN
WSWRKAUDIT,FUNCTION,109, Update ws_wrk_job_run
WSWRKAUDIT,FUNCTION,110, Set
WSWRKAUDIT,FUNCTION,111, wjr_okay_count = wjr_okay_count + v_okay_count,
WSWRKAUDIT,FUNCTION,112, wjr_info_count = wjr_info_count + v_info_count,
WSWRKAUDIT,FUNCTION,113, wjr_warning_count = wjr_warning_count + v_warn_count,
WSWRKAUDIT,FUNCTION,114, wjr_error_count = wjr_error_count + v_error_count
WSWRKAUDIT,FUNCTION,115, Where wjr_job_key = v_job_key
WSWRKAUDIT,FUNCTION,116, And wjr_sequence = v_sequence;
WSWRKAUDIT,FUNCTION,117, EXCEPTION WHEN OTHERS THEN
WSWRKAUDIT,FUNCTION,118, v_return := 0;
WSWRKAUDIT,FUNCTION,119, END;
WSWRKAUDIT,FUNCTION,120,
WSWRKAUDIT,FUNCTION,121, End If;
WSWRKAUDIT,FUNCTION,122,
WSWRKAUDIT,FUNCTION,123, -- =========================================================================
WSWRKAUDIT,FUNCTION,124, --Commit the message. This may be undesirable!!
WSWRKAUDIT,FUNCTION,125, -- =========================================================================
WSWRKAUDIT,FUNCTION,126, Commit;
WSWRKAUDIT,FUNCTION,127, Return v_return; -- insert OK, or a warning on the update
WSWRKAUDIT,FUNCTION,128,
WSWRKAUDIT,FUNCTION,129,EXCEPTION
WSWRKAUDIT,FUNCTION,130, WHEN OTHERS Then
WSWRKAUDIT,FUNCTION,131, Return -3; -- insert failed
WSWRKAUDIT,FUNCTION,132,END WsWrkAudit;
WSWRKAUDIT,FUNCTION,133,
WSWRKAUDITBULK,FUNCTION,1,FUNCTION WsWrkAuditBulk (
WSWRKAUDITBULK,FUNCTION,2, v_status_code varchar2,
WSWRKAUDITBULK,FUNCTION,3, v_job_name varchar2,
WSWRKAUDITBULK,FUNCTION,4, v_task_name varchar2,
WSWRKAUDITBULK,FUNCTION,5, v_sequence number,
WSWRKAUDITBULK,FUNCTION,6, v_message varchar2,
WSWRKAUDITBULK,FUNCTION,7, v_db_code varchar2,
WSWRKAUDITBULK,FUNCTION,8, v_db_msg varchar2,
WSWRKAUDITBULK,FUNCTION,9, v_task_key number,
WSWRKAUDITBULK,FUNCTION,10, v_job_key number
WSWRKAUDITBULK,FUNCTION,11, )
WSWRKAUDITBULK,FUNCTION,12, RETURN integer
WSWRKAUDITBULK,FUNCTION,13, AUTHID CURRENT_USER
WSWRKAUDITBULK,FUNCTION,14, IS
WSWRKAUDITBULK,FUNCTION,15, PRAGMA AUTONOMOUS_TRANSACTION;
WSWRKAUDITBULK,FUNCTION,16,
WSWRKAUDITBULK,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSWRKAUDITBULK,FUNCTION,18,
WSWRKAUDITBULK,FUNCTION,19, -- ============================================================================
WSWRKAUDITBULK,FUNCTION,20, -- DBMS Name : Oracle
WSWRKAUDITBULK,FUNCTION,21, -- Script Name : WsWrkAuditBulk.sql
WSWRKAUDITBULK,FUNCTION,22, -- Description : Writes rows to audit log and if applicable to job_run and task_run
WSWRKAUDITBULK,FUNCTION,23, -- Author : Wayne Richmond
WSWRKAUDITBULK,FUNCTION,24, -- Date : 2 December 1996
WSWRKAUDITBULK,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKAUDITBULK,FUNCTION,26, -- =============================================================================
WSWRKAUDITBULK,FUNCTION,27,
WSWRKAUDITBULK,FUNCTION,28, v_okay_count number := 0;
WSWRKAUDITBULK,FUNCTION,29, v_info_count number := 0;
WSWRKAUDITBULK,FUNCTION,30, v_warn_count number := 0;
WSWRKAUDITBULK,FUNCTION,31, v_error_count number := 0;
WSWRKAUDITBULK,FUNCTION,32, v_row_count number := 0;
WSWRKAUDITBULK,FUNCTION,33, v_stmt varchar2(1024);
WSWRKAUDITBULK,FUNCTION,34, v_return number := 1;
WSWRKAUDITBULK,FUNCTION,35, v_step number;
WSWRKAUDITBULK,FUNCTION,36, v_pos number;
WSWRKAUDITBULK,FUNCTION,37, v_loop integer;
WSWRKAUDITBULK,FUNCTION,38, v_start integer;
WSWRKAUDITBULK,FUNCTION,39, v_end integer;
WSWRKAUDITBULK,FUNCTION,40, v_size integer;
WSWRKAUDITBULK,FUNCTION,41, v_tilde integer := 0;
WSWRKAUDITBULK,FUNCTION,42, v_rows integer := 0;
WSWRKAUDITBULK,FUNCTION,43,
WSWRKAUDITBULK,FUNCTION,44,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKAUDITBULK,FUNCTION,45,BEGIN
WSWRKAUDITBULK,FUNCTION,46, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,47, -- Insert the messages into the audit log. Catch all errors as we do not want to halt the
WSWRKAUDITBULK,FUNCTION,48, -- calling procedure in the case of an insert failure
WSWRKAUDITBULK,FUNCTION,49, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,50,
WSWRKAUDITBULK,FUNCTION,51, --=====================================================
WSWRKAUDITBULK,FUNCTION,52, -- Loop through the text passed
WSWRKAUDITBULK,FUNCTION,53, -- saving a line after each newline character
WSWRKAUDITBULK,FUNCTION,54, -- a line is a max of 1024 bytes long
WSWRKAUDITBULK,FUNCTION,55, --=====================================================
WSWRKAUDITBULK,FUNCTION,56, v_step := 30;
WSWRKAUDITBULK,FUNCTION,57, v_loop := 1;
WSWRKAUDITBULK,FUNCTION,58, v_start := 1;
WSWRKAUDITBULK,FUNCTION,59, v_end := length(v_message);
WSWRKAUDITBULK,FUNCTION,60, v_step := 40;
WSWRKAUDITBULK,FUNCTION,61,
WSWRKAUDITBULK,FUNCTION,62, WHILE v_loop = 1 LOOP
WSWRKAUDITBULK,FUNCTION,63, v_step := 50;
WSWRKAUDITBULK,FUNCTION,64, v_pos := instr(v_message,CHR(10),v_start,1);
WSWRKAUDITBULK,FUNCTION,65, If nvl(v_pos,0) < 1 Then
WSWRKAUDITBULK,FUNCTION,66, v_pos := instr(v_message,'~',v_start,1);
WSWRKAUDITBULK,FUNCTION,67, If nvl(v_pos,0) >= 1 Then
WSWRKAUDITBULK,FUNCTION,68, v_tilde := 1;
WSWRKAUDITBULK,FUNCTION,69, Else
WSWRKAUDITBULK,FUNCTION,70, v_tilde := 0;
WSWRKAUDITBULK,FUNCTION,71, End If;
WSWRKAUDITBULK,FUNCTION,72, Else
WSWRKAUDITBULK,FUNCTION,73, v_tilde := 0;
WSWRKAUDITBULK,FUNCTION,74, End If;
WSWRKAUDITBULK,FUNCTION,75, v_step := 60;
WSWRKAUDITBULK,FUNCTION,76, If nvl(v_pos,0) < 1 Then
WSWRKAUDITBULK,FUNCTION,77, v_size := nvl(length(v_message),-1);
WSWRKAUDITBULK,FUNCTION,78, v_loop := 0 ;
WSWRKAUDITBULK,FUNCTION,79, v_size := (v_size - v_start);
WSWRKAUDITBULK,FUNCTION,80, If v_tilde = 0 Then
WSWRKAUDITBULK,FUNCTION,81, v_size := v_size + 1;
WSWRKAUDITBULK,FUNCTION,82, End If;
WSWRKAUDITBULK,FUNCTION,83, If v_size > 0 Then
WSWRKAUDITBULK,FUNCTION,84, -- Maximum of 1024 characters in a line
WSWRKAUDITBULK,FUNCTION,85, If v_size > 1024 Then
WSWRKAUDITBULK,FUNCTION,86, v_size := 1024;
WSWRKAUDITBULK,FUNCTION,87, End If;
WSWRKAUDITBULK,FUNCTION,88, v_stmt := substr(v_message,v_start,v_size);
WSWRKAUDITBULK,FUNCTION,89, v_step := 81;
WSWRKAUDITBULK,FUNCTION,90, v_row_count := v_row_count +1;
WSWRKAUDITBULK,FUNCTION,91, v_step := 91;
WSWRKAUDITBULK,FUNCTION,92, Insert into ws_wrk_audit_log
WSWRKAUDITBULK,FUNCTION,93, (
WSWRKAUDITBULK,FUNCTION,94, wa_time_stamp,
WSWRKAUDITBULK,FUNCTION,95, wa_sequence,
WSWRKAUDITBULK,FUNCTION,96, wa_job,
WSWRKAUDITBULK,FUNCTION,97, wa_task,
WSWRKAUDITBULK,FUNCTION,98, wa_status,
WSWRKAUDITBULK,FUNCTION,99, wa_message,
WSWRKAUDITBULK,FUNCTION,100, wa_db_msg_code,
WSWRKAUDITBULK,FUNCTION,101, wa_db_msg_desc,
WSWRKAUDITBULK,FUNCTION,102, wa_task_key,
WSWRKAUDITBULK,FUNCTION,103, wa_job_key,
WSWRKAUDITBULK,FUNCTION,104, wa_row_number
WSWRKAUDITBULK,FUNCTION,105, )
WSWRKAUDITBULK,FUNCTION,106, Values
WSWRKAUDITBULK,FUNCTION,107, (
WSWRKAUDITBULK,FUNCTION,108, sysdate,
WSWRKAUDITBULK,FUNCTION,109, v_sequence,
WSWRKAUDITBULK,FUNCTION,110, v_job_name,
WSWRKAUDITBULK,FUNCTION,111, v_task_name,
WSWRKAUDITBULK,FUNCTION,112, v_status_code,
WSWRKAUDITBULK,FUNCTION,113, v_stmt,
WSWRKAUDITBULK,FUNCTION,114, v_db_code,
WSWRKAUDITBULK,FUNCTION,115, v_db_msg,
WSWRKAUDITBULK,FUNCTION,116, v_task_key,
WSWRKAUDITBULK,FUNCTION,117, v_job_key,
WSWRKAUDITBULK,FUNCTION,118, ws_audit_log_seq.nextval
WSWRKAUDITBULK,FUNCTION,119, );
WSWRKAUDITBULK,FUNCTION,120, End If;
WSWRKAUDITBULK,FUNCTION,121, Else
WSWRKAUDITBULK,FUNCTION,122, v_step := 70;
WSWRKAUDITBULK,FUNCTION,123, v_size := (v_pos - v_start);
WSWRKAUDITBULK,FUNCTION,124, If v_tilde = 0 Then
WSWRKAUDITBULK,FUNCTION,125, v_size := v_size + 1;
WSWRKAUDITBULK,FUNCTION,126, End If;
WSWRKAUDITBULK,FUNCTION,127, -- Maximum of 1024 characters in a line
WSWRKAUDITBULK,FUNCTION,128, If v_size > 1024 Then
WSWRKAUDITBULK,FUNCTION,129, v_size := 1024;
WSWRKAUDITBULK,FUNCTION,130, End If;
WSWRKAUDITBULK,FUNCTION,131, v_stmt := substr(v_message,v_start,v_size);
WSWRKAUDITBULK,FUNCTION,132, v_step := 80;
WSWRKAUDITBULK,FUNCTION,133, v_row_count := v_row_count +1;
WSWRKAUDITBULK,FUNCTION,134, v_step := 90;
WSWRKAUDITBULK,FUNCTION,135, Insert into ws_wrk_audit_log
WSWRKAUDITBULK,FUNCTION,136, (
WSWRKAUDITBULK,FUNCTION,137, wa_time_stamp,
WSWRKAUDITBULK,FUNCTION,138, wa_sequence,
WSWRKAUDITBULK,FUNCTION,139, wa_job,
WSWRKAUDITBULK,FUNCTION,140, wa_task,
WSWRKAUDITBULK,FUNCTION,141, wa_status,
WSWRKAUDITBULK,FUNCTION,142, wa_message,
WSWRKAUDITBULK,FUNCTION,143, wa_db_msg_code,
WSWRKAUDITBULK,FUNCTION,144, wa_db_msg_desc,
WSWRKAUDITBULK,FUNCTION,145, wa_task_key,
WSWRKAUDITBULK,FUNCTION,146, wa_job_key,
WSWRKAUDITBULK,FUNCTION,147, wa_row_number
WSWRKAUDITBULK,FUNCTION,148, )
WSWRKAUDITBULK,FUNCTION,149, Values
WSWRKAUDITBULK,FUNCTION,150, (
WSWRKAUDITBULK,FUNCTION,151, sysdate,
WSWRKAUDITBULK,FUNCTION,152, v_sequence,
WSWRKAUDITBULK,FUNCTION,153, v_job_name,
WSWRKAUDITBULK,FUNCTION,154, v_task_name,
WSWRKAUDITBULK,FUNCTION,155, v_status_code,
WSWRKAUDITBULK,FUNCTION,156, v_stmt,
WSWRKAUDITBULK,FUNCTION,157, v_db_code,
WSWRKAUDITBULK,FUNCTION,158, v_db_msg,
WSWRKAUDITBULK,FUNCTION,159, v_task_key,
WSWRKAUDITBULK,FUNCTION,160, v_job_key,
WSWRKAUDITBULK,FUNCTION,161, ws_audit_log_seq.nextval
WSWRKAUDITBULK,FUNCTION,162, );
WSWRKAUDITBULK,FUNCTION,163, v_start := v_pos + 1;
WSWRKAUDITBULK,FUNCTION,164, v_step := 100;
WSWRKAUDITBULK,FUNCTION,165, If v_start >= v_end Then
WSWRKAUDITBULK,FUNCTION,166, v_loop := 0;
WSWRKAUDITBULK,FUNCTION,167, End If;
WSWRKAUDITBULK,FUNCTION,168, End If;
WSWRKAUDITBULK,FUNCTION,169,
WSWRKAUDITBULK,FUNCTION,170, -- only allow a maximum of 1000 rows from one task to
WSWRKAUDITBULK,FUNCTION,171, -- prevent a blowout of the audit trail.
WSWRKAUDITBULK,FUNCTION,172, v_rows := v_rows + 1;
WSWRKAUDITBULK,FUNCTION,173, If v_rows >999 Then
WSWRKAUDITBULK,FUNCTION,174, v_loop := 0;
WSWRKAUDITBULK,FUNCTION,175, v_stmt := 'Maximum number of error rows reached. OUTPUT ABORTED by WsWrkAuditBulk';
WSWRKAUDITBULK,FUNCTION,176, Insert into ws_wrk_audit_log
WSWRKAUDITBULK,FUNCTION,177, (
WSWRKAUDITBULK,FUNCTION,178, wa_time_stamp,
WSWRKAUDITBULK,FUNCTION,179, wa_sequence,
WSWRKAUDITBULK,FUNCTION,180, wa_job,
WSWRKAUDITBULK,FUNCTION,181, wa_task,
WSWRKAUDITBULK,FUNCTION,182, wa_status,
WSWRKAUDITBULK,FUNCTION,183, wa_message,
WSWRKAUDITBULK,FUNCTION,184, wa_db_msg_code,
WSWRKAUDITBULK,FUNCTION,185, wa_db_msg_desc,
WSWRKAUDITBULK,FUNCTION,186, wa_task_key,
WSWRKAUDITBULK,FUNCTION,187, wa_job_key,
WSWRKAUDITBULK,FUNCTION,188, wa_row_number
WSWRKAUDITBULK,FUNCTION,189, )
WSWRKAUDITBULK,FUNCTION,190, Values
WSWRKAUDITBULK,FUNCTION,191, (
WSWRKAUDITBULK,FUNCTION,192, sysdate,
WSWRKAUDITBULK,FUNCTION,193, v_sequence,
WSWRKAUDITBULK,FUNCTION,194, v_job_name,
WSWRKAUDITBULK,FUNCTION,195, v_task_name,
WSWRKAUDITBULK,FUNCTION,196, v_status_code,
WSWRKAUDITBULK,FUNCTION,197, v_stmt,
WSWRKAUDITBULK,FUNCTION,198, v_db_code,
WSWRKAUDITBULK,FUNCTION,199, v_db_msg,
WSWRKAUDITBULK,FUNCTION,200, v_task_key,
WSWRKAUDITBULK,FUNCTION,201, v_job_key,
WSWRKAUDITBULK,FUNCTION,202, ws_audit_log_seq.nextval
WSWRKAUDITBULK,FUNCTION,203, );
WSWRKAUDITBULK,FUNCTION,204, End If;
WSWRKAUDITBULK,FUNCTION,205, END LOOP;
WSWRKAUDITBULK,FUNCTION,206,
WSWRKAUDITBULK,FUNCTION,207,
WSWRKAUDITBULK,FUNCTION,208,
WSWRKAUDITBULK,FUNCTION,209, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,210, -- If the task or job key is not zero we need to know which counter to increment
WSWRKAUDITBULK,FUNCTION,211, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,212,
WSWRKAUDITBULK,FUNCTION,213, If v_task_key <> 0 Or v_job_key <> 0 Then
WSWRKAUDITBULK,FUNCTION,214, If v_status_code = 'S' Then
WSWRKAUDITBULK,FUNCTION,215, v_okay_count := v_row_count;
WSWRKAUDITBULK,FUNCTION,216, ElsIf v_status_code = 'I' Then
WSWRKAUDITBULK,FUNCTION,217, v_info_count := v_row_count;
WSWRKAUDITBULK,FUNCTION,218, ElsIf v_status_code = 'W' Then
WSWRKAUDITBULK,FUNCTION,219, v_warn_count := v_row_count;
WSWRKAUDITBULK,FUNCTION,220, ElsIf v_status_code = 'E' Then
WSWRKAUDITBULK,FUNCTION,221, v_error_count := v_row_count;
WSWRKAUDITBULK,FUNCTION,222, ElsIf v_status_code = 'F' Then
WSWRKAUDITBULK,FUNCTION,223, v_error_count := v_row_count;
WSWRKAUDITBULK,FUNCTION,224, End If;
WSWRKAUDITBULK,FUNCTION,225, End If;
WSWRKAUDITBULK,FUNCTION,226,
WSWRKAUDITBULK,FUNCTION,227, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,228, -- If the task key is not zero attempt to update the counters in the task_run table.
WSWRKAUDITBULK,FUNCTION,229, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,230, If ( v_task_key <> 0 ) Then
WSWRKAUDITBULK,FUNCTION,231, BEGIN
WSWRKAUDITBULK,FUNCTION,232, Update ws_wrk_task_run
WSWRKAUDITBULK,FUNCTION,233, Set
WSWRKAUDITBULK,FUNCTION,234, wtr_info_count = wtr_info_count + v_info_count,
WSWRKAUDITBULK,FUNCTION,235, wtr_warning_count = wtr_warning_count + v_warn_count
WSWRKAUDITBULK,FUNCTION,236, Where wtr_task_key = v_task_key
WSWRKAUDITBULK,FUNCTION,237, And wtr_sequence = v_sequence;
WSWRKAUDITBULK,FUNCTION,238, EXCEPTION WHEN OTHERS THEN
WSWRKAUDITBULK,FUNCTION,239, v_return := 0;
WSWRKAUDITBULK,FUNCTION,240, END;
WSWRKAUDITBULK,FUNCTION,241, End If;
WSWRKAUDITBULK,FUNCTION,242,
WSWRKAUDITBULK,FUNCTION,243, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,244, -- If the job key is not zero attempt to update the counters in the job_run table.
WSWRKAUDITBULK,FUNCTION,245, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,246, If ( v_job_key <> 0 ) Then
WSWRKAUDITBULK,FUNCTION,247, BEGIN
WSWRKAUDITBULK,FUNCTION,248, Update ws_wrk_job_run
WSWRKAUDITBULK,FUNCTION,249, Set
WSWRKAUDITBULK,FUNCTION,250, wjr_okay_count = wjr_okay_count + v_okay_count,
WSWRKAUDITBULK,FUNCTION,251, wjr_info_count = wjr_info_count + v_info_count,
WSWRKAUDITBULK,FUNCTION,252, wjr_warning_count = wjr_warning_count + v_warn_count,
WSWRKAUDITBULK,FUNCTION,253, wjr_error_count = wjr_error_count + v_error_count
WSWRKAUDITBULK,FUNCTION,254, Where wjr_job_key = v_job_key
WSWRKAUDITBULK,FUNCTION,255, And wjr_sequence = v_sequence;
WSWRKAUDITBULK,FUNCTION,256, EXCEPTION WHEN OTHERS THEN
WSWRKAUDITBULK,FUNCTION,257, v_return := 0;
WSWRKAUDITBULK,FUNCTION,258, END;
WSWRKAUDITBULK,FUNCTION,259, End If;
WSWRKAUDITBULK,FUNCTION,260,
WSWRKAUDITBULK,FUNCTION,261, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,262, --Commit the message. This may be undesirable!!
WSWRKAUDITBULK,FUNCTION,263, -- =========================================================================
WSWRKAUDITBULK,FUNCTION,264, Commit;
WSWRKAUDITBULK,FUNCTION,265, Return v_return; -- insert OK, or a warning on the update
WSWRKAUDITBULK,FUNCTION,266,
WSWRKAUDITBULK,FUNCTION,267,EXCEPTION
WSWRKAUDITBULK,FUNCTION,268, WHEN OTHERS Then
WSWRKAUDITBULK,FUNCTION,269, Return -3; -- insert failed
WSWRKAUDITBULK,FUNCTION,270,END WsWrkAuditBulk;
WSWRKAUDITBULK,FUNCTION,271,
WSWRKCHKPOINT,FUNCTION,1,FUNCTION WsWrkChkPoint (
WSWRKCHKPOINT,FUNCTION,2, v_job_key number,
WSWRKCHKPOINT,FUNCTION,3, v_sequence number,
WSWRKCHKPOINT,FUNCTION,4, v_chkpoint number
WSWRKCHKPOINT,FUNCTION,5, )
WSWRKCHKPOINT,FUNCTION,6, RETURN integer
WSWRKCHKPOINT,FUNCTION,7, AUTHID CURRENT_USER
WSWRKCHKPOINT,FUNCTION,8, IS
WSWRKCHKPOINT,FUNCTION,9,
WSWRKCHKPOINT,FUNCTION,10, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSWRKCHKPOINT,FUNCTION,11,
WSWRKCHKPOINT,FUNCTION,12, -- ============================================================================
WSWRKCHKPOINT,FUNCTION,13, -- DBMS Name : Oracle
WSWRKCHKPOINT,FUNCTION,14, -- Script Name : WsWrkChkPoint.sql
WSWRKCHKPOINT,FUNCTION,15, -- Description : Writes row to the detail log
WSWRKCHKPOINT,FUNCTION,16, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WSWRKCHKPOINT,FUNCTION,17, -- =============================================================================
WSWRKCHKPOINT,FUNCTION,18,
WSWRKCHKPOINT,FUNCTION,19,BEGIN
WSWRKCHKPOINT,FUNCTION,20, -- =========================================================================
WSWRKCHKPOINT,FUNCTION,21, -- Update the job run table. Catch any error as we do not want to hinder the
WSWRKCHKPOINT,FUNCTION,22, -- calling procedure if we fail on our update
WSWRKCHKPOINT,FUNCTION,23, -- =========================================================================
WSWRKCHKPOINT,FUNCTION,24,
WSWRKCHKPOINT,FUNCTION,25, Update ws_wrk_job_run
WSWRKCHKPOINT,FUNCTION,26, Set wjr_chkp_number = v_chkpoint
WSWRKCHKPOINT,FUNCTION,27, Where wjr_job_key = v_job_key
WSWRKCHKPOINT,FUNCTION,28, And wjr_sequence = v_sequence;
WSWRKCHKPOINT,FUNCTION,29,
WSWRKCHKPOINT,FUNCTION,30,
WSWRKCHKPOINT,FUNCTION,31, -- =========================================================================
WSWRKCHKPOINT,FUNCTION,32, --Commit the change. This may be undesireable !!
WSWRKCHKPOINT,FUNCTION,33, -- =========================================================================
WSWRKCHKPOINT,FUNCTION,34, Commit;
WSWRKCHKPOINT,FUNCTION,35, Return 1; -- update OK
WSWRKCHKPOINT,FUNCTION,36,
WSWRKCHKPOINT,FUNCTION,37,EXCEPTION
WSWRKCHKPOINT,FUNCTION,38, WHEN OTHERS Then
WSWRKCHKPOINT,FUNCTION,39, Return -3; -- update failed
WSWRKCHKPOINT,FUNCTION,40,END WsWrkChkPoint;
WSWRKCHKPOINT,FUNCTION,41,
WSWRKERROR,FUNCTION,1,FUNCTION WsWrkError (
WSWRKERROR,FUNCTION,2, v_status_code varchar2,
WSWRKERROR,FUNCTION,3, v_job_name varchar2,
WSWRKERROR,FUNCTION,4, v_task_name varchar2,
WSWRKERROR,FUNCTION,5, v_sequence number,
WSWRKERROR,FUNCTION,6, v_message varchar2,
WSWRKERROR,FUNCTION,7, v_db_code varchar2,
WSWRKERROR,FUNCTION,8, v_db_msg varchar2,
WSWRKERROR,FUNCTION,9, v_task_key number,
WSWRKERROR,FUNCTION,10, v_job_key number,
WSWRKERROR,FUNCTION,11, v_msg_type varchar2
WSWRKERROR,FUNCTION,12, )
WSWRKERROR,FUNCTION,13, RETURN integer
WSWRKERROR,FUNCTION,14, AUTHID CURRENT_USER
WSWRKERROR,FUNCTION,15, IS
WSWRKERROR,FUNCTION,16, PRAGMA AUTONOMOUS_TRANSACTION;
WSWRKERROR,FUNCTION,17,
WSWRKERROR,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSWRKERROR,FUNCTION,19,
WSWRKERROR,FUNCTION,20, -- ============================================================================
WSWRKERROR,FUNCTION,21, -- DBMS Name : Oracle
WSWRKERROR,FUNCTION,22, -- Script Name : WsWrkError.sql
WSWRKERROR,FUNCTION,23, -- Description : Writes row to the error log
WSWRKERROR,FUNCTION,24, -- Author : Wayne Richmond
WSWRKERROR,FUNCTION,25, -- Date : 2 December 1996
WSWRKERROR,FUNCTION,26, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKERROR,FUNCTION,27, -- =============================================================================
WSWRKERROR,FUNCTION,28,
WSWRKERROR,FUNCTION,29,BEGIN
WSWRKERROR,FUNCTION,30, -- =========================================================================
WSWRKERROR,FUNCTION,31, -- Insert the message into the log table. Catch any error as we do not want to hinder the
WSWRKERROR,FUNCTION,32, -- calling procedure if we fail on our insert
WSWRKERROR,FUNCTION,33, -- =========================================================================
WSWRKERROR,FUNCTION,34,
WSWRKERROR,FUNCTION,35, Insert into Ws_wrk_error_log
WSWRKERROR,FUNCTION,36, (
WSWRKERROR,FUNCTION,37, wd_time_stamp,
WSWRKERROR,FUNCTION,38, wd_sequence,
WSWRKERROR,FUNCTION,39, wd_job,
WSWRKERROR,FUNCTION,40, wd_task,
WSWRKERROR,FUNCTION,41, wd_status,
WSWRKERROR,FUNCTION,42, wd_message,
WSWRKERROR,FUNCTION,43, wd_db_msg_code,
WSWRKERROR,FUNCTION,44, wd_db_msg_desc,
WSWRKERROR,FUNCTION,45, wd_task_key,
WSWRKERROR,FUNCTION,46, wd_job_key,
WSWRKERROR,FUNCTION,47, wd_msg_type_code,
WSWRKERROR,FUNCTION,48, wd_row_number
WSWRKERROR,FUNCTION,49, )
WSWRKERROR,FUNCTION,50, Values
WSWRKERROR,FUNCTION,51, (
WSWRKERROR,FUNCTION,52, sysdate,
WSWRKERROR,FUNCTION,53, v_sequence,
WSWRKERROR,FUNCTION,54, v_job_name,
WSWRKERROR,FUNCTION,55, v_task_name,
WSWRKERROR,FUNCTION,56, v_status_code,
WSWRKERROR,FUNCTION,57, v_message,
WSWRKERROR,FUNCTION,58, v_db_code,
WSWRKERROR,FUNCTION,59, v_db_msg,
WSWRKERROR,FUNCTION,60, v_task_key,
WSWRKERROR,FUNCTION,61, v_job_key,
WSWRKERROR,FUNCTION,62, v_msg_type,
WSWRKERROR,FUNCTION,63, ws_error_log_seq.nextval
WSWRKERROR,FUNCTION,64, );
WSWRKERROR,FUNCTION,65,
WSWRKERROR,FUNCTION,66,
WSWRKERROR,FUNCTION,67, -- =========================================================================
WSWRKERROR,FUNCTION,68, -- If the task key is not zero attempt to update the counters in the task_run table.
WSWRKERROR,FUNCTION,69, -- =========================================================================
WSWRKERROR,FUNCTION,70, If ( v_task_key <> 0 ) Then
WSWRKERROR,FUNCTION,71, BEGIN
WSWRKERROR,FUNCTION,72, Update ws_wrk_task_run
WSWRKERROR,FUNCTION,73, Set
WSWRKERROR,FUNCTION,74, wtr_detail_count = wtr_detail_count + 1
WSWRKERROR,FUNCTION,75, Where wtr_task_key = v_task_key
WSWRKERROR,FUNCTION,76, And wtr_sequence = v_sequence;
WSWRKERROR,FUNCTION,77, EXCEPTION WHEN OTHERS THEN
WSWRKERROR,FUNCTION,78, NULL;
WSWRKERROR,FUNCTION,79, END;
WSWRKERROR,FUNCTION,80,
WSWRKERROR,FUNCTION,81, End If;
WSWRKERROR,FUNCTION,82,
WSWRKERROR,FUNCTION,83, -- =========================================================================
WSWRKERROR,FUNCTION,84, -- If the job key is not zero attempt to update the counters in the job_run table.
WSWRKERROR,FUNCTION,85, -- =========================================================================
WSWRKERROR,FUNCTION,86, If ( v_job_key <> 0 ) Then
WSWRKERROR,FUNCTION,87, BEGIN
WSWRKERROR,FUNCTION,88, Update ws_wrk_job_run
WSWRKERROR,FUNCTION,89, Set
WSWRKERROR,FUNCTION,90, wjr_detail_count = wjr_detail_count + 1
WSWRKERROR,FUNCTION,91, Where wjr_job_key = v_job_key
WSWRKERROR,FUNCTION,92, And wjr_sequence = v_sequence;
WSWRKERROR,FUNCTION,93, EXCEPTION WHEN OTHERS THEN
WSWRKERROR,FUNCTION,94, NULL;
WSWRKERROR,FUNCTION,95, END;
WSWRKERROR,FUNCTION,96,
WSWRKERROR,FUNCTION,97, End If;
WSWRKERROR,FUNCTION,98,
WSWRKERROR,FUNCTION,99, -- =========================================================================
WSWRKERROR,FUNCTION,100, --Commit the message. This may be undesirable!!
WSWRKERROR,FUNCTION,101, -- =========================================================================
WSWRKERROR,FUNCTION,102, Commit;
WSWRKERROR,FUNCTION,103, Return 1; -- insert OK
WSWRKERROR,FUNCTION,104,
WSWRKERROR,FUNCTION,105,EXCEPTION
WSWRKERROR,FUNCTION,106, WHEN OTHERS Then
WSWRKERROR,FUNCTION,107, Return -3; -- insert failed
WSWRKERROR,FUNCTION,108,END WsWrkError;
WSWRKERROR,FUNCTION,109,
WSWRKERRORBULK,FUNCTION,1,FUNCTION WsWrkErrorBulk (
WSWRKERRORBULK,FUNCTION,2, v_status_code varchar2,
WSWRKERRORBULK,FUNCTION,3, v_job_name varchar2,
WSWRKERRORBULK,FUNCTION,4, v_task_name varchar2,
WSWRKERRORBULK,FUNCTION,5, v_sequence number,
WSWRKERRORBULK,FUNCTION,6, v_message varchar2,
WSWRKERRORBULK,FUNCTION,7, v_db_code varchar2,
WSWRKERRORBULK,FUNCTION,8, v_db_msg varchar2,
WSWRKERRORBULK,FUNCTION,9, v_task_key number,
WSWRKERRORBULK,FUNCTION,10, v_job_key number,
WSWRKERRORBULK,FUNCTION,11, v_msg_type varchar2
WSWRKERRORBULK,FUNCTION,12, )
WSWRKERRORBULK,FUNCTION,13, RETURN integer
WSWRKERRORBULK,FUNCTION,14, AUTHID CURRENT_USER
WSWRKERRORBULK,FUNCTION,15, IS
WSWRKERRORBULK,FUNCTION,16, PRAGMA AUTONOMOUS_TRANSACTION;
WSWRKERRORBULK,FUNCTION,17,
WSWRKERRORBULK,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSWRKERRORBULK,FUNCTION,19,
WSWRKERRORBULK,FUNCTION,20, -- ============================================================================
WSWRKERRORBULK,FUNCTION,21, -- DBMS Name : Oracle
WSWRKERRORBULK,FUNCTION,22, -- Script Name : WsWrkErrorBulk.sql
WSWRKERRORBULK,FUNCTION,23, -- Description : Writes bulk rows to the error log
WSWRKERRORBULK,FUNCTION,24, -- Author : Wayne Richmond
WSWRKERRORBULK,FUNCTION,25, -- Date : 2 December 1996
WSWRKERRORBULK,FUNCTION,26, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKERRORBULK,FUNCTION,27, -- =============================================================================
WSWRKERRORBULK,FUNCTION,28,
WSWRKERRORBULK,FUNCTION,29, v_row_count number := 0;
WSWRKERRORBULK,FUNCTION,30, v_stmt varchar2(1024);
WSWRKERRORBULK,FUNCTION,31, v_return number := 1;
WSWRKERRORBULK,FUNCTION,32, v_step number;
WSWRKERRORBULK,FUNCTION,33, v_pos number;
WSWRKERRORBULK,FUNCTION,34, v_loop integer;
WSWRKERRORBULK,FUNCTION,35, v_start integer;
WSWRKERRORBULK,FUNCTION,36, v_end integer;
WSWRKERRORBULK,FUNCTION,37, v_size integer;
WSWRKERRORBULK,FUNCTION,38, v_tilde integer := 0;
WSWRKERRORBULK,FUNCTION,39, v_rows integer := 0;
WSWRKERRORBULK,FUNCTION,40,
WSWRKERRORBULK,FUNCTION,41,
WSWRKERRORBULK,FUNCTION,42,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKERRORBULK,FUNCTION,43,BEGIN
WSWRKERRORBULK,FUNCTION,44, -- =========================================================================
WSWRKERRORBULK,FUNCTION,45, -- Insert the messages into the log table. Catch any error as we do not want to hinder the
WSWRKERRORBULK,FUNCTION,46, -- calling procedure if we fail on our insert
WSWRKERRORBULK,FUNCTION,47, -- =========================================================================
WSWRKERRORBULK,FUNCTION,48,
WSWRKERRORBULK,FUNCTION,49, --=====================================================
WSWRKERRORBULK,FUNCTION,50, -- Loop through the text passed
WSWRKERRORBULK,FUNCTION,51, -- saving a line after each newline character
WSWRKERRORBULK,FUNCTION,52, -- a line is a max of 256 bytes long
WSWRKERRORBULK,FUNCTION,53, --=====================================================
WSWRKERRORBULK,FUNCTION,54, v_step := 30;
WSWRKERRORBULK,FUNCTION,55, v_loop := 1;
WSWRKERRORBULK,FUNCTION,56, v_start := 1;
WSWRKERRORBULK,FUNCTION,57, v_end := length(v_message);
WSWRKERRORBULK,FUNCTION,58, v_step := 40;
WSWRKERRORBULK,FUNCTION,59,
WSWRKERRORBULK,FUNCTION,60, WHILE v_loop = 1 LOOP
WSWRKERRORBULK,FUNCTION,61, v_step := 50;
WSWRKERRORBULK,FUNCTION,62, v_pos := instr(v_message,CHR(10),v_start,1);
WSWRKERRORBULK,FUNCTION,63, If nvl(v_pos,0) < 1 Then
WSWRKERRORBULK,FUNCTION,64, v_pos := instr(v_message,'~',v_start,1);
WSWRKERRORBULK,FUNCTION,65, If nvl(v_pos,0) >= 1 Then
WSWRKERRORBULK,FUNCTION,66, v_tilde := 1;
WSWRKERRORBULK,FUNCTION,67, Else
WSWRKERRORBULK,FUNCTION,68, v_tilde := 0;
WSWRKERRORBULK,FUNCTION,69, End If;
WSWRKERRORBULK,FUNCTION,70, Else
WSWRKERRORBULK,FUNCTION,71, v_tilde := 0;
WSWRKERRORBULK,FUNCTION,72, End If;
WSWRKERRORBULK,FUNCTION,73, v_step := 60;
WSWRKERRORBULK,FUNCTION,74, If nvl(v_pos,0) < 1 Then
WSWRKERRORBULK,FUNCTION,75, v_size := nvl(length(v_message),0);
WSWRKERRORBULK,FUNCTION,76, v_loop := 0 ;
WSWRKERRORBULK,FUNCTION,77, v_size := (v_size - v_start);
WSWRKERRORBULK,FUNCTION,78, If v_tilde = 0 Then
WSWRKERRORBULK,FUNCTION,79, v_size := v_size + 1;
WSWRKERRORBULK,FUNCTION,80, End If;
WSWRKERRORBULK,FUNCTION,81, If v_size > 0 Then
WSWRKERRORBULK,FUNCTION,82, -- Maximum of 1024 characters in a line
WSWRKERRORBULK,FUNCTION,83, If v_size > 1024 Then
WSWRKERRORBULK,FUNCTION,84, v_size := 1024;
WSWRKERRORBULK,FUNCTION,85, End If;
WSWRKERRORBULK,FUNCTION,86, v_stmt := substr(v_message,v_start,v_size);
WSWRKERRORBULK,FUNCTION,87, v_step := 81;
WSWRKERRORBULK,FUNCTION,88, v_row_count := v_row_count +1;
WSWRKERRORBULK,FUNCTION,89, v_step := 91;
WSWRKERRORBULK,FUNCTION,90, Insert into Ws_wrk_error_log
WSWRKERRORBULK,FUNCTION,91, (
WSWRKERRORBULK,FUNCTION,92, wd_time_stamp,
WSWRKERRORBULK,FUNCTION,93, wd_sequence,
WSWRKERRORBULK,FUNCTION,94, wd_job,
WSWRKERRORBULK,FUNCTION,95, wd_task,
WSWRKERRORBULK,FUNCTION,96, wd_status,
WSWRKERRORBULK,FUNCTION,97, wd_message,
WSWRKERRORBULK,FUNCTION,98, wd_db_msg_code,
WSWRKERRORBULK,FUNCTION,99, wd_db_msg_desc,
WSWRKERRORBULK,FUNCTION,100, wd_task_key,
WSWRKERRORBULK,FUNCTION,101, wd_job_key,
WSWRKERRORBULK,FUNCTION,102, wd_msg_type_code,
WSWRKERRORBULK,FUNCTION,103, wd_row_number
WSWRKERRORBULK,FUNCTION,104, )
WSWRKERRORBULK,FUNCTION,105, Values
WSWRKERRORBULK,FUNCTION,106, (
WSWRKERRORBULK,FUNCTION,107, sysdate,
WSWRKERRORBULK,FUNCTION,108, v_sequence,
WSWRKERRORBULK,FUNCTION,109, v_job_name,
WSWRKERRORBULK,FUNCTION,110, v_task_name,
WSWRKERRORBULK,FUNCTION,111, v_status_code,
WSWRKERRORBULK,FUNCTION,112, v_stmt,
WSWRKERRORBULK,FUNCTION,113, v_db_code,
WSWRKERRORBULK,FUNCTION,114, v_db_msg,
WSWRKERRORBULK,FUNCTION,115, v_task_key,
WSWRKERRORBULK,FUNCTION,116, v_job_key,
WSWRKERRORBULK,FUNCTION,117, v_msg_type,
WSWRKERRORBULK,FUNCTION,118, ws_error_log_seq.nextval
WSWRKERRORBULK,FUNCTION,119, );
WSWRKERRORBULK,FUNCTION,120, End If;
WSWRKERRORBULK,FUNCTION,121, Else
WSWRKERRORBULK,FUNCTION,122, v_step := 70;
WSWRKERRORBULK,FUNCTION,123, v_size := (v_pos - v_start);
WSWRKERRORBULK,FUNCTION,124, If v_tilde = 0 Then
WSWRKERRORBULK,FUNCTION,125, v_size := v_size + 1;
WSWRKERRORBULK,FUNCTION,126, End If;
WSWRKERRORBULK,FUNCTION,127, -- Maximum of 1024 characters in a line
WSWRKERRORBULK,FUNCTION,128, If v_size > 1024 Then
WSWRKERRORBULK,FUNCTION,129, v_size := 1024;
WSWRKERRORBULK,FUNCTION,130, End If;
WSWRKERRORBULK,FUNCTION,131, v_stmt := substr(v_message,v_start,v_size);
WSWRKERRORBULK,FUNCTION,132, v_step := 80;
WSWRKERRORBULK,FUNCTION,133, v_row_count := v_row_count +1;
WSWRKERRORBULK,FUNCTION,134, v_step := 90;
WSWRKERRORBULK,FUNCTION,135, Insert into Ws_wrk_error_log
WSWRKERRORBULK,FUNCTION,136, (
WSWRKERRORBULK,FUNCTION,137, wd_time_stamp,
WSWRKERRORBULK,FUNCTION,138, wd_sequence,
WSWRKERRORBULK,FUNCTION,139, wd_job,
WSWRKERRORBULK,FUNCTION,140, wd_task,
WSWRKERRORBULK,FUNCTION,141, wd_status,
WSWRKERRORBULK,FUNCTION,142, wd_message,
WSWRKERRORBULK,FUNCTION,143, wd_db_msg_code,
WSWRKERRORBULK,FUNCTION,144, wd_db_msg_desc,
WSWRKERRORBULK,FUNCTION,145, wd_task_key,
WSWRKERRORBULK,FUNCTION,146, wd_job_key,
WSWRKERRORBULK,FUNCTION,147, wd_msg_type_code,
WSWRKERRORBULK,FUNCTION,148, wd_row_number
WSWRKERRORBULK,FUNCTION,149, )
WSWRKERRORBULK,FUNCTION,150, Values
WSWRKERRORBULK,FUNCTION,151, (
WSWRKERRORBULK,FUNCTION,152, sysdate,
WSWRKERRORBULK,FUNCTION,153, v_sequence,
WSWRKERRORBULK,FUNCTION,154, v_job_name,
WSWRKERRORBULK,FUNCTION,155, v_task_name,
WSWRKERRORBULK,FUNCTION,156, v_status_code,
WSWRKERRORBULK,FUNCTION,157, v_stmt,
WSWRKERRORBULK,FUNCTION,158, v_db_code,
WSWRKERRORBULK,FUNCTION,159, v_db_msg,
WSWRKERRORBULK,FUNCTION,160, v_task_key,
WSWRKERRORBULK,FUNCTION,161, v_job_key,
WSWRKERRORBULK,FUNCTION,162, v_msg_type,
WSWRKERRORBULK,FUNCTION,163, ws_error_log_seq.nextval
WSWRKERRORBULK,FUNCTION,164, );
WSWRKERRORBULK,FUNCTION,165, v_start := v_pos + 1;
WSWRKERRORBULK,FUNCTION,166, v_step := 100;
WSWRKERRORBULK,FUNCTION,167, If v_start >= v_end Then
WSWRKERRORBULK,FUNCTION,168, v_loop := 0;
WSWRKERRORBULK,FUNCTION,169, End If;
WSWRKERRORBULK,FUNCTION,170, End If;
WSWRKERRORBULK,FUNCTION,171, -- only allow a maximum of 2000 rows from one task to
WSWRKERRORBULK,FUNCTION,172, -- prevent a blowout of the error trail.
WSWRKERRORBULK,FUNCTION,173, v_rows := v_rows + 1;
WSWRKERRORBULK,FUNCTION,174, If v_rows >1999 Then
WSWRKERRORBULK,FUNCTION,175, v_loop := 0;
WSWRKERRORBULK,FUNCTION,176, v_stmt := 'Maximum number of error rows reached. OUTPUT ABORTED by WsWrkErrorBulk';
WSWRKERRORBULK,FUNCTION,177, Insert into Ws_wrk_error_log
WSWRKERRORBULK,FUNCTION,178, (
WSWRKERRORBULK,FUNCTION,179, wd_time_stamp,
WSWRKERRORBULK,FUNCTION,180, wd_sequence,
WSWRKERRORBULK,FUNCTION,181, wd_job,
WSWRKERRORBULK,FUNCTION,182, wd_task,
WSWRKERRORBULK,FUNCTION,183, wd_status,
WSWRKERRORBULK,FUNCTION,184, wd_message,
WSWRKERRORBULK,FUNCTION,185, wd_db_msg_code,
WSWRKERRORBULK,FUNCTION,186, wd_db_msg_desc,
WSWRKERRORBULK,FUNCTION,187, wd_task_key,
WSWRKERRORBULK,FUNCTION,188, wd_job_key,
WSWRKERRORBULK,FUNCTION,189, wd_msg_type_code,
WSWRKERRORBULK,FUNCTION,190, wd_row_number
WSWRKERRORBULK,FUNCTION,191, )
WSWRKERRORBULK,FUNCTION,192, Values
WSWRKERRORBULK,FUNCTION,193, (
WSWRKERRORBULK,FUNCTION,194, sysdate,
WSWRKERRORBULK,FUNCTION,195, v_sequence,
WSWRKERRORBULK,FUNCTION,196, v_job_name,
WSWRKERRORBULK,FUNCTION,197, v_task_name,
WSWRKERRORBULK,FUNCTION,198, v_status_code,
WSWRKERRORBULK,FUNCTION,199, v_stmt,
WSWRKERRORBULK,FUNCTION,200, v_db_code,
WSWRKERRORBULK,FUNCTION,201, v_db_msg,
WSWRKERRORBULK,FUNCTION,202, v_task_key,
WSWRKERRORBULK,FUNCTION,203, v_job_key,
WSWRKERRORBULK,FUNCTION,204, v_msg_type,
WSWRKERRORBULK,FUNCTION,205, ws_error_log_seq.nextval
WSWRKERRORBULK,FUNCTION,206, );
WSWRKERRORBULK,FUNCTION,207, End If;
WSWRKERRORBULK,FUNCTION,208, END LOOP;
WSWRKERRORBULK,FUNCTION,209,
WSWRKERRORBULK,FUNCTION,210,
WSWRKERRORBULK,FUNCTION,211,
WSWRKERRORBULK,FUNCTION,212, -- =========================================================================
WSWRKERRORBULK,FUNCTION,213, -- If the task key is not zero attempt to update the counters in the task_run table.
WSWRKERRORBULK,FUNCTION,214, -- =========================================================================
WSWRKERRORBULK,FUNCTION,215, If ( v_task_key <> 0 ) Then
WSWRKERRORBULK,FUNCTION,216, BEGIN
WSWRKERRORBULK,FUNCTION,217, Update ws_wrk_task_run
WSWRKERRORBULK,FUNCTION,218, Set
WSWRKERRORBULK,FUNCTION,219, wtr_detail_count = wtr_detail_count + v_row_count
WSWRKERRORBULK,FUNCTION,220, Where wtr_task_key = v_task_key
WSWRKERRORBULK,FUNCTION,221, And wtr_sequence = v_sequence;
WSWRKERRORBULK,FUNCTION,222, EXCEPTION WHEN OTHERS THEN
WSWRKERRORBULK,FUNCTION,223, NULL;
WSWRKERRORBULK,FUNCTION,224, END;
WSWRKERRORBULK,FUNCTION,225,
WSWRKERRORBULK,FUNCTION,226, End If;
WSWRKERRORBULK,FUNCTION,227,
WSWRKERRORBULK,FUNCTION,228, -- =========================================================================
WSWRKERRORBULK,FUNCTION,229, -- If the job key is not zero attempt to update the counters in the job_run table.
WSWRKERRORBULK,FUNCTION,230, -- =========================================================================
WSWRKERRORBULK,FUNCTION,231, If ( v_job_key <> 0 ) Then
WSWRKERRORBULK,FUNCTION,232, BEGIN
WSWRKERRORBULK,FUNCTION,233, Update ws_wrk_job_run
WSWRKERRORBULK,FUNCTION,234, Set
WSWRKERRORBULK,FUNCTION,235, wjr_detail_count = wjr_detail_count + v_row_count
WSWRKERRORBULK,FUNCTION,236, Where wjr_job_key = v_job_key
WSWRKERRORBULK,FUNCTION,237, And wjr_sequence = v_sequence;
WSWRKERRORBULK,FUNCTION,238, EXCEPTION WHEN OTHERS THEN
WSWRKERRORBULK,FUNCTION,239, NULL;
WSWRKERRORBULK,FUNCTION,240, END;
WSWRKERRORBULK,FUNCTION,241,
WSWRKERRORBULK,FUNCTION,242, End If;
WSWRKERRORBULK,FUNCTION,243,
WSWRKERRORBULK,FUNCTION,244, -- =========================================================================
WSWRKERRORBULK,FUNCTION,245, --Commit the message. This may be undesirable!!
WSWRKERRORBULK,FUNCTION,246, -- =========================================================================
WSWRKERRORBULK,FUNCTION,247, Commit;
WSWRKERRORBULK,FUNCTION,248, Return 1; -- insert OK
WSWRKERRORBULK,FUNCTION,249,
WSWRKERRORBULK,FUNCTION,250,EXCEPTION
WSWRKERRORBULK,FUNCTION,251, WHEN OTHERS Then
WSWRKERRORBULK,FUNCTION,252, Return -3; -- insert failed
WSWRKERRORBULK,FUNCTION,253,END WsWrkErrorBulk;
WSWRKERRORBULK,FUNCTION,254,
WSWRKTASK,FUNCTION,1,FUNCTION WsWrkTask (
WSWRKTASK,FUNCTION,2, v_job_key number,
WSWRKTASK,FUNCTION,3, v_task_key number,
WSWRKTASK,FUNCTION,4, v_sequence number,
WSWRKTASK,FUNCTION,5, v_inserted number,
WSWRKTASK,FUNCTION,6, v_updated number,
WSWRKTASK,FUNCTION,7, v_replaced number,
WSWRKTASK,FUNCTION,8, v_deleted number,
WSWRKTASK,FUNCTION,9, v_discarded number,
WSWRKTASK,FUNCTION,10, v_rejected number,
WSWRKTASK,FUNCTION,11, v_errored number
WSWRKTASK,FUNCTION,12, )
WSWRKTASK,FUNCTION,13, RETURN integer
WSWRKTASK,FUNCTION,14, AUTHID CURRENT_USER
WSWRKTASK,FUNCTION,15, IS
WSWRKTASK,FUNCTION,16, PRAGMA AUTONOMOUS_TRANSACTION;
WSWRKTASK,FUNCTION,17,
WSWRKTASK,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WSWRKTASK,FUNCTION,19,
WSWRKTASK,FUNCTION,20, -- ============================================================================
WSWRKTASK,FUNCTION,21, -- DBMS Name : Oracle
WSWRKTASK,FUNCTION,22, -- Script Name : WsWrkTask.sql
WSWRKTASK,FUNCTION,23, -- Description : Updates counters in task_run
WSWRKTASK,FUNCTION,24, -- Author : Wayne Richmond
WSWRKTASK,FUNCTION,25, -- Date : 28 November 2003
WSWRKTASK,FUNCTION,26, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WSWRKTASK,FUNCTION,27, -- =============================================================================
WSWRKTASK,FUNCTION,28,
WSWRKTASK,FUNCTION,29, v_return number := 1;
WSWRKTASK,FUNCTION,30,
WSWRKTASK,FUNCTION,31,BEGIN
WSWRKTASK,FUNCTION,32,
WSWRKTASK,FUNCTION,33, -- =========================================================================
WSWRKTASK,FUNCTION,34, -- check that all required fields are present.
WSWRKTASK,FUNCTION,35, -- =========================================================================
WSWRKTASK,FUNCTION,36, IF NVL(v_job_key,0) = 0
WSWRKTASK,FUNCTION,37, OR NVL(v_task_key,0) = 0
WSWRKTASK,FUNCTION,38, OR NVL(v_sequence,0) = 0
WSWRKTASK,FUNCTION,39, THEN
WSWRKTASK,FUNCTION,40, RETURN -1;
WSWRKTASK,FUNCTION,41, END IF;
WSWRKTASK,FUNCTION,42,
WSWRKTASK,FUNCTION,43, -- =========================================================================
WSWRKTASK,FUNCTION,44, -- If the task key is not zero attempt to update the counters in the task_run table.
WSWRKTASK,FUNCTION,45, -- =========================================================================
WSWRKTASK,FUNCTION,46, If ( v_task_key <> 0 ) Then
WSWRKTASK,FUNCTION,47, BEGIN
WSWRKTASK,FUNCTION,48, Update ws_wrk_task_run
WSWRKTASK,FUNCTION,49, Set
WSWRKTASK,FUNCTION,50, wtr_rec_inserted = v_inserted,
WSWRKTASK,FUNCTION,51, wtr_rec_updated = v_updated,
WSWRKTASK,FUNCTION,52, wtr_rec_replaced = v_replaced,
WSWRKTASK,FUNCTION,53, wtr_rec_deleted = v_deleted,
WSWRKTASK,FUNCTION,54, wtr_rec_discarded = v_discarded,
WSWRKTASK,FUNCTION,55, wtr_rec_rejected = v_rejected,
WSWRKTASK,FUNCTION,56, wtr_rec_errored = v_errored
WSWRKTASK,FUNCTION,57, Where wtr_task_key = v_task_key
WSWRKTASK,FUNCTION,58, And wtr_sequence = v_sequence;
WSWRKTASK,FUNCTION,59, EXCEPTION WHEN OTHERS THEN
WSWRKTASK,FUNCTION,60, v_return := -3;
WSWRKTASK,FUNCTION,61, END;
WSWRKTASK,FUNCTION,62,
WSWRKTASK,FUNCTION,63, End If;
WSWRKTASK,FUNCTION,64,
WSWRKTASK,FUNCTION,65, -- =========================================================================
WSWRKTASK,FUNCTION,66, --Commit the message. This may be undesirable!!
WSWRKTASK,FUNCTION,67, -- =========================================================================
WSWRKTASK,FUNCTION,68, Commit;
WSWRKTASK,FUNCTION,69, Return v_return; -- insert OK, or a warning on the update
WSWRKTASK,FUNCTION,70,
WSWRKTASK,FUNCTION,71,EXCEPTION
WSWRKTASK,FUNCTION,72, WHEN OTHERS Then
WSWRKTASK,FUNCTION,73, Return -3; -- insert failed
WSWRKTASK,FUNCTION,74,END WsWrkTask;
WSWRKTASK,FUNCTION,75,
WS_ACT_ANALYZE,FUNCTION,1,function ws_act_analyze
WS_ACT_ANALYZE,FUNCTION,2, (
WS_ACT_ANALYZE,FUNCTION,3, p_sequence IN number,
WS_ACT_ANALYZE,FUNCTION,4, p_obj_type IN number,
WS_ACT_ANALYZE,FUNCTION,5, p_action IN number,
WS_ACT_ANALYZE,FUNCTION,6, p_percent IN number,
WS_ACT_ANALYZE,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_ANALYZE,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_ANALYZE,FUNCTION,9, p_job_id IN number,
WS_ACT_ANALYZE,FUNCTION,10, p_task_id IN number,
WS_ACT_ANALYZE,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_ANALYZE,FUNCTION,12, p_status_code OUT number
WS_ACT_ANALYZE,FUNCTION,13, )
WS_ACT_ANALYZE,FUNCTION,14, Return integer
WS_ACT_ANALYZE,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_ANALYZE,FUNCTION,16, IS
WS_ACT_ANALYZE,FUNCTION,17,
WS_ACT_ANALYZE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_ANALYZE,FUNCTION,19,
WS_ACT_ANALYZE,FUNCTION,20, -- =============================================================================
WS_ACT_ANALYZE,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_ANALYZE,FUNCTION,22, -- Script Name : ws_act_analyze
WS_ACT_ANALYZE,FUNCTION,23, -- Description : Analyze a table
WS_ACT_ANALYZE,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_ANALYZE,FUNCTION,25, -- =============================================================================
WS_ACT_ANALYZE,FUNCTION,26,
WS_ACT_ANALYZE,FUNCTION,27, --=====================================================
WS_ACT_ANALYZE,FUNCTION,28, -- Constants
WS_ACT_ANALYZE,FUNCTION,29, --=====================================================
WS_ACT_ANALYZE,FUNCTION,30, v_ws_obj_procedure constant number := 1;
WS_ACT_ANALYZE,FUNCTION,31, v_ws_obj_directive constant number := 2;
WS_ACT_ANALYZE,FUNCTION,32, v_ws_obj_script constant number := 3;
WS_ACT_ANALYZE,FUNCTION,33, v_ws_obj_template constant number := 4;
WS_ACT_ANALYZE,FUNCTION,34, v_ws_obj_fact constant number := 5;
WS_ACT_ANALYZE,FUNCTION,35, v_ws_obj_dim constant number := 6;
WS_ACT_ANALYZE,FUNCTION,36, v_ws_obj_stage constant number := 7;
WS_ACT_ANALYZE,FUNCTION,37, v_ws_obj_load constant number := 8;
WS_ACT_ANALYZE,FUNCTION,38, v_ws_obj_agg constant number := 9;
WS_ACT_ANALYZE,FUNCTION,39, v_ws_obj_index constant number := 10;
WS_ACT_ANALYZE,FUNCTION,40, v_ws_obj_connect constant number := 11;
WS_ACT_ANALYZE,FUNCTION,41, v_ws_obj_dim_view constant number := 12;
WS_ACT_ANALYZE,FUNCTION,42,
WS_ACT_ANALYZE,FUNCTION,43, v_ws_act_drop constant number := 0;
WS_ACT_ANALYZE,FUNCTION,44, v_ws_act_create constant number := 1;
WS_ACT_ANALYZE,FUNCTION,45, v_ws_act_compile constant number := 2;
WS_ACT_ANALYZE,FUNCTION,46, v_ws_act_drop_all constant number := 3;
WS_ACT_ANALYZE,FUNCTION,47, v_ws_act_pre_drop constant number := 4;
WS_ACT_ANALYZE,FUNCTION,48, v_ws_act_load constant number := 5;
WS_ACT_ANALYZE,FUNCTION,49, v_ws_act_update constant number := 6;
WS_ACT_ANALYZE,FUNCTION,50, v_ws_act_execute constant number := 7;
WS_ACT_ANALYZE,FUNCTION,51, v_ws_act_process constant number := 8;
WS_ACT_ANALYZE,FUNCTION,52, v_ws_act_build constant number := 9;
WS_ACT_ANALYZE,FUNCTION,53, v_ws_act_build_all constant number := 10;
WS_ACT_ANALYZE,FUNCTION,54, v_ws_act_analyze constant number := 11;
WS_ACT_ANALYZE,FUNCTION,55, v_ws_act_quick_analyze constant number := 12;
WS_ACT_ANALYZE,FUNCTION,56, v_ws_act_statistics constant number := 13;
WS_ACT_ANALYZE,FUNCTION,57, v_ws_act_quick_statistics constant number := 14;
WS_ACT_ANALYZE,FUNCTION,58,
WS_ACT_ANALYZE,FUNCTION,59, --=====================================================
WS_ACT_ANALYZE,FUNCTION,60, -- Variables
WS_ACT_ANALYZE,FUNCTION,61, --=====================================================
WS_ACT_ANALYZE,FUNCTION,62, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_ANALYZE,FUNCTION,63, v_step integer := 0; -- return code
WS_ACT_ANALYZE,FUNCTION,64, v_result integer := 0; -- return code
WS_ACT_ANALYZE,FUNCTION,65, v_stmt varchar2(4200);
WS_ACT_ANALYZE,FUNCTION,66,-- v_stmt2 varchar2(256);
WS_ACT_ANALYZE,FUNCTION,67, v_cursor number;
WS_ACT_ANALYZE,FUNCTION,68, v_schema_flag integer := 0;
WS_ACT_ANALYZE,FUNCTION,69, v_dss_schema varchar2(64);
WS_ACT_ANALYZE,FUNCTION,70, v_satellite_ind varchar2(1);
WS_ACT_ANALYZE,FUNCTION,71,
WS_ACT_ANALYZE,FUNCTION,72, v_table_schema varchar2(64);
WS_ACT_ANALYZE,FUNCTION,73, v_table_name varchar2(64);
WS_ACT_ANALYZE,FUNCTION,74, v_table_with_schema varchar2(150);
WS_ACT_ANALYZE,FUNCTION,75, v_index_name varchar2(64);
WS_ACT_ANALYZE,FUNCTION,76, v_index_with_schema varchar2(150);
WS_ACT_ANALYZE,FUNCTION,77,
WS_ACT_ANALYZE,FUNCTION,78,
WS_ACT_ANALYZE,FUNCTION,79,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_ANALYZE,FUNCTION,80,BEGIN
WS_ACT_ANALYZE,FUNCTION,81,
WS_ACT_ANALYZE,FUNCTION,82,
WS_ACT_ANALYZE,FUNCTION,83, v_step := 5;
WS_ACT_ANALYZE,FUNCTION,84, v_table_schema := '';
WS_ACT_ANALYZE,FUNCTION,85,
WS_ACT_ANALYZE,FUNCTION,86, -- needs to look up the schema from ws_dbc_target
WS_ACT_ANALYZE,FUNCTION,87, BEGIN
WS_ACT_ANALYZE,FUNCTION,88, IF p_obj_type = v_ws_obj_index THEN
WS_ACT_ANALYZE,FUNCTION,89, v_step := 110;
WS_ACT_ANALYZE,FUNCTION,90, SELECT NVL(dt_schema, '')
WS_ACT_ANALYZE,FUNCTION,91, ,oo_name
WS_ACT_ANALYZE,FUNCTION,92, ,ih_index_name
WS_ACT_ANALYZE,FUNCTION,93, INTO v_table_schema
WS_ACT_ANALYZE,FUNCTION,94, ,v_table_name
WS_ACT_ANALYZE,FUNCTION,95, ,v_index_name
WS_ACT_ANALYZE,FUNCTION,96, FROM ws_index_header
WS_ACT_ANALYZE,FUNCTION,97, LEFT JOIN ws_obj_object
WS_ACT_ANALYZE,FUNCTION,98, ON ws_obj_object.oo_obj_key = ih_obj_key
WS_ACT_ANALYZE,FUNCTION,99, LEFT JOIN ws_dbc_target
WS_ACT_ANALYZE,FUNCTION,100, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_ANALYZE,FUNCTION,101, WHERE UPPER(ws_index_header.ih_index_name) = UPPER(p_task_name)
WS_ACT_ANALYZE,FUNCTION,102, ;
WS_ACT_ANALYZE,FUNCTION,103, else
WS_ACT_ANALYZE,FUNCTION,104, v_step := 120;
WS_ACT_ANALYZE,FUNCTION,105, v_index_name := '';
WS_ACT_ANALYZE,FUNCTION,106, SELECT NVL(dt_schema, '')
WS_ACT_ANALYZE,FUNCTION,107, ,oo_name
WS_ACT_ANALYZE,FUNCTION,108, INTO v_table_schema
WS_ACT_ANALYZE,FUNCTION,109, ,v_table_name
WS_ACT_ANALYZE,FUNCTION,110, FROM ws_obj_object
WS_ACT_ANALYZE,FUNCTION,111, LEFT JOIN ws_dbc_target
WS_ACT_ANALYZE,FUNCTION,112, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_ANALYZE,FUNCTION,113, WHERE UPPER(ws_obj_object.oo_name) = UPPER(p_task_name)
WS_ACT_ANALYZE,FUNCTION,114, ;
WS_ACT_ANALYZE,FUNCTION,115, END IF;
WS_ACT_ANALYZE,FUNCTION,116,
WS_ACT_ANALYZE,FUNCTION,117, v_table_schema := TRIM(v_table_schema);
WS_ACT_ANALYZE,FUNCTION,118,
WS_ACT_ANALYZE,FUNCTION,119, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_ANALYZE,FUNCTION,120, v_MsgText := 'Object could not be found name:' || p_task_name;
WS_ACT_ANALYZE,FUNCTION,121, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_ANALYZE,FUNCTION,122, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_ANALYZE,FUNCTION,123, p_return_msg := 'Object could not be found';
WS_ACT_ANALYZE,FUNCTION,124, p_status_code := -2;
WS_ACT_ANALYZE,FUNCTION,125, RETURN -2;
WS_ACT_ANALYZE,FUNCTION,126, END;
WS_ACT_ANALYZE,FUNCTION,127,
WS_ACT_ANALYZE,FUNCTION,128, v_step := 130;
WS_ACT_ANALYZE,FUNCTION,129, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_ANALYZE,FUNCTION,130, -- meta_satellite_ind = A
WS_ACT_ANALYZE,FUNCTION,131, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_ANALYZE,FUNCTION,132,
WS_ACT_ANALYZE,FUNCTION,133, SELECT meta_satellite_ind,
WS_ACT_ANALYZE,FUNCTION,134, TRIM(meta_dss_schema)
WS_ACT_ANALYZE,FUNCTION,135, INTO v_satellite_ind,
WS_ACT_ANALYZE,FUNCTION,136, v_dss_schema
WS_ACT_ANALYZE,FUNCTION,137, FROM ws_meta
WS_ACT_ANALYZE,FUNCTION,138, WHERE rownum = 1;
WS_ACT_ANALYZE,FUNCTION,139,
WS_ACT_ANALYZE,FUNCTION,140, IF v_satellite_ind = 'A' THEN
WS_ACT_ANALYZE,FUNCTION,141, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_ANALYZE,FUNCTION,142, v_schema_flag := 1;
WS_ACT_ANALYZE,FUNCTION,143, v_table_schema := v_dss_schema;
WS_ACT_ANALYZE,FUNCTION,144, END IF;
WS_ACT_ANALYZE,FUNCTION,145, END IF;
WS_ACT_ANALYZE,FUNCTION,146,
WS_ACT_ANALYZE,FUNCTION,147, v_step := 140;
WS_ACT_ANALYZE,FUNCTION,148, -- If still not set then defaults to the current user
WS_ACT_ANALYZE,FUNCTION,149, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_ANALYZE,FUNCTION,150, SELECT user
WS_ACT_ANALYZE,FUNCTION,151, INTO v_table_schema
WS_ACT_ANALYZE,FUNCTION,152, FROM dual;
WS_ACT_ANALYZE,FUNCTION,153, END IF;
WS_ACT_ANALYZE,FUNCTION,154,
WS_ACT_ANALYZE,FUNCTION,155, End If;
WS_ACT_ANALYZE,FUNCTION,156,
WS_ACT_ANALYZE,FUNCTION,157, v_step := 150;
WS_ACT_ANALYZE,FUNCTION,158,
WS_ACT_ANALYZE,FUNCTION,159, v_table_schema := TRIM(v_table_schema);
WS_ACT_ANALYZE,FUNCTION,160,
WS_ACT_ANALYZE,FUNCTION,161, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_ANALYZE,FUNCTION,162, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_ANALYZE,FUNCTION,163, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_ANALYZE,FUNCTION,164, END IF;
WS_ACT_ANALYZE,FUNCTION,165,
WS_ACT_ANALYZE,FUNCTION,166, v_index_with_schema := v_table_with_schema || v_index_name;
WS_ACT_ANALYZE,FUNCTION,167, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_ANALYZE,FUNCTION,168,
WS_ACT_ANALYZE,FUNCTION,169, v_step := 10;
WS_ACT_ANALYZE,FUNCTION,170, --=====================================================
WS_ACT_ANALYZE,FUNCTION,171, -- Handle either an Index or a Table
WS_ACT_ANALYZE,FUNCTION,172, --=====================================================
WS_ACT_ANALYZE,FUNCTION,173, If p_obj_type = v_ws_obj_index Then
WS_ACT_ANALYZE,FUNCTION,174,
WS_ACT_ANALYZE,FUNCTION,175, If p_percent = 100 Then
WS_ACT_ANALYZE,FUNCTION,176, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,177, BEGIN
WS_ACT_ANALYZE,FUNCTION,178, SELECT ta_text_9 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_ANALYZE,FUNCTION,179, EXCEPTION WHEN OTHERS THEN
WS_ACT_ANALYZE,FUNCTION,180, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,181, END;
WS_ACT_ANALYZE,FUNCTION,182, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_ANALYZE,FUNCTION,183, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_ANALYZE,FUNCTION,184, v_stmt := REPLACE(v_stmt,'$INDEX$',p_task_name);
WS_ACT_ANALYZE,FUNCTION,185, ELSE
WS_ACT_ANALYZE,FUNCTION,186, v_stmt := 'analyze index '||v_index_with_schema;
WS_ACT_ANALYZE,FUNCTION,187, v_stmt := v_stmt||' compute statistics';
WS_ACT_ANALYZE,FUNCTION,188, END IF;
WS_ACT_ANALYZE,FUNCTION,189, Else
WS_ACT_ANALYZE,FUNCTION,190, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,191, BEGIN
WS_ACT_ANALYZE,FUNCTION,192, SELECT ta_text_10 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_ANALYZE,FUNCTION,193, EXCEPTION WHEN OTHERS THEN
WS_ACT_ANALYZE,FUNCTION,194, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,195, END;
WS_ACT_ANALYZE,FUNCTION,196, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_ANALYZE,FUNCTION,197, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_ANALYZE,FUNCTION,198, v_stmt := REPLACE(v_stmt,'$INDEX$',p_task_name);
WS_ACT_ANALYZE,FUNCTION,199, ELSE
WS_ACT_ANALYZE,FUNCTION,200, v_stmt := 'analyze index '||v_index_with_schema;
WS_ACT_ANALYZE,FUNCTION,201, v_stmt := v_stmt||' estimate statistics sample '||
WS_ACT_ANALYZE,FUNCTION,202, p_percent || ' percent';
WS_ACT_ANALYZE,FUNCTION,203, END IF;
WS_ACT_ANALYZE,FUNCTION,204, End If;
WS_ACT_ANALYZE,FUNCTION,205, p_return_msg := 'Index '||p_task_name||' analyzed';
WS_ACT_ANALYZE,FUNCTION,206,
WS_ACT_ANALYZE,FUNCTION,207, -- Execute the analyze
WS_ACT_ANALYZE,FUNCTION,208, v_step := 90;
WS_ACT_ANALYZE,FUNCTION,209, Execute Immediate v_stmt;
WS_ACT_ANALYZE,FUNCTION,210, v_step := 92;
WS_ACT_ANALYZE,FUNCTION,211, Else
WS_ACT_ANALYZE,FUNCTION,212, --=====================================================
WS_ACT_ANALYZE,FUNCTION,213, -- Table
WS_ACT_ANALYZE,FUNCTION,214, --=====================================================
WS_ACT_ANALYZE,FUNCTION,215,
WS_ACT_ANALYZE,FUNCTION,216, If p_percent = 100 Then
WS_ACT_ANALYZE,FUNCTION,217, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,218, BEGIN
WS_ACT_ANALYZE,FUNCTION,219, SELECT ta_text_5 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_ANALYZE,FUNCTION,220, EXCEPTION WHEN OTHERS THEN
WS_ACT_ANALYZE,FUNCTION,221, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,222, END;
WS_ACT_ANALYZE,FUNCTION,223, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_ANALYZE,FUNCTION,224, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_ANALYZE,FUNCTION,225, v_stmt := REPLACE(v_stmt,'$TABLE$',p_task_name);
WS_ACT_ANALYZE,FUNCTION,226, ELSE
WS_ACT_ANALYZE,FUNCTION,227, v_stmt := 'analyze table '||v_table_with_schema ;
WS_ACT_ANALYZE,FUNCTION,228, v_stmt := v_stmt||' compute statistics';
WS_ACT_ANALYZE,FUNCTION,229, END IF;
WS_ACT_ANALYZE,FUNCTION,230, Else
WS_ACT_ANALYZE,FUNCTION,231, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,232, BEGIN
WS_ACT_ANALYZE,FUNCTION,233, SELECT ta_text_6 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_ANALYZE,FUNCTION,234, EXCEPTION WHEN OTHERS THEN
WS_ACT_ANALYZE,FUNCTION,235, v_stmt := NULL;
WS_ACT_ANALYZE,FUNCTION,236, END;
WS_ACT_ANALYZE,FUNCTION,237, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_ANALYZE,FUNCTION,238, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_ANALYZE,FUNCTION,239, v_stmt := REPLACE(v_stmt,'$TABLE$',p_task_name);
WS_ACT_ANALYZE,FUNCTION,240, ELSE
WS_ACT_ANALYZE,FUNCTION,241, v_stmt := 'analyze table '||v_table_with_schema ;
WS_ACT_ANALYZE,FUNCTION,242, v_stmt := v_stmt||' estimate statistics sample '||
WS_ACT_ANALYZE,FUNCTION,243, p_percent || ' percent';
WS_ACT_ANALYZE,FUNCTION,244, END IF;
WS_ACT_ANALYZE,FUNCTION,245, End If;
WS_ACT_ANALYZE,FUNCTION,246, p_return_msg := 'Table '||p_task_name||' analyzed ';
WS_ACT_ANALYZE,FUNCTION,247,
WS_ACT_ANALYZE,FUNCTION,248, -- Execute the analyze
WS_ACT_ANALYZE,FUNCTION,249, v_step := 94;
WS_ACT_ANALYZE,FUNCTION,250, Execute Immediate v_stmt;
WS_ACT_ANALYZE,FUNCTION,251, v_step := 96;
WS_ACT_ANALYZE,FUNCTION,252,
WS_ACT_ANALYZE,FUNCTION,253,
WS_ACT_ANALYZE,FUNCTION,254,
WS_ACT_ANALYZE,FUNCTION,255, End If;
WS_ACT_ANALYZE,FUNCTION,256,
WS_ACT_ANALYZE,FUNCTION,257, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_ANALYZE,FUNCTION,258, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_ANALYZE,FUNCTION,259, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_ANALYZE,FUNCTION,260,
WS_ACT_ANALYZE,FUNCTION,261, p_status_code := 1;
WS_ACT_ANALYZE,FUNCTION,262,
WS_ACT_ANALYZE,FUNCTION,263, COMMIT;
WS_ACT_ANALYZE,FUNCTION,264, RETURN v_result;
WS_ACT_ANALYZE,FUNCTION,265,
WS_ACT_ANALYZE,FUNCTION,266,EXCEPTION
WS_ACT_ANALYZE,FUNCTION,267, WHEN OTHERS THEN
WS_ACT_ANALYZE,FUNCTION,268, v_MsgText := 'Unhandled Exception in ws_act_analyze. '||
WS_ACT_ANALYZE,FUNCTION,269, ' Step ' ||v_step;
WS_ACT_ANALYZE,FUNCTION,270, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_ANALYZE,FUNCTION,271, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_ANALYZE,FUNCTION,272, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_ANALYZE,FUNCTION,273, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_ANALYZE,FUNCTION,274, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_ANALYZE,FUNCTION,275, p_return_msg := 'Unhandled Exception in ws_act_analyze step ' ||v_step;
WS_ACT_ANALYZE,FUNCTION,276, p_status_code := -3;
WS_ACT_ANALYZE,FUNCTION,277, RETURN -3;
WS_ACT_ANALYZE,FUNCTION,278,
WS_ACT_ANALYZE,FUNCTION,279,END ws_act_analyze;
WS_ACT_ANALYZE,FUNCTION,280,
WS_ACT_BUILD,FUNCTION,1,function ws_act_build
WS_ACT_BUILD,FUNCTION,2, (
WS_ACT_BUILD,FUNCTION,3, p_sequence IN number,
WS_ACT_BUILD,FUNCTION,4, p_obj_type IN number,
WS_ACT_BUILD,FUNCTION,5, p_action IN number,
WS_ACT_BUILD,FUNCTION,6, p_obj_key IN number,
WS_ACT_BUILD,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_BUILD,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_BUILD,FUNCTION,9, p_job_id IN number,
WS_ACT_BUILD,FUNCTION,10, p_task_id IN number,
WS_ACT_BUILD,FUNCTION,11, p_parameter IN varchar2,
WS_ACT_BUILD,FUNCTION,12, p_return_msg OUT varchar2,
WS_ACT_BUILD,FUNCTION,13, p_status_code OUT number
WS_ACT_BUILD,FUNCTION,14, )
WS_ACT_BUILD,FUNCTION,15, Return integer
WS_ACT_BUILD,FUNCTION,16, AUTHID CURRENT_USER
WS_ACT_BUILD,FUNCTION,17, IS
WS_ACT_BUILD,FUNCTION,18,
WS_ACT_BUILD,FUNCTION,19, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_BUILD,FUNCTION,20,
WS_ACT_BUILD,FUNCTION,21, -- =============================================================================
WS_ACT_BUILD,FUNCTION,22, -- DBMS Name : Oracle
WS_ACT_BUILD,FUNCTION,23, -- Script Name : ws_act_build
WS_ACT_BUILD,FUNCTION,24, -- Description : Build any indexes due for rebuild
WS_ACT_BUILD,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_BUILD,FUNCTION,26, -- =============================================================================
WS_ACT_BUILD,FUNCTION,27,
WS_ACT_BUILD,FUNCTION,28, --=====================================================
WS_ACT_BUILD,FUNCTION,29, -- Constants
WS_ACT_BUILD,FUNCTION,30, --=====================================================
WS_ACT_BUILD,FUNCTION,31, v_ws_pro_version constant varchar(15) := '(8.4.1.0)';
WS_ACT_BUILD,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_BUILD,FUNCTION,33, v_ws_obj_directive constant number := 2;
WS_ACT_BUILD,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_BUILD,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_BUILD,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_BUILD,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_BUILD,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_BUILD,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_BUILD,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_BUILD,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_BUILD,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_BUILD,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_BUILD,FUNCTION,44,
WS_ACT_BUILD,FUNCTION,45, v_ws_obj_source_mapping constant number := 69;
WS_ACT_BUILD,FUNCTION,46,
WS_ACT_BUILD,FUNCTION,47, v_ws_act_drop constant number := 0;
WS_ACT_BUILD,FUNCTION,48, v_ws_act_create constant number := 1;
WS_ACT_BUILD,FUNCTION,49, v_ws_act_compile constant number := 2;
WS_ACT_BUILD,FUNCTION,50, v_ws_act_drop_all constant number := 3;
WS_ACT_BUILD,FUNCTION,51, v_ws_act_pre_drop constant number := 4;
WS_ACT_BUILD,FUNCTION,52, v_ws_act_load constant number := 5;
WS_ACT_BUILD,FUNCTION,53, v_ws_act_update constant number := 6;
WS_ACT_BUILD,FUNCTION,54, v_ws_act_execute constant number := 7;
WS_ACT_BUILD,FUNCTION,55, v_ws_act_process constant number := 8;
WS_ACT_BUILD,FUNCTION,56, v_ws_act_build constant number := 9;
WS_ACT_BUILD,FUNCTION,57, v_ws_act_build_all constant number := 10;
WS_ACT_BUILD,FUNCTION,58, v_ws_act_analyze constant number := 11;
WS_ACT_BUILD,FUNCTION,59, v_ws_act_quick_analyze constant number := 12;
WS_ACT_BUILD,FUNCTION,60, v_ws_act_statistics constant number := 13;
WS_ACT_BUILD,FUNCTION,61, v_ws_act_quick_statistics constant number := 14;
WS_ACT_BUILD,FUNCTION,62,
WS_ACT_BUILD,FUNCTION,63, --=====================================================
WS_ACT_BUILD,FUNCTION,64, -- Variables
WS_ACT_BUILD,FUNCTION,65, --=====================================================
WS_ACT_BUILD,FUNCTION,66, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_BUILD,FUNCTION,67, v_step integer := 0; -- return code
WS_ACT_BUILD,FUNCTION,68, v_result integer := 0; -- return code
WS_ACT_BUILD,FUNCTION,69, v_stmt varchar2(32000);
WS_ACT_BUILD,FUNCTION,70, v_count integer := 0;
WS_ACT_BUILD,FUNCTION,71, v_columns varchar2(32000);
WS_ACT_BUILD,FUNCTION,72, v_col_number integer := 0;
WS_ACT_BUILD,FUNCTION,73, v_index_key integer := 0;
WS_ACT_BUILD,FUNCTION,74, v_day integer := 0;
WS_ACT_BUILD,FUNCTION,75, v_day_name varchar2(3);
WS_ACT_BUILD,FUNCTION,76, v_month_end integer := 0;
WS_ACT_BUILD,FUNCTION,77, v_month integer := 0;
WS_ACT_BUILD,FUNCTION,78, v_tommorrow_month integer := 0;
WS_ACT_BUILD,FUNCTION,79, v_part_count integer := 0;
WS_ACT_BUILD,FUNCTION,80, v_row integer := 0;
WS_ACT_BUILD,FUNCTION,81, v_pctfree integer := 0;
WS_ACT_BUILD,FUNCTION,82, v_pctinc integer := 0;
WS_ACT_BUILD,FUNCTION,83, v_no_tablespace integer := 0;
WS_ACT_BUILD,FUNCTION,84, v_primary_key integer := 0;
WS_ACT_BUILD,FUNCTION,85, v_epos integer := 0;
WS_ACT_BUILD,FUNCTION,86, v_spos integer := 0;
WS_ACT_BUILD,FUNCTION,87, v_fix varchar2(32000);
WS_ACT_BUILD,FUNCTION,88, v_function varchar2(32000);
WS_ACT_BUILD,FUNCTION,89, v_user_tablespace varchar2(32000);
WS_ACT_BUILD,FUNCTION,90, v_schema_flag integer := 0;
WS_ACT_BUILD,FUNCTION,91, v_satellite_ind varchar2(1);
WS_ACT_BUILD,FUNCTION,92, v_dss_schema varchar2(64);
WS_ACT_BUILD,FUNCTION,93, v_stats_include varchar2(1);
WS_ACT_BUILD,FUNCTION,94, v_index_done integer; -- used to flag if action successful
WS_ACT_BUILD,FUNCTION,95, v_msg_result integer := 0; -- return code
WS_ACT_BUILD,FUNCTION,96, v_table_schema varchar2(64);
WS_ACT_BUILD,FUNCTION,97, v_table_name varchar2(64);
WS_ACT_BUILD,FUNCTION,98, v_table_with_schema varchar2(150);
WS_ACT_BUILD,FUNCTION,99, v_index_name varchar2(64);
WS_ACT_BUILD,FUNCTION,100, v_index_with_schema varchar2(150);
WS_ACT_BUILD,FUNCTION,101,
WS_ACT_BUILD,FUNCTION,102, --=====================================================
WS_ACT_BUILD,FUNCTION,103, -- Cursor for all indexes
WS_ACT_BUILD,FUNCTION,104, --=====================================================
WS_ACT_BUILD,FUNCTION,105, Cursor c_Index is
WS_ACT_BUILD,FUNCTION,106, Select * from ws_index_header
WS_ACT_BUILD,FUNCTION,107, Where ih_obj_key = p_obj_key
WS_ACT_BUILD,FUNCTION,108, And ih_active = 'Y';
WS_ACT_BUILD,FUNCTION,109,
WS_ACT_BUILD,FUNCTION,110, --=====================================================
WS_ACT_BUILD,FUNCTION,111, -- Cursor for specified index
WS_ACT_BUILD,FUNCTION,112, --=====================================================
WS_ACT_BUILD,FUNCTION,113, Cursor c_IndexOnly is
WS_ACT_BUILD,FUNCTION,114, Select * from ws_index_header
WS_ACT_BUILD,FUNCTION,115, Where ih_index_key = p_obj_key;
WS_ACT_BUILD,FUNCTION,116,
WS_ACT_BUILD,FUNCTION,117, --=====================================================
WS_ACT_BUILD,FUNCTION,118, -- Cursor for index columns
WS_ACT_BUILD,FUNCTION,119, --=====================================================
WS_ACT_BUILD,FUNCTION,120, Cursor c_IndCol is
WS_ACT_BUILD,FUNCTION,121, Select ic_column, ic_foreign_table, ic_foreign_column
WS_ACT_BUILD,FUNCTION,122, from ws_index_col
WS_ACT_BUILD,FUNCTION,123, Where ic_index_key = v_index_key
WS_ACT_BUILD,FUNCTION,124, Order by ic_column_no;
WS_ACT_BUILD,FUNCTION,125,
WS_ACT_BUILD,FUNCTION,126, --=====================================================
WS_ACT_BUILD,FUNCTION,127, -- Cursor for partitions when schema must be used
WS_ACT_BUILD,FUNCTION,128, --=====================================================
WS_ACT_BUILD,FUNCTION,129, Cursor c_AllPartitionEx is
WS_ACT_BUILD,FUNCTION,130, Select partition_name
WS_ACT_BUILD,FUNCTION,131, from all_tab_partitions
WS_ACT_BUILD,FUNCTION,132, Where table_name = upper(v_table_name)
WS_ACT_BUILD,FUNCTION,133, And table_owner = upper(v_table_schema)
WS_ACT_BUILD,FUNCTION,134, Order by partition_position;
WS_ACT_BUILD,FUNCTION,135,
WS_ACT_BUILD,FUNCTION,136,BEGIN
WS_ACT_BUILD,FUNCTION,137,
WS_ACT_BUILD,FUNCTION,138, v_step := 100;
WS_ACT_BUILD,FUNCTION,139, --=====================================================
WS_ACT_BUILD,FUNCTION,140, -- See if we have the flag set for including schema
WS_ACT_BUILD,FUNCTION,141, --=====================================================
WS_ACT_BUILD,FUNCTION,142,
WS_ACT_BUILD,FUNCTION,143, v_satellite_ind := '';
WS_ACT_BUILD,FUNCTION,144,
WS_ACT_BUILD,FUNCTION,145, v_table_schema := '';
WS_ACT_BUILD,FUNCTION,146,
WS_ACT_BUILD,FUNCTION,147, -- needs to look up the schema from ws_dbc_target
WS_ACT_BUILD,FUNCTION,148, BEGIN
WS_ACT_BUILD,FUNCTION,149, IF p_obj_type = v_ws_obj_index THEN
WS_ACT_BUILD,FUNCTION,150, v_step := 110;
WS_ACT_BUILD,FUNCTION,151, SELECT NVL(dt_schema, '')
WS_ACT_BUILD,FUNCTION,152, ,oo_name
WS_ACT_BUILD,FUNCTION,153, ,ih_index_name
WS_ACT_BUILD,FUNCTION,154, INTO v_table_schema
WS_ACT_BUILD,FUNCTION,155, ,v_table_name
WS_ACT_BUILD,FUNCTION,156, ,v_index_name
WS_ACT_BUILD,FUNCTION,157, FROM ws_index_header
WS_ACT_BUILD,FUNCTION,158, LEFT JOIN ws_obj_object
WS_ACT_BUILD,FUNCTION,159, ON ws_obj_object.oo_obj_key = ih_obj_key
WS_ACT_BUILD,FUNCTION,160, LEFT JOIN ws_dbc_target
WS_ACT_BUILD,FUNCTION,161, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_BUILD,FUNCTION,162, WHERE ws_index_header.ih_index_key = p_obj_key
WS_ACT_BUILD,FUNCTION,163, ;
WS_ACT_BUILD,FUNCTION,164, ELSIF p_obj_type = v_ws_obj_source_mapping THEN
WS_ACT_BUILD,FUNCTION,165, v_step := 115;
WS_ACT_BUILD,FUNCTION,166, SELECT NVL(dt_schema, '')
WS_ACT_BUILD,FUNCTION,167, ,oo_name
WS_ACT_BUILD,FUNCTION,168, INTO v_table_schema
WS_ACT_BUILD,FUNCTION,169, ,v_table_name
WS_ACT_BUILD,FUNCTION,170, FROM ws_obj_object
WS_ACT_BUILD,FUNCTION,171, LEFT JOIN ws_dbc_target
WS_ACT_BUILD,FUNCTION,172, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_BUILD,FUNCTION,173, LEFT JOIN ws_source_mapping_tab
WS_ACT_BUILD,FUNCTION,174, ON ws_source_mapping_tab.smt_parent_obj_key = ws_obj_object.oo_obj_key
WS_ACT_BUILD,FUNCTION,175, WHERE ws_source_mapping_tab.smt_source_mapping_key = p_obj_key
WS_ACT_BUILD,FUNCTION,176, ;
WS_ACT_BUILD,FUNCTION,177, ELSE
WS_ACT_BUILD,FUNCTION,178, v_step := 120;
WS_ACT_BUILD,FUNCTION,179, v_index_name := '';
WS_ACT_BUILD,FUNCTION,180, SELECT NVL(dt_schema, '')
WS_ACT_BUILD,FUNCTION,181, ,oo_name
WS_ACT_BUILD,FUNCTION,182, INTO v_table_schema
WS_ACT_BUILD,FUNCTION,183, ,v_table_name
WS_ACT_BUILD,FUNCTION,184, FROM ws_obj_object
WS_ACT_BUILD,FUNCTION,185, LEFT JOIN ws_dbc_target
WS_ACT_BUILD,FUNCTION,186, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_BUILD,FUNCTION,187, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_BUILD,FUNCTION,188, ;
WS_ACT_BUILD,FUNCTION,189, END IF;
WS_ACT_BUILD,FUNCTION,190,
WS_ACT_BUILD,FUNCTION,191, v_table_schema := TRIM(v_table_schema);
WS_ACT_BUILD,FUNCTION,192,
WS_ACT_BUILD,FUNCTION,193, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_BUILD,FUNCTION,194, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_BUILD,FUNCTION,195, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD,FUNCTION,196, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_BUILD,FUNCTION,197, p_return_msg := 'Object could not be found';
WS_ACT_BUILD,FUNCTION,198, p_status_code := -2;
WS_ACT_BUILD,FUNCTION,199, RETURN -2;
WS_ACT_BUILD,FUNCTION,200, END;
WS_ACT_BUILD,FUNCTION,201,
WS_ACT_BUILD,FUNCTION,202, v_step := 130;
WS_ACT_BUILD,FUNCTION,203, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_BUILD,FUNCTION,204, -- meta_satellite_ind = A
WS_ACT_BUILD,FUNCTION,205, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_BUILD,FUNCTION,206,
WS_ACT_BUILD,FUNCTION,207, SELECT meta_satellite_ind,
WS_ACT_BUILD,FUNCTION,208, TRIM(meta_dss_schema)
WS_ACT_BUILD,FUNCTION,209, INTO v_satellite_ind,
WS_ACT_BUILD,FUNCTION,210, v_dss_schema
WS_ACT_BUILD,FUNCTION,211, FROM ws_meta
WS_ACT_BUILD,FUNCTION,212, WHERE rownum = 1;
WS_ACT_BUILD,FUNCTION,213,
WS_ACT_BUILD,FUNCTION,214, IF v_satellite_ind = 'A' THEN
WS_ACT_BUILD,FUNCTION,215, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_BUILD,FUNCTION,216, v_schema_flag := 1;
WS_ACT_BUILD,FUNCTION,217, v_table_schema := v_dss_schema;
WS_ACT_BUILD,FUNCTION,218, END IF;
WS_ACT_BUILD,FUNCTION,219, END IF;
WS_ACT_BUILD,FUNCTION,220,
WS_ACT_BUILD,FUNCTION,221, v_step := 140;
WS_ACT_BUILD,FUNCTION,222, -- If still not set then defaults to the current user
WS_ACT_BUILD,FUNCTION,223, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_BUILD,FUNCTION,224, SELECT user
WS_ACT_BUILD,FUNCTION,225, INTO v_table_schema
WS_ACT_BUILD,FUNCTION,226, FROM dual;
WS_ACT_BUILD,FUNCTION,227, END IF;
WS_ACT_BUILD,FUNCTION,228,
WS_ACT_BUILD,FUNCTION,229, End If;
WS_ACT_BUILD,FUNCTION,230,
WS_ACT_BUILD,FUNCTION,231, v_step := 150;
WS_ACT_BUILD,FUNCTION,232,
WS_ACT_BUILD,FUNCTION,233, v_table_schema := TRIM(v_table_schema);
WS_ACT_BUILD,FUNCTION,234,
WS_ACT_BUILD,FUNCTION,235, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_BUILD,FUNCTION,236, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_BUILD,FUNCTION,237, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_BUILD,FUNCTION,238, END IF;
WS_ACT_BUILD,FUNCTION,239,
WS_ACT_BUILD,FUNCTION,240, v_index_with_schema := v_table_with_schema || v_index_name;
WS_ACT_BUILD,FUNCTION,241, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_BUILD,FUNCTION,242,
WS_ACT_BUILD,FUNCTION,243, v_step := 200;
WS_ACT_BUILD,FUNCTION,244, --=====================================================
WS_ACT_BUILD,FUNCTION,245, -- See if a specific tablespace was specified and if
WS_ACT_BUILD,FUNCTION,246, -- so use that tablespace
WS_ACT_BUILD,FUNCTION,247, --=====================================================
WS_ACT_BUILD,FUNCTION,248, v_user_tablespace := NULL;
WS_ACT_BUILD,FUNCTION,249, If p_parameter is not null Then
WS_ACT_BUILD,FUNCTION,250, v_spos := INSTR(UPPER(p_parameter),'TABLESPACE=');
WS_ACT_BUILD,FUNCTION,251, IF v_spos > 0 THEN
WS_ACT_BUILD,FUNCTION,252, v_epos := INSTR(p_parameter,';',v_spos);
WS_ACT_BUILD,FUNCTION,253, IF v_epos > 0 THEN
WS_ACT_BUILD,FUNCTION,254, v_user_tablespace := SUBSTR(p_parameter,v_spos+11,v_epos-(v_spos+11));
WS_ACT_BUILD,FUNCTION,255, ELSE
WS_ACT_BUILD,FUNCTION,256, v_user_tablespace := SUBSTR(p_parameter,v_spos+11);
WS_ACT_BUILD,FUNCTION,257, END IF;
WS_ACT_BUILD,FUNCTION,258, END IF;
WS_ACT_BUILD,FUNCTION,259, End If;
WS_ACT_BUILD,FUNCTION,260,
WS_ACT_BUILD,FUNCTION,261, v_step := 300;
WS_ACT_BUILD,FUNCTION,262, --=====================================================
WS_ACT_BUILD,FUNCTION,263, -- If this is an index task then just build that index
WS_ACT_BUILD,FUNCTION,264, -- Otherwise we have a table so build all required indexes
WS_ACT_BUILD,FUNCTION,265, --=====================================================
WS_ACT_BUILD,FUNCTION,266, If p_obj_type = v_ws_obj_index Then
WS_ACT_BUILD,FUNCTION,267, --=====================================================
WS_ACT_BUILD,FUNCTION,268, -- Loop through all the indexes looking for what to build
WS_ACT_BUILD,FUNCTION,269, --=====================================================
WS_ACT_BUILD,FUNCTION,270, FOR v_IndRec in c_IndexOnly LOOP
WS_ACT_BUILD,FUNCTION,271, v_step := 400;
WS_ACT_BUILD,FUNCTION,272, v_no_tablespace := 0;
WS_ACT_BUILD,FUNCTION,273, v_primary_key := 0;
WS_ACT_BUILD,FUNCTION,274,
WS_ACT_BUILD,FUNCTION,275, --=====================================================
WS_ACT_BUILD,FUNCTION,276, -- First drop the index in case that step was not run
WS_ACT_BUILD,FUNCTION,277, -- Execute the drop
WS_ACT_BUILD,FUNCTION,278, --=====================================================
WS_ACT_BUILD,FUNCTION,279, v_step := 500;
WS_ACT_BUILD,FUNCTION,280, If v_IndRec.ih_partition_type is NULL Then
WS_ACT_BUILD,FUNCTION,281, v_part_count := 0;
WS_ACT_BUILD,FUNCTION,282, Else
WS_ACT_BUILD,FUNCTION,283, Select count(1) into v_part_count
WS_ACT_BUILD,FUNCTION,284, from all_tab_partitions
WS_ACT_BUILD,FUNCTION,285, Where table_owner = upper(v_table_schema)
WS_ACT_BUILD,FUNCTION,286, And table_name = upper(v_table_name);
WS_ACT_BUILD,FUNCTION,287, End If;
WS_ACT_BUILD,FUNCTION,288,
WS_ACT_BUILD,FUNCTION,289, v_step := 600;
WS_ACT_BUILD,FUNCTION,290, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD,FUNCTION,291, And v_part_count = 0 Then
WS_ACT_BUILD,FUNCTION,292, v_stmt := 'alter table ' ||v_table_with_schema;
WS_ACT_BUILD,FUNCTION,293, v_stmt := v_stmt ||' drop constraint '||v_index_name;
WS_ACT_BUILD,FUNCTION,294, Else
WS_ACT_BUILD,FUNCTION,295, v_stmt := 'drop index ' || v_index_with_schema;
WS_ACT_BUILD,FUNCTION,296, End If;
WS_ACT_BUILD,FUNCTION,297, v_step := 700;
WS_ACT_BUILD,FUNCTION,298, BEGIN
WS_ACT_BUILD,FUNCTION,299, v_index_done := 1;
WS_ACT_BUILD,FUNCTION,300, Execute Immediate v_stmt;
WS_ACT_BUILD,FUNCTION,301, EXCEPTION
WS_ACT_BUILD,FUNCTION,302, WHEN OTHERS THEN
WS_ACT_BUILD,FUNCTION,303, v_index_done := 0;
WS_ACT_BUILD,FUNCTION,304, If SQLCODE <> -1418 And SQLCODE <> -2443 Then
WS_ACT_BUILD,FUNCTION,305, v_MsgText := 'Unhandled Exception in ws_act_build. '|| v_ws_pro_version || ' Step ' ||v_step;
WS_ACT_BUILD,FUNCTION,306, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD,FUNCTION,307, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD,FUNCTION,308, p_return_msg := 'Unhandled Exception in ws_act_build '|| v_ws_pro_version ||' step ' ||v_step;
WS_ACT_BUILD,FUNCTION,309, p_status_code := -3;
WS_ACT_BUILD,FUNCTION,310, v_result := -3;
WS_ACT_BUILD,FUNCTION,311, End If;
WS_ACT_BUILD,FUNCTION,312, END;
WS_ACT_BUILD,FUNCTION,313,
WS_ACT_BUILD,FUNCTION,314, --=====================================================
WS_ACT_BUILD,FUNCTION,315, -- Put detail message
WS_ACT_BUILD,FUNCTION,316, --=====================================================
WS_ACT_BUILD,FUNCTION,317, v_step := 800;
WS_ACT_BUILD,FUNCTION,318, IF v_index_done = 1 THEN
WS_ACT_BUILD,FUNCTION,319,
WS_ACT_BUILD,FUNCTION,320, v_step := 900;
WS_ACT_BUILD,FUNCTION,321,
WS_ACT_BUILD,FUNCTION,322, v_MsgText := 'Index ' || v_index_with_schema || ' dropped';
WS_ACT_BUILD,FUNCTION,323,
WS_ACT_BUILD,FUNCTION,324, v_msg_result := WsWrkError(
WS_ACT_BUILD,FUNCTION,325, 'I'
WS_ACT_BUILD,FUNCTION,326, , p_job_name
WS_ACT_BUILD,FUNCTION,327, , p_task_name
WS_ACT_BUILD,FUNCTION,328, , p_sequence
WS_ACT_BUILD,FUNCTION,329, , v_MsgText
WS_ACT_BUILD,FUNCTION,330, , NULL
WS_ACT_BUILD,FUNCTION,331, , NULL
WS_ACT_BUILD,FUNCTION,332, , p_task_id
WS_ACT_BUILD,FUNCTION,333, , p_job_id
WS_ACT_BUILD,FUNCTION,334, , NULL);
WS_ACT_BUILD,FUNCTION,335, END IF;
WS_ACT_BUILD,FUNCTION,336,
WS_ACT_BUILD,FUNCTION,337, --=====================================================
WS_ACT_BUILD,FUNCTION,338, -- Create the rebuild command
WS_ACT_BUILD,FUNCTION,339, --=====================================================
WS_ACT_BUILD,FUNCTION,340, v_step := 1000;
WS_ACT_BUILD,FUNCTION,341, If v_IndRec.ih_unique = 'Y'
WS_ACT_BUILD,FUNCTION,342, And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD,FUNCTION,343, And v_part_count = 0 Then
WS_ACT_BUILD,FUNCTION,344, v_stmt := 'Alter Table ' ||v_table_with_schema;
WS_ACT_BUILD,FUNCTION,345, v_stmt := v_stmt||' Add Constraint '||v_index_name;
WS_ACT_BUILD,FUNCTION,346, v_stmt := v_stmt||' Primary Key (';
WS_ACT_BUILD,FUNCTION,347, v_primary_key := 1;
WS_ACT_BUILD,FUNCTION,348, Else
WS_ACT_BUILD,FUNCTION,349, v_stmt := 'Create ';
WS_ACT_BUILD,FUNCTION,350, If v_IndRec.ih_unique = 'Y' then
WS_ACT_BUILD,FUNCTION,351, v_stmt := v_stmt||'Unique ';
WS_ACT_BUILD,FUNCTION,352, End If;
WS_ACT_BUILD,FUNCTION,353, If v_IndRec.ih_index_type = 'B' Then
WS_ACT_BUILD,FUNCTION,354, v_stmt := v_stmt||'Bitmap ';
WS_ACT_BUILD,FUNCTION,355, End If;
WS_ACT_BUILD,FUNCTION,356, v_stmt := v_stmt||'Index ' || v_index_with_schema ||' on ';
WS_ACT_BUILD,FUNCTION,357,
WS_ACT_BUILD,FUNCTION,358, v_stmt := v_stmt||v_table_with_schema ||'(';
WS_ACT_BUILD,FUNCTION,359, End If;
WS_ACT_BUILD,FUNCTION,360,
WS_ACT_BUILD,FUNCTION,361, -- Now add in all the columns
WS_ACT_BUILD,FUNCTION,362, v_index_key := v_IndRec.ih_index_key;
WS_ACT_BUILD,FUNCTION,363, v_columns := '';
WS_ACT_BUILD,FUNCTION,364, v_col_number := 0;
WS_ACT_BUILD,FUNCTION,365, FOR v_ColRec in c_IndCol LOOP
WS_ACT_BUILD,FUNCTION,366,
WS_ACT_BUILD,FUNCTION,367, v_col_number := v_col_number + 1;
WS_ACT_BUILD,FUNCTION,368, If v_col_number > 1 Then
WS_ACT_BUILD,FUNCTION,369, v_columns := v_columns||',';
WS_ACT_BUILD,FUNCTION,370, End If;
WS_ACT_BUILD,FUNCTION,371, v_columns := v_columns||v_ColRec.ic_column;
WS_ACT_BUILD,FUNCTION,372, END LOOP;
WS_ACT_BUILD,FUNCTION,373,
WS_ACT_BUILD,FUNCTION,374, --=====================================================
WS_ACT_BUILD,FUNCTION,375, -- If no columns See if this is a function index
WS_ACT_BUILD,FUNCTION,376, --=====================================================
WS_ACT_BUILD,FUNCTION,377, If v_columns = '' OR v_columns is NULL THEN
WS_ACT_BUILD,FUNCTION,378, v_epos := Instr(v_IndRec.ih_index_options,'function_index=');
WS_ACT_BUILD,FUNCTION,379, If v_epos > 0 Then
WS_ACT_BUILD,FUNCTION,380, v_spos := to_number(substr(v_IndRec.ih_index_options,v_epos+15,4));
WS_ACT_BUILD,FUNCTION,381, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,382, v_columns := substr(v_IndRec.ih_index_options,v_epos+20,v_spos);
WS_ACT_BUILD,FUNCTION,383, End If;
WS_ACT_BUILD,FUNCTION,384, End If;
WS_ACT_BUILD,FUNCTION,385, End if;
WS_ACT_BUILD,FUNCTION,386,
WS_ACT_BUILD,FUNCTION,387, v_stmt := v_stmt||v_columns||')';
WS_ACT_BUILD,FUNCTION,388, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD,FUNCTION,389, And v_part_count = 0 Then
WS_ACT_BUILD,FUNCTION,390, If v_user_tablespace is not null
WS_ACT_BUILD,FUNCTION,391, Or v_IndRec.ih_tablespace is not null Then
WS_ACT_BUILD,FUNCTION,392, v_stmt := v_stmt||' Using Index ';
WS_ACT_BUILD,FUNCTION,393, Else
WS_ACT_BUILD,FUNCTION,394, v_no_tablespace := 1;
WS_ACT_BUILD,FUNCTION,395, End If;
WS_ACT_BUILD,FUNCTION,396, Else
WS_ACT_BUILD,FUNCTION,397, v_stmt := v_stmt||' NOLOGGING';
WS_ACT_BUILD,FUNCTION,398,
WS_ACT_BUILD,FUNCTION,399, If nvl(v_IndRec.ih_parallel,0) > 0 Then
WS_ACT_BUILD,FUNCTION,400, If nvl(v_IndRec.ih_parallel,0) > 1 Then
WS_ACT_BUILD,FUNCTION,401, v_stmt := v_stmt||' Parallel '|| v_IndRec.ih_parallel;
WS_ACT_BUILD,FUNCTION,402, Else
WS_ACT_BUILD,FUNCTION,403, v_stmt := v_stmt||' Parallel ';
WS_ACT_BUILD,FUNCTION,404, End If;
WS_ACT_BUILD,FUNCTION,405, End If;
WS_ACT_BUILD,FUNCTION,406, End If;
WS_ACT_BUILD,FUNCTION,407,
WS_ACT_BUILD,FUNCTION,408, If v_user_tablespace is not null Then
WS_ACT_BUILD,FUNCTION,409, v_stmt := v_stmt||' Tablespace '||v_user_tablespace;
WS_ACT_BUILD,FUNCTION,410, ElsIf v_IndRec.ih_tablespace is not null Then
WS_ACT_BUILD,FUNCTION,411, v_stmt := v_stmt||' Tablespace '||v_IndRec.ih_tablespace;
WS_ACT_BUILD,FUNCTION,412, End If;
WS_ACT_BUILD,FUNCTION,413,
WS_ACT_BUILD,FUNCTION,414, --RED_3620 test for invisible
WS_ACT_BUILD,FUNCTION,415, v_spos := Instr(v_IndRec.ih_index_options,'invisible=TRUE;');
WS_ACT_BUILD,FUNCTION,416, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,417, v_stmt := v_stmt||' INVISIBLE ';
WS_ACT_BUILD,FUNCTION,418, End If;
WS_ACT_BUILD,FUNCTION,419,
WS_ACT_BUILD,FUNCTION,420, -- If we are a primary key and we do not have a tablespace
WS_ACT_BUILD,FUNCTION,421, -- then we cannot add any of the following
WS_ACT_BUILD,FUNCTION,422, If v_primary_key = 1 And v_no_tablespace = 1 Then
WS_ACT_BUILD,FUNCTION,423, NULL;
WS_ACT_BUILD,FUNCTION,424, Else
WS_ACT_BUILD,FUNCTION,425,
WS_ACT_BUILD,FUNCTION,426, -- see if this is a compute statistics for this index
WS_ACT_BUILD,FUNCTION,427, v_stats_include := 'N';
WS_ACT_BUILD,FUNCTION,428, v_spos := Instr(v_IndRec.ih_index_options,'compute_stats;');
WS_ACT_BUILD,FUNCTION,429, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,430, v_stmt := v_stmt||' Compute Statistics ';
WS_ACT_BUILD,FUNCTION,431, v_stats_include := 'Y';
WS_ACT_BUILD,FUNCTION,432, End If;
WS_ACT_BUILD,FUNCTION,433,
WS_ACT_BUILD,FUNCTION,434, -- see if this is a compressed index
WS_ACT_BUILD,FUNCTION,435, v_spos := Instr(v_IndRec.ih_index_options,'compressed=');
WS_ACT_BUILD,FUNCTION,436, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,437, v_fix := substr(v_IndRec.ih_index_options,v_spos+11);
WS_ACT_BUILD,FUNCTION,438, If substr(v_fix,1,1) = ';' Then
WS_ACT_BUILD,FUNCTION,439, v_stmt := v_stmt||' Compress ';
WS_ACT_BUILD,FUNCTION,440, ElsIf substr(v_fix,1,3) <> '-1;' Then
WS_ACT_BUILD,FUNCTION,441, v_spos := Instr(v_fix,';');
WS_ACT_BUILD,FUNCTION,442, v_stmt := v_stmt||' Compress '||substr(v_fix,1,v_spos-1);
WS_ACT_BUILD,FUNCTION,443, End If;
WS_ACT_BUILD,FUNCTION,444, End If;
WS_ACT_BUILD,FUNCTION,445,
WS_ACT_BUILD,FUNCTION,446, If NVL(v_IndRec.ih_pct_increase,0) > 1000 Then
WS_ACT_BUILD,FUNCTION,447, v_pctfree := TRUNC(NVL(v_IndRec.ih_pct_increase,0)/1000,0);
WS_ACT_BUILD,FUNCTION,448, v_stmt := v_stmt||' PctFree '||v_pctfree;
WS_ACT_BUILD,FUNCTION,449, Else
WS_ACT_BUILD,FUNCTION,450, v_stmt := v_stmt||' PctFree '||NVL(v_IndRec.ih_pct_free,0);
WS_ACT_BUILD,FUNCTION,451, End If;
WS_ACT_BUILD,FUNCTION,452,
WS_ACT_BUILD,FUNCTION,453, v_stmt := v_stmt||' Storage (';
WS_ACT_BUILD,FUNCTION,454, If v_IndRec.ih_initial_kb+v_IndRec.ih_next_kb <> 0 Then
WS_ACT_BUILD,FUNCTION,455, v_stmt := v_stmt||' Initial '||v_IndRec.ih_initial_kb||'K';
WS_ACT_BUILD,FUNCTION,456, v_stmt := v_stmt||' Next '||v_IndRec.ih_next_kb||'K';
WS_ACT_BUILD,FUNCTION,457, End If;
WS_ACT_BUILD,FUNCTION,458, If v_IndRec.ih_min_extents+v_IndRec.ih_max_extents <> 0 Then
WS_ACT_BUILD,FUNCTION,459, v_stmt := v_stmt||' Minextents '||v_IndRec.ih_min_extents;
WS_ACT_BUILD,FUNCTION,460, v_stmt := v_stmt||' Maxextents '||v_IndRec.ih_max_extents;
WS_ACT_BUILD,FUNCTION,461, End If;
WS_ACT_BUILD,FUNCTION,462, If NVL(v_IndRec.ih_pct_increase,0) > 1000 Then
WS_ACT_BUILD,FUNCTION,463, v_pctinc := NVL(v_IndRec.ih_pct_increase,0);
WS_ACT_BUILD,FUNCTION,464, v_pctinc := v_pctinc - ( TRUNC(v_pctinc/1000,0) *1000);
WS_ACT_BUILD,FUNCTION,465, Else
WS_ACT_BUILD,FUNCTION,466, v_pctinc := NVL(v_IndRec.ih_pct_increase,0);
WS_ACT_BUILD,FUNCTION,467, End If;
WS_ACT_BUILD,FUNCTION,468, v_stmt := v_stmt||' Pctincrease '||v_pctinc;
WS_ACT_BUILD,FUNCTION,469,
WS_ACT_BUILD,FUNCTION,470, If upper(v_IndRec.ih_buffer_pool_ind) = 'K' Then
WS_ACT_BUILD,FUNCTION,471, v_stmt:= v_stmt||' Buffer_Pool Keep';
WS_ACT_BUILD,FUNCTION,472, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'R' Then
WS_ACT_BUILD,FUNCTION,473, v_stmt:= v_stmt||' Buffer_Pool Recycle';
WS_ACT_BUILD,FUNCTION,474, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'D' Then
WS_ACT_BUILD,FUNCTION,475, v_stmt:= v_stmt||' Buffer_Pool Default';
WS_ACT_BUILD,FUNCTION,476, End If;
WS_ACT_BUILD,FUNCTION,477,
WS_ACT_BUILD,FUNCTION,478, v_stmt:= v_stmt||')';
WS_ACT_BUILD,FUNCTION,479, END If;
WS_ACT_BUILD,FUNCTION,480,
WS_ACT_BUILD,FUNCTION,481, --====================================================================
WS_ACT_BUILD,FUNCTION,482, -- PARTITION . If partitioned then add the partitions and local if set
WS_ACT_BUILD,FUNCTION,483, --====================================================================
WS_ACT_BUILD,FUNCTION,484,
WS_ACT_BUILD,FUNCTION,485, If v_part_count > 0 Then
WS_ACT_BUILD,FUNCTION,486, v_step := 1100;
WS_ACT_BUILD,FUNCTION,487, If v_IndRec.ih_partition_type = 'L'
WS_ACT_BUILD,FUNCTION,488, Or v_IndRec.ih_partition_type is NULL Then
WS_ACT_BUILD,FUNCTION,489, v_stmt := v_stmt||' LOCAL ';
WS_ACT_BUILD,FUNCTION,490, End If;
WS_ACT_BUILD,FUNCTION,491,
WS_ACT_BUILD,FUNCTION,492, v_stmt := v_stmt||' ( ';
WS_ACT_BUILD,FUNCTION,493,
WS_ACT_BUILD,FUNCTION,494, -- now get all the partitions
WS_ACT_BUILD,FUNCTION,495, v_row := 0;
WS_ACT_BUILD,FUNCTION,496, v_step := 1200;
WS_ACT_BUILD,FUNCTION,497,
WS_ACT_BUILD,FUNCTION,498, FOR v_PartRec in c_AllPartitionEx LOOP
WS_ACT_BUILD,FUNCTION,499, v_row := v_row + 1;
WS_ACT_BUILD,FUNCTION,500, v_stmt := v_stmt||' Partition '||v_PartRec.partition_name;
WS_ACT_BUILD,FUNCTION,501, If v_row < v_part_count Then
WS_ACT_BUILD,FUNCTION,502, v_stmt := v_stmt||',';
WS_ACT_BUILD,FUNCTION,503, End if;
WS_ACT_BUILD,FUNCTION,504, END LOOP;
WS_ACT_BUILD,FUNCTION,505,
WS_ACT_BUILD,FUNCTION,506, v_stmt := v_stmt||')';
WS_ACT_BUILD,FUNCTION,507, End If;
WS_ACT_BUILD,FUNCTION,508,
WS_ACT_BUILD,FUNCTION,509, --=====================================================
WS_ACT_BUILD,FUNCTION,510, -- Rebuild the index
WS_ACT_BUILD,FUNCTION,511, --=====================================================
WS_ACT_BUILD,FUNCTION,512, v_step := 1300;
WS_ACT_BUILD,FUNCTION,513, Execute Immediate v_stmt;
WS_ACT_BUILD,FUNCTION,514,
WS_ACT_BUILD,FUNCTION,515, --=====================================================
WS_ACT_BUILD,FUNCTION,516, -- If Parallel primary key then apply that now
WS_ACT_BUILD,FUNCTION,517, --=====================================================
WS_ACT_BUILD,FUNCTION,518, v_step := 1400;
WS_ACT_BUILD,FUNCTION,519, If v_primary_key = 1
WS_ACT_BUILD,FUNCTION,520, THEN
WS_ACT_BUILD,FUNCTION,521, v_stmt := 'Alter INDEX '||v_index_with_schema ;
WS_ACT_BUILD,FUNCTION,522,
WS_ACT_BUILD,FUNCTION,523, IF nvl(v_IndRec.ih_parallel,0) > 0
WS_ACT_BUILD,FUNCTION,524, THEN
WS_ACT_BUILD,FUNCTION,525, v_stmt := v_stmt||' Parallel ';
WS_ACT_BUILD,FUNCTION,526, If nvl(v_IndRec.ih_parallel,0) > 1 Then
WS_ACT_BUILD,FUNCTION,527, v_stmt := v_stmt|| v_IndRec.ih_parallel;
WS_ACT_BUILD,FUNCTION,528, End If;
WS_ACT_BUILD,FUNCTION,529, else
WS_ACT_BUILD,FUNCTION,530, v_stmt := v_stmt||' NOPARALLEL ';
WS_ACT_BUILD,FUNCTION,531, End If;
WS_ACT_BUILD,FUNCTION,532,
WS_ACT_BUILD,FUNCTION,533, v_stmt := v_stmt||' NOLOGGING ';
WS_ACT_BUILD,FUNCTION,534,
WS_ACT_BUILD,FUNCTION,535, If upper(v_IndRec.ih_buffer_pool_ind) = 'K' Then
WS_ACT_BUILD,FUNCTION,536, v_stmt:= v_stmt||' STORAGE ( Buffer_Pool Keep )';
WS_ACT_BUILD,FUNCTION,537, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'R' Then
WS_ACT_BUILD,FUNCTION,538, v_stmt:= v_stmt||' STORAGE (  Buffer_Pool Recycle ) ';
WS_ACT_BUILD,FUNCTION,539, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'D' Then
WS_ACT_BUILD,FUNCTION,540, v_stmt:= v_stmt||' STORAGE ( Buffer_Pool Default ) ';
WS_ACT_BUILD,FUNCTION,541, End If;
WS_ACT_BUILD,FUNCTION,542,
WS_ACT_BUILD,FUNCTION,543, v_step := 1500;
WS_ACT_BUILD,FUNCTION,544,
WS_ACT_BUILD,FUNCTION,545, Execute Immediate v_stmt;
WS_ACT_BUILD,FUNCTION,546, End If;
WS_ACT_BUILD,FUNCTION,547,
WS_ACT_BUILD,FUNCTION,548, --=====================================================
WS_ACT_BUILD,FUNCTION,549, -- Put detail message
WS_ACT_BUILD,FUNCTION,550, --=====================================================
WS_ACT_BUILD,FUNCTION,551, v_step := 1600;
WS_ACT_BUILD,FUNCTION,552,
WS_ACT_BUILD,FUNCTION,553, v_MsgText := 'Index ' || v_index_with_schema || ' rebuilt';
WS_ACT_BUILD,FUNCTION,554, IF v_stats_include = 'Y' THEN
WS_ACT_BUILD,FUNCTION,555, v_MsgText := v_MsgText || ' including stats';
WS_ACT_BUILD,FUNCTION,556, END IF;
WS_ACT_BUILD,FUNCTION,557,
WS_ACT_BUILD,FUNCTION,558, v_msg_result := WsWrkError(
WS_ACT_BUILD,FUNCTION,559, 'I'
WS_ACT_BUILD,FUNCTION,560, , p_job_name
WS_ACT_BUILD,FUNCTION,561, , p_task_name
WS_ACT_BUILD,FUNCTION,562, , p_sequence
WS_ACT_BUILD,FUNCTION,563, , v_MsgText
WS_ACT_BUILD,FUNCTION,564, , NULL
WS_ACT_BUILD,FUNCTION,565, , NULL
WS_ACT_BUILD,FUNCTION,566, , p_task_id
WS_ACT_BUILD,FUNCTION,567, , p_job_id
WS_ACT_BUILD,FUNCTION,568, , NULL);
WS_ACT_BUILD,FUNCTION,569,
WS_ACT_BUILD,FUNCTION,570,
WS_ACT_BUILD,FUNCTION,571, v_count := v_count + 1;
WS_ACT_BUILD,FUNCTION,572, END LOOP;
WS_ACT_BUILD,FUNCTION,573, Else
WS_ACT_BUILD,FUNCTION,574, --=====================================================
WS_ACT_BUILD,FUNCTION,575, -- Get the day of the week, and if at start or end of month
WS_ACT_BUILD,FUNCTION,576, --=====================================================
WS_ACT_BUILD,FUNCTION,577, select to_char(sysdate,'DY'), to_number(to_char(sysdate,'DD')),
WS_ACT_BUILD,FUNCTION,578, to_number(to_char(sysdate,'MM')), to_number(to_char(sysdate+1,'MM'))
WS_ACT_BUILD,FUNCTION,579, into v_day_name, v_day, v_month, v_tommorrow_month
WS_ACT_BUILD,FUNCTION,580, from dual;
WS_ACT_BUILD,FUNCTION,581,
WS_ACT_BUILD,FUNCTION,582, If v_month <> v_tommorrow_month Then
WS_ACT_BUILD,FUNCTION,583, v_month_end := 1;
WS_ACT_BUILD,FUNCTION,584, Else
WS_ACT_BUILD,FUNCTION,585, v_month_end := 0;
WS_ACT_BUILD,FUNCTION,586, End If;
WS_ACT_BUILD,FUNCTION,587,
WS_ACT_BUILD,FUNCTION,588, --=====================================================
WS_ACT_BUILD,FUNCTION,589, -- Loop through all the indexes looking for what to build
WS_ACT_BUILD,FUNCTION,590, --=====================================================
WS_ACT_BUILD,FUNCTION,591, FOR v_IndRec in c_Index LOOP
WS_ACT_BUILD,FUNCTION,592, If upper(v_IndRec.ih_pre_drop_flag) = 'Y'
WS_ACT_BUILD,FUNCTION,593, Or upper(v_IndRec.ih_rebuild_freq) = 'DAILY'
WS_ACT_BUILD,FUNCTION,594, Or upper(substr(v_IndRec.ih_rebuild_freq,1,3)) = upper(v_day_name)
WS_ACT_BUILD,FUNCTION,595, Or (upper(v_IndRec.ih_rebuild_freq) = 'END MONTH' And v_month_end = 1)
WS_ACT_BUILD,FUNCTION,596, Or (upper(v_IndRec.ih_rebuild_freq) = 'START MONTH' And v_day = 1)
WS_ACT_BUILD,FUNCTION,597, Then
WS_ACT_BUILD,FUNCTION,598, v_step := 1700;
WS_ACT_BUILD,FUNCTION,599, v_no_tablespace := 0;
WS_ACT_BUILD,FUNCTION,600, v_primary_key := 0;
WS_ACT_BUILD,FUNCTION,601,
WS_ACT_BUILD,FUNCTION,602, v_index_name := v_IndRec.ih_index_name;
WS_ACT_BUILD,FUNCTION,603,
WS_ACT_BUILD,FUNCTION,604, v_index_with_schema := TRIM(v_table_schema);
WS_ACT_BUILD,FUNCTION,605, IF TRIM(v_index_with_schema) IS NOT NULL THEN
WS_ACT_BUILD,FUNCTION,606, v_index_with_schema := v_index_with_schema ||'.';
WS_ACT_BUILD,FUNCTION,607, END IF;
WS_ACT_BUILD,FUNCTION,608,
WS_ACT_BUILD,FUNCTION,609, v_index_with_schema := v_index_with_schema || v_index_name;
WS_ACT_BUILD,FUNCTION,610,
WS_ACT_BUILD,FUNCTION,611, --=====================================================
WS_ACT_BUILD,FUNCTION,612, -- First drop the index in case that step was not run
WS_ACT_BUILD,FUNCTION,613, -- Execute the drop
WS_ACT_BUILD,FUNCTION,614, --=====================================================
WS_ACT_BUILD,FUNCTION,615, v_step := 1800;
WS_ACT_BUILD,FUNCTION,616, If v_IndRec.ih_partition_type is NULL Then
WS_ACT_BUILD,FUNCTION,617, v_part_count := 0;
WS_ACT_BUILD,FUNCTION,618, Else
WS_ACT_BUILD,FUNCTION,619, Select count(1) into v_part_count
WS_ACT_BUILD,FUNCTION,620, from all_tab_partitions
WS_ACT_BUILD,FUNCTION,621, Where table_owner = upper(v_table_schema)
WS_ACT_BUILD,FUNCTION,622, And table_name = upper(v_table_name);
WS_ACT_BUILD,FUNCTION,623, End If;
WS_ACT_BUILD,FUNCTION,624, v_step := 1900;
WS_ACT_BUILD,FUNCTION,625, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD,FUNCTION,626, And v_part_count = 0 Then
WS_ACT_BUILD,FUNCTION,627, v_stmt := 'alter table '||v_table_with_schema ||
WS_ACT_BUILD,FUNCTION,628, ' drop constraint '||v_index_name;
WS_ACT_BUILD,FUNCTION,629, Else
WS_ACT_BUILD,FUNCTION,630, v_stmt := 'drop index '||v_index_with_schema;
WS_ACT_BUILD,FUNCTION,631, End If;
WS_ACT_BUILD,FUNCTION,632, v_step := 2000;
WS_ACT_BUILD,FUNCTION,633, BEGIN
WS_ACT_BUILD,FUNCTION,634, v_index_done := 1;
WS_ACT_BUILD,FUNCTION,635, Execute Immediate v_stmt;
WS_ACT_BUILD,FUNCTION,636, EXCEPTION
WS_ACT_BUILD,FUNCTION,637, WHEN OTHERS THEN
WS_ACT_BUILD,FUNCTION,638, v_index_done := 0;
WS_ACT_BUILD,FUNCTION,639, If SQLCODE <> -1418 And SQLCODE <> -2443 Then
WS_ACT_BUILD,FUNCTION,640, v_MsgText := 'Unhandled Exception in ws_act_build '|| v_ws_pro_version || ' Step ' ||v_step;
WS_ACT_BUILD,FUNCTION,641, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD,FUNCTION,642, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD,FUNCTION,643, p_return_msg := 'Unhandled Exception in ws_act_build ' || v_ws_pro_version || ' step ' ||v_step;
WS_ACT_BUILD,FUNCTION,644, p_status_code := -3;
WS_ACT_BUILD,FUNCTION,645, v_result := -3;
WS_ACT_BUILD,FUNCTION,646, End If;
WS_ACT_BUILD,FUNCTION,647, END;
WS_ACT_BUILD,FUNCTION,648,
WS_ACT_BUILD,FUNCTION,649, --=====================================================
WS_ACT_BUILD,FUNCTION,650, -- Put detail message
WS_ACT_BUILD,FUNCTION,651, --=====================================================
WS_ACT_BUILD,FUNCTION,652, v_step := 2100;
WS_ACT_BUILD,FUNCTION,653, IF v_index_done = 1 THEN
WS_ACT_BUILD,FUNCTION,654,
WS_ACT_BUILD,FUNCTION,655, v_step := 2200;
WS_ACT_BUILD,FUNCTION,656,
WS_ACT_BUILD,FUNCTION,657, v_MsgText := 'Index ' || v_index_with_schema || ' dropped';
WS_ACT_BUILD,FUNCTION,658,
WS_ACT_BUILD,FUNCTION,659, v_msg_result := WsWrkError(
WS_ACT_BUILD,FUNCTION,660, 'I'
WS_ACT_BUILD,FUNCTION,661, , p_job_name
WS_ACT_BUILD,FUNCTION,662, , p_task_name
WS_ACT_BUILD,FUNCTION,663, , p_sequence
WS_ACT_BUILD,FUNCTION,664, , v_MsgText
WS_ACT_BUILD,FUNCTION,665, , NULL
WS_ACT_BUILD,FUNCTION,666, , NULL
WS_ACT_BUILD,FUNCTION,667, , p_task_id
WS_ACT_BUILD,FUNCTION,668, , p_job_id
WS_ACT_BUILD,FUNCTION,669, , NULL);
WS_ACT_BUILD,FUNCTION,670, END IF;
WS_ACT_BUILD,FUNCTION,671,
WS_ACT_BUILD,FUNCTION,672, --=====================================================
WS_ACT_BUILD,FUNCTION,673, -- Create the rebuild command
WS_ACT_BUILD,FUNCTION,674, --=====================================================
WS_ACT_BUILD,FUNCTION,675, v_step := 2300;
WS_ACT_BUILD,FUNCTION,676, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD,FUNCTION,677, And v_part_count = 0 Then
WS_ACT_BUILD,FUNCTION,678, v_stmt := 'Alter Table ';
WS_ACT_BUILD,FUNCTION,679, v_stmt := 'Alter Table ' || v_table_with_schema
WS_ACT_BUILD,FUNCTION,680, ||' Add Constraint ' || v_index_name
WS_ACT_BUILD,FUNCTION,681, ||' Primary Key (';
WS_ACT_BUILD,FUNCTION,682, v_primary_key := 1;
WS_ACT_BUILD,FUNCTION,683, Else
WS_ACT_BUILD,FUNCTION,684, v_stmt := 'Create ';
WS_ACT_BUILD,FUNCTION,685, If v_IndRec.ih_unique = 'Y' then
WS_ACT_BUILD,FUNCTION,686, v_stmt := v_stmt||'Unique ';
WS_ACT_BUILD,FUNCTION,687, End If;
WS_ACT_BUILD,FUNCTION,688, If v_IndRec.ih_index_type = 'B' Then
WS_ACT_BUILD,FUNCTION,689, v_stmt := v_stmt||'Bitmap ';
WS_ACT_BUILD,FUNCTION,690, End If;
WS_ACT_BUILD,FUNCTION,691, v_stmt := v_stmt||'Index '|| v_index_with_schema
WS_ACT_BUILD,FUNCTION,692, ||' on ' || v_table_with_schema
WS_ACT_BUILD,FUNCTION,693, ||'(';
WS_ACT_BUILD,FUNCTION,694, End If;
WS_ACT_BUILD,FUNCTION,695,
WS_ACT_BUILD,FUNCTION,696, -- Now add in all the columns
WS_ACT_BUILD,FUNCTION,697, v_index_key := v_IndRec.ih_index_key;
WS_ACT_BUILD,FUNCTION,698, v_columns := '';
WS_ACT_BUILD,FUNCTION,699, v_col_number := 0;
WS_ACT_BUILD,FUNCTION,700, FOR v_ColRec in c_IndCol LOOP
WS_ACT_BUILD,FUNCTION,701,
WS_ACT_BUILD,FUNCTION,702, v_col_number := v_col_number + 1;
WS_ACT_BUILD,FUNCTION,703, If v_col_number > 1 Then
WS_ACT_BUILD,FUNCTION,704, v_columns := v_columns||',';
WS_ACT_BUILD,FUNCTION,705, End If;
WS_ACT_BUILD,FUNCTION,706, v_columns := v_columns||v_ColRec.ic_column;
WS_ACT_BUILD,FUNCTION,707, END LOOP;
WS_ACT_BUILD,FUNCTION,708,
WS_ACT_BUILD,FUNCTION,709, --=====================================================
WS_ACT_BUILD,FUNCTION,710, -- If no columns See if this is a function index
WS_ACT_BUILD,FUNCTION,711, --=====================================================
WS_ACT_BUILD,FUNCTION,712, If v_columns = '' OR v_columns is NULL THEN
WS_ACT_BUILD,FUNCTION,713, v_epos := Instr(v_IndRec.ih_index_options,'function_index=');
WS_ACT_BUILD,FUNCTION,714, If v_epos > 0 Then
WS_ACT_BUILD,FUNCTION,715, v_spos := to_number(substr(v_IndRec.ih_index_options,v_epos+15,4));
WS_ACT_BUILD,FUNCTION,716, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,717, v_columns := substr(v_IndRec.ih_index_options,v_epos+20,v_spos);
WS_ACT_BUILD,FUNCTION,718, End If;
WS_ACT_BUILD,FUNCTION,719, End If;
WS_ACT_BUILD,FUNCTION,720, End if;
WS_ACT_BUILD,FUNCTION,721,
WS_ACT_BUILD,FUNCTION,722, v_stmt := v_stmt||v_columns||')';
WS_ACT_BUILD,FUNCTION,723, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD,FUNCTION,724, And v_part_count = 0 Then
WS_ACT_BUILD,FUNCTION,725, If v_user_tablespace is not null
WS_ACT_BUILD,FUNCTION,726, Or v_IndRec.ih_tablespace is not null Then
WS_ACT_BUILD,FUNCTION,727, v_stmt := v_stmt||' Using Index ';
WS_ACT_BUILD,FUNCTION,728, Else
WS_ACT_BUILD,FUNCTION,729, v_no_tablespace := 1;
WS_ACT_BUILD,FUNCTION,730, End If;
WS_ACT_BUILD,FUNCTION,731,
WS_ACT_BUILD,FUNCTION,732, Else
WS_ACT_BUILD,FUNCTION,733, v_stmt := v_stmt||' NOLOGGING';
WS_ACT_BUILD,FUNCTION,734,
WS_ACT_BUILD,FUNCTION,735, If nvl(v_IndRec.ih_parallel,0) > 0 Then
WS_ACT_BUILD,FUNCTION,736, If nvl(v_IndRec.ih_parallel,0) > 1 Then
WS_ACT_BUILD,FUNCTION,737, v_stmt := v_stmt||' Parallel '|| v_IndRec.ih_parallel;
WS_ACT_BUILD,FUNCTION,738, Else
WS_ACT_BUILD,FUNCTION,739, v_stmt := v_stmt||' Parallel ';
WS_ACT_BUILD,FUNCTION,740, End If;
WS_ACT_BUILD,FUNCTION,741, End If;
WS_ACT_BUILD,FUNCTION,742, End If;
WS_ACT_BUILD,FUNCTION,743,
WS_ACT_BUILD,FUNCTION,744, If v_user_tablespace is not null Then
WS_ACT_BUILD,FUNCTION,745, v_stmt := v_stmt||' Tablespace '||v_user_tablespace;
WS_ACT_BUILD,FUNCTION,746, ElsIf v_IndRec.ih_tablespace is not null Then
WS_ACT_BUILD,FUNCTION,747, v_stmt := v_stmt||' Tablespace '||v_IndRec.ih_tablespace;
WS_ACT_BUILD,FUNCTION,748, End If;
WS_ACT_BUILD,FUNCTION,749,
WS_ACT_BUILD,FUNCTION,750, --RED_3620 test for invisible
WS_ACT_BUILD,FUNCTION,751, v_spos := Instr(v_IndRec.ih_index_options,'invisible=TRUE;');
WS_ACT_BUILD,FUNCTION,752, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,753, v_stmt := v_stmt||' INVISIBLE ';
WS_ACT_BUILD,FUNCTION,754, End If;
WS_ACT_BUILD,FUNCTION,755,
WS_ACT_BUILD,FUNCTION,756, -- If we are a primary key and we do not have a tablespace
WS_ACT_BUILD,FUNCTION,757, -- then we cannot add any of the following
WS_ACT_BUILD,FUNCTION,758, If v_primary_key = 1 And v_no_tablespace = 1 Then
WS_ACT_BUILD,FUNCTION,759, NULL;
WS_ACT_BUILD,FUNCTION,760, Else
WS_ACT_BUILD,FUNCTION,761,
WS_ACT_BUILD,FUNCTION,762, -- see if this is a compute statistics for this index
WS_ACT_BUILD,FUNCTION,763, v_stats_include := 'N';
WS_ACT_BUILD,FUNCTION,764, v_spos := Instr(v_IndRec.ih_index_options,'compute_stats;');
WS_ACT_BUILD,FUNCTION,765, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,766, v_stmt := v_stmt||' Compute Statistics ';
WS_ACT_BUILD,FUNCTION,767, v_stats_include := 'Y';
WS_ACT_BUILD,FUNCTION,768, End If;
WS_ACT_BUILD,FUNCTION,769,
WS_ACT_BUILD,FUNCTION,770, -- see if this is a compressed index
WS_ACT_BUILD,FUNCTION,771, v_spos := Instr(v_IndRec.ih_index_options,'compressed=');
WS_ACT_BUILD,FUNCTION,772, If v_spos > 0 Then
WS_ACT_BUILD,FUNCTION,773, v_fix := substr(v_IndRec.ih_index_options,v_spos+11);
WS_ACT_BUILD,FUNCTION,774, If substr(v_fix,1,1) = ';' Then
WS_ACT_BUILD,FUNCTION,775, v_stmt := v_stmt||' Compress ';
WS_ACT_BUILD,FUNCTION,776, ElsIf substr(v_fix,1,3) <> '-1;' Then
WS_ACT_BUILD,FUNCTION,777, v_spos := Instr(v_fix,';');
WS_ACT_BUILD,FUNCTION,778, v_stmt := v_stmt||' Compress '||substr(v_fix,1,v_spos-1);
WS_ACT_BUILD,FUNCTION,779, End If;
WS_ACT_BUILD,FUNCTION,780, End If;
WS_ACT_BUILD,FUNCTION,781,
WS_ACT_BUILD,FUNCTION,782, If NVL(v_IndRec.ih_pct_increase,0) > 1000 Then
WS_ACT_BUILD,FUNCTION,783, v_pctfree := TRUNC(NVL(v_IndRec.ih_pct_increase,0)/1000,0);
WS_ACT_BUILD,FUNCTION,784, v_stmt := v_stmt||' PctFree '||v_pctfree;
WS_ACT_BUILD,FUNCTION,785, Else
WS_ACT_BUILD,FUNCTION,786, v_stmt := v_stmt||' PctFree '||NVL(v_IndRec.ih_pct_free,0);
WS_ACT_BUILD,FUNCTION,787, End If;
WS_ACT_BUILD,FUNCTION,788,
WS_ACT_BUILD,FUNCTION,789, v_stmt := v_stmt||' Storage (';
WS_ACT_BUILD,FUNCTION,790,
WS_ACT_BUILD,FUNCTION,791, If upper(v_IndRec.ih_buffer_pool_ind) = 'K' Then
WS_ACT_BUILD,FUNCTION,792, v_stmt:= v_stmt||' Buffer_Pool Keep ';
WS_ACT_BUILD,FUNCTION,793, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'R' Then
WS_ACT_BUILD,FUNCTION,794, v_stmt:= v_stmt||' Buffer_Pool Recycle ';
WS_ACT_BUILD,FUNCTION,795, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'D' Then
WS_ACT_BUILD,FUNCTION,796, v_stmt:= v_stmt||' Buffer_Pool Default ';
WS_ACT_BUILD,FUNCTION,797, End If;
WS_ACT_BUILD,FUNCTION,798,
WS_ACT_BUILD,FUNCTION,799, If v_IndRec.ih_initial_kb+v_IndRec.ih_next_kb <> 0 Then
WS_ACT_BUILD,FUNCTION,800, v_stmt := v_stmt||' Initial '||v_IndRec.ih_initial_kb||'K';
WS_ACT_BUILD,FUNCTION,801, v_stmt := v_stmt||' Next '||v_IndRec.ih_next_kb||'K';
WS_ACT_BUILD,FUNCTION,802, End If;
WS_ACT_BUILD,FUNCTION,803, If v_IndRec.ih_min_extents+v_IndRec.ih_max_extents <> 0 Then
WS_ACT_BUILD,FUNCTION,804, v_stmt := v_stmt||' Minextents '||v_IndRec.ih_min_extents;
WS_ACT_BUILD,FUNCTION,805, v_stmt := v_stmt||' Maxextents '||v_IndRec.ih_max_extents;
WS_ACT_BUILD,FUNCTION,806, End If;
WS_ACT_BUILD,FUNCTION,807, If NVL(v_IndRec.ih_pct_increase,0) > 1000 Then
WS_ACT_BUILD,FUNCTION,808, v_pctinc := NVL(v_IndRec.ih_pct_increase,0);
WS_ACT_BUILD,FUNCTION,809, v_pctinc := v_pctinc - ( TRUNC(v_pctinc/1000,0) *1000);
WS_ACT_BUILD,FUNCTION,810, Else
WS_ACT_BUILD,FUNCTION,811, v_pctinc := NVL(v_IndRec.ih_pct_increase,0);
WS_ACT_BUILD,FUNCTION,812, End If;
WS_ACT_BUILD,FUNCTION,813, v_stmt := v_stmt||' Pctincrease '||v_pctinc||')';
WS_ACT_BUILD,FUNCTION,814, End If;
WS_ACT_BUILD,FUNCTION,815,
WS_ACT_BUILD,FUNCTION,816, --====================================================================
WS_ACT_BUILD,FUNCTION,817, -- PARTITION . If partitioned then add the partitions and local if set
WS_ACT_BUILD,FUNCTION,818, --====================================================================
WS_ACT_BUILD,FUNCTION,819,
WS_ACT_BUILD,FUNCTION,820, If v_part_count > 0 Then
WS_ACT_BUILD,FUNCTION,821, v_step := 2400;
WS_ACT_BUILD,FUNCTION,822, If v_IndRec.ih_partition_type = 'L'
WS_ACT_BUILD,FUNCTION,823, Or v_IndRec.ih_partition_type is NULL Then
WS_ACT_BUILD,FUNCTION,824, v_stmt := v_stmt||' LOCAL ';
WS_ACT_BUILD,FUNCTION,825, End If;
WS_ACT_BUILD,FUNCTION,826,
WS_ACT_BUILD,FUNCTION,827, v_stmt := v_stmt||' ( ';
WS_ACT_BUILD,FUNCTION,828,
WS_ACT_BUILD,FUNCTION,829, -- now get all the partitions
WS_ACT_BUILD,FUNCTION,830, v_row := 0;
WS_ACT_BUILD,FUNCTION,831, v_step := 2500;
WS_ACT_BUILD,FUNCTION,832,
WS_ACT_BUILD,FUNCTION,833, FOR v_PartRec in c_AllPartitionEx LOOP
WS_ACT_BUILD,FUNCTION,834, v_row := v_row + 1;
WS_ACT_BUILD,FUNCTION,835, v_stmt := v_stmt||' Partition '||v_PartRec.partition_name;
WS_ACT_BUILD,FUNCTION,836, If v_row < v_part_count Then
WS_ACT_BUILD,FUNCTION,837, v_stmt := v_stmt||',';
WS_ACT_BUILD,FUNCTION,838, End if;
WS_ACT_BUILD,FUNCTION,839, END LOOP;
WS_ACT_BUILD,FUNCTION,840,
WS_ACT_BUILD,FUNCTION,841, v_stmt := v_stmt||')';
WS_ACT_BUILD,FUNCTION,842, End If;
WS_ACT_BUILD,FUNCTION,843,
WS_ACT_BUILD,FUNCTION,844, --=====================================================
WS_ACT_BUILD,FUNCTION,845, -- Rebuild the index
WS_ACT_BUILD,FUNCTION,846, --=====================================================
WS_ACT_BUILD,FUNCTION,847, v_step := 2600;
WS_ACT_BUILD,FUNCTION,848, Execute Immediate v_stmt;
WS_ACT_BUILD,FUNCTION,849,
WS_ACT_BUILD,FUNCTION,850, --=====================================================
WS_ACT_BUILD,FUNCTION,851, -- If Parallel primary key then apply that now
WS_ACT_BUILD,FUNCTION,852, --=====================================================
WS_ACT_BUILD,FUNCTION,853, v_step := 2700;
WS_ACT_BUILD,FUNCTION,854, If v_primary_key = 1
WS_ACT_BUILD,FUNCTION,855, THEN
WS_ACT_BUILD,FUNCTION,856, v_stmt := 'Alter INDEX '||v_index_with_schema;
WS_ACT_BUILD,FUNCTION,857,
WS_ACT_BUILD,FUNCTION,858, IF nvl(v_IndRec.ih_parallel,0) > 0
WS_ACT_BUILD,FUNCTION,859, THEN
WS_ACT_BUILD,FUNCTION,860, v_stmt := v_stmt||' Parallel ';
WS_ACT_BUILD,FUNCTION,861, If nvl(v_IndRec.ih_parallel,0) > 1 Then
WS_ACT_BUILD,FUNCTION,862, v_stmt := v_stmt|| v_IndRec.ih_parallel;
WS_ACT_BUILD,FUNCTION,863, End If;
WS_ACT_BUILD,FUNCTION,864, else
WS_ACT_BUILD,FUNCTION,865, v_stmt := v_stmt||' NOPARALLEL ';
WS_ACT_BUILD,FUNCTION,866, End If;
WS_ACT_BUILD,FUNCTION,867,
WS_ACT_BUILD,FUNCTION,868, v_stmt := v_stmt||' NOLOGGING ';
WS_ACT_BUILD,FUNCTION,869,
WS_ACT_BUILD,FUNCTION,870, If upper(v_IndRec.ih_buffer_pool_ind) = 'K' Then
WS_ACT_BUILD,FUNCTION,871, v_stmt:= v_stmt||' STORAGE ( Buffer_Pool Keep )';
WS_ACT_BUILD,FUNCTION,872, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'R' Then
WS_ACT_BUILD,FUNCTION,873, v_stmt:= v_stmt||' STORAGE (  Buffer_Pool Recycle ) ';
WS_ACT_BUILD,FUNCTION,874, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'D' Then
WS_ACT_BUILD,FUNCTION,875, v_stmt:= v_stmt||' STORAGE ( Buffer_Pool Default ) ';
WS_ACT_BUILD,FUNCTION,876, End If;
WS_ACT_BUILD,FUNCTION,877,
WS_ACT_BUILD,FUNCTION,878,
WS_ACT_BUILD,FUNCTION,879, v_step := 2800;
WS_ACT_BUILD,FUNCTION,880,
WS_ACT_BUILD,FUNCTION,881, Execute Immediate v_stmt;
WS_ACT_BUILD,FUNCTION,882, End If;
WS_ACT_BUILD,FUNCTION,883,
WS_ACT_BUILD,FUNCTION,884, --=====================================================
WS_ACT_BUILD,FUNCTION,885, -- Put detail message
WS_ACT_BUILD,FUNCTION,886, --=====================================================
WS_ACT_BUILD,FUNCTION,887, v_step := 2900;
WS_ACT_BUILD,FUNCTION,888,
WS_ACT_BUILD,FUNCTION,889, v_MsgText := 'Index ' || v_index_with_schema || ' rebuilt';
WS_ACT_BUILD,FUNCTION,890, IF v_stats_include = 'Y' THEN
WS_ACT_BUILD,FUNCTION,891, v_MsgText := v_MsgText || ' including stats';
WS_ACT_BUILD,FUNCTION,892, END IF;
WS_ACT_BUILD,FUNCTION,893,
WS_ACT_BUILD,FUNCTION,894, v_msg_result := WsWrkError(
WS_ACT_BUILD,FUNCTION,895, 'I'
WS_ACT_BUILD,FUNCTION,896, , p_job_name
WS_ACT_BUILD,FUNCTION,897, , p_task_name
WS_ACT_BUILD,FUNCTION,898, , p_sequence
WS_ACT_BUILD,FUNCTION,899, , v_MsgText
WS_ACT_BUILD,FUNCTION,900, , NULL
WS_ACT_BUILD,FUNCTION,901, , NULL
WS_ACT_BUILD,FUNCTION,902, , p_task_id
WS_ACT_BUILD,FUNCTION,903, , p_job_id
WS_ACT_BUILD,FUNCTION,904, , NULL);
WS_ACT_BUILD,FUNCTION,905,
WS_ACT_BUILD,FUNCTION,906, IF p_action = v_ws_act_build THEN
WS_ACT_BUILD,FUNCTION,907, v_MsgText := 'Index rebuilt '||v_index_with_schema;
WS_ACT_BUILD,FUNCTION,908, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD,FUNCTION,909, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_BUILD,FUNCTION,910, END IF;
WS_ACT_BUILD,FUNCTION,911,
WS_ACT_BUILD,FUNCTION,912, v_count := v_count + 1;
WS_ACT_BUILD,FUNCTION,913, End If;
WS_ACT_BUILD,FUNCTION,914, END LOOP;
WS_ACT_BUILD,FUNCTION,915, End If;
WS_ACT_BUILD,FUNCTION,916,
WS_ACT_BUILD,FUNCTION,917, v_step := 3000;
WS_ACT_BUILD,FUNCTION,918, -- tell them how many indexes we rebuilt
WS_ACT_BUILD,FUNCTION,919, If v_count = 0 Then
WS_ACT_BUILD,FUNCTION,920, p_return_msg := 'No indexes rebuilt';
WS_ACT_BUILD,FUNCTION,921, ElsIf v_count = 1 Then
WS_ACT_BUILD,FUNCTION,922, p_return_msg := v_count||' index rebuilt';
WS_ACT_BUILD,FUNCTION,923, Else
WS_ACT_BUILD,FUNCTION,924, p_return_msg := v_count||' indexes rebuilt';
WS_ACT_BUILD,FUNCTION,925, End If;
WS_ACT_BUILD,FUNCTION,926, p_status_code := 1;
WS_ACT_BUILD,FUNCTION,927,
WS_ACT_BUILD,FUNCTION,928, COMMIT;
WS_ACT_BUILD,FUNCTION,929, RETURN v_result;
WS_ACT_BUILD,FUNCTION,930,
WS_ACT_BUILD,FUNCTION,931,EXCEPTION
WS_ACT_BUILD,FUNCTION,932, WHEN OTHERS THEN
WS_ACT_BUILD,FUNCTION,933, v_MsgText := 'Unhandled Exception in ws_act_build '|| v_ws_pro_version ||
WS_ACT_BUILD,FUNCTION,934, ' Index '||v_index_name||' Step ' ||v_step;
WS_ACT_BUILD,FUNCTION,935, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD,FUNCTION,936, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD,FUNCTION,937, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_BUILD,FUNCTION,938, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD,FUNCTION,939, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD,FUNCTION,940, p_return_msg := 'Unhandled Exception in ws_act_build (index build) '|| v_ws_pro_version ||' '||
WS_ACT_BUILD,FUNCTION,941, v_index_name||' step ' ||v_step;
WS_ACT_BUILD,FUNCTION,942, p_status_code := -3;
WS_ACT_BUILD,FUNCTION,943, RETURN -3;
WS_ACT_BUILD,FUNCTION,944,
WS_ACT_BUILD,FUNCTION,945,END ws_act_build;
WS_ACT_BUILD,FUNCTION,946,
WS_ACT_BUILD_ALL,FUNCTION,1,function ws_act_build_all
WS_ACT_BUILD_ALL,FUNCTION,2, (
WS_ACT_BUILD_ALL,FUNCTION,3, p_sequence IN number,
WS_ACT_BUILD_ALL,FUNCTION,4, p_obj_type IN number,
WS_ACT_BUILD_ALL,FUNCTION,5, p_action IN number,
WS_ACT_BUILD_ALL,FUNCTION,6, p_obj_key IN number,
WS_ACT_BUILD_ALL,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_BUILD_ALL,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_BUILD_ALL,FUNCTION,9, p_job_id IN number,
WS_ACT_BUILD_ALL,FUNCTION,10, p_task_id IN number,
WS_ACT_BUILD_ALL,FUNCTION,11, p_parameter IN varchar2,
WS_ACT_BUILD_ALL,FUNCTION,12, p_return_msg OUT varchar2,
WS_ACT_BUILD_ALL,FUNCTION,13, p_status_code OUT number
WS_ACT_BUILD_ALL,FUNCTION,14, )
WS_ACT_BUILD_ALL,FUNCTION,15, Return integer
WS_ACT_BUILD_ALL,FUNCTION,16, AUTHID CURRENT_USER
WS_ACT_BUILD_ALL,FUNCTION,17, IS
WS_ACT_BUILD_ALL,FUNCTION,18,
WS_ACT_BUILD_ALL,FUNCTION,19, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_BUILD_ALL,FUNCTION,20,
WS_ACT_BUILD_ALL,FUNCTION,21, -- =============================================================================
WS_ACT_BUILD_ALL,FUNCTION,22, -- DBMS Name : Oracle
WS_ACT_BUILD_ALL,FUNCTION,23, -- Script Name : ws_act_build_all
WS_ACT_BUILD_ALL,FUNCTION,24, -- Description : Build all indexes associated with an object
WS_ACT_BUILD_ALL,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_BUILD_ALL,FUNCTION,26, -- =============================================================================
WS_ACT_BUILD_ALL,FUNCTION,27,
WS_ACT_BUILD_ALL,FUNCTION,28, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,29, -- Constants
WS_ACT_BUILD_ALL,FUNCTION,30, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,31, v_ws_pro_version constant varchar(15) := '(8.4.1.0)';
WS_ACT_BUILD_ALL,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_BUILD_ALL,FUNCTION,33, v_ws_obj_directive constant number := 2;
WS_ACT_BUILD_ALL,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_BUILD_ALL,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_BUILD_ALL,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_BUILD_ALL,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_BUILD_ALL,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_BUILD_ALL,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_BUILD_ALL,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_BUILD_ALL,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_BUILD_ALL,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_BUILD_ALL,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_BUILD_ALL,FUNCTION,44,
WS_ACT_BUILD_ALL,FUNCTION,45, v_ws_act_drop constant number := 0;
WS_ACT_BUILD_ALL,FUNCTION,46, v_ws_act_create constant number := 1;
WS_ACT_BUILD_ALL,FUNCTION,47, v_ws_act_compile constant number := 2;
WS_ACT_BUILD_ALL,FUNCTION,48, v_ws_act_drop_all constant number := 3;
WS_ACT_BUILD_ALL,FUNCTION,49, v_ws_act_pre_drop constant number := 4;
WS_ACT_BUILD_ALL,FUNCTION,50, v_ws_act_load constant number := 5;
WS_ACT_BUILD_ALL,FUNCTION,51, v_ws_act_update constant number := 6;
WS_ACT_BUILD_ALL,FUNCTION,52, v_ws_act_execute constant number := 7;
WS_ACT_BUILD_ALL,FUNCTION,53, v_ws_act_process constant number := 8;
WS_ACT_BUILD_ALL,FUNCTION,54, v_ws_act_build constant number := 9;
WS_ACT_BUILD_ALL,FUNCTION,55, v_ws_act_build_all constant number := 10;
WS_ACT_BUILD_ALL,FUNCTION,56, v_ws_act_analyze constant number := 11;
WS_ACT_BUILD_ALL,FUNCTION,57, v_ws_act_quick_analyze constant number := 12;
WS_ACT_BUILD_ALL,FUNCTION,58, v_ws_act_statistics constant number := 13;
WS_ACT_BUILD_ALL,FUNCTION,59, v_ws_act_quick_statistics constant number := 14;
WS_ACT_BUILD_ALL,FUNCTION,60,
WS_ACT_BUILD_ALL,FUNCTION,61, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,62, -- Variables
WS_ACT_BUILD_ALL,FUNCTION,63, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,64, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_BUILD_ALL,FUNCTION,65, v_step integer := 0; -- return code
WS_ACT_BUILD_ALL,FUNCTION,66, v_result integer := 0; -- return code
WS_ACT_BUILD_ALL,FUNCTION,67, v_stmt varchar2(32000);
WS_ACT_BUILD_ALL,FUNCTION,68, v_count integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,69, v_columns varchar2(32000);
WS_ACT_BUILD_ALL,FUNCTION,70, v_col_number integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,71, v_index_key integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,72, v_part_count integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,73, v_row integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,74, v_pctfree integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,75, v_pctinc integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,76, v_no_tablespace integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,77, v_primary_key integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,78, v_epos integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,79, v_spos integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,80, v_fix varchar2(32000);
WS_ACT_BUILD_ALL,FUNCTION,81, v_user_tablespace varchar2(32000);
WS_ACT_BUILD_ALL,FUNCTION,82, v_schema_flag integer := 0;
WS_ACT_BUILD_ALL,FUNCTION,83, v_satellite_ind varchar2(1);
WS_ACT_BUILD_ALL,FUNCTION,84, v_dss_schema varchar2(64);
WS_ACT_BUILD_ALL,FUNCTION,85, v_stats_include varchar2(1);
WS_ACT_BUILD_ALL,FUNCTION,86, v_index_done integer; -- used to flag if action successful
WS_ACT_BUILD_ALL,FUNCTION,87, v_msg_result integer := 0; -- return code
WS_ACT_BUILD_ALL,FUNCTION,88, v_table_schema varchar2(64);
WS_ACT_BUILD_ALL,FUNCTION,89, v_table_name varchar2(64);
WS_ACT_BUILD_ALL,FUNCTION,90, v_table_with_schema varchar2(150);
WS_ACT_BUILD_ALL,FUNCTION,91, v_index_name varchar2(64);
WS_ACT_BUILD_ALL,FUNCTION,92, v_index_with_schema varchar2(150);
WS_ACT_BUILD_ALL,FUNCTION,93,
WS_ACT_BUILD_ALL,FUNCTION,94, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,95, -- Cursor for all indexes
WS_ACT_BUILD_ALL,FUNCTION,96, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,97, Cursor c_Index is
WS_ACT_BUILD_ALL,FUNCTION,98, Select * from ws_index_header
WS_ACT_BUILD_ALL,FUNCTION,99, Where ih_obj_key = p_obj_key
WS_ACT_BUILD_ALL,FUNCTION,100, And ih_active = 'Y';
WS_ACT_BUILD_ALL,FUNCTION,101,
WS_ACT_BUILD_ALL,FUNCTION,102, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,103, -- Cursor for index columns
WS_ACT_BUILD_ALL,FUNCTION,104, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,105, Cursor c_IndCol is
WS_ACT_BUILD_ALL,FUNCTION,106, Select ic_column, ic_foreign_table, ic_foreign_column
WS_ACT_BUILD_ALL,FUNCTION,107, from ws_index_col
WS_ACT_BUILD_ALL,FUNCTION,108, Where ic_index_key = v_index_key
WS_ACT_BUILD_ALL,FUNCTION,109, Order by ic_column_no;
WS_ACT_BUILD_ALL,FUNCTION,110,
WS_ACT_BUILD_ALL,FUNCTION,111, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,112, -- Cursor for partitions when schema must be used
WS_ACT_BUILD_ALL,FUNCTION,113, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,114, Cursor c_AllPartitionEx is
WS_ACT_BUILD_ALL,FUNCTION,115, Select partition_name
WS_ACT_BUILD_ALL,FUNCTION,116, from all_tab_partitions
WS_ACT_BUILD_ALL,FUNCTION,117, Where table_name = upper(v_table_name)
WS_ACT_BUILD_ALL,FUNCTION,118, And table_owner = upper(v_table_schema)
WS_ACT_BUILD_ALL,FUNCTION,119, Order by partition_position;
WS_ACT_BUILD_ALL,FUNCTION,120,
WS_ACT_BUILD_ALL,FUNCTION,121,BEGIN
WS_ACT_BUILD_ALL,FUNCTION,122,
WS_ACT_BUILD_ALL,FUNCTION,123, v_step := 100;
WS_ACT_BUILD_ALL,FUNCTION,124, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,125, -- See if we have the flag set for including schema
WS_ACT_BUILD_ALL,FUNCTION,126, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,127,
WS_ACT_BUILD_ALL,FUNCTION,128, v_satellite_ind := '';
WS_ACT_BUILD_ALL,FUNCTION,129, v_table_schema := '';
WS_ACT_BUILD_ALL,FUNCTION,130,
WS_ACT_BUILD_ALL,FUNCTION,131, -- needs to look up the schema from ws_dbc_target
WS_ACT_BUILD_ALL,FUNCTION,132, BEGIN
WS_ACT_BUILD_ALL,FUNCTION,133, v_step := 120;
WS_ACT_BUILD_ALL,FUNCTION,134, v_index_name := '';
WS_ACT_BUILD_ALL,FUNCTION,135, SELECT NVL(dt_schema, '')
WS_ACT_BUILD_ALL,FUNCTION,136, ,oo_name
WS_ACT_BUILD_ALL,FUNCTION,137, INTO v_table_schema
WS_ACT_BUILD_ALL,FUNCTION,138, ,v_table_name
WS_ACT_BUILD_ALL,FUNCTION,139, FROM ws_obj_object
WS_ACT_BUILD_ALL,FUNCTION,140, LEFT JOIN ws_dbc_target
WS_ACT_BUILD_ALL,FUNCTION,141, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_BUILD_ALL,FUNCTION,142, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_BUILD_ALL,FUNCTION,143, ;
WS_ACT_BUILD_ALL,FUNCTION,144,
WS_ACT_BUILD_ALL,FUNCTION,145, v_table_schema := TRIM(v_table_schema);
WS_ACT_BUILD_ALL,FUNCTION,146,
WS_ACT_BUILD_ALL,FUNCTION,147, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_BUILD_ALL,FUNCTION,148, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_BUILD_ALL,FUNCTION,149, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD_ALL,FUNCTION,150, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_BUILD_ALL,FUNCTION,151, p_return_msg := 'Object could not be found';
WS_ACT_BUILD_ALL,FUNCTION,152, p_status_code := -2;
WS_ACT_BUILD_ALL,FUNCTION,153, RETURN -2;
WS_ACT_BUILD_ALL,FUNCTION,154, END;
WS_ACT_BUILD_ALL,FUNCTION,155,
WS_ACT_BUILD_ALL,FUNCTION,156, v_step := 130;
WS_ACT_BUILD_ALL,FUNCTION,157, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_BUILD_ALL,FUNCTION,158, -- meta_satellite_ind = A
WS_ACT_BUILD_ALL,FUNCTION,159, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_BUILD_ALL,FUNCTION,160,
WS_ACT_BUILD_ALL,FUNCTION,161, SELECT meta_satellite_ind,
WS_ACT_BUILD_ALL,FUNCTION,162, TRIM(meta_dss_schema)
WS_ACT_BUILD_ALL,FUNCTION,163, INTO v_satellite_ind,
WS_ACT_BUILD_ALL,FUNCTION,164, v_dss_schema
WS_ACT_BUILD_ALL,FUNCTION,165, FROM ws_meta
WS_ACT_BUILD_ALL,FUNCTION,166, WHERE rownum = 1;
WS_ACT_BUILD_ALL,FUNCTION,167,
WS_ACT_BUILD_ALL,FUNCTION,168, IF v_satellite_ind = 'A' THEN
WS_ACT_BUILD_ALL,FUNCTION,169, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_BUILD_ALL,FUNCTION,170, v_schema_flag := 1;
WS_ACT_BUILD_ALL,FUNCTION,171, v_table_schema := v_dss_schema;
WS_ACT_BUILD_ALL,FUNCTION,172, END IF;
WS_ACT_BUILD_ALL,FUNCTION,173, END IF;
WS_ACT_BUILD_ALL,FUNCTION,174,
WS_ACT_BUILD_ALL,FUNCTION,175, v_step := 140;
WS_ACT_BUILD_ALL,FUNCTION,176, -- If still not set then defaults to the current user
WS_ACT_BUILD_ALL,FUNCTION,177, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_BUILD_ALL,FUNCTION,178, SELECT user
WS_ACT_BUILD_ALL,FUNCTION,179, INTO v_table_schema
WS_ACT_BUILD_ALL,FUNCTION,180, FROM dual;
WS_ACT_BUILD_ALL,FUNCTION,181, END IF;
WS_ACT_BUILD_ALL,FUNCTION,182,
WS_ACT_BUILD_ALL,FUNCTION,183, End If;
WS_ACT_BUILD_ALL,FUNCTION,184,
WS_ACT_BUILD_ALL,FUNCTION,185, v_step := 150;
WS_ACT_BUILD_ALL,FUNCTION,186,
WS_ACT_BUILD_ALL,FUNCTION,187, v_table_schema := TRIM(v_table_schema);
WS_ACT_BUILD_ALL,FUNCTION,188,
WS_ACT_BUILD_ALL,FUNCTION,189, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_BUILD_ALL,FUNCTION,190, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_BUILD_ALL,FUNCTION,191, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_BUILD_ALL,FUNCTION,192, END IF;
WS_ACT_BUILD_ALL,FUNCTION,193,
WS_ACT_BUILD_ALL,FUNCTION,194, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_BUILD_ALL,FUNCTION,195,
WS_ACT_BUILD_ALL,FUNCTION,196, v_step := 200;
WS_ACT_BUILD_ALL,FUNCTION,197, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,198, -- See if a specific tablespace was specified and if
WS_ACT_BUILD_ALL,FUNCTION,199, -- so use that tablespace
WS_ACT_BUILD_ALL,FUNCTION,200, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,201, v_user_tablespace := NULL;
WS_ACT_BUILD_ALL,FUNCTION,202, If p_parameter is not null Then
WS_ACT_BUILD_ALL,FUNCTION,203, v_spos := INSTR(UPPER(p_parameter),'TABLESPACE=');
WS_ACT_BUILD_ALL,FUNCTION,204, IF v_spos > 0 THEN
WS_ACT_BUILD_ALL,FUNCTION,205, v_epos := INSTR(p_parameter,';',v_spos);
WS_ACT_BUILD_ALL,FUNCTION,206, IF v_epos > 0 THEN
WS_ACT_BUILD_ALL,FUNCTION,207, v_user_tablespace := SUBSTR(p_parameter,v_spos+11,v_epos-(v_spos+11));
WS_ACT_BUILD_ALL,FUNCTION,208, ELSE
WS_ACT_BUILD_ALL,FUNCTION,209, v_user_tablespace := SUBSTR(p_parameter,v_spos+11);
WS_ACT_BUILD_ALL,FUNCTION,210, END IF;
WS_ACT_BUILD_ALL,FUNCTION,211, END IF;
WS_ACT_BUILD_ALL,FUNCTION,212, End If;
WS_ACT_BUILD_ALL,FUNCTION,213,
WS_ACT_BUILD_ALL,FUNCTION,214,
WS_ACT_BUILD_ALL,FUNCTION,215, v_step := 300;
WS_ACT_BUILD_ALL,FUNCTION,216, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,217, -- Loop through all the indexes looking for what to build
WS_ACT_BUILD_ALL,FUNCTION,218, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,219, FOR v_IndRec in c_Index LOOP
WS_ACT_BUILD_ALL,FUNCTION,220, v_step := 400;
WS_ACT_BUILD_ALL,FUNCTION,221, v_no_tablespace := 0;
WS_ACT_BUILD_ALL,FUNCTION,222, v_primary_key := 0;
WS_ACT_BUILD_ALL,FUNCTION,223,
WS_ACT_BUILD_ALL,FUNCTION,224, v_index_name := v_IndRec.ih_index_name;
WS_ACT_BUILD_ALL,FUNCTION,225,
WS_ACT_BUILD_ALL,FUNCTION,226, v_index_with_schema := TRIM(v_table_schema);
WS_ACT_BUILD_ALL,FUNCTION,227, IF TRIM(v_index_with_schema) IS NOT NULL THEN
WS_ACT_BUILD_ALL,FUNCTION,228, v_index_with_schema := v_index_with_schema ||'.';
WS_ACT_BUILD_ALL,FUNCTION,229, END IF;
WS_ACT_BUILD_ALL,FUNCTION,230,
WS_ACT_BUILD_ALL,FUNCTION,231, v_index_with_schema := v_index_with_schema || v_index_name;
WS_ACT_BUILD_ALL,FUNCTION,232,
WS_ACT_BUILD_ALL,FUNCTION,233, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,234, -- First drop the index in case that step was not run
WS_ACT_BUILD_ALL,FUNCTION,235, -- Execute the drop
WS_ACT_BUILD_ALL,FUNCTION,236, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,237, v_step := 500;
WS_ACT_BUILD_ALL,FUNCTION,238,
WS_ACT_BUILD_ALL,FUNCTION,239, If v_IndRec.ih_partition_type is NULL Then
WS_ACT_BUILD_ALL,FUNCTION,240, v_part_count := 0;
WS_ACT_BUILD_ALL,FUNCTION,241, Else
WS_ACT_BUILD_ALL,FUNCTION,242, Select count(1) into v_part_count
WS_ACT_BUILD_ALL,FUNCTION,243, from all_tab_partitions
WS_ACT_BUILD_ALL,FUNCTION,244, Where table_owner = upper(v_table_schema)
WS_ACT_BUILD_ALL,FUNCTION,245, And table_name = upper(v_table_name);
WS_ACT_BUILD_ALL,FUNCTION,246, End If;
WS_ACT_BUILD_ALL,FUNCTION,247,
WS_ACT_BUILD_ALL,FUNCTION,248, v_step := 600;
WS_ACT_BUILD_ALL,FUNCTION,249, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD_ALL,FUNCTION,250, And v_part_count = 0 Then
WS_ACT_BUILD_ALL,FUNCTION,251, v_stmt := 'alter table ' || v_table_with_schema
WS_ACT_BUILD_ALL,FUNCTION,252, || ' drop constraint '||v_index_name;
WS_ACT_BUILD_ALL,FUNCTION,253, Else
WS_ACT_BUILD_ALL,FUNCTION,254, v_stmt := 'drop index ' || v_index_with_schema;
WS_ACT_BUILD_ALL,FUNCTION,255, End If;
WS_ACT_BUILD_ALL,FUNCTION,256, v_step := 700;
WS_ACT_BUILD_ALL,FUNCTION,257, BEGIN
WS_ACT_BUILD_ALL,FUNCTION,258, v_index_done := 1;
WS_ACT_BUILD_ALL,FUNCTION,259, Execute Immediate v_stmt;
WS_ACT_BUILD_ALL,FUNCTION,260, EXCEPTION
WS_ACT_BUILD_ALL,FUNCTION,261, WHEN OTHERS THEN
WS_ACT_BUILD_ALL,FUNCTION,262, v_index_done := 0;
WS_ACT_BUILD_ALL,FUNCTION,263, If SQLCODE <> -1418 And SQLCODE <> -2443 Then
WS_ACT_BUILD_ALL,FUNCTION,264, v_MsgText := 'Unhandled Exception in ws_act_build_all '||v_ws_pro_version ||
WS_ACT_BUILD_ALL,FUNCTION,265, ' Step ' ||v_step;
WS_ACT_BUILD_ALL,FUNCTION,266, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD_ALL,FUNCTION,267, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD_ALL,FUNCTION,268, p_return_msg := 'Unhandled Exception in ws_act_build_all '||v_ws_pro_version || ' step ' ||v_step;
WS_ACT_BUILD_ALL,FUNCTION,269, p_status_code := -3;
WS_ACT_BUILD_ALL,FUNCTION,270, v_result := -3;
WS_ACT_BUILD_ALL,FUNCTION,271, End If;
WS_ACT_BUILD_ALL,FUNCTION,272, END;
WS_ACT_BUILD_ALL,FUNCTION,273, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,274, -- Put detail message
WS_ACT_BUILD_ALL,FUNCTION,275, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,276, v_step := 800;
WS_ACT_BUILD_ALL,FUNCTION,277, IF v_index_done = 1 THEN
WS_ACT_BUILD_ALL,FUNCTION,278, v_step := 900;
WS_ACT_BUILD_ALL,FUNCTION,279, v_MsgText := 'Index ' || v_index_with_schema || ' dropped';
WS_ACT_BUILD_ALL,FUNCTION,280,
WS_ACT_BUILD_ALL,FUNCTION,281, v_msg_result := WsWrkError(
WS_ACT_BUILD_ALL,FUNCTION,282, 'I'
WS_ACT_BUILD_ALL,FUNCTION,283, , p_job_name
WS_ACT_BUILD_ALL,FUNCTION,284, , p_task_name
WS_ACT_BUILD_ALL,FUNCTION,285, , p_sequence
WS_ACT_BUILD_ALL,FUNCTION,286, , v_MsgText
WS_ACT_BUILD_ALL,FUNCTION,287, , NULL
WS_ACT_BUILD_ALL,FUNCTION,288, , NULL
WS_ACT_BUILD_ALL,FUNCTION,289, , p_task_id
WS_ACT_BUILD_ALL,FUNCTION,290, , p_job_id
WS_ACT_BUILD_ALL,FUNCTION,291, , NULL);
WS_ACT_BUILD_ALL,FUNCTION,292, END IF;
WS_ACT_BUILD_ALL,FUNCTION,293,
WS_ACT_BUILD_ALL,FUNCTION,294, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,295, -- Create the rebuild command
WS_ACT_BUILD_ALL,FUNCTION,296, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,297, v_step := 1000;
WS_ACT_BUILD_ALL,FUNCTION,298, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD_ALL,FUNCTION,299, And v_part_count = 0 Then
WS_ACT_BUILD_ALL,FUNCTION,300, v_stmt := 'Alter Table ' ||v_table_with_schema
WS_ACT_BUILD_ALL,FUNCTION,301, ||' Add Constraint ' || v_index_name
WS_ACT_BUILD_ALL,FUNCTION,302, ||' Primary Key (';
WS_ACT_BUILD_ALL,FUNCTION,303, v_primary_key := 1;
WS_ACT_BUILD_ALL,FUNCTION,304, Else
WS_ACT_BUILD_ALL,FUNCTION,305, v_stmt := 'Create ';
WS_ACT_BUILD_ALL,FUNCTION,306, If v_IndRec.ih_unique = 'Y' then
WS_ACT_BUILD_ALL,FUNCTION,307, v_stmt := v_stmt||'Unique ';
WS_ACT_BUILD_ALL,FUNCTION,308, End If;
WS_ACT_BUILD_ALL,FUNCTION,309, If v_IndRec.ih_index_type = 'B' Then
WS_ACT_BUILD_ALL,FUNCTION,310, v_stmt := v_stmt||'Bitmap ';
WS_ACT_BUILD_ALL,FUNCTION,311, End If;
WS_ACT_BUILD_ALL,FUNCTION,312, v_stmt := v_stmt||'Index ' || v_index_with_schema
WS_ACT_BUILD_ALL,FUNCTION,313, ||' on ' || v_table_with_schema
WS_ACT_BUILD_ALL,FUNCTION,314, ||'(';
WS_ACT_BUILD_ALL,FUNCTION,315, End If;
WS_ACT_BUILD_ALL,FUNCTION,316,
WS_ACT_BUILD_ALL,FUNCTION,317, -- Now add in all the columns
WS_ACT_BUILD_ALL,FUNCTION,318, v_index_key := v_IndRec.ih_index_key;
WS_ACT_BUILD_ALL,FUNCTION,319, v_columns := '';
WS_ACT_BUILD_ALL,FUNCTION,320, v_col_number := 0;
WS_ACT_BUILD_ALL,FUNCTION,321, FOR v_ColRec in c_IndCol LOOP
WS_ACT_BUILD_ALL,FUNCTION,322, v_col_number := v_col_number + 1;
WS_ACT_BUILD_ALL,FUNCTION,323, If v_col_number > 1 Then
WS_ACT_BUILD_ALL,FUNCTION,324, v_columns := v_columns||',';
WS_ACT_BUILD_ALL,FUNCTION,325, End If;
WS_ACT_BUILD_ALL,FUNCTION,326, v_columns := v_columns||v_ColRec.ic_column;
WS_ACT_BUILD_ALL,FUNCTION,327, END LOOP;
WS_ACT_BUILD_ALL,FUNCTION,328,
WS_ACT_BUILD_ALL,FUNCTION,329, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,330, -- If no columns See if this is a function index
WS_ACT_BUILD_ALL,FUNCTION,331, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,332, If v_columns = '' OR v_columns IS NULL THEN
WS_ACT_BUILD_ALL,FUNCTION,333, v_epos := Instr(v_IndRec.ih_index_options,'function_index=');
WS_ACT_BUILD_ALL,FUNCTION,334, If v_epos > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,335, v_spos := to_number(substr(v_IndRec.ih_index_options,v_epos+15,4));
WS_ACT_BUILD_ALL,FUNCTION,336, If v_spos > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,337, v_columns := substr(v_IndRec.ih_index_options,v_epos+20,v_spos);
WS_ACT_BUILD_ALL,FUNCTION,338, End If;
WS_ACT_BUILD_ALL,FUNCTION,339, End If;
WS_ACT_BUILD_ALL,FUNCTION,340, End if;
WS_ACT_BUILD_ALL,FUNCTION,341,
WS_ACT_BUILD_ALL,FUNCTION,342,
WS_ACT_BUILD_ALL,FUNCTION,343, v_stmt := v_stmt||v_columns||')';
WS_ACT_BUILD_ALL,FUNCTION,344,
WS_ACT_BUILD_ALL,FUNCTION,345, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_BUILD_ALL,FUNCTION,346, And v_part_count = 0 Then
WS_ACT_BUILD_ALL,FUNCTION,347, If v_user_tablespace is not null
WS_ACT_BUILD_ALL,FUNCTION,348, Or v_IndRec.ih_tablespace is not null Then
WS_ACT_BUILD_ALL,FUNCTION,349, v_stmt := v_stmt||' Using Index ';
WS_ACT_BUILD_ALL,FUNCTION,350, Else
WS_ACT_BUILD_ALL,FUNCTION,351, v_no_tablespace := 1;
WS_ACT_BUILD_ALL,FUNCTION,352, End If;
WS_ACT_BUILD_ALL,FUNCTION,353,
WS_ACT_BUILD_ALL,FUNCTION,354, Else
WS_ACT_BUILD_ALL,FUNCTION,355, v_stmt := v_stmt||' NOLOGGING';
WS_ACT_BUILD_ALL,FUNCTION,356,
WS_ACT_BUILD_ALL,FUNCTION,357, If nvl(v_IndRec.ih_parallel,0) > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,358, If nvl(v_IndRec.ih_parallel,0) > 1 Then
WS_ACT_BUILD_ALL,FUNCTION,359, v_stmt := v_stmt||' Parallel '|| v_IndRec.ih_parallel;
WS_ACT_BUILD_ALL,FUNCTION,360, Else
WS_ACT_BUILD_ALL,FUNCTION,361, v_stmt := v_stmt||' Parallel ';
WS_ACT_BUILD_ALL,FUNCTION,362, End If;
WS_ACT_BUILD_ALL,FUNCTION,363, End If;
WS_ACT_BUILD_ALL,FUNCTION,364, End If;
WS_ACT_BUILD_ALL,FUNCTION,365,
WS_ACT_BUILD_ALL,FUNCTION,366, --RED_3620 test for invisible
WS_ACT_BUILD_ALL,FUNCTION,367, v_spos := Instr(v_IndRec.ih_index_options,'invisible=TRUE;');
WS_ACT_BUILD_ALL,FUNCTION,368, If v_spos > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,369, v_stmt := v_stmt||' INVISIBLE ';
WS_ACT_BUILD_ALL,FUNCTION,370, End If;
WS_ACT_BUILD_ALL,FUNCTION,371,
WS_ACT_BUILD_ALL,FUNCTION,372, -- If we are a primary key and we do not have a tablespace
WS_ACT_BUILD_ALL,FUNCTION,373, -- then we cannot add any of the following
WS_ACT_BUILD_ALL,FUNCTION,374, If v_primary_key = 1 And v_no_tablespace = 1 Then
WS_ACT_BUILD_ALL,FUNCTION,375, NULL;
WS_ACT_BUILD_ALL,FUNCTION,376, Else
WS_ACT_BUILD_ALL,FUNCTION,377, If v_user_tablespace is not null Then
WS_ACT_BUILD_ALL,FUNCTION,378, v_stmt := v_stmt||' Tablespace '||v_user_tablespace;
WS_ACT_BUILD_ALL,FUNCTION,379, ElsIf v_IndRec.ih_tablespace is not null Then
WS_ACT_BUILD_ALL,FUNCTION,380, v_stmt := v_stmt||' Tablespace '||v_IndRec.ih_tablespace;
WS_ACT_BUILD_ALL,FUNCTION,381, End If;
WS_ACT_BUILD_ALL,FUNCTION,382,
WS_ACT_BUILD_ALL,FUNCTION,383, -- see if this is a compute statistics for this index
WS_ACT_BUILD_ALL,FUNCTION,384, v_stats_include := 'N';
WS_ACT_BUILD_ALL,FUNCTION,385,
WS_ACT_BUILD_ALL,FUNCTION,386, v_spos := Instr(v_IndRec.ih_index_options,'compute_stats;');
WS_ACT_BUILD_ALL,FUNCTION,387, If v_spos > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,388, v_stmt := v_stmt||' Compute Statistics ';
WS_ACT_BUILD_ALL,FUNCTION,389, v_stats_include := 'Y';
WS_ACT_BUILD_ALL,FUNCTION,390, End If;
WS_ACT_BUILD_ALL,FUNCTION,391,
WS_ACT_BUILD_ALL,FUNCTION,392, -- see if this is a compressed index
WS_ACT_BUILD_ALL,FUNCTION,393, v_spos := Instr(v_IndRec.ih_index_options,'compressed=');
WS_ACT_BUILD_ALL,FUNCTION,394, If v_spos > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,395, v_fix := substr(v_IndRec.ih_index_options,v_spos+11);
WS_ACT_BUILD_ALL,FUNCTION,396, If substr(v_fix,1,1) = ';' Then
WS_ACT_BUILD_ALL,FUNCTION,397, v_stmt := v_stmt||' Compress ';
WS_ACT_BUILD_ALL,FUNCTION,398, ElsIf substr(v_fix,1,3) <> '-1;' Then
WS_ACT_BUILD_ALL,FUNCTION,399, v_spos := Instr(v_fix,';');
WS_ACT_BUILD_ALL,FUNCTION,400, v_stmt := v_stmt||' Compress '||substr(v_fix,1,v_spos-1);
WS_ACT_BUILD_ALL,FUNCTION,401, End If;
WS_ACT_BUILD_ALL,FUNCTION,402, End If;
WS_ACT_BUILD_ALL,FUNCTION,403,
WS_ACT_BUILD_ALL,FUNCTION,404,
WS_ACT_BUILD_ALL,FUNCTION,405, If NVL(v_IndRec.ih_pct_increase,0) > 1000 Then
WS_ACT_BUILD_ALL,FUNCTION,406, v_pctfree := TRUNC(NVL(v_IndRec.ih_pct_increase,0)/1000,0);
WS_ACT_BUILD_ALL,FUNCTION,407, v_stmt := v_stmt||' PctFree '||v_pctfree;
WS_ACT_BUILD_ALL,FUNCTION,408, Else
WS_ACT_BUILD_ALL,FUNCTION,409, v_stmt := v_stmt||' PctFree '||NVL(v_IndRec.ih_pct_free,0);
WS_ACT_BUILD_ALL,FUNCTION,410, End If;
WS_ACT_BUILD_ALL,FUNCTION,411,
WS_ACT_BUILD_ALL,FUNCTION,412, v_stmt := v_stmt||' Storage (';
WS_ACT_BUILD_ALL,FUNCTION,413, If v_IndRec.ih_initial_kb+v_IndRec.ih_next_kb <> 0 Then
WS_ACT_BUILD_ALL,FUNCTION,414, v_stmt := v_stmt||' Initial '||v_IndRec.ih_initial_kb||'K';
WS_ACT_BUILD_ALL,FUNCTION,415, v_stmt := v_stmt||' Next '||v_IndRec.ih_next_kb||'K';
WS_ACT_BUILD_ALL,FUNCTION,416, End If;
WS_ACT_BUILD_ALL,FUNCTION,417, If v_IndRec.ih_min_extents+v_IndRec.ih_max_extents <> 0 Then
WS_ACT_BUILD_ALL,FUNCTION,418, v_stmt := v_stmt||' Minextents '||v_IndRec.ih_min_extents;
WS_ACT_BUILD_ALL,FUNCTION,419, v_stmt := v_stmt||' Maxextents '||v_IndRec.ih_max_extents;
WS_ACT_BUILD_ALL,FUNCTION,420, End If;
WS_ACT_BUILD_ALL,FUNCTION,421,
WS_ACT_BUILD_ALL,FUNCTION,422, If NVL(v_IndRec.ih_pct_increase,0) > 1000 Then
WS_ACT_BUILD_ALL,FUNCTION,423, v_pctinc := NVL(v_IndRec.ih_pct_increase,0);
WS_ACT_BUILD_ALL,FUNCTION,424, v_pctinc := v_pctinc - ( TRUNC(v_pctinc/1000,0) *1000);
WS_ACT_BUILD_ALL,FUNCTION,425, Else
WS_ACT_BUILD_ALL,FUNCTION,426, v_pctinc := NVL(v_IndRec.ih_pct_increase,0);
WS_ACT_BUILD_ALL,FUNCTION,427, End If;
WS_ACT_BUILD_ALL,FUNCTION,428, v_stmt := v_stmt||' Pctincrease '||v_pctinc;
WS_ACT_BUILD_ALL,FUNCTION,429,
WS_ACT_BUILD_ALL,FUNCTION,430, If upper(v_IndRec.ih_buffer_pool_ind) = 'K' Then
WS_ACT_BUILD_ALL,FUNCTION,431, v_stmt:= v_stmt||' Buffer_Pool Keep';
WS_ACT_BUILD_ALL,FUNCTION,432, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'R' Then
WS_ACT_BUILD_ALL,FUNCTION,433, v_stmt:= v_stmt||' Buffer_Pool Recycle';
WS_ACT_BUILD_ALL,FUNCTION,434, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'D' Then
WS_ACT_BUILD_ALL,FUNCTION,435, v_stmt:= v_stmt||' Buffer_Pool Default';
WS_ACT_BUILD_ALL,FUNCTION,436, End If;
WS_ACT_BUILD_ALL,FUNCTION,437,
WS_ACT_BUILD_ALL,FUNCTION,438, v_stmt:= v_stmt||')';
WS_ACT_BUILD_ALL,FUNCTION,439, End If;
WS_ACT_BUILD_ALL,FUNCTION,440,
WS_ACT_BUILD_ALL,FUNCTION,441, --====================================================================
WS_ACT_BUILD_ALL,FUNCTION,442, -- PARTITION . If partitioned then add the partitions and local if set
WS_ACT_BUILD_ALL,FUNCTION,443, --====================================================================
WS_ACT_BUILD_ALL,FUNCTION,444, If v_part_count > 0 Then
WS_ACT_BUILD_ALL,FUNCTION,445, v_step := 1100;
WS_ACT_BUILD_ALL,FUNCTION,446,
WS_ACT_BUILD_ALL,FUNCTION,447, If v_IndRec.ih_partition_type = 'L'
WS_ACT_BUILD_ALL,FUNCTION,448, Or v_IndRec.ih_partition_type is NULL Then
WS_ACT_BUILD_ALL,FUNCTION,449, v_stmt := v_stmt||' LOCAL ';
WS_ACT_BUILD_ALL,FUNCTION,450, End If;
WS_ACT_BUILD_ALL,FUNCTION,451, v_stmt := v_stmt||' ( ';
WS_ACT_BUILD_ALL,FUNCTION,452,
WS_ACT_BUILD_ALL,FUNCTION,453, -- now get all the partitions
WS_ACT_BUILD_ALL,FUNCTION,454, v_row := 0;
WS_ACT_BUILD_ALL,FUNCTION,455, v_step := 1200;
WS_ACT_BUILD_ALL,FUNCTION,456,
WS_ACT_BUILD_ALL,FUNCTION,457, FOR v_PartRec in c_AllPartitionEx LOOP
WS_ACT_BUILD_ALL,FUNCTION,458, v_row := v_row + 1;
WS_ACT_BUILD_ALL,FUNCTION,459, v_stmt := v_stmt||' Partition '||v_PartRec.partition_name;
WS_ACT_BUILD_ALL,FUNCTION,460, If v_row < v_part_count Then
WS_ACT_BUILD_ALL,FUNCTION,461, v_stmt := v_stmt||',';
WS_ACT_BUILD_ALL,FUNCTION,462, End if;
WS_ACT_BUILD_ALL,FUNCTION,463, END LOOP;
WS_ACT_BUILD_ALL,FUNCTION,464, v_stmt := v_stmt||')';
WS_ACT_BUILD_ALL,FUNCTION,465, End If;
WS_ACT_BUILD_ALL,FUNCTION,466,
WS_ACT_BUILD_ALL,FUNCTION,467, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,468, -- Rebuild the index
WS_ACT_BUILD_ALL,FUNCTION,469, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,470, v_step := 1300;
WS_ACT_BUILD_ALL,FUNCTION,471, Execute Immediate v_stmt;
WS_ACT_BUILD_ALL,FUNCTION,472, v_count := v_count + 1;
WS_ACT_BUILD_ALL,FUNCTION,473,
WS_ACT_BUILD_ALL,FUNCTION,474, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,475, -- If Parallel primary key then apply that now
WS_ACT_BUILD_ALL,FUNCTION,476, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,477, v_step := 1400;
WS_ACT_BUILD_ALL,FUNCTION,478, If v_primary_key = 1
WS_ACT_BUILD_ALL,FUNCTION,479, THEN
WS_ACT_BUILD_ALL,FUNCTION,480, v_stmt := 'Alter INDEX ' || v_index_with_schema;
WS_ACT_BUILD_ALL,FUNCTION,481,
WS_ACT_BUILD_ALL,FUNCTION,482, IF nvl(v_IndRec.ih_parallel,0) > 0
WS_ACT_BUILD_ALL,FUNCTION,483, THEN
WS_ACT_BUILD_ALL,FUNCTION,484, v_stmt := v_stmt||' Parallel ';
WS_ACT_BUILD_ALL,FUNCTION,485, If nvl(v_IndRec.ih_parallel,0) > 1 Then
WS_ACT_BUILD_ALL,FUNCTION,486, v_stmt := v_stmt || v_IndRec.ih_parallel;
WS_ACT_BUILD_ALL,FUNCTION,487, End If;
WS_ACT_BUILD_ALL,FUNCTION,488, else
WS_ACT_BUILD_ALL,FUNCTION,489, v_stmt := v_stmt||' NOPARALLEL ';
WS_ACT_BUILD_ALL,FUNCTION,490, End If;
WS_ACT_BUILD_ALL,FUNCTION,491,
WS_ACT_BUILD_ALL,FUNCTION,492, v_stmt := v_stmt||' NOLOGGING ';
WS_ACT_BUILD_ALL,FUNCTION,493,
WS_ACT_BUILD_ALL,FUNCTION,494, If upper(v_IndRec.ih_buffer_pool_ind) = 'K' Then
WS_ACT_BUILD_ALL,FUNCTION,495, v_stmt:= v_stmt||' STORAGE ( Buffer_Pool Keep )';
WS_ACT_BUILD_ALL,FUNCTION,496, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'R' Then
WS_ACT_BUILD_ALL,FUNCTION,497, v_stmt:= v_stmt||' STORAGE (  Buffer_Pool Recycle ) ';
WS_ACT_BUILD_ALL,FUNCTION,498, ElsIf upper(v_IndRec.ih_buffer_pool_ind) = 'D' Then
WS_ACT_BUILD_ALL,FUNCTION,499, v_stmt:= v_stmt||' STORAGE ( Buffer_Pool Default ) ';
WS_ACT_BUILD_ALL,FUNCTION,500, End If;
WS_ACT_BUILD_ALL,FUNCTION,501,
WS_ACT_BUILD_ALL,FUNCTION,502, v_step := 1500;
WS_ACT_BUILD_ALL,FUNCTION,503,
WS_ACT_BUILD_ALL,FUNCTION,504, Execute Immediate v_stmt;
WS_ACT_BUILD_ALL,FUNCTION,505, End If;
WS_ACT_BUILD_ALL,FUNCTION,506,
WS_ACT_BUILD_ALL,FUNCTION,507, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,508, -- Put detail message
WS_ACT_BUILD_ALL,FUNCTION,509, --=====================================================
WS_ACT_BUILD_ALL,FUNCTION,510, v_step := 1600;
WS_ACT_BUILD_ALL,FUNCTION,511,
WS_ACT_BUILD_ALL,FUNCTION,512, v_MsgText := 'Index ' || v_table_with_schema || ' rebuilt';
WS_ACT_BUILD_ALL,FUNCTION,513, IF v_stats_include = 'Y' THEN
WS_ACT_BUILD_ALL,FUNCTION,514, v_MsgText := v_MsgText || ' including stats';
WS_ACT_BUILD_ALL,FUNCTION,515, END IF;
WS_ACT_BUILD_ALL,FUNCTION,516,
WS_ACT_BUILD_ALL,FUNCTION,517, v_msg_result := WsWrkError(
WS_ACT_BUILD_ALL,FUNCTION,518, 'I'
WS_ACT_BUILD_ALL,FUNCTION,519, , p_job_name
WS_ACT_BUILD_ALL,FUNCTION,520, , p_task_name
WS_ACT_BUILD_ALL,FUNCTION,521, , p_sequence
WS_ACT_BUILD_ALL,FUNCTION,522, , v_MsgText
WS_ACT_BUILD_ALL,FUNCTION,523, , NULL
WS_ACT_BUILD_ALL,FUNCTION,524, , NULL
WS_ACT_BUILD_ALL,FUNCTION,525, , p_task_id
WS_ACT_BUILD_ALL,FUNCTION,526, , p_job_id
WS_ACT_BUILD_ALL,FUNCTION,527, , NULL);
WS_ACT_BUILD_ALL,FUNCTION,528,
WS_ACT_BUILD_ALL,FUNCTION,529, END LOOP;
WS_ACT_BUILD_ALL,FUNCTION,530,
WS_ACT_BUILD_ALL,FUNCTION,531, v_step := 1700;
WS_ACT_BUILD_ALL,FUNCTION,532, -- tell them how many indexes we rebuilt
WS_ACT_BUILD_ALL,FUNCTION,533, If v_count = 0 Then
WS_ACT_BUILD_ALL,FUNCTION,534, p_return_msg := 'No indexes rebuilt';
WS_ACT_BUILD_ALL,FUNCTION,535, ElsIf v_count = 1 Then
WS_ACT_BUILD_ALL,FUNCTION,536, p_return_msg := v_count||' index rebuilt';
WS_ACT_BUILD_ALL,FUNCTION,537, Else
WS_ACT_BUILD_ALL,FUNCTION,538, p_return_msg := v_count||' indexes rebuilt';
WS_ACT_BUILD_ALL,FUNCTION,539, End If;
WS_ACT_BUILD_ALL,FUNCTION,540, p_status_code := 1;
WS_ACT_BUILD_ALL,FUNCTION,541,
WS_ACT_BUILD_ALL,FUNCTION,542, COMMIT;
WS_ACT_BUILD_ALL,FUNCTION,543, RETURN v_result;
WS_ACT_BUILD_ALL,FUNCTION,544,
WS_ACT_BUILD_ALL,FUNCTION,545,EXCEPTION
WS_ACT_BUILD_ALL,FUNCTION,546, WHEN OTHERS THEN
WS_ACT_BUILD_ALL,FUNCTION,547, v_MsgText := 'Unhandled Exception in ws_act_build_all '|| v_ws_pro_version ||
WS_ACT_BUILD_ALL,FUNCTION,548, ' Step ' ||v_step;
WS_ACT_BUILD_ALL,FUNCTION,549, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD_ALL,FUNCTION,550, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD_ALL,FUNCTION,551, If v_step = 40 Then
WS_ACT_BUILD_ALL,FUNCTION,552, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_BUILD_ALL,FUNCTION,553, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD_ALL,FUNCTION,554, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD_ALL,FUNCTION,555, If length(v_stmt) > 1023 Then
WS_ACT_BUILD_ALL,FUNCTION,556, v_MsgText := substr(v_stmt,-1023,1023);
WS_ACT_BUILD_ALL,FUNCTION,557, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_BUILD_ALL,FUNCTION,558, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_BUILD_ALL,FUNCTION,559, End If;
WS_ACT_BUILD_ALL,FUNCTION,560, End If;
WS_ACT_BUILD_ALL,FUNCTION,561, p_return_msg := 'Unhandled Exception in ws_act_build_all ' || v_ws_pro_version ||' step ' ||v_step;
WS_ACT_BUILD_ALL,FUNCTION,562, p_status_code := -3;
WS_ACT_BUILD_ALL,FUNCTION,563, RETURN -3;
WS_ACT_BUILD_ALL,FUNCTION,564,
WS_ACT_BUILD_ALL,FUNCTION,565,END ws_act_build_all;
WS_ACT_BUILD_ALL,FUNCTION,566,
WS_ACT_CREATE,FUNCTION,1,function ws_act_create
WS_ACT_CREATE,FUNCTION,2, (
WS_ACT_CREATE,FUNCTION,3, p_sequence IN number,
WS_ACT_CREATE,FUNCTION,4, p_obj_type IN number,
WS_ACT_CREATE,FUNCTION,5, p_action IN number,
WS_ACT_CREATE,FUNCTION,6, p_obj_key IN number,
WS_ACT_CREATE,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_CREATE,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_CREATE,FUNCTION,9, p_job_id IN number,
WS_ACT_CREATE,FUNCTION,10, p_task_id IN number,
WS_ACT_CREATE,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_CREATE,FUNCTION,12, p_status_code OUT number
WS_ACT_CREATE,FUNCTION,13, )
WS_ACT_CREATE,FUNCTION,14, Return integer
WS_ACT_CREATE,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_CREATE,FUNCTION,16, IS
WS_ACT_CREATE,FUNCTION,17,
WS_ACT_CREATE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_CREATE,FUNCTION,19,
WS_ACT_CREATE,FUNCTION,20, -- =============================================================================
WS_ACT_CREATE,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_CREATE,FUNCTION,22, -- Script Name : ws_act_create
WS_ACT_CREATE,FUNCTION,23, -- Description : Create a Table or View
WS_ACT_CREATE,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_CREATE,FUNCTION,25, -- =============================================================================
WS_ACT_CREATE,FUNCTION,26,
WS_ACT_CREATE,FUNCTION,27, --=====================================================
WS_ACT_CREATE,FUNCTION,28, -- Constants
WS_ACT_CREATE,FUNCTION,29, --=====================================================
WS_ACT_CREATE,FUNCTION,30, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_CREATE,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_CREATE,FUNCTION,32, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_CREATE,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_CREATE,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_CREATE,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_CREATE,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_CREATE,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_CREATE,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_CREATE,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_CREATE,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_CREATE,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_CREATE,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_CREATE,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_ACT_CREATE,FUNCTION,44, v_ws_obj_cube constant number := 15;
WS_ACT_CREATE,FUNCTION,45, v_ws_obj_cube_virtual constant number := 16;
WS_ACT_CREATE,FUNCTION,46, v_ws_obj_report constant number := 17;
WS_ACT_CREATE,FUNCTION,47, v_ws_obj_view constant number := 18;
WS_ACT_CREATE,FUNCTION,48, v_ws_obj_file constant number := 19;
WS_ACT_CREATE,FUNCTION,49, v_ws_obj_join constant number := 20;
WS_ACT_CREATE,FUNCTION,50, v_ws_obj_retro constant number := 21;
WS_ACT_CREATE,FUNCTION,51, v_ws_obj_retro_copy constant number := 22;
WS_ACT_CREATE,FUNCTION,52, v_ws_obj_olap_cube constant number := 23;
WS_ACT_CREATE,FUNCTION,53, v_ws_obj_olap_dim constant number := 24;
WS_ACT_CREATE,FUNCTION,54, v_ws_obj_olap_role constant number := 25;
WS_ACT_CREATE,FUNCTION,55, v_ws_obj_ods constant number := 26;
WS_ACT_CREATE,FUNCTION,56, v_ws_obj_normal constant number := 27;
WS_ACT_CREATE,FUNCTION,57, v_ws_obj_hub constant number := 28;
WS_ACT_CREATE,FUNCTION,58, v_ws_obj_satellite constant number := 29;
WS_ACT_CREATE,FUNCTION,59, v_ws_obj_link constant number := 30;
WS_ACT_CREATE,FUNCTION,60, v_ws_obj_custom1 constant number := 31;
WS_ACT_CREATE,FUNCTION,61, v_ws_obj_custom2 constant number := 32;
WS_ACT_CREATE,FUNCTION,62, v_ws_obj_max constant number := 32;
WS_ACT_CREATE,FUNCTION,63,
WS_ACT_CREATE,FUNCTION,64, v_ws_obj_job constant number := 50;
WS_ACT_CREATE,FUNCTION,65,
WS_ACT_CREATE,FUNCTION,66, v_ws_act_drop constant number := 1;
WS_ACT_CREATE,FUNCTION,67, v_ws_act_create constant number := 2;
WS_ACT_CREATE,FUNCTION,68, v_ws_act_drop_all constant number := 3;
WS_ACT_CREATE,FUNCTION,69, v_ws_act_pre_drop constant number := 4;
WS_ACT_CREATE,FUNCTION,70, v_ws_act_load constant number := 5;
WS_ACT_CREATE,FUNCTION,71, v_ws_act_update constant number := 6;
WS_ACT_CREATE,FUNCTION,72, v_ws_act_execute constant number := 7;
WS_ACT_CREATE,FUNCTION,73, v_ws_act_process constant number := 8;
WS_ACT_CREATE,FUNCTION,74, v_ws_act_build constant number := 9;
WS_ACT_CREATE,FUNCTION,75, v_ws_act_build_all constant number := 10;
WS_ACT_CREATE,FUNCTION,76, v_ws_act_analyze constant number := 11;
WS_ACT_CREATE,FUNCTION,77, v_ws_act_quick_analyze constant number := 12;
WS_ACT_CREATE,FUNCTION,78, v_ws_act_statistics constant number := 13;
WS_ACT_CREATE,FUNCTION,79, v_ws_act_quick_statistics constant number := 14;
WS_ACT_CREATE,FUNCTION,80, v_ws_act_initial constant number := 15;
WS_ACT_CREATE,FUNCTION,81, v_ws_act_cube_dim constant number := 16;
WS_ACT_CREATE,FUNCTION,82, v_ws_act_db_dim constant number := 17;
WS_ACT_CREATE,FUNCTION,83, v_ws_act_custom constant number := 18;
WS_ACT_CREATE,FUNCTION,84, v_ws_act_truncate constant number := 19;
WS_ACT_CREATE,FUNCTION,85,
WS_ACT_CREATE,FUNCTION,86, --=====================================================
WS_ACT_CREATE,FUNCTION,87, -- Variables
WS_ACT_CREATE,FUNCTION,88, --=====================================================
WS_ACT_CREATE,FUNCTION,89, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_CREATE,FUNCTION,90, v_step integer := 0; -- return code
WS_ACT_CREATE,FUNCTION,91, v_result integer := 0; -- return code
WS_ACT_CREATE,FUNCTION,92, v_cursor number;
WS_ACT_CREATE,FUNCTION,93, v_create varchar2(4000);
WS_ACT_CREATE,FUNCTION,94, v_create2 varchar2(4000);
WS_ACT_CREATE,FUNCTION,95, v_create3 varchar2(4000);
WS_ACT_CREATE,FUNCTION,96, v_create4 varchar2(4000);
WS_ACT_CREATE,FUNCTION,97, v_create5 varchar2(4000);
WS_ACT_CREATE,FUNCTION,98, v_create_all varchar2(32000);
WS_ACT_CREATE,FUNCTION,99, v_as varchar2(2000);
WS_ACT_CREATE,FUNCTION,100, v_row integer := 0;
WS_ACT_CREATE,FUNCTION,101, v_user_view integer := 0;
WS_ACT_CREATE,FUNCTION,102, v_schema_flag integer := 0;
WS_ACT_CREATE,FUNCTION,103, v_satellite_ind varchar2(1);
WS_ACT_CREATE,FUNCTION,104, v_dss_schema varchar2(64);
WS_ACT_CREATE,FUNCTION,105, v_spos integer;
WS_ACT_CREATE,FUNCTION,106,
WS_ACT_CREATE,FUNCTION,107, v_LoadRec ws_load_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,108, v_DimRec ws_dim_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,109, v_ViewRec ws_view_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,110, v_FactRec ws_fact_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,111, v_StageRec ws_stage_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,112, v_AggRec ws_agg_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,113, v_RetroRec ws_retro_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,114, v_OdsRec ws_ods_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,115, v_NormalRec ws_normal_tab%ROWTYPE;
WS_ACT_CREATE,FUNCTION,116,
WS_ACT_CREATE,FUNCTION,117, v_text1 varchar2(4000);
WS_ACT_CREATE,FUNCTION,118, v_text2 varchar2(4000);
WS_ACT_CREATE,FUNCTION,119, v_text3 varchar2(4000);
WS_ACT_CREATE,FUNCTION,120, v_text4 varchar2(4000);
WS_ACT_CREATE,FUNCTION,121, v_text5 varchar2(4000);
WS_ACT_CREATE,FUNCTION,122, v_table_schema varchar2(64);
WS_ACT_CREATE,FUNCTION,123, v_table_name varchar2(64);
WS_ACT_CREATE,FUNCTION,124, v_table_with_schema varchar2(150);
WS_ACT_CREATE,FUNCTION,125, v_tablespace varchar2(64);
WS_ACT_CREATE,FUNCTION,126, v_ddl_override varchar2(32000);
WS_ACT_CREATE,FUNCTION,127,
WS_ACT_CREATE,FUNCTION,128, v_start_location integer := 1;
WS_ACT_CREATE,FUNCTION,129, v_end_location integer;
WS_ACT_CREATE,FUNCTION,130, v_statement varchar2(32000);
WS_ACT_CREATE,FUNCTION,131, v_delimiter varchar2(4000);
WS_ACT_CREATE,FUNCTION,132,
WS_ACT_CREATE,FUNCTION,133, --=====================================================
WS_ACT_CREATE,FUNCTION,134, -- Cursor for all columns in the tables
WS_ACT_CREATE,FUNCTION,135, --=====================================================
WS_ACT_CREATE,FUNCTION,136, Cursor c_Load is
WS_ACT_CREATE,FUNCTION,137, Select * from ws_load_col
WS_ACT_CREATE,FUNCTION,138, Where lc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,139, Order by lc_order;
WS_ACT_CREATE,FUNCTION,140,
WS_ACT_CREATE,FUNCTION,141, Cursor c_Dim is
WS_ACT_CREATE,FUNCTION,142, Select * from ws_dim_col
WS_ACT_CREATE,FUNCTION,143, Where dc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,144, Order by dc_order;
WS_ACT_CREATE,FUNCTION,145,
WS_ACT_CREATE,FUNCTION,146, Cursor c_View is
WS_ACT_CREATE,FUNCTION,147, Select * from ws_view_col
WS_ACT_CREATE,FUNCTION,148, Where vc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,149, Order by vc_order;
WS_ACT_CREATE,FUNCTION,150,
WS_ACT_CREATE,FUNCTION,151, Cursor c_Fact is
WS_ACT_CREATE,FUNCTION,152, Select * from ws_fact_col
WS_ACT_CREATE,FUNCTION,153, Where fc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,154, Order by fc_order;
WS_ACT_CREATE,FUNCTION,155,
WS_ACT_CREATE,FUNCTION,156, Cursor c_Stage is
WS_ACT_CREATE,FUNCTION,157, Select * from ws_stage_col
WS_ACT_CREATE,FUNCTION,158, Where sc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,159, Order by sc_order;
WS_ACT_CREATE,FUNCTION,160,
WS_ACT_CREATE,FUNCTION,161, Cursor c_Agg is
WS_ACT_CREATE,FUNCTION,162, Select * from ws_agg_col
WS_ACT_CREATE,FUNCTION,163, Where ac_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,164, Order by ac_order;
WS_ACT_CREATE,FUNCTION,165,
WS_ACT_CREATE,FUNCTION,166, Cursor c_Retro is
WS_ACT_CREATE,FUNCTION,167, Select * from ws_retro_col
WS_ACT_CREATE,FUNCTION,168, Where rc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,169, Order by rc_order;
WS_ACT_CREATE,FUNCTION,170,
WS_ACT_CREATE,FUNCTION,171, Cursor c_Ods is
WS_ACT_CREATE,FUNCTION,172, Select * from ws_ods_col
WS_ACT_CREATE,FUNCTION,173, Where oc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,174, Order by oc_order;
WS_ACT_CREATE,FUNCTION,175,
WS_ACT_CREATE,FUNCTION,176, Cursor c_Normal is
WS_ACT_CREATE,FUNCTION,177, Select * from ws_normal_col
WS_ACT_CREATE,FUNCTION,178, Where nc_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,179, Order by nc_order;
WS_ACT_CREATE,FUNCTION,180,
WS_ACT_CREATE,FUNCTION,181, --=====================================================
WS_ACT_CREATE,FUNCTION,182, -- Cursor for source tables if a dimension view
WS_ACT_CREATE,FUNCTION,183, --=====================================================
WS_ACT_CREATE,FUNCTION,184, Cursor c_Tables is
WS_ACT_CREATE,FUNCTION,185, Select distinct dc_src_table
WS_ACT_CREATE,FUNCTION,186, from ws_dim_col
WS_ACT_CREATE,FUNCTION,187, Where dc_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,188, --=====================================================
WS_ACT_CREATE,FUNCTION,189, -- Cursor for source tables if a view
WS_ACT_CREATE,FUNCTION,190, --=====================================================
WS_ACT_CREATE,FUNCTION,191, Cursor c_ViewTables is
WS_ACT_CREATE,FUNCTION,192, Select distinct vc_src_table
WS_ACT_CREATE,FUNCTION,193, from ws_view_col
WS_ACT_CREATE,FUNCTION,194, Where vc_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,195,
WS_ACT_CREATE,FUNCTION,196, --=====================================================
WS_ACT_CREATE,FUNCTION,197, -- MAIN
WS_ACT_CREATE,FUNCTION,198, --=====================================================
WS_ACT_CREATE,FUNCTION,199,BEGIN
WS_ACT_CREATE,FUNCTION,200, v_step := 100;
WS_ACT_CREATE,FUNCTION,201, v_create2 := '';
WS_ACT_CREATE,FUNCTION,202, v_create3 := '';
WS_ACT_CREATE,FUNCTION,203, v_create4 := '';
WS_ACT_CREATE,FUNCTION,204, v_create5 := '';
WS_ACT_CREATE,FUNCTION,205,
WS_ACT_CREATE,FUNCTION,206, --=====================================================
WS_ACT_CREATE,FUNCTION,207, -- See if we have the flag set for including schema
WS_ACT_CREATE,FUNCTION,208, --=====================================================
WS_ACT_CREATE,FUNCTION,209,
WS_ACT_CREATE,FUNCTION,210, v_satellite_ind := '';
WS_ACT_CREATE,FUNCTION,211, v_table_schema := '';
WS_ACT_CREATE,FUNCTION,212,
WS_ACT_CREATE,FUNCTION,213, -- needs to look up the schema from ws_dbc_target
WS_ACT_CREATE,FUNCTION,214, BEGIN
WS_ACT_CREATE,FUNCTION,215, SELECT NVL(dt_schema, '')
WS_ACT_CREATE,FUNCTION,216, ,oo_name
WS_ACT_CREATE,FUNCTION,217, INTO v_table_schema
WS_ACT_CREATE,FUNCTION,218, ,v_table_name
WS_ACT_CREATE,FUNCTION,219, FROM ws_obj_object
WS_ACT_CREATE,FUNCTION,220, LEFT JOIN ws_dbc_target
WS_ACT_CREATE,FUNCTION,221, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_CREATE,FUNCTION,222, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,223, ;
WS_ACT_CREATE,FUNCTION,224, v_table_schema := TRIM(v_table_schema);
WS_ACT_CREATE,FUNCTION,225,
WS_ACT_CREATE,FUNCTION,226, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_CREATE,FUNCTION,227, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_CREATE,FUNCTION,228, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,229, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,230, p_return_msg := 'Object could not be found';
WS_ACT_CREATE,FUNCTION,231, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,232, RETURN -2;
WS_ACT_CREATE,FUNCTION,233, END;
WS_ACT_CREATE,FUNCTION,234,
WS_ACT_CREATE,FUNCTION,235, v_step := 110;
WS_ACT_CREATE,FUNCTION,236, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_CREATE,FUNCTION,237, -- meta_satellite_ind = A
WS_ACT_CREATE,FUNCTION,238, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_CREATE,FUNCTION,239,
WS_ACT_CREATE,FUNCTION,240, SELECT meta_satellite_ind,
WS_ACT_CREATE,FUNCTION,241, TRIM(meta_dss_schema)
WS_ACT_CREATE,FUNCTION,242, INTO v_satellite_ind,
WS_ACT_CREATE,FUNCTION,243, v_dss_schema
WS_ACT_CREATE,FUNCTION,244, FROM ws_meta
WS_ACT_CREATE,FUNCTION,245, WHERE rownum = 1;
WS_ACT_CREATE,FUNCTION,246,
WS_ACT_CREATE,FUNCTION,247, IF v_satellite_ind = 'A' THEN
WS_ACT_CREATE,FUNCTION,248, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_CREATE,FUNCTION,249, v_schema_flag := 1;
WS_ACT_CREATE,FUNCTION,250, v_table_schema := v_dss_schema;
WS_ACT_CREATE,FUNCTION,251, END IF;
WS_ACT_CREATE,FUNCTION,252, END IF;
WS_ACT_CREATE,FUNCTION,253,
WS_ACT_CREATE,FUNCTION,254, v_step := 120;
WS_ACT_CREATE,FUNCTION,255, -- If still not set then defaults to the current user
WS_ACT_CREATE,FUNCTION,256, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_CREATE,FUNCTION,257, SELECT user
WS_ACT_CREATE,FUNCTION,258, INTO v_table_schema
WS_ACT_CREATE,FUNCTION,259, FROM dual;
WS_ACT_CREATE,FUNCTION,260, END IF;
WS_ACT_CREATE,FUNCTION,261,
WS_ACT_CREATE,FUNCTION,262, End If;
WS_ACT_CREATE,FUNCTION,263,
WS_ACT_CREATE,FUNCTION,264, v_step := 130;
WS_ACT_CREATE,FUNCTION,265,
WS_ACT_CREATE,FUNCTION,266, v_table_schema := TRIM(v_table_schema);
WS_ACT_CREATE,FUNCTION,267, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_CREATE,FUNCTION,268, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_CREATE,FUNCTION,269, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_CREATE,FUNCTION,270, END IF;
WS_ACT_CREATE,FUNCTION,271,
WS_ACT_CREATE,FUNCTION,272, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_CREATE,FUNCTION,273,
WS_ACT_CREATE,FUNCTION,274, --=====================================================
WS_ACT_CREATE,FUNCTION,275, -- DDL Override
WS_ACT_CREATE,FUNCTION,276, --=====================================================
WS_ACT_CREATE,FUNCTION,277, -- RED_4237
WS_ACT_CREATE,FUNCTION,278, BEGIN
WS_ACT_CREATE,FUNCTION,279, v_step := 140;
WS_ACT_CREATE,FUNCTION,280, SELECT NVL(ta_text_1, '')
WS_ACT_CREATE,FUNCTION,281, , NVL(ta_text_2, '')
WS_ACT_CREATE,FUNCTION,282, , NVL(ta_text_3, '')
WS_ACT_CREATE,FUNCTION,283, , NVL(ta_text_4, '')
WS_ACT_CREATE,FUNCTION,284, , NVL(ta_text_5, '')
WS_ACT_CREATE,FUNCTION,285, INTO v_text1
WS_ACT_CREATE,FUNCTION,286, , v_text2
WS_ACT_CREATE,FUNCTION,287, , v_text3
WS_ACT_CREATE,FUNCTION,288, , v_text4
WS_ACT_CREATE,FUNCTION,289, , v_text5
WS_ACT_CREATE,FUNCTION,290, FROM ws_table_attributes
WS_ACT_CREATE,FUNCTION,291, WHERE ta_obj_key = p_obj_key
WS_ACT_CREATE,FUNCTION,292, AND ta_type = 'D'
WS_ACT_CREATE,FUNCTION,293, ;
WS_ACT_CREATE,FUNCTION,294,
WS_ACT_CREATE,FUNCTION,295, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_CREATE,FUNCTION,296, v_text1 := '';
WS_ACT_CREATE,FUNCTION,297, v_text2 := '';
WS_ACT_CREATE,FUNCTION,298, v_text3 := '';
WS_ACT_CREATE,FUNCTION,299, v_text4 := '';
WS_ACT_CREATE,FUNCTION,300, v_text5 := '';
WS_ACT_CREATE,FUNCTION,301, END;
WS_ACT_CREATE,FUNCTION,302,
WS_ACT_CREATE,FUNCTION,303, -- Oracle treats empty strings as NULL: http://www.techonthenet.com/oracle/questions/empty_null.php
WS_ACT_CREATE,FUNCTION,304, IF TRIM(v_text1) IS NOT NULL THEN
WS_ACT_CREATE,FUNCTION,305, v_step := 200;
WS_ACT_CREATE,FUNCTION,306,
WS_ACT_CREATE,FUNCTION,307, IF p_obj_type = v_ws_obj_load THEN
WS_ACT_CREATE,FUNCTION,308, SELECT * INTO v_LoadRec FROM ws_load_tab WHERE lt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,309, v_tablespace := v_LoadRec.lt_tablespace;
WS_ACT_CREATE,FUNCTION,310, ELSIF p_obj_type = v_ws_obj_stage THEN
WS_ACT_CREATE,FUNCTION,311, SELECT * INTO v_StageRec FROM ws_stage_tab WHERE st_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,312, v_tablespace := v_StageRec.st_tablespace;
WS_ACT_CREATE,FUNCTION,313, ELSIF p_obj_type = v_ws_obj_ods THEN
WS_ACT_CREATE,FUNCTION,314, SELECT * INTO v_OdsRec FROM ws_ods_tab WHERE ot_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,315, v_tablespace := v_OdsRec.ot_tablespace;
WS_ACT_CREATE,FUNCTION,316, ELSIF p_obj_type = v_ws_obj_normal
WS_ACT_CREATE,FUNCTION,317, OR p_obj_type = v_ws_obj_hub
WS_ACT_CREATE,FUNCTION,318, OR p_obj_type = v_ws_obj_satellite
WS_ACT_CREATE,FUNCTION,319, OR p_obj_type = v_ws_obj_link
WS_ACT_CREATE,FUNCTION,320, OR p_obj_type = v_ws_obj_custom1
WS_ACT_CREATE,FUNCTION,321, OR p_obj_type = v_ws_obj_custom2
WS_ACT_CREATE,FUNCTION,322, THEN
WS_ACT_CREATE,FUNCTION,323, SELECT * INTO v_NormalRec FROM ws_normal_tab WHERE nt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,324, v_tablespace := v_NormalRec.nt_tablespace;
WS_ACT_CREATE,FUNCTION,325, ELSIF p_obj_type = v_ws_obj_dim THEN
WS_ACT_CREATE,FUNCTION,326, SELECT * INTO v_DimRec FROM ws_dim_tab WHERE dt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,327, v_tablespace := v_DimRec.dt_tablespace;
WS_ACT_CREATE,FUNCTION,328, ELSIF p_obj_type = v_ws_obj_fact THEN
WS_ACT_CREATE,FUNCTION,329, SELECT * INTO v_FactRec FROM ws_fact_tab WHERE ft_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,330, v_tablespace := v_FactRec.ft_tablespace;
WS_ACT_CREATE,FUNCTION,331, ELSIF p_obj_type = v_ws_obj_agg THEN
WS_ACT_CREATE,FUNCTION,332, SELECT * INTO v_AggRec FROM ws_agg_tab WHERE at_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,333, v_tablespace := v_AggRec.at_tablespace;
WS_ACT_CREATE,FUNCTION,334, ELSE
WS_ACT_CREATE,FUNCTION,335, v_tablespace := '';
WS_ACT_CREATE,FUNCTION,336, END IF;
WS_ACT_CREATE,FUNCTION,337,
WS_ACT_CREATE,FUNCTION,338, v_table_name := TRIM(v_table_name);
WS_ACT_CREATE,FUNCTION,339, v_tablespace := TRIM(v_tablespace);
WS_ACT_CREATE,FUNCTION,340,
WS_ACT_CREATE,FUNCTION,341, v_ddl_override := v_text1 || v_text2 || v_text3 || v_text4 || v_text5;
WS_ACT_CREATE,FUNCTION,342, v_ddl_override := REPLACE(v_ddl_override, '$TABLE$', v_table_name);
WS_ACT_CREATE,FUNCTION,343, v_ddl_override := REPLACE(v_ddl_override, '$INDEX$', v_table_name);
WS_ACT_CREATE,FUNCTION,344, v_ddl_override := REPLACE(v_ddl_override, '$OBJECT$', v_table_with_schema);
WS_ACT_CREATE,FUNCTION,345, v_ddl_override := REPLACE(v_ddl_override, '$SCHEMA$', v_table_schema);
WS_ACT_CREATE,FUNCTION,346, v_ddl_override := REPLACE(v_ddl_override, '$TABLESPACE$', v_tablespace);
WS_ACT_CREATE,FUNCTION,347, v_ddl_override := WsParameterReplace(v_ddl_override, 32000);
WS_ACT_CREATE,FUNCTION,348,
WS_ACT_CREATE,FUNCTION,349, -- Execute the DDL statements individually based of the end-statement-indicator in the override statement
WS_ACT_CREATE,FUNCTION,350, -- Get the initial end location of the statement
WS_ACT_CREATE,FUNCTION,351, SELECT COALESCE(LENGTH(v_ddl_override),0) INTO v_end_location FROM DUAL;
WS_ACT_CREATE,FUNCTION,352,
WS_ACT_CREATE,FUNCTION,353, -- Get the end-of-statement indicator, defaults to <EOS>
WS_ACT_CREATE,FUNCTION,354, SELECT COALESCE(ta_text_3, '<EOS>') INTO v_delimiter FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'M';
WS_ACT_CREATE,FUNCTION,355,
WS_ACT_CREATE,FUNCTION,356, -- Loop through the override statement and execute each statement individually
WS_ACT_CREATE,FUNCTION,357, WHILE v_end_location > 0
WS_ACT_CREATE,FUNCTION,358, LOOP
WS_ACT_CREATE,FUNCTION,359, SELECT INSTR(v_ddl_override,v_delimiter, v_start_location) INTO v_end_location FROM DUAL;
WS_ACT_CREATE,FUNCTION,360, SELECT CASE
WS_ACT_CREATE,FUNCTION,361, WHEN v_end_location > 0
WS_ACT_CREATE,FUNCTION,362, THEN SUBSTR(v_ddl_override,v_start_location,v_end_location -v_start_location)
WS_ACT_CREATE,FUNCTION,363, ELSE SUBSTR(v_ddl_override,v_start_location)
WS_ACT_CREATE,FUNCTION,364, END INTO v_statement FROM DUAL;
WS_ACT_CREATE,FUNCTION,365,
WS_ACT_CREATE,FUNCTION,366, IF TRIM(TRANSLATE(v_statement, chr(10) || chr(13) || chr(09), '   ')) IS NOT NULL Then
WS_ACT_CREATE,FUNCTION,367, BEGIN
WS_ACT_CREATE,FUNCTION,368, EXECUTE IMMEDIATE v_statement;
WS_ACT_CREATE,FUNCTION,369, p_return_msg := 'Table created using DDL Override '|| v_table_with_schema;
WS_ACT_CREATE,FUNCTION,370, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,371, v_result := 1;
WS_ACT_CREATE,FUNCTION,372, EXCEPTION
WS_ACT_CREATE,FUNCTION,373, WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,374, If SQLCODE = -955 THEN
WS_ACT_CREATE,FUNCTION,375, v_MsgText := 'DDL Override: Table already exists. Drop table first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,376, ELSE
WS_ACT_CREATE,FUNCTION,377, v_MsgText := 'Unhandled exception using DDL Override in ws_act_create cursor step '|| v_step;
WS_ACT_CREATE,FUNCTION,378, END IF;
WS_ACT_CREATE,FUNCTION,379,
WS_ACT_CREATE,FUNCTION,380, v_result := WsWrkAudit( 'E', p_job_name, p_task_name, p_sequence
WS_ACT_CREATE,FUNCTION,381, , v_MsgText, SQLCODE, SQLERRM, p_task_id, p_job_id
WS_ACT_CREATE,FUNCTION,382, );
WS_ACT_CREATE,FUNCTION,383,
WS_ACT_CREATE,FUNCTION,384, p_return_msg := v_MsgText;
WS_ACT_CREATE,FUNCTION,385, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,386, v_result := -2;
WS_ACT_CREATE,FUNCTION,387,
WS_ACT_CREATE,FUNCTION,388, RETURN v_result;
WS_ACT_CREATE,FUNCTION,389, END;
WS_ACT_CREATE,FUNCTION,390, END IF;
WS_ACT_CREATE,FUNCTION,391,
WS_ACT_CREATE,FUNCTION,392, SELECT v_end_location + LENGTH(v_delimiter) INTO v_start_location FROM DUAL;
WS_ACT_CREATE,FUNCTION,393, END LOOP;
WS_ACT_CREATE,FUNCTION,394,
WS_ACT_CREATE,FUNCTION,395, RETURN v_result;
WS_ACT_CREATE,FUNCTION,396, END IF;
WS_ACT_CREATE,FUNCTION,397,
WS_ACT_CREATE,FUNCTION,398, --=====================================================
WS_ACT_CREATE,FUNCTION,399, -- Handle all the table types
WS_ACT_CREATE,FUNCTION,400, --=====================================================
WS_ACT_CREATE,FUNCTION,401, --=====================================================
WS_ACT_CREATE,FUNCTION,402, -- L O A D
WS_ACT_CREATE,FUNCTION,403, --=====================================================
WS_ACT_CREATE,FUNCTION,404, If p_obj_type = v_ws_obj_load Then
WS_ACT_CREATE,FUNCTION,405, select * into v_LoadRec
WS_ACT_CREATE,FUNCTION,406, from ws_load_tab where lt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,407, --=====================================================
WS_ACT_CREATE,FUNCTION,408, -- Build the create string
WS_ACT_CREATE,FUNCTION,409, --=====================================================
WS_ACT_CREATE,FUNCTION,410, v_Create := 'Create table ' || v_table_with_schema ||'(';
WS_ACT_CREATE,FUNCTION,411,
WS_ACT_CREATE,FUNCTION,412, v_row := 0;
WS_ACT_CREATE,FUNCTION,413,
WS_ACT_CREATE,FUNCTION,414, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,415, --
WS_ACT_CREATE,FUNCTION,416, For v_ColRec in c_Load LOOP
WS_ACT_CREATE,FUNCTION,417, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,418, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,419, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,420, End If;
WS_ACT_CREATE,FUNCTION,421, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,422, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,423, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,424, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,425, v_create := '';
WS_ACT_CREATE,FUNCTION,426, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,427, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,428, v_create := '';
WS_ACT_CREATE,FUNCTION,429, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,430, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,431, v_create := '';
WS_ACT_CREATE,FUNCTION,432, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,433, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,434, v_create := '';
WS_ACT_CREATE,FUNCTION,435, Else
WS_ACT_CREATE,FUNCTION,436, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,437, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,438, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,439, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,440, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,441, RETURN -2;
WS_ACT_CREATE,FUNCTION,442, End If;
WS_ACT_CREATE,FUNCTION,443, End If;
WS_ACT_CREATE,FUNCTION,444,
WS_ACT_CREATE,FUNCTION,445, v_Create := v_Create||v_ColRec.lc_col_name||' '||v_ColRec.lc_data_type;
WS_ACT_CREATE,FUNCTION,446,
WS_ACT_CREATE,FUNCTION,447, IF LENGTH(TRIM(v_ColRec.lc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,448, AND v_ColRec.lc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,449, THEN
WS_ACT_CREATE,FUNCTION,450,-- v_ColRec.lc_default_value := || v_ColRec.lc_default_value || ;
WS_ACT_CREATE,FUNCTION,451, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,452, v_Create := v_Create|| v_ColRec.lc_default_value;
WS_ACT_CREATE,FUNCTION,453, END IF;
WS_ACT_CREATE,FUNCTION,454,
WS_ACT_CREATE,FUNCTION,455, If v_ColRec.lc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,456, v_Create := v_Create||' NOT NULL ';
WS_ACT_CREATE,FUNCTION,457, End If;
WS_ACT_CREATE,FUNCTION,458,
WS_ACT_CREATE,FUNCTION,459, END LOOP;
WS_ACT_CREATE,FUNCTION,460, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,461, --
WS_ACT_CREATE,FUNCTION,462, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,463, If v_LoadRec.lt_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,464, v_Create := v_Create||' Tablespace '||v_LoadRec.lt_tablespace;
WS_ACT_CREATE,FUNCTION,465, End If;
WS_ACT_CREATE,FUNCTION,466,
WS_ACT_CREATE,FUNCTION,467, v_step := 300;
WS_ACT_CREATE,FUNCTION,468,
WS_ACT_CREATE,FUNCTION,469, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,470, If v_LoadRec.lt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,471, v_Create := v_Create||TRUNC(v_LoadRec.lt_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,472, Else
WS_ACT_CREATE,FUNCTION,473, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,474, End If;
WS_ACT_CREATE,FUNCTION,475,
WS_ACT_CREATE,FUNCTION,476, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,477,
WS_ACT_CREATE,FUNCTION,478, If v_LoadRec.lt_initial_kb + v_LoadRec.lt_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,479, v_Create := v_Create||' Initial '||v_LoadRec.lt_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,480, v_Create := v_Create||' Next '||v_LoadRec.lt_next_kb||'K';
WS_ACT_CREATE,FUNCTION,481, End If;
WS_ACT_CREATE,FUNCTION,482,
WS_ACT_CREATE,FUNCTION,483, If v_LoadRec.lt_min_extents + v_LoadRec.lt_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,484, v_Create := v_Create||' Minextents '||v_LoadRec.lt_min_extents;
WS_ACT_CREATE,FUNCTION,485, v_Create := v_Create||' Maxextents '||v_LoadRec.lt_max_extents;
WS_ACT_CREATE,FUNCTION,486, End If;
WS_ACT_CREATE,FUNCTION,487,
WS_ACT_CREATE,FUNCTION,488, v_step := 400;
WS_ACT_CREATE,FUNCTION,489, If v_LoadRec.lt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,490, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,491, (v_LoadRec.lt_pct_increase - (TRUNC(v_LoadRec.lt_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,492, Else
WS_ACT_CREATE,FUNCTION,493, v_Create := v_Create||' Pctincrease '||v_LoadRec.lt_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,494, End If;
WS_ACT_CREATE,FUNCTION,495,
WS_ACT_CREATE,FUNCTION,496, If v_LoadRec.lt_post_fix IS NOT NULL Then
WS_ACT_CREATE,FUNCTION,497, v_Create := v_Create||' '||v_LoadRec.lt_post_fix;
WS_ACT_CREATE,FUNCTION,498, End If;
WS_ACT_CREATE,FUNCTION,499,
WS_ACT_CREATE,FUNCTION,500, --=====================================================
WS_ACT_CREATE,FUNCTION,501, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,502, --=====================================================
WS_ACT_CREATE,FUNCTION,503, BEGIN
WS_ACT_CREATE,FUNCTION,504, v_step := 500;
WS_ACT_CREATE,FUNCTION,505, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,506, v_step := 600;
WS_ACT_CREATE,FUNCTION,507, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,508, v_step := 700;
WS_ACT_CREATE,FUNCTION,509, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,510, v_step := 800;
WS_ACT_CREATE,FUNCTION,511, COMMIT;
WS_ACT_CREATE,FUNCTION,512, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,513, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,514, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,515, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,516, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,517, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,518, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,519, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,520, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,521, End If;
WS_ACT_CREATE,FUNCTION,522, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,523, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,524, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,525, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,526, End If;
WS_ACT_CREATE,FUNCTION,527, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,528, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,529, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,530, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,531, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,532, Else
WS_ACT_CREATE,FUNCTION,533, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,534, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,535, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,536, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,537, End If;
WS_ACT_CREATE,FUNCTION,538, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,539, v_result := -2;
WS_ACT_CREATE,FUNCTION,540, RETURN v_result;
WS_ACT_CREATE,FUNCTION,541, END;
WS_ACT_CREATE,FUNCTION,542,
WS_ACT_CREATE,FUNCTION,543, COMMIT;
WS_ACT_CREATE,FUNCTION,544,
WS_ACT_CREATE,FUNCTION,545, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,546,
WS_ACT_CREATE,FUNCTION,547, IF v_LoadRec.lt_post_fix IS NULL
WS_ACT_CREATE,FUNCTION,548, OR instr(v_LoadRec.lt_post_fix,'logging') = 0 Then
WS_ACT_CREATE,FUNCTION,549, --=====================================================
WS_ACT_CREATE,FUNCTION,550, -- Alter the table for No Logging
WS_ACT_CREATE,FUNCTION,551, --=====================================================
WS_ACT_CREATE,FUNCTION,552, v_Create := 'Alter Table '|| v_table_with_schema ||' NoLogging';
WS_ACT_CREATE,FUNCTION,553,
WS_ACT_CREATE,FUNCTION,554, --=====================================================
WS_ACT_CREATE,FUNCTION,555, -- Execute the alter statement
WS_ACT_CREATE,FUNCTION,556, --=====================================================
WS_ACT_CREATE,FUNCTION,557, BEGIN
WS_ACT_CREATE,FUNCTION,558, v_step := 900;
WS_ACT_CREATE,FUNCTION,559, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,560, v_step := 1000;
WS_ACT_CREATE,FUNCTION,561, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,562, v_step := 1100;
WS_ACT_CREATE,FUNCTION,563, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,564, v_step := 1200;
WS_ACT_CREATE,FUNCTION,565, COMMIT;
WS_ACT_CREATE,FUNCTION,566, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,567, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,568, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,569, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,570, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,571, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,572, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,573, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,574, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,575, End If;
WS_ACT_CREATE,FUNCTION,576, v_MsgText := 'Unhandled exception in create / alter';
WS_ACT_CREATE,FUNCTION,577, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,578, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,579, p_return_msg := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,580, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,581, v_result := -2;
WS_ACT_CREATE,FUNCTION,582, RETURN v_result;
WS_ACT_CREATE,FUNCTION,583, END;
WS_ACT_CREATE,FUNCTION,584, p_return_msg := p_return_msg||' Nologging';
WS_ACT_CREATE,FUNCTION,585, End if;
WS_ACT_CREATE,FUNCTION,586,
WS_ACT_CREATE,FUNCTION,587, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,588,
WS_ACT_CREATE,FUNCTION,589, v_result := 1;
WS_ACT_CREATE,FUNCTION,590,
WS_ACT_CREATE,FUNCTION,591, --=====================================================
WS_ACT_CREATE,FUNCTION,592, -- D I M E N S I O N
WS_ACT_CREATE,FUNCTION,593, --=====================================================
WS_ACT_CREATE,FUNCTION,594, ElsIf p_obj_type = v_ws_obj_dim Then
WS_ACT_CREATE,FUNCTION,595, select * into v_DimRec
WS_ACT_CREATE,FUNCTION,596, from ws_dim_tab where dt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,597, --=====================================================
WS_ACT_CREATE,FUNCTION,598, -- D I M E N S I O N T A B L E create
WS_ACT_CREATE,FUNCTION,599, --=====================================================
WS_ACT_CREATE,FUNCTION,600, v_Create := 'Create table '|| v_table_with_schema ||'(';
WS_ACT_CREATE,FUNCTION,601, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,602, --
WS_ACT_CREATE,FUNCTION,603, For v_ColRec in c_Dim LOOP
WS_ACT_CREATE,FUNCTION,604, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,605, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,606, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,607, End If;
WS_ACT_CREATE,FUNCTION,608, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,609, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,610, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,611, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,612, v_create := '';
WS_ACT_CREATE,FUNCTION,613, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,614, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,615, v_create := '';
WS_ACT_CREATE,FUNCTION,616, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,617, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,618, v_create := '';
WS_ACT_CREATE,FUNCTION,619, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,620, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,621, v_create := '';
WS_ACT_CREATE,FUNCTION,622, Else
WS_ACT_CREATE,FUNCTION,623, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,624, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,625, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,626, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,627, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,628, RETURN -2;
WS_ACT_CREATE,FUNCTION,629, End If;
WS_ACT_CREATE,FUNCTION,630, End If;
WS_ACT_CREATE,FUNCTION,631,
WS_ACT_CREATE,FUNCTION,632, v_Create := v_Create||v_ColRec.dc_col_name||' '||v_ColRec.dc_data_type;
WS_ACT_CREATE,FUNCTION,633,
WS_ACT_CREATE,FUNCTION,634, IF LENGTH(TRIM(v_ColRec.dc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,635, AND v_ColRec.dc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,636, THEN
WS_ACT_CREATE,FUNCTION,637,-- v_ColRec.dc_default_value := || v_ColRec.dc_default_value || ;
WS_ACT_CREATE,FUNCTION,638, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,639, v_Create := v_Create|| v_ColRec.dc_default_value;
WS_ACT_CREATE,FUNCTION,640, END IF;
WS_ACT_CREATE,FUNCTION,641,
WS_ACT_CREATE,FUNCTION,642, If v_ColRec.dc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,643, v_Create := v_Create||' NOT NULL';
WS_ACT_CREATE,FUNCTION,644, End If;
WS_ACT_CREATE,FUNCTION,645,
WS_ACT_CREATE,FUNCTION,646,
WS_ACT_CREATE,FUNCTION,647, END LOOP;
WS_ACT_CREATE,FUNCTION,648, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,649, --
WS_ACT_CREATE,FUNCTION,650, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,651, If v_DimRec.dt_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,652, v_Create := v_Create||' Tablespace '||v_DimRec.dt_tablespace;
WS_ACT_CREATE,FUNCTION,653, End If;
WS_ACT_CREATE,FUNCTION,654,
WS_ACT_CREATE,FUNCTION,655, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,656, If v_DimRec.dt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,657, v_Create := v_Create||TRUNC(v_DimRec.dt_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,658, Else
WS_ACT_CREATE,FUNCTION,659, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,660, End If;
WS_ACT_CREATE,FUNCTION,661,
WS_ACT_CREATE,FUNCTION,662, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,663,
WS_ACT_CREATE,FUNCTION,664, If v_DimRec.dt_initial_kb + v_DimRec.dt_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,665, v_Create := v_Create||' Initial '||v_DimRec.dt_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,666, v_Create := v_Create||' Next '||v_DimRec.dt_next_kb||'K';
WS_ACT_CREATE,FUNCTION,667, End If;
WS_ACT_CREATE,FUNCTION,668,
WS_ACT_CREATE,FUNCTION,669, If v_DimRec.dt_min_extents + v_DimRec.dt_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,670, v_Create := v_Create||' Minextents '||v_DimRec.dt_min_extents;
WS_ACT_CREATE,FUNCTION,671, v_Create := v_Create||' Maxextents '||v_DimRec.dt_max_extents;
WS_ACT_CREATE,FUNCTION,672, End If;
WS_ACT_CREATE,FUNCTION,673,
WS_ACT_CREATE,FUNCTION,674, If v_DimRec.dt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,675, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,676, (v_DimRec.dt_pct_increase - (TRUNC(v_DimRec.dt_pct_increase/1000)*1000));
WS_ACT_CREATE,FUNCTION,677, Else
WS_ACT_CREATE,FUNCTION,678, v_Create := v_Create||' Pctincrease '||v_DimRec.dt_pct_increase;
WS_ACT_CREATE,FUNCTION,679, End If;
WS_ACT_CREATE,FUNCTION,680,
WS_ACT_CREATE,FUNCTION,681, If upper(v_DimRec.dt_buffer_pool_ind) = 'K' Then
WS_ACT_CREATE,FUNCTION,682, v_Create := v_Create||' Buffer_Pool Keep';
WS_ACT_CREATE,FUNCTION,683, ElsIf upper(v_DimRec.dt_buffer_pool_ind) = 'R' Then
WS_ACT_CREATE,FUNCTION,684, v_Create := v_Create||' Buffer_Pool Recycle';
WS_ACT_CREATE,FUNCTION,685, ElsIf upper(v_DimRec.dt_buffer_pool_ind) = 'D' Then
WS_ACT_CREATE,FUNCTION,686, v_Create := v_Create||' Buffer_Pool Default';
WS_ACT_CREATE,FUNCTION,687, End If;
WS_ACT_CREATE,FUNCTION,688,
WS_ACT_CREATE,FUNCTION,689, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,690, --=====================================================
WS_ACT_CREATE,FUNCTION,691, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,692, --=====================================================
WS_ACT_CREATE,FUNCTION,693, BEGIN
WS_ACT_CREATE,FUNCTION,694, v_step := 1300;
WS_ACT_CREATE,FUNCTION,695, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,696, v_step := 1400;
WS_ACT_CREATE,FUNCTION,697, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,698, v_step := 1500;
WS_ACT_CREATE,FUNCTION,699, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,700, v_step := 1600;
WS_ACT_CREATE,FUNCTION,701, COMMIT;
WS_ACT_CREATE,FUNCTION,702, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,703, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,704, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,705, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,706, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,707, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,708, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,709, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,710, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,711, End If;
WS_ACT_CREATE,FUNCTION,712, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,713, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,714, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,715, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,716, End If;
WS_ACT_CREATE,FUNCTION,717, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,718, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,719, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,720, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,721, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,722, Else
WS_ACT_CREATE,FUNCTION,723, v_MsgText := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,724, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,725, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,726, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,727, End If;
WS_ACT_CREATE,FUNCTION,728, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,729, v_result := -2;
WS_ACT_CREATE,FUNCTION,730, RETURN v_result;
WS_ACT_CREATE,FUNCTION,731, END;
WS_ACT_CREATE,FUNCTION,732,
WS_ACT_CREATE,FUNCTION,733, COMMIT;
WS_ACT_CREATE,FUNCTION,734, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,735, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,736, v_result := 1;
WS_ACT_CREATE,FUNCTION,737,
WS_ACT_CREATE,FUNCTION,738, --=====================================================
WS_ACT_CREATE,FUNCTION,739, -- D I M E N S I O N V I E W
WS_ACT_CREATE,FUNCTION,740, --=====================================================
WS_ACT_CREATE,FUNCTION,741, ElsIf p_obj_type = v_ws_obj_dim_view Then
WS_ACT_CREATE,FUNCTION,742, select * into v_DimRec
WS_ACT_CREATE,FUNCTION,743, from ws_dim_tab where dt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,744, --=====================================================
WS_ACT_CREATE,FUNCTION,745, -- D I M E N S I O N V I E W
WS_ACT_CREATE,FUNCTION,746, --=====================================================
WS_ACT_CREATE,FUNCTION,747, v_step := 1700;
WS_ACT_CREATE,FUNCTION,748, IF v_DimRec.dt_type_ind = 'U' THEN
WS_ACT_CREATE,FUNCTION,749, IF UPPER(SUBSTR(v_DimRec.dt_gen_spec,1,6)) = 'CREATE' THEN
WS_ACT_CREATE,FUNCTION,750, v_user_view := 1;
WS_ACT_CREATE,FUNCTION,751, END IF;
WS_ACT_CREATE,FUNCTION,752, END IF;
WS_ACT_CREATE,FUNCTION,753,
WS_ACT_CREATE,FUNCTION,754, IF v_user_view = 1 THEN
WS_ACT_CREATE,FUNCTION,755, v_step := 1800;
WS_ACT_CREATE,FUNCTION,756, v_create5 := v_DimRec.dt_gen_spec;
WS_ACT_CREATE,FUNCTION,757, v_create4 := v_DimRec.dt_where;
WS_ACT_CREATE,FUNCTION,758, v_create3 := v_DimRec.dt_attributes;
WS_ACT_CREATE,FUNCTION,759, v_create2 := v_DimRec.dt_post_fix;
WS_ACT_CREATE,FUNCTION,760, v_create := v_DimRec.dt_view_where;
WS_ACT_CREATE,FUNCTION,761, ELSE
WS_ACT_CREATE,FUNCTION,762, v_step := 1900;
WS_ACT_CREATE,FUNCTION,763, v_As := '';
WS_ACT_CREATE,FUNCTION,764, v_Create := 'Create or replace view '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,765,
WS_ACT_CREATE,FUNCTION,766, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,767, --
WS_ACT_CREATE,FUNCTION,768, For v_ColRec in c_Dim LOOP
WS_ACT_CREATE,FUNCTION,769, v_step := 2000;
WS_ACT_CREATE,FUNCTION,770, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,771, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,772, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,773, v_As := v_As||',';
WS_ACT_CREATE,FUNCTION,774, End If;
WS_ACT_CREATE,FUNCTION,775, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,776, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,777, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,778, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,779, v_create := '';
WS_ACT_CREATE,FUNCTION,780, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,781, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,782, v_create := '';
WS_ACT_CREATE,FUNCTION,783, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,784, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,785, v_create := '';
WS_ACT_CREATE,FUNCTION,786, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,787, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,788, v_create := '';
WS_ACT_CREATE,FUNCTION,789, Else
WS_ACT_CREATE,FUNCTION,790, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,791, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,792, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,793, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,794, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,795, RETURN -2;
WS_ACT_CREATE,FUNCTION,796, End If;
WS_ACT_CREATE,FUNCTION,797, End If;
WS_ACT_CREATE,FUNCTION,798, v_Create := v_Create||v_ColRec.dc_col_name;
WS_ACT_CREATE,FUNCTION,799, If v_ColRec.dc_src_table is not null Then
WS_ACT_CREATE,FUNCTION,800, If v_ColRec.dc_transform_code is not null Then
WS_ACT_CREATE,FUNCTION,801, v_As := v_As||v_ColRec.dc_transform_code;
WS_ACT_CREATE,FUNCTION,802, Else
WS_ACT_CREATE,FUNCTION,803, v_As := v_As||v_ColRec.dc_src_table||'.'||v_ColRec.dc_src_column;
WS_ACT_CREATE,FUNCTION,804, End If;
WS_ACT_CREATE,FUNCTION,805, Else
WS_ACT_CREATE,FUNCTION,806, If v_ColRec.dc_transform_code is not null Then
WS_ACT_CREATE,FUNCTION,807, v_As := v_As||v_ColRec.dc_transform_code;
WS_ACT_CREATE,FUNCTION,808, Else
WS_ACT_CREATE,FUNCTION,809, v_As := v_As||v_ColRec.dc_src_column;
WS_ACT_CREATE,FUNCTION,810, End If;
WS_ACT_CREATE,FUNCTION,811, End If;
WS_ACT_CREATE,FUNCTION,812,
WS_ACT_CREATE,FUNCTION,813, END LOOP;
WS_ACT_CREATE,FUNCTION,814,
WS_ACT_CREATE,FUNCTION,815, IF v_DimRec.dt_type_ind = 'U' THEN -- User view select
WS_ACT_CREATE,FUNCTION,816, v_step := 2100;
WS_ACT_CREATE,FUNCTION,817, v_Create := v_Create||') As ';
WS_ACT_CREATE,FUNCTION,818, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,819, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,820, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,821, v_create := '';
WS_ACT_CREATE,FUNCTION,822, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,823, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,824, v_create := '';
WS_ACT_CREATE,FUNCTION,825, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,826, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,827, v_create := '';
WS_ACT_CREATE,FUNCTION,828, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,829, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,830, v_create := '';
WS_ACT_CREATE,FUNCTION,831, Else
WS_ACT_CREATE,FUNCTION,832, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,833, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,834, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,835, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,836, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,837, RETURN -2;
WS_ACT_CREATE,FUNCTION,838, End If;
WS_ACT_CREATE,FUNCTION,839, End If;
WS_ACT_CREATE,FUNCTION,840,
WS_ACT_CREATE,FUNCTION,841, v_Create := v_Create || v_DimRec.dt_gen_spec;
WS_ACT_CREATE,FUNCTION,842, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,843, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,844, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,845, v_create := '';
WS_ACT_CREATE,FUNCTION,846, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,847, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,848, v_create := '';
WS_ACT_CREATE,FUNCTION,849, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,850, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,851, v_create := '';
WS_ACT_CREATE,FUNCTION,852, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,853, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,854, v_create := '';
WS_ACT_CREATE,FUNCTION,855, Else
WS_ACT_CREATE,FUNCTION,856, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,857, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,858, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,859, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,860, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,861, RETURN -2;
WS_ACT_CREATE,FUNCTION,862, End If;
WS_ACT_CREATE,FUNCTION,863, End If;
WS_ACT_CREATE,FUNCTION,864,
WS_ACT_CREATE,FUNCTION,865, v_Create := v_Create || v_DimRec.dt_where;
WS_ACT_CREATE,FUNCTION,866, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,867, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,868, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,869, v_create := '';
WS_ACT_CREATE,FUNCTION,870, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,871, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,872, v_create := '';
WS_ACT_CREATE,FUNCTION,873, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,874, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,875, v_create := '';
WS_ACT_CREATE,FUNCTION,876, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,877, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,878, v_create := '';
WS_ACT_CREATE,FUNCTION,879, Else
WS_ACT_CREATE,FUNCTION,880, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,881, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,882, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,883, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,884, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,885, RETURN -2;
WS_ACT_CREATE,FUNCTION,886, End If;
WS_ACT_CREATE,FUNCTION,887, End If;
WS_ACT_CREATE,FUNCTION,888,
WS_ACT_CREATE,FUNCTION,889, v_Create := v_Create || v_DimRec.dt_attributes;
WS_ACT_CREATE,FUNCTION,890, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,891, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,892, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,893, v_create := '';
WS_ACT_CREATE,FUNCTION,894, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,895, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,896, v_create := '';
WS_ACT_CREATE,FUNCTION,897, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,898, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,899, v_create := '';
WS_ACT_CREATE,FUNCTION,900, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,901, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,902, v_create := '';
WS_ACT_CREATE,FUNCTION,903, Else
WS_ACT_CREATE,FUNCTION,904, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,905, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,906, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,907, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,908, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,909, RETURN -2;
WS_ACT_CREATE,FUNCTION,910, End If;
WS_ACT_CREATE,FUNCTION,911, End If;
WS_ACT_CREATE,FUNCTION,912,
WS_ACT_CREATE,FUNCTION,913, v_Create := v_Create || v_DimRec.dt_post_fix;
WS_ACT_CREATE,FUNCTION,914, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,915, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,916, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,917, v_create := '';
WS_ACT_CREATE,FUNCTION,918, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,919, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,920, v_create := '';
WS_ACT_CREATE,FUNCTION,921, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,922, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,923, v_create := '';
WS_ACT_CREATE,FUNCTION,924, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,925, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,926, v_create := '';
WS_ACT_CREATE,FUNCTION,927, Else
WS_ACT_CREATE,FUNCTION,928, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,929, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,930, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,931, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,932, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,933, RETURN -2;
WS_ACT_CREATE,FUNCTION,934, End If;
WS_ACT_CREATE,FUNCTION,935, End If;
WS_ACT_CREATE,FUNCTION,936,
WS_ACT_CREATE,FUNCTION,937, v_Create := v_Create || v_DimRec.dt_view_where;
WS_ACT_CREATE,FUNCTION,938, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,939, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,940, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,941, v_create := '';
WS_ACT_CREATE,FUNCTION,942, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,943, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,944, v_create := '';
WS_ACT_CREATE,FUNCTION,945, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,946, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,947, v_create := '';
WS_ACT_CREATE,FUNCTION,948, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,949, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,950, v_create := '';
WS_ACT_CREATE,FUNCTION,951, Else
WS_ACT_CREATE,FUNCTION,952, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,953, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,954, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,955, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,956, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,957, RETURN -2;
WS_ACT_CREATE,FUNCTION,958, End If;
WS_ACT_CREATE,FUNCTION,959, End If;
WS_ACT_CREATE,FUNCTION,960,
WS_ACT_CREATE,FUNCTION,961,
WS_ACT_CREATE,FUNCTION,962, ELSE
WS_ACT_CREATE,FUNCTION,963, v_step := 2200;
WS_ACT_CREATE,FUNCTION,964, If instr(UPPER(NVL(v_DimRec.dt_attributes,'')),'DISTINCT~;') = 0 Then
WS_ACT_CREATE,FUNCTION,965, v_Create := v_Create||') As Select '||v_As;
WS_ACT_CREATE,FUNCTION,966, Else
WS_ACT_CREATE,FUNCTION,967, v_Create := v_Create||') As Select DISTINCT '||v_As;
WS_ACT_CREATE,FUNCTION,968, End If;
WS_ACT_CREATE,FUNCTION,969,
WS_ACT_CREATE,FUNCTION,970, -- Check the user specified a from clause
WS_ACT_CREATE,FUNCTION,971, -- Note empty strings assigned to Varchar2 are treated as NULL in Oracle (http://docs.oracle.com/cd/B28359_01/server.111/b28286/sql_elements005.htm)
WS_ACT_CREATE,FUNCTION,972, IF instr(UPPER(LTRIM(NVL(v_DimRec.dt_view_where,'DUMMY'))), 'FROM ') <> 1 Then
WS_ACT_CREATE,FUNCTION,973, v_Create := v_Create||' From ';
WS_ACT_CREATE,FUNCTION,974, v_row := 0;
WS_ACT_CREATE,FUNCTION,975, For v_TabRec in c_Tables LOOP
WS_ACT_CREATE,FUNCTION,976, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,977, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,978, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,979, End If;
WS_ACT_CREATE,FUNCTION,980, if v_table_schema is not null Then
WS_ACT_CREATE,FUNCTION,981, v_Create := v_Create||v_table_schema||'.';
WS_ACT_CREATE,FUNCTION,982, ElsIf v_schema_flag = 1 Then
WS_ACT_CREATE,FUNCTION,983, v_Create := v_Create||v_dss_schema||'.';
WS_ACT_CREATE,FUNCTION,984, End If;
WS_ACT_CREATE,FUNCTION,985, v_Create := v_Create||v_TabRec.dc_src_table;
WS_ACT_CREATE,FUNCTION,986,
WS_ACT_CREATE,FUNCTION,987, END LOOP;
WS_ACT_CREATE,FUNCTION,988, End If;
WS_ACT_CREATE,FUNCTION,989,
WS_ACT_CREATE,FUNCTION,990, If v_DimRec.dt_view_where is not null Then
WS_ACT_CREATE,FUNCTION,991, v_Create := v_Create||' '||v_DimRec.dt_view_where;
WS_ACT_CREATE,FUNCTION,992, End If;
WS_ACT_CREATE,FUNCTION,993, END IF; -- END of normal column list
WS_ACT_CREATE,FUNCTION,994, END IF; -- end of normal view create
WS_ACT_CREATE,FUNCTION,995,
WS_ACT_CREATE,FUNCTION,996, --=====================================================
WS_ACT_CREATE,FUNCTION,997, -- Replace any $P parameters
WS_ACT_CREATE,FUNCTION,998, --=====================================================
WS_ACT_CREATE,FUNCTION,999, BEGIN
WS_ACT_CREATE,FUNCTION,1000, v_step := 2300;
WS_ACT_CREATE,FUNCTION,1001, SELECT WsParameterReplace(v_create,4000) into v_create FROM DUAL;
WS_ACT_CREATE,FUNCTION,1002, v_step := 2400;
WS_ACT_CREATE,FUNCTION,1003, SELECT WsParameterReplace(v_create2,4000) into v_create2 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1004, v_step := 2500;
WS_ACT_CREATE,FUNCTION,1005, SELECT WsParameterReplace(v_create3,4000) into v_create3 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1006, v_step := 2600;
WS_ACT_CREATE,FUNCTION,1007, SELECT WsParameterReplace(v_create4,4000) into v_create4 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1008, v_step := 2700;
WS_ACT_CREATE,FUNCTION,1009, SELECT WsParameterReplace(v_create5,4000) into v_create5 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1010, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1011, v_MsgText := 'Failure replacing parameter: Step ' ||v_step;
WS_ACT_CREATE,FUNCTION,1012, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1013, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1014, END;
WS_ACT_CREATE,FUNCTION,1015,
WS_ACT_CREATE,FUNCTION,1016, --=====================================================
WS_ACT_CREATE,FUNCTION,1017, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,1018, --=====================================================
WS_ACT_CREATE,FUNCTION,1019, BEGIN
WS_ACT_CREATE,FUNCTION,1020, v_step := 2800;
WS_ACT_CREATE,FUNCTION,1021, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,1022, v_step := 2900;
WS_ACT_CREATE,FUNCTION,1023, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,1024, v_step := 3000;
WS_ACT_CREATE,FUNCTION,1025, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,1026, v_step := 3100;
WS_ACT_CREATE,FUNCTION,1027, COMMIT;
WS_ACT_CREATE,FUNCTION,1028, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,1029, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1030, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,1031, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1032, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1033, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,1034, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,1035, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1036, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1037, End If;
WS_ACT_CREATE,FUNCTION,1038, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,1039, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,1040, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1041, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1042, End If;
WS_ACT_CREATE,FUNCTION,1043, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,1044, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1045, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1046, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1047, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1048, Else
WS_ACT_CREATE,FUNCTION,1049, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1050, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1051, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1052, p_return_msg := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1053, End If;
WS_ACT_CREATE,FUNCTION,1054, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1055, v_result := -2;
WS_ACT_CREATE,FUNCTION,1056, RETURN v_result;
WS_ACT_CREATE,FUNCTION,1057, END;
WS_ACT_CREATE,FUNCTION,1058,
WS_ACT_CREATE,FUNCTION,1059, COMMIT;
WS_ACT_CREATE,FUNCTION,1060, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,1061, p_return_msg := 'View created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,1062, v_result := 1;
WS_ACT_CREATE,FUNCTION,1063,
WS_ACT_CREATE,FUNCTION,1064, --=====================================================
WS_ACT_CREATE,FUNCTION,1065, -- V I E W
WS_ACT_CREATE,FUNCTION,1066, --=====================================================
WS_ACT_CREATE,FUNCTION,1067, ElsIf p_obj_type = v_ws_obj_view Then
WS_ACT_CREATE,FUNCTION,1068, select * into v_ViewRec
WS_ACT_CREATE,FUNCTION,1069, from ws_view_tab where vt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,1070,
WS_ACT_CREATE,FUNCTION,1071, v_step := 3200;
WS_ACT_CREATE,FUNCTION,1072, IF v_ViewRec.vt_type_ind = 'U' THEN
WS_ACT_CREATE,FUNCTION,1073,
WS_ACT_CREATE,FUNCTION,1074,
WS_ACT_CREATE,FUNCTION,1075, v_spos := INSTR(NVL(UPPER(v_ViewRec.vt_gen_spec),''),'~ENDGEN~;');
WS_ACT_CREATE,FUNCTION,1076, IF v_spos <> 0 THEN
WS_ACT_CREATE,FUNCTION,1077, IF LENGTH(NVL(v_ViewRec.vt_gen_spec,'')) > v_spos +10 THEN
WS_ACT_CREATE,FUNCTION,1078, v_ViewRec.vt_gen_spec := SUBSTR(v_ViewRec.vt_gen_spec,v_spos +9);
WS_ACT_CREATE,FUNCTION,1079, ELSE
WS_ACT_CREATE,FUNCTION,1080, v_ViewRec.vt_gen_spec := '';
WS_ACT_CREATE,FUNCTION,1081, END IF;
WS_ACT_CREATE,FUNCTION,1082, END IF;
WS_ACT_CREATE,FUNCTION,1083,
WS_ACT_CREATE,FUNCTION,1084, v_spos := INSTR(NVL(UPPER(v_ViewRec.vt_where),''),'~ENDWHERE~;');
WS_ACT_CREATE,FUNCTION,1085, IF v_spos <> 0 THEN
WS_ACT_CREATE,FUNCTION,1086, IF LENGTH(NVL(v_ViewRec.vt_where,'')) > v_spos +12 THEN
WS_ACT_CREATE,FUNCTION,1087, v_ViewRec.vt_where := SUBSTR(NVL(v_ViewRec.vt_where,''),v_spos +11);
WS_ACT_CREATE,FUNCTION,1088, ELSE
WS_ACT_CREATE,FUNCTION,1089, v_ViewRec.vt_where := '';
WS_ACT_CREATE,FUNCTION,1090, END IF;
WS_ACT_CREATE,FUNCTION,1091, END IF;
WS_ACT_CREATE,FUNCTION,1092,
WS_ACT_CREATE,FUNCTION,1093,
WS_ACT_CREATE,FUNCTION,1094, IF UPPER(SUBSTR(v_ViewRec.vt_gen_spec,1,6)) = 'CREATE' THEN
WS_ACT_CREATE,FUNCTION,1095, v_user_view := 1;
WS_ACT_CREATE,FUNCTION,1096, END IF;
WS_ACT_CREATE,FUNCTION,1097, END IF;
WS_ACT_CREATE,FUNCTION,1098,
WS_ACT_CREATE,FUNCTION,1099, IF v_user_view = 1 THEN
WS_ACT_CREATE,FUNCTION,1100, v_step := 3300;
WS_ACT_CREATE,FUNCTION,1101, v_create5 := v_ViewRec.vt_gen_spec;
WS_ACT_CREATE,FUNCTION,1102, v_create4 := v_ViewRec.vt_where;
WS_ACT_CREATE,FUNCTION,1103, v_create3 := v_ViewRec.vt_attributes;
WS_ACT_CREATE,FUNCTION,1104, v_create2 := v_ViewRec.vt_post_fix;
WS_ACT_CREATE,FUNCTION,1105, v_create := v_ViewRec.vt_view_where;
WS_ACT_CREATE,FUNCTION,1106, ELSE
WS_ACT_CREATE,FUNCTION,1107, v_step := 3400;
WS_ACT_CREATE,FUNCTION,1108, v_As := '';
WS_ACT_CREATE,FUNCTION,1109, v_Create := 'Create or replace view '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,1110,
WS_ACT_CREATE,FUNCTION,1111, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,1112, --
WS_ACT_CREATE,FUNCTION,1113, For v_ColRec in c_View LOOP
WS_ACT_CREATE,FUNCTION,1114, v_step := 3500;
WS_ACT_CREATE,FUNCTION,1115, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,1116, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,1117, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,1118, v_As := v_As||',';
WS_ACT_CREATE,FUNCTION,1119, End If;
WS_ACT_CREATE,FUNCTION,1120, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,1121, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1122, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1123, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1124, v_create := '';
WS_ACT_CREATE,FUNCTION,1125, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1126, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1127, v_create := '';
WS_ACT_CREATE,FUNCTION,1128, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1129, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1130, v_create := '';
WS_ACT_CREATE,FUNCTION,1131, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1132, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1133, v_create := '';
WS_ACT_CREATE,FUNCTION,1134, Else
WS_ACT_CREATE,FUNCTION,1135, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1136, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1137, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1138, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1139, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1140, RETURN -2;
WS_ACT_CREATE,FUNCTION,1141, End If;
WS_ACT_CREATE,FUNCTION,1142, End If;
WS_ACT_CREATE,FUNCTION,1143, v_Create := v_Create||v_ColRec.vc_col_name;
WS_ACT_CREATE,FUNCTION,1144, If v_ColRec.vc_src_table is not null Then
WS_ACT_CREATE,FUNCTION,1145, If v_ColRec.vc_transform_code is not null Then
WS_ACT_CREATE,FUNCTION,1146, v_As := v_As||v_ColRec.vc_transform_code;
WS_ACT_CREATE,FUNCTION,1147, Else
WS_ACT_CREATE,FUNCTION,1148, v_As := v_As||v_ColRec.vc_src_table||'.'||v_ColRec.vc_src_column;
WS_ACT_CREATE,FUNCTION,1149, End If;
WS_ACT_CREATE,FUNCTION,1150, Else
WS_ACT_CREATE,FUNCTION,1151, If v_ColRec.vc_transform_code is not null Then
WS_ACT_CREATE,FUNCTION,1152, v_As := v_As||v_ColRec.vc_transform_code;
WS_ACT_CREATE,FUNCTION,1153, Else
WS_ACT_CREATE,FUNCTION,1154, v_As := v_As||v_ColRec.vc_src_column;
WS_ACT_CREATE,FUNCTION,1155, End If;
WS_ACT_CREATE,FUNCTION,1156, End If;
WS_ACT_CREATE,FUNCTION,1157,
WS_ACT_CREATE,FUNCTION,1158, END LOOP;
WS_ACT_CREATE,FUNCTION,1159,
WS_ACT_CREATE,FUNCTION,1160, IF v_ViewRec.vt_type_ind = 'U' THEN -- User view select
WS_ACT_CREATE,FUNCTION,1161, v_step := 3600;
WS_ACT_CREATE,FUNCTION,1162, v_Create := v_Create||') As ';
WS_ACT_CREATE,FUNCTION,1163, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1164, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1165, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1166, v_create := '';
WS_ACT_CREATE,FUNCTION,1167, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1168, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1169, v_create := '';
WS_ACT_CREATE,FUNCTION,1170, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1171, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1172, v_create := '';
WS_ACT_CREATE,FUNCTION,1173, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1174, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1175, v_create := '';
WS_ACT_CREATE,FUNCTION,1176, Else
WS_ACT_CREATE,FUNCTION,1177, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1178, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1179, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1180, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1181, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1182, RETURN -2;
WS_ACT_CREATE,FUNCTION,1183, End If;
WS_ACT_CREATE,FUNCTION,1184, End If;
WS_ACT_CREATE,FUNCTION,1185,
WS_ACT_CREATE,FUNCTION,1186, v_Create := v_Create || v_ViewRec.vt_gen_spec;
WS_ACT_CREATE,FUNCTION,1187, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1188, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1189, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1190, v_create := '';
WS_ACT_CREATE,FUNCTION,1191, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1192, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1193, v_create := '';
WS_ACT_CREATE,FUNCTION,1194, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1195, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1196, v_create := '';
WS_ACT_CREATE,FUNCTION,1197, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1198, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1199, v_create := '';
WS_ACT_CREATE,FUNCTION,1200, Else
WS_ACT_CREATE,FUNCTION,1201, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1202, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1203, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1204, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1205, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1206, RETURN -2;
WS_ACT_CREATE,FUNCTION,1207, End If;
WS_ACT_CREATE,FUNCTION,1208, End If;
WS_ACT_CREATE,FUNCTION,1209,
WS_ACT_CREATE,FUNCTION,1210, v_Create := v_Create || v_ViewRec.vt_where;
WS_ACT_CREATE,FUNCTION,1211, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1212, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1213, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1214, v_create := '';
WS_ACT_CREATE,FUNCTION,1215, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1216, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1217, v_create := '';
WS_ACT_CREATE,FUNCTION,1218, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1219, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1220, v_create := '';
WS_ACT_CREATE,FUNCTION,1221, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1222, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1223, v_create := '';
WS_ACT_CREATE,FUNCTION,1224, Else
WS_ACT_CREATE,FUNCTION,1225, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1226, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1227, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1228, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1229, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1230, RETURN -2;
WS_ACT_CREATE,FUNCTION,1231, End If;
WS_ACT_CREATE,FUNCTION,1232, End If;
WS_ACT_CREATE,FUNCTION,1233,
WS_ACT_CREATE,FUNCTION,1234, v_Create := v_Create || v_ViewRec.vt_attributes;
WS_ACT_CREATE,FUNCTION,1235, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1236, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1237, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1238, v_create := '';
WS_ACT_CREATE,FUNCTION,1239, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1240, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1241, v_create := '';
WS_ACT_CREATE,FUNCTION,1242, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1243, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1244, v_create := '';
WS_ACT_CREATE,FUNCTION,1245, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1246, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1247, v_create := '';
WS_ACT_CREATE,FUNCTION,1248, Else
WS_ACT_CREATE,FUNCTION,1249, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1250, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1251, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1252, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1253, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1254, RETURN -2;
WS_ACT_CREATE,FUNCTION,1255, End If;
WS_ACT_CREATE,FUNCTION,1256, End If;
WS_ACT_CREATE,FUNCTION,1257,
WS_ACT_CREATE,FUNCTION,1258, v_Create := v_Create || v_ViewRec.vt_post_fix;
WS_ACT_CREATE,FUNCTION,1259, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1260, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1261, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1262, v_create := '';
WS_ACT_CREATE,FUNCTION,1263, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1264, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1265, v_create := '';
WS_ACT_CREATE,FUNCTION,1266, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1267, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1268, v_create := '';
WS_ACT_CREATE,FUNCTION,1269, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1270, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1271, v_create := '';
WS_ACT_CREATE,FUNCTION,1272, Else
WS_ACT_CREATE,FUNCTION,1273, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1274, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1275, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1276, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1277, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1278, RETURN -2;
WS_ACT_CREATE,FUNCTION,1279, End If;
WS_ACT_CREATE,FUNCTION,1280, End If;
WS_ACT_CREATE,FUNCTION,1281,
WS_ACT_CREATE,FUNCTION,1282, v_Create := v_Create || v_ViewRec.vt_view_where;
WS_ACT_CREATE,FUNCTION,1283, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1284, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1285, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1286, v_create := '';
WS_ACT_CREATE,FUNCTION,1287, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1288, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1289, v_create := '';
WS_ACT_CREATE,FUNCTION,1290, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1291, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1292, v_create := '';
WS_ACT_CREATE,FUNCTION,1293, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1294, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1295, v_create := '';
WS_ACT_CREATE,FUNCTION,1296, Else
WS_ACT_CREATE,FUNCTION,1297, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1298, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1299, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1300, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1301, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1302, RETURN -2;
WS_ACT_CREATE,FUNCTION,1303, End If;
WS_ACT_CREATE,FUNCTION,1304, End If;
WS_ACT_CREATE,FUNCTION,1305,
WS_ACT_CREATE,FUNCTION,1306,
WS_ACT_CREATE,FUNCTION,1307, ELSE
WS_ACT_CREATE,FUNCTION,1308, v_step := 3700;
WS_ACT_CREATE,FUNCTION,1309,
WS_ACT_CREATE,FUNCTION,1310, If instr(UPPER(NVL(v_ViewRec.vt_attributes,'')),'DISTINCT~;') = 0 Then
WS_ACT_CREATE,FUNCTION,1311, v_Create := v_Create||') As Select '||v_As;
WS_ACT_CREATE,FUNCTION,1312, Else
WS_ACT_CREATE,FUNCTION,1313, v_Create := v_Create||') As Select DISTINCT '||v_As;
WS_ACT_CREATE,FUNCTION,1314, End If;
WS_ACT_CREATE,FUNCTION,1315,
WS_ACT_CREATE,FUNCTION,1316, -- Check the user specified a from clause
WS_ACT_CREATE,FUNCTION,1317, -- Note empty strings assigned to Varchar2 are treated as NULL in Oracle (http://docs.oracle.com/cd/B28359_01/server.111/b28286/sql_elements005.htm)
WS_ACT_CREATE,FUNCTION,1318, IF instr(UPPER(LTRIM(NVL(v_ViewRec.vt_view_where,'DUMMY'))), 'FROM ') <> 1 Then
WS_ACT_CREATE,FUNCTION,1319, v_Create := v_Create||' From ';
WS_ACT_CREATE,FUNCTION,1320, v_row := 0;
WS_ACT_CREATE,FUNCTION,1321, For v_ViewTabRec in c_ViewTables LOOP
WS_ACT_CREATE,FUNCTION,1322, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,1323, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,1324, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,1325, End If;
WS_ACT_CREATE,FUNCTION,1326, if v_table_schema is not null Then
WS_ACT_CREATE,FUNCTION,1327, v_Create := v_Create||v_table_schema||'.';
WS_ACT_CREATE,FUNCTION,1328, ElsIf v_schema_flag = 1 Then
WS_ACT_CREATE,FUNCTION,1329, v_Create := v_Create||v_dss_schema||'.';
WS_ACT_CREATE,FUNCTION,1330, End If;
WS_ACT_CREATE,FUNCTION,1331, v_Create := v_Create||v_ViewTabRec.vc_src_table;
WS_ACT_CREATE,FUNCTION,1332,
WS_ACT_CREATE,FUNCTION,1333, END LOOP;
WS_ACT_CREATE,FUNCTION,1334, End If;
WS_ACT_CREATE,FUNCTION,1335,
WS_ACT_CREATE,FUNCTION,1336, If v_ViewRec.vt_view_where is not null Then
WS_ACT_CREATE,FUNCTION,1337, v_Create := v_Create||' '||v_ViewRec.vt_view_where;
WS_ACT_CREATE,FUNCTION,1338, End If;
WS_ACT_CREATE,FUNCTION,1339, END IF; -- END of normal column list
WS_ACT_CREATE,FUNCTION,1340, END IF; -- end of normal view create
WS_ACT_CREATE,FUNCTION,1341,
WS_ACT_CREATE,FUNCTION,1342, --=====================================================
WS_ACT_CREATE,FUNCTION,1343, -- Replace any $P parameters
WS_ACT_CREATE,FUNCTION,1344, --=====================================================
WS_ACT_CREATE,FUNCTION,1345, BEGIN
WS_ACT_CREATE,FUNCTION,1346, v_step := 3800;
WS_ACT_CREATE,FUNCTION,1347, SELECT WsParameterReplace(v_create,4000) into v_create FROM DUAL;
WS_ACT_CREATE,FUNCTION,1348, v_step := 3900;
WS_ACT_CREATE,FUNCTION,1349, SELECT WsParameterReplace(v_create2,4000) into v_create2 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1350, v_step := 4000;
WS_ACT_CREATE,FUNCTION,1351, SELECT WsParameterReplace(v_create3,4000) into v_create3 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1352, v_step := 4100;
WS_ACT_CREATE,FUNCTION,1353, SELECT WsParameterReplace(v_create4,4000) into v_create4 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1354, v_step := 4200;
WS_ACT_CREATE,FUNCTION,1355, SELECT WsParameterReplace(v_create5,4000) into v_create5 FROM DUAL;
WS_ACT_CREATE,FUNCTION,1356, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1357, v_MsgText := 'Failure replacing parameter: Step ' ||v_step;
WS_ACT_CREATE,FUNCTION,1358, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1359, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1360, END;
WS_ACT_CREATE,FUNCTION,1361,
WS_ACT_CREATE,FUNCTION,1362, SELECT v_create5||v_create4||v_create3||v_create2||v_create into v_create_all FROM DUAL;
WS_ACT_CREATE,FUNCTION,1363,
WS_ACT_CREATE,FUNCTION,1364, v_create_all := REPLACE(v_create_all, '$TABLE$', v_table_name);
WS_ACT_CREATE,FUNCTION,1365, v_create_all := REPLACE(v_create_all, '$OBJECT$', v_table_with_schema);
WS_ACT_CREATE,FUNCTION,1366, v_create_all := REPLACE(v_create_all, '$SCHEMA$', v_table_schema);
WS_ACT_CREATE,FUNCTION,1367, v_create_all := REPLACE(v_create_all, '$TABLESPACE$', v_tablespace);
WS_ACT_CREATE,FUNCTION,1368,
WS_ACT_CREATE,FUNCTION,1369, -- Execute the DDL statements individually based of the end-statement-indicator in the override statement
WS_ACT_CREATE,FUNCTION,1370, -- Get the initial end location of the statement
WS_ACT_CREATE,FUNCTION,1371, SELECT COALESCE(LENGTH(v_create_all),0) INTO v_end_location FROM DUAL;
WS_ACT_CREATE,FUNCTION,1372,
WS_ACT_CREATE,FUNCTION,1373, -- Get the end-of-statement indicator, defaults to <EOS>
WS_ACT_CREATE,FUNCTION,1374, SELECT COALESCE(ta_text_3, '<EOS>') INTO v_delimiter FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'M';
WS_ACT_CREATE,FUNCTION,1375,
WS_ACT_CREATE,FUNCTION,1376, -- Loop through the override statement and execute each statement individually
WS_ACT_CREATE,FUNCTION,1377, WHILE v_end_location > 0
WS_ACT_CREATE,FUNCTION,1378, LOOP
WS_ACT_CREATE,FUNCTION,1379, SELECT INSTR(v_create_all,v_delimiter, v_start_location) INTO v_end_location FROM DUAL;
WS_ACT_CREATE,FUNCTION,1380, SELECT CASE
WS_ACT_CREATE,FUNCTION,1381, WHEN v_end_location > 0
WS_ACT_CREATE,FUNCTION,1382, THEN SUBSTR(v_create_all,v_start_location,v_end_location -v_start_location)
WS_ACT_CREATE,FUNCTION,1383, ELSE SUBSTR(v_create_all,v_start_location)
WS_ACT_CREATE,FUNCTION,1384, END INTO v_statement FROM DUAL;
WS_ACT_CREATE,FUNCTION,1385,
WS_ACT_CREATE,FUNCTION,1386, --=====================================================
WS_ACT_CREATE,FUNCTION,1387, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,1388, --=====================================================
WS_ACT_CREATE,FUNCTION,1389, IF TRIM(TRANSLATE(v_statement, chr(10) || chr(13) || chr(09), ' ')) IS NOT NULL Then
WS_ACT_CREATE,FUNCTION,1390, BEGIN
WS_ACT_CREATE,FUNCTION,1391, v_step := 4300;
WS_ACT_CREATE,FUNCTION,1392, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,1393, v_step := 4400;
WS_ACT_CREATE,FUNCTION,1394, DBMS_SQL.PARSE(v_cursor, v_statement, 1);
WS_ACT_CREATE,FUNCTION,1395, v_step := 4500;
WS_ACT_CREATE,FUNCTION,1396, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,1397, v_step := 4600;
WS_ACT_CREATE,FUNCTION,1398, COMMIT;
WS_ACT_CREATE,FUNCTION,1399, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,1400, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1401, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,1402, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1403, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1404, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,1405, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,1406, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1407, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1408, End If;
WS_ACT_CREATE,FUNCTION,1409, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,1410, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,1411, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1412, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1413, End If;
WS_ACT_CREATE,FUNCTION,1414, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,1415, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1416, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1417, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1418, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1419, Else
WS_ACT_CREATE,FUNCTION,1420, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1421, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1422, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1423, p_return_msg := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1424, End If;
WS_ACT_CREATE,FUNCTION,1425, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1426, v_result := -2;
WS_ACT_CREATE,FUNCTION,1427, RETURN v_result;
WS_ACT_CREATE,FUNCTION,1428, END;
WS_ACT_CREATE,FUNCTION,1429, END IF;
WS_ACT_CREATE,FUNCTION,1430,
WS_ACT_CREATE,FUNCTION,1431, SELECT v_end_location + LENGTH(v_delimiter) INTO v_start_location FROM DUAL;
WS_ACT_CREATE,FUNCTION,1432, END LOOP;
WS_ACT_CREATE,FUNCTION,1433,
WS_ACT_CREATE,FUNCTION,1434, COMMIT;
WS_ACT_CREATE,FUNCTION,1435, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,1436, p_return_msg := 'View created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,1437, v_result := 1;
WS_ACT_CREATE,FUNCTION,1438,
WS_ACT_CREATE,FUNCTION,1439, --=====================================================
WS_ACT_CREATE,FUNCTION,1440, -- F A C T
WS_ACT_CREATE,FUNCTION,1441, --=====================================================
WS_ACT_CREATE,FUNCTION,1442, ElsIf p_obj_type = v_ws_obj_fact Or p_obj_type = v_ws_obj_fact_kpi Then
WS_ACT_CREATE,FUNCTION,1443, select * into v_FactRec
WS_ACT_CREATE,FUNCTION,1444, from ws_fact_tab where ft_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,1445, --=====================================================
WS_ACT_CREATE,FUNCTION,1446, -- Build the create string
WS_ACT_CREATE,FUNCTION,1447, --=====================================================
WS_ACT_CREATE,FUNCTION,1448, v_Create := 'Create table '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,1449, v_row := 0;
WS_ACT_CREATE,FUNCTION,1450,
WS_ACT_CREATE,FUNCTION,1451, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,1452, --
WS_ACT_CREATE,FUNCTION,1453, For v_ColRec in c_Fact LOOP
WS_ACT_CREATE,FUNCTION,1454, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,1455, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,1456, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,1457, End If;
WS_ACT_CREATE,FUNCTION,1458, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,1459, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1460, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1461, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1462, v_create := '';
WS_ACT_CREATE,FUNCTION,1463, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1464, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1465, v_create := '';
WS_ACT_CREATE,FUNCTION,1466, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1467, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1468, v_create := '';
WS_ACT_CREATE,FUNCTION,1469, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1470, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1471, v_create := '';
WS_ACT_CREATE,FUNCTION,1472, Else
WS_ACT_CREATE,FUNCTION,1473, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1474, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1475, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1476, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1477, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1478, RETURN -2;
WS_ACT_CREATE,FUNCTION,1479, End If;
WS_ACT_CREATE,FUNCTION,1480, End If;
WS_ACT_CREATE,FUNCTION,1481,
WS_ACT_CREATE,FUNCTION,1482, v_Create := v_Create||v_ColRec.fc_col_name||' '||v_ColRec.fc_data_type;
WS_ACT_CREATE,FUNCTION,1483,
WS_ACT_CREATE,FUNCTION,1484, IF LENGTH(TRIM(v_ColRec.fc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,1485, AND v_ColRec.fc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,1486, THEN
WS_ACT_CREATE,FUNCTION,1487,-- v_ColRec.fc_default_value := || v_ColRec.fc_default_value || ;
WS_ACT_CREATE,FUNCTION,1488, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,1489, v_Create := v_Create|| v_ColRec.fc_default_value;
WS_ACT_CREATE,FUNCTION,1490, END IF;
WS_ACT_CREATE,FUNCTION,1491,
WS_ACT_CREATE,FUNCTION,1492, If v_ColRec.fc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,1493, v_Create := v_Create||' NOT NULL ';
WS_ACT_CREATE,FUNCTION,1494, End If;
WS_ACT_CREATE,FUNCTION,1495,
WS_ACT_CREATE,FUNCTION,1496, END LOOP;
WS_ACT_CREATE,FUNCTION,1497, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,1498, --
WS_ACT_CREATE,FUNCTION,1499, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,1500, If v_FactRec.ft_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,1501, v_Create := v_Create||' Tablespace '||v_FactRec.ft_tablespace;
WS_ACT_CREATE,FUNCTION,1502, End If;
WS_ACT_CREATE,FUNCTION,1503,
WS_ACT_CREATE,FUNCTION,1504, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,1505, If v_FactRec.ft_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1506, v_Create := v_Create||TRUNC(v_FactRec.ft_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,1507, Else
WS_ACT_CREATE,FUNCTION,1508, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,1509, End If;
WS_ACT_CREATE,FUNCTION,1510,
WS_ACT_CREATE,FUNCTION,1511, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,1512,
WS_ACT_CREATE,FUNCTION,1513, If v_FactRec.ft_initial_kb + v_FactRec.ft_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,1514, v_Create := v_Create||' Initial '||v_FactRec.ft_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,1515, v_Create := v_Create||' Next '||v_FactRec.ft_next_kb||'K';
WS_ACT_CREATE,FUNCTION,1516, End If;
WS_ACT_CREATE,FUNCTION,1517,
WS_ACT_CREATE,FUNCTION,1518, If v_FactRec.ft_min_extents + v_FactRec.ft_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,1519, v_Create := v_Create||' Minextents '||v_FactRec.ft_min_extents;
WS_ACT_CREATE,FUNCTION,1520, v_Create := v_Create||' Maxextents '||v_FactRec.ft_max_extents;
WS_ACT_CREATE,FUNCTION,1521, End If;
WS_ACT_CREATE,FUNCTION,1522,
WS_ACT_CREATE,FUNCTION,1523, If v_FactRec.ft_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1524, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,1525, (v_FactRec.ft_pct_increase - (TRUNC(v_FactRec.ft_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,1526, Else
WS_ACT_CREATE,FUNCTION,1527, v_Create := v_Create||' Pctincrease '||v_FactRec.ft_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,1528, End If;
WS_ACT_CREATE,FUNCTION,1529,
WS_ACT_CREATE,FUNCTION,1530, --=====================================================
WS_ACT_CREATE,FUNCTION,1531, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,1532, --=====================================================
WS_ACT_CREATE,FUNCTION,1533, BEGIN
WS_ACT_CREATE,FUNCTION,1534, v_step := 4700;
WS_ACT_CREATE,FUNCTION,1535, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,1536, v_step := 4800;
WS_ACT_CREATE,FUNCTION,1537, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,1538, v_step := 4900;
WS_ACT_CREATE,FUNCTION,1539, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,1540, v_step := 5000;
WS_ACT_CREATE,FUNCTION,1541, COMMIT;
WS_ACT_CREATE,FUNCTION,1542, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,1543, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1544, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,1545, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1546, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1547, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,1548, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,1549, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1550, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1551, End If;
WS_ACT_CREATE,FUNCTION,1552, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,1553, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,1554, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1555, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1556, End If;
WS_ACT_CREATE,FUNCTION,1557, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,1558, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1559, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1560, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1561, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1562, Else
WS_ACT_CREATE,FUNCTION,1563, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1564, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1565, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1566, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,1567, End If;
WS_ACT_CREATE,FUNCTION,1568, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1569, v_result := -2;
WS_ACT_CREATE,FUNCTION,1570, RETURN v_result;
WS_ACT_CREATE,FUNCTION,1571, END;
WS_ACT_CREATE,FUNCTION,1572,
WS_ACT_CREATE,FUNCTION,1573, COMMIT;
WS_ACT_CREATE,FUNCTION,1574, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,1575, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,1576, v_result := 1;
WS_ACT_CREATE,FUNCTION,1577,
WS_ACT_CREATE,FUNCTION,1578, --=====================================================
WS_ACT_CREATE,FUNCTION,1579, -- S T A G E
WS_ACT_CREATE,FUNCTION,1580, --=====================================================
WS_ACT_CREATE,FUNCTION,1581, ElsIf p_obj_type = v_ws_obj_stage Then
WS_ACT_CREATE,FUNCTION,1582, select * into v_StageRec
WS_ACT_CREATE,FUNCTION,1583, from ws_stage_tab where st_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,1584, --=====================================================
WS_ACT_CREATE,FUNCTION,1585, -- Build the create string
WS_ACT_CREATE,FUNCTION,1586, --=====================================================
WS_ACT_CREATE,FUNCTION,1587, v_Create := 'Create table '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,1588, v_row := 0;
WS_ACT_CREATE,FUNCTION,1589,
WS_ACT_CREATE,FUNCTION,1590, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,1591, --
WS_ACT_CREATE,FUNCTION,1592, For v_ColRec in c_Stage LOOP
WS_ACT_CREATE,FUNCTION,1593, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,1594, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,1595, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,1596, End If;
WS_ACT_CREATE,FUNCTION,1597, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,1598, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1599, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1600, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1601, v_create := '';
WS_ACT_CREATE,FUNCTION,1602, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1603, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1604, v_create := '';
WS_ACT_CREATE,FUNCTION,1605, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1606, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1607, v_create := '';
WS_ACT_CREATE,FUNCTION,1608, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1609, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1610, v_create := '';
WS_ACT_CREATE,FUNCTION,1611, Else
WS_ACT_CREATE,FUNCTION,1612, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1613, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1614, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1615, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1616, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1617, RETURN -2;
WS_ACT_CREATE,FUNCTION,1618, End If;
WS_ACT_CREATE,FUNCTION,1619, End If;
WS_ACT_CREATE,FUNCTION,1620,
WS_ACT_CREATE,FUNCTION,1621, v_Create := v_Create||v_ColRec.sc_col_name||' '||v_ColRec.sc_data_type;
WS_ACT_CREATE,FUNCTION,1622,
WS_ACT_CREATE,FUNCTION,1623, IF LENGTH(TRIM(v_ColRec.sc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,1624, AND v_ColRec.sc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,1625, THEN
WS_ACT_CREATE,FUNCTION,1626,-- v_ColRec.sc_default_value := || v_ColRec.sc_default_value || ;
WS_ACT_CREATE,FUNCTION,1627, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,1628, v_Create := v_Create|| v_ColRec.sc_default_value;
WS_ACT_CREATE,FUNCTION,1629, END IF;
WS_ACT_CREATE,FUNCTION,1630,
WS_ACT_CREATE,FUNCTION,1631, If v_ColRec.sc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,1632, v_Create := v_Create||' NOT NULL';
WS_ACT_CREATE,FUNCTION,1633, End If;
WS_ACT_CREATE,FUNCTION,1634,
WS_ACT_CREATE,FUNCTION,1635, END LOOP;
WS_ACT_CREATE,FUNCTION,1636, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,1637, --
WS_ACT_CREATE,FUNCTION,1638, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,1639, If v_StageRec.st_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,1640, v_Create := v_Create||' Tablespace '||v_StageRec.st_tablespace;
WS_ACT_CREATE,FUNCTION,1641, End If;
WS_ACT_CREATE,FUNCTION,1642,
WS_ACT_CREATE,FUNCTION,1643, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,1644, If v_StageRec.st_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1645, v_Create := v_Create||TRUNC(v_StageRec.st_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,1646, Else
WS_ACT_CREATE,FUNCTION,1647, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,1648, End If;
WS_ACT_CREATE,FUNCTION,1649,
WS_ACT_CREATE,FUNCTION,1650, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,1651,
WS_ACT_CREATE,FUNCTION,1652, If v_StageRec.st_initial_kb + v_StageRec.st_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,1653, v_Create := v_Create||' Initial '||v_StageRec.st_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,1654, v_Create := v_Create||' Next '||v_StageRec.st_next_kb||'K';
WS_ACT_CREATE,FUNCTION,1655, End If;
WS_ACT_CREATE,FUNCTION,1656,
WS_ACT_CREATE,FUNCTION,1657, If v_StageRec.st_min_extents + v_StageRec.st_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,1658, v_Create := v_Create||' Minextents '||v_StageRec.st_min_extents;
WS_ACT_CREATE,FUNCTION,1659, v_Create := v_Create||' Maxextents '||v_StageRec.st_max_extents;
WS_ACT_CREATE,FUNCTION,1660, End If;
WS_ACT_CREATE,FUNCTION,1661,
WS_ACT_CREATE,FUNCTION,1662, If v_StageRec.st_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1663, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,1664, (v_StageRec.st_pct_increase - (TRUNC(v_StageRec.st_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,1665, Else
WS_ACT_CREATE,FUNCTION,1666, v_Create := v_Create||' Pctincrease '||v_StageRec.st_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,1667, End If;
WS_ACT_CREATE,FUNCTION,1668,
WS_ACT_CREATE,FUNCTION,1669,
WS_ACT_CREATE,FUNCTION,1670, --=====================================================
WS_ACT_CREATE,FUNCTION,1671, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,1672, --=====================================================
WS_ACT_CREATE,FUNCTION,1673, BEGIN
WS_ACT_CREATE,FUNCTION,1674, v_step := 5100;
WS_ACT_CREATE,FUNCTION,1675, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,1676, v_step := 5200;
WS_ACT_CREATE,FUNCTION,1677, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,1678, v_step := 5300;
WS_ACT_CREATE,FUNCTION,1679, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,1680, v_step := 5400;
WS_ACT_CREATE,FUNCTION,1681, COMMIT;
WS_ACT_CREATE,FUNCTION,1682, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,1683, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1684, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,1685, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1686, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1687, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,1688, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,1689, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1690, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1691, End If;
WS_ACT_CREATE,FUNCTION,1692, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,1693, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,1694, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1695, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1696, End If;
WS_ACT_CREATE,FUNCTION,1697, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,1698, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1699, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1700, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1701, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1702, Else
WS_ACT_CREATE,FUNCTION,1703, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1704, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1705, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1706, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,1707, End If;
WS_ACT_CREATE,FUNCTION,1708, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1709, v_result := -2;
WS_ACT_CREATE,FUNCTION,1710, RETURN v_result;
WS_ACT_CREATE,FUNCTION,1711, END;
WS_ACT_CREATE,FUNCTION,1712,
WS_ACT_CREATE,FUNCTION,1713, COMMIT;
WS_ACT_CREATE,FUNCTION,1714, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,1715, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,1716, v_result := 1;
WS_ACT_CREATE,FUNCTION,1717, --=====================================================
WS_ACT_CREATE,FUNCTION,1718, -- A G G R E G A T E
WS_ACT_CREATE,FUNCTION,1719, --=====================================================
WS_ACT_CREATE,FUNCTION,1720, ElsIf p_obj_type = v_ws_obj_agg Then
WS_ACT_CREATE,FUNCTION,1721, select * into v_AggRec
WS_ACT_CREATE,FUNCTION,1722, from ws_agg_tab where at_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,1723, --=====================================================
WS_ACT_CREATE,FUNCTION,1724, -- Build the create string
WS_ACT_CREATE,FUNCTION,1725, --=====================================================
WS_ACT_CREATE,FUNCTION,1726, v_Create := 'Create table '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,1727, v_row := 0;
WS_ACT_CREATE,FUNCTION,1728,
WS_ACT_CREATE,FUNCTION,1729, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,1730, --
WS_ACT_CREATE,FUNCTION,1731, For v_ColRec in c_Agg LOOP
WS_ACT_CREATE,FUNCTION,1732, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,1733, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,1734, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,1735, End If;
WS_ACT_CREATE,FUNCTION,1736, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,1737, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1738, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1739, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1740, v_create := '';
WS_ACT_CREATE,FUNCTION,1741, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1742, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1743, v_create := '';
WS_ACT_CREATE,FUNCTION,1744, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1745, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1746, v_create := '';
WS_ACT_CREATE,FUNCTION,1747, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1748, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1749, v_create := '';
WS_ACT_CREATE,FUNCTION,1750, Else
WS_ACT_CREATE,FUNCTION,1751, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1752, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1753, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1754, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1755, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1756, RETURN -2;
WS_ACT_CREATE,FUNCTION,1757, End If;
WS_ACT_CREATE,FUNCTION,1758, End If;
WS_ACT_CREATE,FUNCTION,1759,
WS_ACT_CREATE,FUNCTION,1760, v_Create := v_Create||v_ColRec.ac_col_name||' '||v_ColRec.ac_data_type;
WS_ACT_CREATE,FUNCTION,1761,
WS_ACT_CREATE,FUNCTION,1762, IF LENGTH(TRIM(v_ColRec.ac_default_value)) > 0
WS_ACT_CREATE,FUNCTION,1763, AND v_ColRec.ac_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,1764, THEN
WS_ACT_CREATE,FUNCTION,1765,-- v_ColRec.ac_default_value := || v_ColRec.ac_default_value || ;
WS_ACT_CREATE,FUNCTION,1766, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,1767, v_Create := v_Create|| v_ColRec.ac_default_value;
WS_ACT_CREATE,FUNCTION,1768, END IF;
WS_ACT_CREATE,FUNCTION,1769,
WS_ACT_CREATE,FUNCTION,1770, If v_ColRec.ac_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,1771, v_Create := v_Create||' NOT NULL';
WS_ACT_CREATE,FUNCTION,1772, End If;
WS_ACT_CREATE,FUNCTION,1773,
WS_ACT_CREATE,FUNCTION,1774, END LOOP;
WS_ACT_CREATE,FUNCTION,1775, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,1776, --
WS_ACT_CREATE,FUNCTION,1777, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,1778, If v_AggRec.at_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,1779, v_Create := v_Create||' Tablespace '||v_AggRec.at_tablespace;
WS_ACT_CREATE,FUNCTION,1780, End If;
WS_ACT_CREATE,FUNCTION,1781,
WS_ACT_CREATE,FUNCTION,1782, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,1783, If v_AggRec.at_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1784, v_Create := v_Create||TRUNC(v_AggRec.at_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,1785, Else
WS_ACT_CREATE,FUNCTION,1786, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,1787, End If;
WS_ACT_CREATE,FUNCTION,1788,
WS_ACT_CREATE,FUNCTION,1789, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,1790,
WS_ACT_CREATE,FUNCTION,1791, If v_AggRec.at_initial_kb + v_AggRec.at_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,1792, v_Create := v_Create||' Initial '||v_AggRec.at_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,1793, v_Create := v_Create||' Next '||v_AggRec.at_next_kb||'K';
WS_ACT_CREATE,FUNCTION,1794, End If;
WS_ACT_CREATE,FUNCTION,1795,
WS_ACT_CREATE,FUNCTION,1796, If v_AggRec.at_min_extents + v_AggRec.at_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,1797, v_Create := v_Create||' Minextents '||v_AggRec.at_min_extents;
WS_ACT_CREATE,FUNCTION,1798, v_Create := v_Create||' Maxextents '||v_AggRec.at_max_extents;
WS_ACT_CREATE,FUNCTION,1799, End If;
WS_ACT_CREATE,FUNCTION,1800,
WS_ACT_CREATE,FUNCTION,1801, If v_AggRec.at_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1802, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,1803, (v_AggRec.at_pct_increase - (TRUNC(v_AggRec.at_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,1804, Else
WS_ACT_CREATE,FUNCTION,1805, v_Create := v_Create||' Pctincrease '||v_AggRec.at_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,1806, End If;
WS_ACT_CREATE,FUNCTION,1807,
WS_ACT_CREATE,FUNCTION,1808,
WS_ACT_CREATE,FUNCTION,1809, --=====================================================
WS_ACT_CREATE,FUNCTION,1810, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,1811, --=====================================================
WS_ACT_CREATE,FUNCTION,1812, BEGIN
WS_ACT_CREATE,FUNCTION,1813, v_step := 5500;
WS_ACT_CREATE,FUNCTION,1814, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,1815, v_step := 5600;
WS_ACT_CREATE,FUNCTION,1816, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,1817, v_step := 5700;
WS_ACT_CREATE,FUNCTION,1818, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,1819, v_step := 5800;
WS_ACT_CREATE,FUNCTION,1820, COMMIT;
WS_ACT_CREATE,FUNCTION,1821, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,1822, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1823, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,1824, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1825, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1826, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,1827, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,1828, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1829, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1830, End If;
WS_ACT_CREATE,FUNCTION,1831, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,1832, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,1833, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1834, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1835, End If;
WS_ACT_CREATE,FUNCTION,1836, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,1837, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1838, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1839, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1840, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1841, Else
WS_ACT_CREATE,FUNCTION,1842, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1843, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1844, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1845, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,1846, End If;
WS_ACT_CREATE,FUNCTION,1847, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1848, v_result := -2;
WS_ACT_CREATE,FUNCTION,1849, RETURN v_result;
WS_ACT_CREATE,FUNCTION,1850, END;
WS_ACT_CREATE,FUNCTION,1851,
WS_ACT_CREATE,FUNCTION,1852, COMMIT;
WS_ACT_CREATE,FUNCTION,1853, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,1854, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,1855, v_result := 1;
WS_ACT_CREATE,FUNCTION,1856,
WS_ACT_CREATE,FUNCTION,1857, --=====================================================
WS_ACT_CREATE,FUNCTION,1858, -- R E T R O C O P Y
WS_ACT_CREATE,FUNCTION,1859, --=====================================================
WS_ACT_CREATE,FUNCTION,1860, ElsIf p_obj_type = v_ws_obj_retro_copy Then
WS_ACT_CREATE,FUNCTION,1861, select * into v_RetroRec
WS_ACT_CREATE,FUNCTION,1862, from ws_retro_tab where rt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,1863, --=====================================================
WS_ACT_CREATE,FUNCTION,1864, -- Build the create string
WS_ACT_CREATE,FUNCTION,1865, --=====================================================
WS_ACT_CREATE,FUNCTION,1866, v_Create := 'Create table '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,1867, v_row := 0;
WS_ACT_CREATE,FUNCTION,1868,
WS_ACT_CREATE,FUNCTION,1869, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,1870, --
WS_ACT_CREATE,FUNCTION,1871, For v_ColRec in c_Retro LOOP
WS_ACT_CREATE,FUNCTION,1872, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,1873, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,1874, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,1875, End If;
WS_ACT_CREATE,FUNCTION,1876, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,1877, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,1878, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,1879, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,1880, v_create := '';
WS_ACT_CREATE,FUNCTION,1881, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,1882, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,1883, v_create := '';
WS_ACT_CREATE,FUNCTION,1884, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,1885, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,1886, v_create := '';
WS_ACT_CREATE,FUNCTION,1887, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,1888, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,1889, v_create := '';
WS_ACT_CREATE,FUNCTION,1890, Else
WS_ACT_CREATE,FUNCTION,1891, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,1892, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1893, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1894, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,1895, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1896, RETURN -2;
WS_ACT_CREATE,FUNCTION,1897, End If;
WS_ACT_CREATE,FUNCTION,1898, End If;
WS_ACT_CREATE,FUNCTION,1899,
WS_ACT_CREATE,FUNCTION,1900, v_Create := v_Create||v_ColRec.rc_col_name||' '||v_ColRec.rc_data_type;
WS_ACT_CREATE,FUNCTION,1901,
WS_ACT_CREATE,FUNCTION,1902, IF LENGTH(TRIM(v_ColRec.rc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,1903, AND v_ColRec.rc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,1904, THEN
WS_ACT_CREATE,FUNCTION,1905,-- v_ColRec.rc_default_value := || v_ColRec.rc_default_value || ;
WS_ACT_CREATE,FUNCTION,1906, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,1907, v_Create := v_Create|| v_ColRec.rc_default_value;
WS_ACT_CREATE,FUNCTION,1908, END IF;
WS_ACT_CREATE,FUNCTION,1909,
WS_ACT_CREATE,FUNCTION,1910, If v_ColRec.rc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,1911, v_Create := v_Create||' NOT NULL';
WS_ACT_CREATE,FUNCTION,1912, End If;
WS_ACT_CREATE,FUNCTION,1913,
WS_ACT_CREATE,FUNCTION,1914, END LOOP;
WS_ACT_CREATE,FUNCTION,1915, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,1916, --
WS_ACT_CREATE,FUNCTION,1917, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,1918, If v_RetroRec.rt_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,1919, v_Create := v_Create||' Tablespace '||v_RetroRec.rt_tablespace;
WS_ACT_CREATE,FUNCTION,1920, End If;
WS_ACT_CREATE,FUNCTION,1921,
WS_ACT_CREATE,FUNCTION,1922, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,1923, If v_RetroRec.rt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1924, v_Create := v_Create||TRUNC(v_RetroRec.rt_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,1925, Else
WS_ACT_CREATE,FUNCTION,1926, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,1927, End If;
WS_ACT_CREATE,FUNCTION,1928,
WS_ACT_CREATE,FUNCTION,1929, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,1930,
WS_ACT_CREATE,FUNCTION,1931, If v_RetroRec.rt_initial_kb + v_RetroRec.rt_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,1932, v_Create := v_Create||' Initial '||v_RetroRec.rt_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,1933, v_Create := v_Create||' Next '||v_RetroRec.rt_next_kb||'K';
WS_ACT_CREATE,FUNCTION,1934, End If;
WS_ACT_CREATE,FUNCTION,1935,
WS_ACT_CREATE,FUNCTION,1936, If v_RetroRec.rt_min_extents + v_RetroRec.rt_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,1937, v_Create := v_Create||' Minextents '||v_RetroRec.rt_min_extents;
WS_ACT_CREATE,FUNCTION,1938, v_Create := v_Create||' Maxextents '||v_RetroRec.rt_max_extents;
WS_ACT_CREATE,FUNCTION,1939, End If;
WS_ACT_CREATE,FUNCTION,1940,
WS_ACT_CREATE,FUNCTION,1941, If v_RetroRec.rt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,1942, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,1943, (v_RetroRec.rt_pct_increase - (TRUNC(v_RetroRec.rt_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,1944, Else
WS_ACT_CREATE,FUNCTION,1945, v_Create := v_Create||' Pctincrease '||v_RetroRec.rt_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,1946, End If;
WS_ACT_CREATE,FUNCTION,1947,
WS_ACT_CREATE,FUNCTION,1948,
WS_ACT_CREATE,FUNCTION,1949, --=====================================================
WS_ACT_CREATE,FUNCTION,1950, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,1951, --=====================================================
WS_ACT_CREATE,FUNCTION,1952, BEGIN
WS_ACT_CREATE,FUNCTION,1953, v_step := 5900;
WS_ACT_CREATE,FUNCTION,1954, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,1955, v_step := 6000;
WS_ACT_CREATE,FUNCTION,1956, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,1957, v_step := 6100;
WS_ACT_CREATE,FUNCTION,1958, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,1959, v_step := 6200;
WS_ACT_CREATE,FUNCTION,1960, COMMIT;
WS_ACT_CREATE,FUNCTION,1961, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,1962, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,1963, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,1964, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1965, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1966, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,1967, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,1968, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1969, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1970, End If;
WS_ACT_CREATE,FUNCTION,1971, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,1972, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,1973, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1974, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1975, End If;
WS_ACT_CREATE,FUNCTION,1976, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,1977, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1978, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1979, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1980, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,1981, Else
WS_ACT_CREATE,FUNCTION,1982, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,1983, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,1984, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,1985, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,1986, End If;
WS_ACT_CREATE,FUNCTION,1987, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,1988, v_result := -2;
WS_ACT_CREATE,FUNCTION,1989, RETURN v_result;
WS_ACT_CREATE,FUNCTION,1990, END;
WS_ACT_CREATE,FUNCTION,1991,
WS_ACT_CREATE,FUNCTION,1992, COMMIT;
WS_ACT_CREATE,FUNCTION,1993, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,1994, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,1995, v_result := 1;
WS_ACT_CREATE,FUNCTION,1996,
WS_ACT_CREATE,FUNCTION,1997,
WS_ACT_CREATE,FUNCTION,1998, --=====================================================
WS_ACT_CREATE,FUNCTION,1999, -- O D S
WS_ACT_CREATE,FUNCTION,2000, --=====================================================
WS_ACT_CREATE,FUNCTION,2001, ElsIf p_obj_type = v_ws_obj_ods Then
WS_ACT_CREATE,FUNCTION,2002, select * into v_OdsRec
WS_ACT_CREATE,FUNCTION,2003, from ws_ods_tab
WS_ACT_CREATE,FUNCTION,2004, where ot_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,2005, --=====================================================
WS_ACT_CREATE,FUNCTION,2006, -- Build the create string
WS_ACT_CREATE,FUNCTION,2007, --=====================================================
WS_ACT_CREATE,FUNCTION,2008, v_Create := 'Create table '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,2009, v_row := 0;
WS_ACT_CREATE,FUNCTION,2010,
WS_ACT_CREATE,FUNCTION,2011, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,2012, --
WS_ACT_CREATE,FUNCTION,2013, For v_ColRec in c_Ods LOOP
WS_ACT_CREATE,FUNCTION,2014, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,2015, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,2016, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,2017, End If;
WS_ACT_CREATE,FUNCTION,2018, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,2019, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,2020, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,2021, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,2022, v_create := '';
WS_ACT_CREATE,FUNCTION,2023, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,2024, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,2025, v_create := '';
WS_ACT_CREATE,FUNCTION,2026, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,2027, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,2028, v_create := '';
WS_ACT_CREATE,FUNCTION,2029, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,2030, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,2031, v_create := '';
WS_ACT_CREATE,FUNCTION,2032, Else
WS_ACT_CREATE,FUNCTION,2033, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,2034, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2035, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2036, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,2037, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,2038, RETURN -2;
WS_ACT_CREATE,FUNCTION,2039, End If;
WS_ACT_CREATE,FUNCTION,2040, End If;
WS_ACT_CREATE,FUNCTION,2041,
WS_ACT_CREATE,FUNCTION,2042, v_Create := v_Create||v_ColRec.oc_col_name||' '||v_ColRec.oc_data_type;
WS_ACT_CREATE,FUNCTION,2043,
WS_ACT_CREATE,FUNCTION,2044, IF LENGTH(TRIM(v_ColRec.oc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,2045, AND v_ColRec.oc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,2046, THEN
WS_ACT_CREATE,FUNCTION,2047,-- v_ColRec.oc_default_value := || v_ColRec.oc_default_value || ;
WS_ACT_CREATE,FUNCTION,2048, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,2049, v_Create := v_Create|| v_ColRec.oc_default_value;
WS_ACT_CREATE,FUNCTION,2050, END IF;
WS_ACT_CREATE,FUNCTION,2051,
WS_ACT_CREATE,FUNCTION,2052, If v_ColRec.oc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,2053, v_Create := v_Create||' NOT NULL';
WS_ACT_CREATE,FUNCTION,2054, End If;
WS_ACT_CREATE,FUNCTION,2055,
WS_ACT_CREATE,FUNCTION,2056, END LOOP;
WS_ACT_CREATE,FUNCTION,2057, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,2058, --
WS_ACT_CREATE,FUNCTION,2059, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,2060, If v_OdsRec.ot_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,2061, v_Create := v_Create||' Tablespace '||v_OdsRec.ot_tablespace;
WS_ACT_CREATE,FUNCTION,2062, End If;
WS_ACT_CREATE,FUNCTION,2063,
WS_ACT_CREATE,FUNCTION,2064, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,2065, If v_OdsRec.ot_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,2066, v_Create := v_Create||TRUNC(v_OdsRec.ot_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,2067, Else
WS_ACT_CREATE,FUNCTION,2068, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,2069, End If;
WS_ACT_CREATE,FUNCTION,2070,
WS_ACT_CREATE,FUNCTION,2071, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,2072,
WS_ACT_CREATE,FUNCTION,2073, If v_OdsRec.ot_initial_kb + v_OdsRec.ot_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,2074, v_Create := v_Create||' Initial '||v_OdsRec.ot_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,2075, v_Create := v_Create||' Next '||v_OdsRec.ot_next_kb||'K';
WS_ACT_CREATE,FUNCTION,2076, End If;
WS_ACT_CREATE,FUNCTION,2077,
WS_ACT_CREATE,FUNCTION,2078, If v_OdsRec.ot_min_extents + v_OdsRec.ot_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,2079, v_Create := v_Create||' Minextents '||v_OdsRec.ot_min_extents;
WS_ACT_CREATE,FUNCTION,2080, v_Create := v_Create||' Maxextents '||v_OdsRec.ot_max_extents;
WS_ACT_CREATE,FUNCTION,2081, End If;
WS_ACT_CREATE,FUNCTION,2082,
WS_ACT_CREATE,FUNCTION,2083, If v_OdsRec.ot_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,2084, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,2085, (v_OdsRec.ot_pct_increase - (TRUNC(v_OdsRec.ot_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,2086, Else
WS_ACT_CREATE,FUNCTION,2087, v_Create := v_Create||' Pctincrease '||v_OdsRec.ot_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,2088, End If;
WS_ACT_CREATE,FUNCTION,2089,
WS_ACT_CREATE,FUNCTION,2090,
WS_ACT_CREATE,FUNCTION,2091, --=====================================================
WS_ACT_CREATE,FUNCTION,2092, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,2093, --=====================================================
WS_ACT_CREATE,FUNCTION,2094, BEGIN
WS_ACT_CREATE,FUNCTION,2095, v_step := 6300;
WS_ACT_CREATE,FUNCTION,2096, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,2097, v_step := 6400;
WS_ACT_CREATE,FUNCTION,2098, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,2099, v_step := 6500;
WS_ACT_CREATE,FUNCTION,2100, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,2101, v_step := 6600;
WS_ACT_CREATE,FUNCTION,2102, COMMIT;
WS_ACT_CREATE,FUNCTION,2103, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,2104, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,2105, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,2106, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2107, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2108, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,2109, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,2110, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2111, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2112, End If;
WS_ACT_CREATE,FUNCTION,2113, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,2114, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,2115, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2116, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2117, End If;
WS_ACT_CREATE,FUNCTION,2118, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,2119, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,2120, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2121, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2122, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,2123, Else
WS_ACT_CREATE,FUNCTION,2124, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,2125, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2126, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2127, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,2128, End If;
WS_ACT_CREATE,FUNCTION,2129, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,2130, v_result := -2;
WS_ACT_CREATE,FUNCTION,2131, RETURN v_result;
WS_ACT_CREATE,FUNCTION,2132, END;
WS_ACT_CREATE,FUNCTION,2133,
WS_ACT_CREATE,FUNCTION,2134, COMMIT;
WS_ACT_CREATE,FUNCTION,2135, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,2136, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,2137, v_result := 1;
WS_ACT_CREATE,FUNCTION,2138,
WS_ACT_CREATE,FUNCTION,2139,
WS_ACT_CREATE,FUNCTION,2140, --=====================================================
WS_ACT_CREATE,FUNCTION,2141, -- N O R M A L
WS_ACT_CREATE,FUNCTION,2142, --=====================================================
WS_ACT_CREATE,FUNCTION,2143, ElsIf p_obj_type = v_ws_obj_normal
WS_ACT_CREATE,FUNCTION,2144, OR p_obj_type = v_ws_obj_hub
WS_ACT_CREATE,FUNCTION,2145, OR p_obj_type = v_ws_obj_satellite
WS_ACT_CREATE,FUNCTION,2146, OR p_obj_type = v_ws_obj_link
WS_ACT_CREATE,FUNCTION,2147, OR p_obj_type = v_ws_obj_custom1
WS_ACT_CREATE,FUNCTION,2148, OR p_obj_type = v_ws_obj_custom2
WS_ACT_CREATE,FUNCTION,2149, Then
WS_ACT_CREATE,FUNCTION,2150, select * into v_NormalRec
WS_ACT_CREATE,FUNCTION,2151, from ws_normal_tab
WS_ACT_CREATE,FUNCTION,2152, where nt_obj_key = p_obj_key;
WS_ACT_CREATE,FUNCTION,2153, --=====================================================
WS_ACT_CREATE,FUNCTION,2154, -- Build the create string
WS_ACT_CREATE,FUNCTION,2155, --=====================================================
WS_ACT_CREATE,FUNCTION,2156, v_Create := 'Create table '|| v_table_with_schema ||' (';
WS_ACT_CREATE,FUNCTION,2157, v_row := 0;
WS_ACT_CREATE,FUNCTION,2158,
WS_ACT_CREATE,FUNCTION,2159, -- Loop through all the columns adding them to the create
WS_ACT_CREATE,FUNCTION,2160, --
WS_ACT_CREATE,FUNCTION,2161, For v_ColRec in c_Normal LOOP
WS_ACT_CREATE,FUNCTION,2162, v_row := v_row + 1;
WS_ACT_CREATE,FUNCTION,2163, If v_row > 1 Then
WS_ACT_CREATE,FUNCTION,2164, v_Create := v_Create||',';
WS_ACT_CREATE,FUNCTION,2165, End If;
WS_ACT_CREATE,FUNCTION,2166, -- If we have nearly filled this statement then use another
WS_ACT_CREATE,FUNCTION,2167, If length(v_create) > 3500 Then
WS_ACT_CREATE,FUNCTION,2168, If v_create5 IS NULL Then
WS_ACT_CREATE,FUNCTION,2169, v_create5 := v_create;
WS_ACT_CREATE,FUNCTION,2170, v_create := '';
WS_ACT_CREATE,FUNCTION,2171, ElsIf v_create4 IS NULL Then
WS_ACT_CREATE,FUNCTION,2172, v_create4 := v_create;
WS_ACT_CREATE,FUNCTION,2173, v_create := '';
WS_ACT_CREATE,FUNCTION,2174, ElsIf v_create3 IS NULL Then
WS_ACT_CREATE,FUNCTION,2175, v_create3 := v_create;
WS_ACT_CREATE,FUNCTION,2176, v_create := '';
WS_ACT_CREATE,FUNCTION,2177, ElsIf v_create2 IS NULL Then
WS_ACT_CREATE,FUNCTION,2178, v_create2 := v_create;
WS_ACT_CREATE,FUNCTION,2179, v_create := '';
WS_ACT_CREATE,FUNCTION,2180, Else
WS_ACT_CREATE,FUNCTION,2181, v_MsgText := 'Object create statement is more than 17500 bytes long. Unable to handle';
WS_ACT_CREATE,FUNCTION,2182, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2183, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2184, p_return_msg := 'Create statement too long';
WS_ACT_CREATE,FUNCTION,2185, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,2186, RETURN -2;
WS_ACT_CREATE,FUNCTION,2187, End If;
WS_ACT_CREATE,FUNCTION,2188, End If;
WS_ACT_CREATE,FUNCTION,2189,
WS_ACT_CREATE,FUNCTION,2190, v_Create := v_Create||v_ColRec.nc_col_name||' '||v_ColRec.nc_data_type;
WS_ACT_CREATE,FUNCTION,2191,
WS_ACT_CREATE,FUNCTION,2192, IF LENGTH(TRIM(v_ColRec.nc_default_value)) > 0
WS_ACT_CREATE,FUNCTION,2193, AND v_ColRec.nc_default_value IS NOT NULL
WS_ACT_CREATE,FUNCTION,2194, THEN
WS_ACT_CREATE,FUNCTION,2195,-- v_ColRec.nc_default_value := || v_ColRec.nc_default_value || ;
WS_ACT_CREATE,FUNCTION,2196, v_Create := v_Create||' DEFAULT ';
WS_ACT_CREATE,FUNCTION,2197, v_Create := v_Create|| v_ColRec.nc_default_value;
WS_ACT_CREATE,FUNCTION,2198, END IF;
WS_ACT_CREATE,FUNCTION,2199,
WS_ACT_CREATE,FUNCTION,2200, If v_ColRec.nc_nulls_flag = 'N' Then
WS_ACT_CREATE,FUNCTION,2201, v_Create := v_Create||' NOT NULL';
WS_ACT_CREATE,FUNCTION,2202, End If;
WS_ACT_CREATE,FUNCTION,2203,
WS_ACT_CREATE,FUNCTION,2204, END LOOP;
WS_ACT_CREATE,FUNCTION,2205, -- Add the rest of the create statement
WS_ACT_CREATE,FUNCTION,2206, --
WS_ACT_CREATE,FUNCTION,2207, v_Create := v_Create||')';
WS_ACT_CREATE,FUNCTION,2208, If v_NormalRec.nt_tablespace is not null Then
WS_ACT_CREATE,FUNCTION,2209, v_Create := v_Create||' Tablespace '||v_NormalRec.nt_tablespace;
WS_ACT_CREATE,FUNCTION,2210, End If;
WS_ACT_CREATE,FUNCTION,2211,
WS_ACT_CREATE,FUNCTION,2212, v_Create := v_Create||'  PctFree ';
WS_ACT_CREATE,FUNCTION,2213, If v_NormalRec.nt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,2214, v_Create := v_Create||TRUNC(v_NormalRec.nt_pct_increase/1000);
WS_ACT_CREATE,FUNCTION,2215, Else
WS_ACT_CREATE,FUNCTION,2216, v_Create := v_Create||'0';
WS_ACT_CREATE,FUNCTION,2217, End If;
WS_ACT_CREATE,FUNCTION,2218,
WS_ACT_CREATE,FUNCTION,2219, v_Create := v_Create||' Storage (';
WS_ACT_CREATE,FUNCTION,2220,
WS_ACT_CREATE,FUNCTION,2221, If v_NormalRec.nt_initial_kb + v_NormalRec.nt_next_kb <> 0 Then
WS_ACT_CREATE,FUNCTION,2222, v_Create := v_Create||' Initial '||v_NormalRec.nt_initial_kb||'K';
WS_ACT_CREATE,FUNCTION,2223, v_Create := v_Create||' Next '||v_NormalRec.nt_next_kb||'K';
WS_ACT_CREATE,FUNCTION,2224, End If;
WS_ACT_CREATE,FUNCTION,2225,
WS_ACT_CREATE,FUNCTION,2226, If v_NormalRec.nt_min_extents + v_NormalRec.nt_max_extents <> 0 Then
WS_ACT_CREATE,FUNCTION,2227, v_Create := v_Create||' Minextents '||v_NormalRec.nt_min_extents;
WS_ACT_CREATE,FUNCTION,2228, v_Create := v_Create||' Maxextents '||v_NormalRec.nt_max_extents;
WS_ACT_CREATE,FUNCTION,2229, End If;
WS_ACT_CREATE,FUNCTION,2230,
WS_ACT_CREATE,FUNCTION,2231, If v_NormalRec.nt_pct_increase > 1000 Then
WS_ACT_CREATE,FUNCTION,2232, v_Create := v_Create||' Pctincrease '||
WS_ACT_CREATE,FUNCTION,2233, (v_NormalRec.nt_pct_increase - (TRUNC(v_NormalRec.nt_pct_increase/1000)*1000))||' )';
WS_ACT_CREATE,FUNCTION,2234, Else
WS_ACT_CREATE,FUNCTION,2235, v_Create := v_Create||' Pctincrease '||v_NormalRec.nt_pct_increase||' )';
WS_ACT_CREATE,FUNCTION,2236, End If;
WS_ACT_CREATE,FUNCTION,2237,
WS_ACT_CREATE,FUNCTION,2238,
WS_ACT_CREATE,FUNCTION,2239, --=====================================================
WS_ACT_CREATE,FUNCTION,2240, -- Execute the create statement
WS_ACT_CREATE,FUNCTION,2241, --=====================================================
WS_ACT_CREATE,FUNCTION,2242, BEGIN
WS_ACT_CREATE,FUNCTION,2243, v_step := 6700;
WS_ACT_CREATE,FUNCTION,2244, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_CREATE,FUNCTION,2245, v_step := 6800;
WS_ACT_CREATE,FUNCTION,2246, DBMS_SQL.PARSE(v_cursor, v_create5||v_create4||v_create3||v_create2||v_create, 1);
WS_ACT_CREATE,FUNCTION,2247, v_step := 6900;
WS_ACT_CREATE,FUNCTION,2248, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_CREATE,FUNCTION,2249, v_step := 7000;
WS_ACT_CREATE,FUNCTION,2250, COMMIT;
WS_ACT_CREATE,FUNCTION,2251, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_CREATE,FUNCTION,2252, EXCEPTION WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,2253, v_MsgText := substr(v_create,1,1023);
WS_ACT_CREATE,FUNCTION,2254, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2255, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2256, If length(v_create) > 1023 Then
WS_ACT_CREATE,FUNCTION,2257, v_MsgText := substr(v_create,-1023,1023);
WS_ACT_CREATE,FUNCTION,2258, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2259, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2260, End If;
WS_ACT_CREATE,FUNCTION,2261, If SQLCODE = -1031 Then
WS_ACT_CREATE,FUNCTION,2262, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_CREATE,FUNCTION,2263, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2264, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2265, End If;
WS_ACT_CREATE,FUNCTION,2266, If SQLCODE = -955 Then
WS_ACT_CREATE,FUNCTION,2267, v_MsgText := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,2268, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2269, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2270, p_return_msg := 'Table already exists. Drop it first if you wish to re-create';
WS_ACT_CREATE,FUNCTION,2271, Else
WS_ACT_CREATE,FUNCTION,2272, v_MsgText := 'Unhandled exception in create';
WS_ACT_CREATE,FUNCTION,2273, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2274, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2275, p_return_msg := 'Unhandled exception in ws_act_create cursor step '||v_step;
WS_ACT_CREATE,FUNCTION,2276, End If;
WS_ACT_CREATE,FUNCTION,2277, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,2278, v_result := -2;
WS_ACT_CREATE,FUNCTION,2279, RETURN v_result;
WS_ACT_CREATE,FUNCTION,2280, END;
WS_ACT_CREATE,FUNCTION,2281,
WS_ACT_CREATE,FUNCTION,2282, COMMIT;
WS_ACT_CREATE,FUNCTION,2283, p_status_code := 1;
WS_ACT_CREATE,FUNCTION,2284, p_return_msg := 'Table created ' || v_table_with_schema;
WS_ACT_CREATE,FUNCTION,2285, v_result := 1;
WS_ACT_CREATE,FUNCTION,2286,
WS_ACT_CREATE,FUNCTION,2287,
WS_ACT_CREATE,FUNCTION,2288, --=====================================================
WS_ACT_CREATE,FUNCTION,2289, -- U N S U P P O R T E D
WS_ACT_CREATE,FUNCTION,2290, --=====================================================
WS_ACT_CREATE,FUNCTION,2291, Else
WS_ACT_CREATE,FUNCTION,2292, v_MsgText := 'Unsupported object type '||p_obj_type;
WS_ACT_CREATE,FUNCTION,2293, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2294, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2295, p_return_msg := 'Unsupported object type '||p_obj_type;
WS_ACT_CREATE,FUNCTION,2296, p_status_code := -2;
WS_ACT_CREATE,FUNCTION,2297, RETURN -2;
WS_ACT_CREATE,FUNCTION,2298, End If;
WS_ACT_CREATE,FUNCTION,2299,
WS_ACT_CREATE,FUNCTION,2300, COMMIT;
WS_ACT_CREATE,FUNCTION,2301, RETURN v_result;
WS_ACT_CREATE,FUNCTION,2302,
WS_ACT_CREATE,FUNCTION,2303,EXCEPTION
WS_ACT_CREATE,FUNCTION,2304, WHEN OTHERS THEN
WS_ACT_CREATE,FUNCTION,2305, v_MsgText := 'Unhandled Exception in ws_act_create. '||
WS_ACT_CREATE,FUNCTION,2306, ' Step ' ||v_step;
WS_ACT_CREATE,FUNCTION,2307, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_CREATE,FUNCTION,2308, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_CREATE,FUNCTION,2309, p_return_msg := 'Unhandled Exception in ws_act_create step ' ||v_step;
WS_ACT_CREATE,FUNCTION,2310, p_status_code := -3;
WS_ACT_CREATE,FUNCTION,2311, RETURN -3;
WS_ACT_CREATE,FUNCTION,2312,
WS_ACT_CREATE,FUNCTION,2313,END ws_act_create;
WS_ACT_CREATE,FUNCTION,2314,
WS_ACT_DBMS_STATS,FUNCTION,1,function ws_act_dbms_stats
WS_ACT_DBMS_STATS,FUNCTION,2, (
WS_ACT_DBMS_STATS,FUNCTION,3, p_sequence IN number,
WS_ACT_DBMS_STATS,FUNCTION,4, p_obj_type IN number,
WS_ACT_DBMS_STATS,FUNCTION,5, p_action IN number,
WS_ACT_DBMS_STATS,FUNCTION,6, p_percent IN number,
WS_ACT_DBMS_STATS,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_DBMS_STATS,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_DBMS_STATS,FUNCTION,9, p_job_id IN number,
WS_ACT_DBMS_STATS,FUNCTION,10, p_task_id IN number,
WS_ACT_DBMS_STATS,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_DBMS_STATS,FUNCTION,12, p_status_code OUT number
WS_ACT_DBMS_STATS,FUNCTION,13, )
WS_ACT_DBMS_STATS,FUNCTION,14, Return integer
WS_ACT_DBMS_STATS,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_DBMS_STATS,FUNCTION,16, IS
WS_ACT_DBMS_STATS,FUNCTION,17,
WS_ACT_DBMS_STATS,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_DBMS_STATS,FUNCTION,19,
WS_ACT_DBMS_STATS,FUNCTION,20, -- =============================================================================
WS_ACT_DBMS_STATS,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_DBMS_STATS,FUNCTION,22, -- Script Name : ws_act_dbms_stats
WS_ACT_DBMS_STATS,FUNCTION,23, -- Description : Analyze a table
WS_ACT_DBMS_STATS,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_DBMS_STATS,FUNCTION,25, -- =============================================================================
WS_ACT_DBMS_STATS,FUNCTION,26,
WS_ACT_DBMS_STATS,FUNCTION,27, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,28, -- Constants
WS_ACT_DBMS_STATS,FUNCTION,29, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,30, v_ws_obj_procedure constant number := 1;
WS_ACT_DBMS_STATS,FUNCTION,31, v_ws_obj_directive constant number := 2;
WS_ACT_DBMS_STATS,FUNCTION,32, v_ws_obj_script constant number := 3;
WS_ACT_DBMS_STATS,FUNCTION,33, v_ws_obj_template constant number := 4;
WS_ACT_DBMS_STATS,FUNCTION,34, v_ws_obj_fact constant number := 5;
WS_ACT_DBMS_STATS,FUNCTION,35, v_ws_obj_dim constant number := 6;
WS_ACT_DBMS_STATS,FUNCTION,36, v_ws_obj_stage constant number := 7;
WS_ACT_DBMS_STATS,FUNCTION,37, v_ws_obj_load constant number := 8;
WS_ACT_DBMS_STATS,FUNCTION,38, v_ws_obj_agg constant number := 9;
WS_ACT_DBMS_STATS,FUNCTION,39, v_ws_obj_index constant number := 10;
WS_ACT_DBMS_STATS,FUNCTION,40, v_ws_obj_connect constant number := 11;
WS_ACT_DBMS_STATS,FUNCTION,41, v_ws_obj_dim_view constant number := 12;
WS_ACT_DBMS_STATS,FUNCTION,42,
WS_ACT_DBMS_STATS,FUNCTION,43, v_ws_act_drop constant number := 0;
WS_ACT_DBMS_STATS,FUNCTION,44, v_ws_act_create constant number := 1;
WS_ACT_DBMS_STATS,FUNCTION,45, v_ws_act_compile constant number := 2;
WS_ACT_DBMS_STATS,FUNCTION,46, v_ws_act_drop_all constant number := 3;
WS_ACT_DBMS_STATS,FUNCTION,47, v_ws_act_pre_drop constant number := 4;
WS_ACT_DBMS_STATS,FUNCTION,48, v_ws_act_load constant number := 5;
WS_ACT_DBMS_STATS,FUNCTION,49, v_ws_act_update constant number := 6;
WS_ACT_DBMS_STATS,FUNCTION,50, v_ws_act_execute constant number := 7;
WS_ACT_DBMS_STATS,FUNCTION,51, v_ws_act_process constant number := 8;
WS_ACT_DBMS_STATS,FUNCTION,52, v_ws_act_build constant number := 9;
WS_ACT_DBMS_STATS,FUNCTION,53, v_ws_act_build_all constant number := 10;
WS_ACT_DBMS_STATS,FUNCTION,54, v_ws_act_analyze constant number := 11;
WS_ACT_DBMS_STATS,FUNCTION,55, v_ws_act_quick_analyze constant number := 12;
WS_ACT_DBMS_STATS,FUNCTION,56, v_ws_act_statistics constant number := 13;
WS_ACT_DBMS_STATS,FUNCTION,57, v_ws_act_quick_statistics constant number := 14;
WS_ACT_DBMS_STATS,FUNCTION,58,
WS_ACT_DBMS_STATS,FUNCTION,59, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,60, -- Variables
WS_ACT_DBMS_STATS,FUNCTION,61, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,62, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_DBMS_STATS,FUNCTION,63, v_stmt varchar2(4200); -- statement text
WS_ACT_DBMS_STATS,FUNCTION,64, v_step integer := 0; -- return code
WS_ACT_DBMS_STATS,FUNCTION,65, v_result integer := 0; -- return code
WS_ACT_DBMS_STATS,FUNCTION,66, v_cursor number;
WS_ACT_DBMS_STATS,FUNCTION,67, v_schema varchar2(100); -- schema name
WS_ACT_DBMS_STATS,FUNCTION,68, v_schema_flag integer := 0;
WS_ACT_DBMS_STATS,FUNCTION,69, v_satellite_ind varchar2(1);
WS_ACT_DBMS_STATS,FUNCTION,70, v_dss_schema varchar2(64);
WS_ACT_DBMS_STATS,FUNCTION,71, v_table_schema varchar2(64);
WS_ACT_DBMS_STATS,FUNCTION,72, v_table_name varchar2(64);
WS_ACT_DBMS_STATS,FUNCTION,73, v_table_with_schema varchar2(150);
WS_ACT_DBMS_STATS,FUNCTION,74, v_index_name varchar2(64);
WS_ACT_DBMS_STATS,FUNCTION,75, v_index_with_schema varchar2(150);
WS_ACT_DBMS_STATS,FUNCTION,76,
WS_ACT_DBMS_STATS,FUNCTION,77,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_DBMS_STATS,FUNCTION,78,BEGIN
WS_ACT_DBMS_STATS,FUNCTION,79,
WS_ACT_DBMS_STATS,FUNCTION,80, v_step := 10;
WS_ACT_DBMS_STATS,FUNCTION,81, v_table_schema := '';
WS_ACT_DBMS_STATS,FUNCTION,82,
WS_ACT_DBMS_STATS,FUNCTION,83, -- needs to look up the schema from ws_dbc_target
WS_ACT_DBMS_STATS,FUNCTION,84, BEGIN
WS_ACT_DBMS_STATS,FUNCTION,85, IF p_obj_type = v_ws_obj_index THEN
WS_ACT_DBMS_STATS,FUNCTION,86, v_step := 110;
WS_ACT_DBMS_STATS,FUNCTION,87, SELECT NVL(dt_schema, '')
WS_ACT_DBMS_STATS,FUNCTION,88, ,oo_name
WS_ACT_DBMS_STATS,FUNCTION,89, ,ih_index_name
WS_ACT_DBMS_STATS,FUNCTION,90, INTO v_table_schema
WS_ACT_DBMS_STATS,FUNCTION,91, ,v_table_name
WS_ACT_DBMS_STATS,FUNCTION,92, ,v_index_name
WS_ACT_DBMS_STATS,FUNCTION,93, FROM ws_index_header
WS_ACT_DBMS_STATS,FUNCTION,94, LEFT JOIN ws_obj_object
WS_ACT_DBMS_STATS,FUNCTION,95, ON ws_obj_object.oo_obj_key = ih_obj_key
WS_ACT_DBMS_STATS,FUNCTION,96, LEFT JOIN ws_dbc_target
WS_ACT_DBMS_STATS,FUNCTION,97, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_DBMS_STATS,FUNCTION,98, WHERE UPPER(ws_index_header.ih_index_name) = UPPER(p_task_name)
WS_ACT_DBMS_STATS,FUNCTION,99, ;
WS_ACT_DBMS_STATS,FUNCTION,100, else
WS_ACT_DBMS_STATS,FUNCTION,101, v_step := 120;
WS_ACT_DBMS_STATS,FUNCTION,102, v_index_name := '';
WS_ACT_DBMS_STATS,FUNCTION,103, SELECT NVL(dt_schema, '')
WS_ACT_DBMS_STATS,FUNCTION,104, ,oo_name
WS_ACT_DBMS_STATS,FUNCTION,105, INTO v_table_schema
WS_ACT_DBMS_STATS,FUNCTION,106, ,v_table_name
WS_ACT_DBMS_STATS,FUNCTION,107, FROM ws_obj_object
WS_ACT_DBMS_STATS,FUNCTION,108, LEFT JOIN ws_dbc_target
WS_ACT_DBMS_STATS,FUNCTION,109, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_DBMS_STATS,FUNCTION,110, WHERE UPPER(ws_obj_object.oo_name) = UPPER(p_task_name)
WS_ACT_DBMS_STATS,FUNCTION,111, ;
WS_ACT_DBMS_STATS,FUNCTION,112, END IF;
WS_ACT_DBMS_STATS,FUNCTION,113,
WS_ACT_DBMS_STATS,FUNCTION,114, v_table_schema := TRIM(v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,115,
WS_ACT_DBMS_STATS,FUNCTION,116, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_DBMS_STATS,FUNCTION,117, v_MsgText := 'Object could not be found Name:' || p_task_name;
WS_ACT_DBMS_STATS,FUNCTION,118, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_DBMS_STATS,FUNCTION,119, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_DBMS_STATS,FUNCTION,120, p_return_msg := 'Object could not be found';
WS_ACT_DBMS_STATS,FUNCTION,121, p_status_code := -2;
WS_ACT_DBMS_STATS,FUNCTION,122, RETURN -2;
WS_ACT_DBMS_STATS,FUNCTION,123, END;
WS_ACT_DBMS_STATS,FUNCTION,124,
WS_ACT_DBMS_STATS,FUNCTION,125, v_step := 130;
WS_ACT_DBMS_STATS,FUNCTION,126, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_DBMS_STATS,FUNCTION,127, -- meta_satellite_ind = A
WS_ACT_DBMS_STATS,FUNCTION,128, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,129,
WS_ACT_DBMS_STATS,FUNCTION,130, SELECT meta_satellite_ind,
WS_ACT_DBMS_STATS,FUNCTION,131, TRIM(meta_dss_schema)
WS_ACT_DBMS_STATS,FUNCTION,132, INTO v_satellite_ind,
WS_ACT_DBMS_STATS,FUNCTION,133, v_dss_schema
WS_ACT_DBMS_STATS,FUNCTION,134, FROM ws_meta
WS_ACT_DBMS_STATS,FUNCTION,135, WHERE rownum = 1;
WS_ACT_DBMS_STATS,FUNCTION,136,
WS_ACT_DBMS_STATS,FUNCTION,137, IF v_satellite_ind = 'A' THEN
WS_ACT_DBMS_STATS,FUNCTION,138, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,139, v_schema_flag := 1;
WS_ACT_DBMS_STATS,FUNCTION,140, v_table_schema := v_dss_schema;
WS_ACT_DBMS_STATS,FUNCTION,141, END IF;
WS_ACT_DBMS_STATS,FUNCTION,142, END IF;
WS_ACT_DBMS_STATS,FUNCTION,143,
WS_ACT_DBMS_STATS,FUNCTION,144, v_step := 140;
WS_ACT_DBMS_STATS,FUNCTION,145, -- If still not set then defaults to the current user
WS_ACT_DBMS_STATS,FUNCTION,146, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,147, SELECT user
WS_ACT_DBMS_STATS,FUNCTION,148, INTO v_table_schema
WS_ACT_DBMS_STATS,FUNCTION,149, FROM dual;
WS_ACT_DBMS_STATS,FUNCTION,150, END IF;
WS_ACT_DBMS_STATS,FUNCTION,151,
WS_ACT_DBMS_STATS,FUNCTION,152, End If;
WS_ACT_DBMS_STATS,FUNCTION,153,
WS_ACT_DBMS_STATS,FUNCTION,154, v_step := 150;
WS_ACT_DBMS_STATS,FUNCTION,155,
WS_ACT_DBMS_STATS,FUNCTION,156, v_table_schema := TRIM(v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,157,
WS_ACT_DBMS_STATS,FUNCTION,158, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,159, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,160, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_DBMS_STATS,FUNCTION,161, END IF;
WS_ACT_DBMS_STATS,FUNCTION,162,
WS_ACT_DBMS_STATS,FUNCTION,163, v_index_with_schema := v_table_with_schema || v_index_name;
WS_ACT_DBMS_STATS,FUNCTION,164, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_DBMS_STATS,FUNCTION,165,
WS_ACT_DBMS_STATS,FUNCTION,166,
WS_ACT_DBMS_STATS,FUNCTION,167, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,168, -- Handle either an Index or a Table
WS_ACT_DBMS_STATS,FUNCTION,169, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,170, If p_obj_type = v_ws_obj_index Then
WS_ACT_DBMS_STATS,FUNCTION,171, v_step := 100;
WS_ACT_DBMS_STATS,FUNCTION,172,
WS_ACT_DBMS_STATS,FUNCTION,173, If p_percent = 100 Then
WS_ACT_DBMS_STATS,FUNCTION,174, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,175, BEGIN
WS_ACT_DBMS_STATS,FUNCTION,176, SELECT ta_text_11 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_DBMS_STATS,FUNCTION,177, EXCEPTION WHEN OTHERS THEN
WS_ACT_DBMS_STATS,FUNCTION,178, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,179, END;
WS_ACT_DBMS_STATS,FUNCTION,180, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,181, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,182, v_stmt := REPLACE(v_stmt,'$INDEX$',p_task_name);
WS_ACT_DBMS_STATS,FUNCTION,183, ELSE
WS_ACT_DBMS_STATS,FUNCTION,184, v_stmt := 'BEGIN dbms_stats.gather_index_stats(ownname=>'''||v_table_schema||''', indname=>'''||
WS_ACT_DBMS_STATS,FUNCTION,185, p_task_name||'''); END;';
WS_ACT_DBMS_STATS,FUNCTION,186, END IF;
WS_ACT_DBMS_STATS,FUNCTION,187,
WS_ACT_DBMS_STATS,FUNCTION,188, Else
WS_ACT_DBMS_STATS,FUNCTION,189, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,190, BEGIN
WS_ACT_DBMS_STATS,FUNCTION,191, SELECT ta_text_12 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_DBMS_STATS,FUNCTION,192, EXCEPTION WHEN OTHERS THEN
WS_ACT_DBMS_STATS,FUNCTION,193, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,194, END;
WS_ACT_DBMS_STATS,FUNCTION,195, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,196, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,197, v_stmt := REPLACE(v_stmt,'$INDEX$',p_task_name);
WS_ACT_DBMS_STATS,FUNCTION,198, ELSE
WS_ACT_DBMS_STATS,FUNCTION,199, v_stmt := 'BEGIN dbms_stats.gather_index_stats(ownname=>'''||v_table_schema||
WS_ACT_DBMS_STATS,FUNCTION,200, ''', indname=>'''||p_task_name||''', estimate_percent=>'''||p_percent||'''); END;';
WS_ACT_DBMS_STATS,FUNCTION,201, END IF;
WS_ACT_DBMS_STATS,FUNCTION,202, End If;
WS_ACT_DBMS_STATS,FUNCTION,203, p_return_msg := 'Index '||p_task_name||' statistics gathered';
WS_ACT_DBMS_STATS,FUNCTION,204,
WS_ACT_DBMS_STATS,FUNCTION,205, -- Execute the statement
WS_ACT_DBMS_STATS,FUNCTION,206, v_step := 110;
WS_ACT_DBMS_STATS,FUNCTION,207, Execute Immediate v_stmt;
WS_ACT_DBMS_STATS,FUNCTION,208, v_step := 112;
WS_ACT_DBMS_STATS,FUNCTION,209, Else
WS_ACT_DBMS_STATS,FUNCTION,210, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,211, -- Table
WS_ACT_DBMS_STATS,FUNCTION,212, --=====================================================
WS_ACT_DBMS_STATS,FUNCTION,213, If p_percent = 100 Then
WS_ACT_DBMS_STATS,FUNCTION,214,
WS_ACT_DBMS_STATS,FUNCTION,215, v_step := 120;
WS_ACT_DBMS_STATS,FUNCTION,216, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,217, BEGIN
WS_ACT_DBMS_STATS,FUNCTION,218, SELECT ta_text_7 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_DBMS_STATS,FUNCTION,219, EXCEPTION WHEN OTHERS THEN
WS_ACT_DBMS_STATS,FUNCTION,220, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,221, END;
WS_ACT_DBMS_STATS,FUNCTION,222, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,223, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,224, v_stmt := REPLACE(v_stmt,'$TABLE$',p_task_name);
WS_ACT_DBMS_STATS,FUNCTION,225, ELSE
WS_ACT_DBMS_STATS,FUNCTION,226, v_stmt := 'BEGIN dbms_stats.gather_table_stats(ownname=>'''||v_table_schema||
WS_ACT_DBMS_STATS,FUNCTION,227, ''', tabname=>'''||p_task_name||''', cascade=>TRUE); END;';
WS_ACT_DBMS_STATS,FUNCTION,228, END IF;
WS_ACT_DBMS_STATS,FUNCTION,229,
WS_ACT_DBMS_STATS,FUNCTION,230, Else
WS_ACT_DBMS_STATS,FUNCTION,231, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,232, BEGIN
WS_ACT_DBMS_STATS,FUNCTION,233, SELECT ta_text_8 into v_stmt FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'S';
WS_ACT_DBMS_STATS,FUNCTION,234, EXCEPTION WHEN OTHERS THEN
WS_ACT_DBMS_STATS,FUNCTION,235, v_stmt := NULL;
WS_ACT_DBMS_STATS,FUNCTION,236, END;
WS_ACT_DBMS_STATS,FUNCTION,237, IF TRIM(v_stmt) IS NOT NULL THEN
WS_ACT_DBMS_STATS,FUNCTION,238, v_stmt := REPLACE(v_stmt,'$SCHEMA$',v_table_schema);
WS_ACT_DBMS_STATS,FUNCTION,239, v_stmt := REPLACE(v_stmt,'$TABLE$',p_task_name);
WS_ACT_DBMS_STATS,FUNCTION,240, ELSE
WS_ACT_DBMS_STATS,FUNCTION,241, v_stmt := 'BEGIN dbms_stats.gather_table_stats(ownname=>'''||v_table_schema||''',tabname=>'''||
WS_ACT_DBMS_STATS,FUNCTION,242, p_task_name||''',estimate_percent=>'''||p_percent||''',cascade=>TRUE); END;';
WS_ACT_DBMS_STATS,FUNCTION,243, END IF;
WS_ACT_DBMS_STATS,FUNCTION,244, End If;
WS_ACT_DBMS_STATS,FUNCTION,245, p_return_msg := 'Table '||p_task_name||' statistics gathered ';
WS_ACT_DBMS_STATS,FUNCTION,246,
WS_ACT_DBMS_STATS,FUNCTION,247, -- Execute the statement
WS_ACT_DBMS_STATS,FUNCTION,248, v_step := 130;
WS_ACT_DBMS_STATS,FUNCTION,249, Execute Immediate v_stmt;
WS_ACT_DBMS_STATS,FUNCTION,250, v_step := 132;
WS_ACT_DBMS_STATS,FUNCTION,251, End If;
WS_ACT_DBMS_STATS,FUNCTION,252,
WS_ACT_DBMS_STATS,FUNCTION,253, v_step := 140;
WS_ACT_DBMS_STATS,FUNCTION,254,
WS_ACT_DBMS_STATS,FUNCTION,255, p_status_code := 1;
WS_ACT_DBMS_STATS,FUNCTION,256,
WS_ACT_DBMS_STATS,FUNCTION,257, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_DBMS_STATS,FUNCTION,258, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_DBMS_STATS,FUNCTION,259, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_DBMS_STATS,FUNCTION,260,
WS_ACT_DBMS_STATS,FUNCTION,261, COMMIT;
WS_ACT_DBMS_STATS,FUNCTION,262, RETURN v_result;
WS_ACT_DBMS_STATS,FUNCTION,263,
WS_ACT_DBMS_STATS,FUNCTION,264,EXCEPTION
WS_ACT_DBMS_STATS,FUNCTION,265, WHEN OTHERS THEN
WS_ACT_DBMS_STATS,FUNCTION,266, v_MsgText := 'Unhandled Exception in ws_act_dbms_stats. '||
WS_ACT_DBMS_STATS,FUNCTION,267, ' Step ' ||v_step;
WS_ACT_DBMS_STATS,FUNCTION,268, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DBMS_STATS,FUNCTION,269, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DBMS_STATS,FUNCTION,270, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_DBMS_STATS,FUNCTION,271, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_DBMS_STATS,FUNCTION,272, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DBMS_STATS,FUNCTION,273, p_return_msg := 'Unhandled Exception in ws_act_dbms_stats step ' ||v_step;
WS_ACT_DBMS_STATS,FUNCTION,274, p_status_code := -3;
WS_ACT_DBMS_STATS,FUNCTION,275, RETURN -3;
WS_ACT_DBMS_STATS,FUNCTION,276,
WS_ACT_DBMS_STATS,FUNCTION,277,END ws_act_dbms_stats;
WS_ACT_DBMS_STATS,FUNCTION,278,
WS_ACT_DROP,FUNCTION,1,function ws_act_drop
WS_ACT_DROP,FUNCTION,2, (
WS_ACT_DROP,FUNCTION,3, p_sequence IN number,
WS_ACT_DROP,FUNCTION,4, p_obj_type IN number,
WS_ACT_DROP,FUNCTION,5, p_action IN number,
WS_ACT_DROP,FUNCTION,6, p_obj_key IN number,
WS_ACT_DROP,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_DROP,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_DROP,FUNCTION,9, p_job_id IN number,
WS_ACT_DROP,FUNCTION,10, p_task_id IN number,
WS_ACT_DROP,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_DROP,FUNCTION,12, p_status_code OUT number
WS_ACT_DROP,FUNCTION,13, )
WS_ACT_DROP,FUNCTION,14, Return integer
WS_ACT_DROP,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_DROP,FUNCTION,16, IS
WS_ACT_DROP,FUNCTION,17,
WS_ACT_DROP,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_DROP,FUNCTION,19,
WS_ACT_DROP,FUNCTION,20, -- =============================================================================
WS_ACT_DROP,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_DROP,FUNCTION,22, -- Script Name : ws_act_drop
WS_ACT_DROP,FUNCTION,23, -- Description : Drop a table or Index
WS_ACT_DROP,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_DROP,FUNCTION,25, -- =============================================================================
WS_ACT_DROP,FUNCTION,26,
WS_ACT_DROP,FUNCTION,27, --=====================================================
WS_ACT_DROP,FUNCTION,28, -- Constants
WS_ACT_DROP,FUNCTION,29, --=====================================================
WS_ACT_DROP,FUNCTION,30, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_DROP,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_DROP,FUNCTION,32, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_DROP,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_DROP,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_DROP,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_DROP,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_DROP,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_DROP,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_DROP,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_DROP,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_DROP,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_DROP,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_DROP,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_ACT_DROP,FUNCTION,44, v_ws_obj_cube constant number := 15;
WS_ACT_DROP,FUNCTION,45, v_ws_obj_cube_virtual constant number := 16;
WS_ACT_DROP,FUNCTION,46, v_ws_obj_report constant number := 17;
WS_ACT_DROP,FUNCTION,47, v_ws_obj_view constant number := 18;
WS_ACT_DROP,FUNCTION,48, v_ws_obj_file constant number := 19;
WS_ACT_DROP,FUNCTION,49, v_ws_obj_join constant number := 20;
WS_ACT_DROP,FUNCTION,50, v_ws_obj_retro constant number := 21;
WS_ACT_DROP,FUNCTION,51, v_ws_obj_retro_copy constant number := 22;
WS_ACT_DROP,FUNCTION,52, v_ws_obj_olap_cube constant number := 23;
WS_ACT_DROP,FUNCTION,53, v_ws_obj_olap_dim constant number := 24;
WS_ACT_DROP,FUNCTION,54, v_ws_obj_olap_role constant number := 25;
WS_ACT_DROP,FUNCTION,55, v_ws_obj_ods constant number := 26;
WS_ACT_DROP,FUNCTION,56, v_ws_obj_normal constant number := 27;
WS_ACT_DROP,FUNCTION,57, v_ws_obj_hub constant number := 28;
WS_ACT_DROP,FUNCTION,58, v_ws_obj_satellite constant number := 29;
WS_ACT_DROP,FUNCTION,59, v_ws_obj_link constant number := 30;
WS_ACT_DROP,FUNCTION,60, v_ws_obj_custom1 constant number := 31;
WS_ACT_DROP,FUNCTION,61, v_ws_obj_custom2 constant number := 32;
WS_ACT_DROP,FUNCTION,62, v_ws_obj_max constant number := 32;
WS_ACT_DROP,FUNCTION,63,
WS_ACT_DROP,FUNCTION,64, v_ws_obj_job constant number := 50;
WS_ACT_DROP,FUNCTION,65,
WS_ACT_DROP,FUNCTION,66, v_ws_act_drop constant number := 1;
WS_ACT_DROP,FUNCTION,67, v_ws_act_create constant number := 2;
WS_ACT_DROP,FUNCTION,68, v_ws_act_drop_all constant number := 3;
WS_ACT_DROP,FUNCTION,69, v_ws_act_pre_drop constant number := 4;
WS_ACT_DROP,FUNCTION,70, v_ws_act_load constant number := 5;
WS_ACT_DROP,FUNCTION,71, v_ws_act_update constant number := 6;
WS_ACT_DROP,FUNCTION,72, v_ws_act_execute constant number := 7;
WS_ACT_DROP,FUNCTION,73, v_ws_act_process constant number := 8;
WS_ACT_DROP,FUNCTION,74, v_ws_act_build constant number := 9;
WS_ACT_DROP,FUNCTION,75, v_ws_act_build_all constant number := 10;
WS_ACT_DROP,FUNCTION,76, v_ws_act_analyze constant number := 11;
WS_ACT_DROP,FUNCTION,77, v_ws_act_quick_analyze constant number := 12;
WS_ACT_DROP,FUNCTION,78, v_ws_act_statistics constant number := 13;
WS_ACT_DROP,FUNCTION,79, v_ws_act_quick_statistics constant number := 14;
WS_ACT_DROP,FUNCTION,80, v_ws_act_initial constant number := 15;
WS_ACT_DROP,FUNCTION,81, v_ws_act_cube_dim constant number := 16;
WS_ACT_DROP,FUNCTION,82, v_ws_act_db_dim constant number := 17;
WS_ACT_DROP,FUNCTION,83, v_ws_act_custom constant number := 18;
WS_ACT_DROP,FUNCTION,84, v_ws_act_truncate constant number := 19;
WS_ACT_DROP,FUNCTION,85,
WS_ACT_DROP,FUNCTION,86, --=====================================================
WS_ACT_DROP,FUNCTION,87, -- Variables
WS_ACT_DROP,FUNCTION,88, --=====================================================
WS_ACT_DROP,FUNCTION,89, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_DROP,FUNCTION,90, v_step integer := 0; -- return code
WS_ACT_DROP,FUNCTION,91, v_result integer := 0; -- return code
WS_ACT_DROP,FUNCTION,92, v_stmt varchar2(1024);
WS_ACT_DROP,FUNCTION,93, v_cursor number;
WS_ACT_DROP,FUNCTION,94, v_IndRec ws_index_header%ROWTYPE;
WS_ACT_DROP,FUNCTION,95, v_part_count integer := 0;
WS_ACT_DROP,FUNCTION,96, v_schema_flag integer := 0;
WS_ACT_DROP,FUNCTION,97, v_satellite_ind varchar2(1);
WS_ACT_DROP,FUNCTION,98, v_dss_schema varchar2(64);
WS_ACT_DROP,FUNCTION,99, v_index_done integer; -- used to flag successful drop
WS_ACT_DROP,FUNCTION,100, v_msg_result integer := 0; -- return code
WS_ACT_DROP,FUNCTION,101, v_table_schema varchar2(64);
WS_ACT_DROP,FUNCTION,102, v_table_name varchar2(64);
WS_ACT_DROP,FUNCTION,103, v_table_with_schema varchar2(150);
WS_ACT_DROP,FUNCTION,104, v_index_name varchar2(64);
WS_ACT_DROP,FUNCTION,105, v_index_with_schema varchar2(150);
WS_ACT_DROP,FUNCTION,106,
WS_ACT_DROP,FUNCTION,107,BEGIN
WS_ACT_DROP,FUNCTION,108,
WS_ACT_DROP,FUNCTION,109, v_step := 100;
WS_ACT_DROP,FUNCTION,110, --=====================================================
WS_ACT_DROP,FUNCTION,111, -- See if we have the flag set for including schema
WS_ACT_DROP,FUNCTION,112, --=====================================================
WS_ACT_DROP,FUNCTION,113,
WS_ACT_DROP,FUNCTION,114, v_satellite_ind := '';
WS_ACT_DROP,FUNCTION,115,
WS_ACT_DROP,FUNCTION,116, v_table_schema := '';
WS_ACT_DROP,FUNCTION,117,
WS_ACT_DROP,FUNCTION,118, -- needs to look up the schema from ws_dbc_target
WS_ACT_DROP,FUNCTION,119, BEGIN
WS_ACT_DROP,FUNCTION,120, IF p_obj_type = v_ws_obj_index THEN
WS_ACT_DROP,FUNCTION,121, v_step := 110;
WS_ACT_DROP,FUNCTION,122, SELECT NVL(dt_schema, '')
WS_ACT_DROP,FUNCTION,123, ,oo_name
WS_ACT_DROP,FUNCTION,124, ,ih_index_name
WS_ACT_DROP,FUNCTION,125, INTO v_table_schema
WS_ACT_DROP,FUNCTION,126, ,v_table_name
WS_ACT_DROP,FUNCTION,127, ,v_index_name
WS_ACT_DROP,FUNCTION,128, FROM ws_index_header
WS_ACT_DROP,FUNCTION,129, LEFT JOIN ws_obj_object
WS_ACT_DROP,FUNCTION,130, ON ws_obj_object.oo_obj_key = ih_obj_key
WS_ACT_DROP,FUNCTION,131, LEFT JOIN ws_dbc_target
WS_ACT_DROP,FUNCTION,132, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_DROP,FUNCTION,133, WHERE ws_index_header.ih_index_key = p_obj_key
WS_ACT_DROP,FUNCTION,134, ;
WS_ACT_DROP,FUNCTION,135, else
WS_ACT_DROP,FUNCTION,136, v_step := 120;
WS_ACT_DROP,FUNCTION,137, v_index_name := '';
WS_ACT_DROP,FUNCTION,138, SELECT NVL(dt_schema, '')
WS_ACT_DROP,FUNCTION,139, ,oo_name
WS_ACT_DROP,FUNCTION,140, INTO v_table_schema
WS_ACT_DROP,FUNCTION,141, ,v_table_name
WS_ACT_DROP,FUNCTION,142, FROM ws_obj_object
WS_ACT_DROP,FUNCTION,143, LEFT JOIN ws_dbc_target
WS_ACT_DROP,FUNCTION,144, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_DROP,FUNCTION,145, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_DROP,FUNCTION,146, ;
WS_ACT_DROP,FUNCTION,147, END IF;
WS_ACT_DROP,FUNCTION,148,
WS_ACT_DROP,FUNCTION,149, v_table_schema := TRIM(v_table_schema);
WS_ACT_DROP,FUNCTION,150,
WS_ACT_DROP,FUNCTION,151, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_DROP,FUNCTION,152, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_DROP,FUNCTION,153, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP,FUNCTION,154, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_DROP,FUNCTION,155, p_return_msg := 'Object could not be found';
WS_ACT_DROP,FUNCTION,156, p_status_code := -2;
WS_ACT_DROP,FUNCTION,157, RETURN -2;
WS_ACT_DROP,FUNCTION,158, END;
WS_ACT_DROP,FUNCTION,159,
WS_ACT_DROP,FUNCTION,160, v_step := 130;
WS_ACT_DROP,FUNCTION,161, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_DROP,FUNCTION,162, -- meta_satellite_ind = A
WS_ACT_DROP,FUNCTION,163, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_DROP,FUNCTION,164,
WS_ACT_DROP,FUNCTION,165, SELECT meta_satellite_ind,
WS_ACT_DROP,FUNCTION,166, TRIM(meta_dss_schema)
WS_ACT_DROP,FUNCTION,167, INTO v_satellite_ind,
WS_ACT_DROP,FUNCTION,168, v_dss_schema
WS_ACT_DROP,FUNCTION,169, FROM ws_meta
WS_ACT_DROP,FUNCTION,170, WHERE rownum = 1;
WS_ACT_DROP,FUNCTION,171,
WS_ACT_DROP,FUNCTION,172, IF v_satellite_ind = 'A' THEN
WS_ACT_DROP,FUNCTION,173, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_DROP,FUNCTION,174, v_schema_flag := 1;
WS_ACT_DROP,FUNCTION,175, v_table_schema := v_dss_schema;
WS_ACT_DROP,FUNCTION,176, END IF;
WS_ACT_DROP,FUNCTION,177, END IF;
WS_ACT_DROP,FUNCTION,178,
WS_ACT_DROP,FUNCTION,179, v_step := 140;
WS_ACT_DROP,FUNCTION,180, -- If still not set then defaults to the current user
WS_ACT_DROP,FUNCTION,181, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_DROP,FUNCTION,182, SELECT user
WS_ACT_DROP,FUNCTION,183, INTO v_table_schema
WS_ACT_DROP,FUNCTION,184, FROM dual;
WS_ACT_DROP,FUNCTION,185, END IF;
WS_ACT_DROP,FUNCTION,186,
WS_ACT_DROP,FUNCTION,187, End If;
WS_ACT_DROP,FUNCTION,188,
WS_ACT_DROP,FUNCTION,189, v_step := 150;
WS_ACT_DROP,FUNCTION,190,
WS_ACT_DROP,FUNCTION,191, v_table_schema := TRIM(v_table_schema);
WS_ACT_DROP,FUNCTION,192,
WS_ACT_DROP,FUNCTION,193, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_DROP,FUNCTION,194, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_DROP,FUNCTION,195, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_DROP,FUNCTION,196, END IF;
WS_ACT_DROP,FUNCTION,197,
WS_ACT_DROP,FUNCTION,198, v_index_with_schema := v_table_with_schema || v_index_name;
WS_ACT_DROP,FUNCTION,199, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_DROP,FUNCTION,200,
WS_ACT_DROP,FUNCTION,201, v_step := 200;
WS_ACT_DROP,FUNCTION,202, --=====================================================
WS_ACT_DROP,FUNCTION,203, -- Handle either an Index, Table or View
WS_ACT_DROP,FUNCTION,204, --=====================================================
WS_ACT_DROP,FUNCTION,205, If p_obj_type = v_ws_obj_index Then
WS_ACT_DROP,FUNCTION,206,
WS_ACT_DROP,FUNCTION,207, BEGIN
WS_ACT_DROP,FUNCTION,208, v_step := 300;
WS_ACT_DROP,FUNCTION,209, Select * into v_IndRec from ws_index_header where ih_index_key = p_obj_key;
WS_ACT_DROP,FUNCTION,210, v_step := 400;
WS_ACT_DROP,FUNCTION,211,
WS_ACT_DROP,FUNCTION,212, If v_IndRec.ih_partition_type is NULL Then
WS_ACT_DROP,FUNCTION,213, v_part_count := 0;
WS_ACT_DROP,FUNCTION,214, Else
WS_ACT_DROP,FUNCTION,215, Select count(1) into v_part_count
WS_ACT_DROP,FUNCTION,216, from all_tab_partitions
WS_ACT_DROP,FUNCTION,217, Where table_owner = upper(v_table_schema)
WS_ACT_DROP,FUNCTION,218, And table_name = upper(v_table_name);
WS_ACT_DROP,FUNCTION,219, End If;
WS_ACT_DROP,FUNCTION,220,
WS_ACT_DROP,FUNCTION,221, v_step := 500;
WS_ACT_DROP,FUNCTION,222, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_DROP,FUNCTION,223, And v_part_count = 0 Then
WS_ACT_DROP,FUNCTION,224, v_stmt := 'alter table '|| v_table_with_schema ||
WS_ACT_DROP,FUNCTION,225, ' drop constraint '||v_index_name;
WS_ACT_DROP,FUNCTION,226, Else
WS_ACT_DROP,FUNCTION,227, v_stmt := 'drop index '||v_index_with_schema;
WS_ACT_DROP,FUNCTION,228, End If;
WS_ACT_DROP,FUNCTION,229, v_step := 600;
WS_ACT_DROP,FUNCTION,230,
WS_ACT_DROP,FUNCTION,231, v_index_done := 1;
WS_ACT_DROP,FUNCTION,232, Execute Immediate v_stmt;
WS_ACT_DROP,FUNCTION,233, p_status_code := 1;
WS_ACT_DROP,FUNCTION,234, p_return_msg := 'Index '||v_index_with_schema||' dropped';
WS_ACT_DROP,FUNCTION,235, EXCEPTION
WS_ACT_DROP,FUNCTION,236, WHEN OTHERS THEN
WS_ACT_DROP,FUNCTION,237, v_index_done := 0;
WS_ACT_DROP,FUNCTION,238, If SQLCODE = -1418 OR SQLCODE = -942 Then
WS_ACT_DROP,FUNCTION,239, p_return_msg := 'Index to be dropped does not exist';
WS_ACT_DROP,FUNCTION,240, p_status_code := -1;
WS_ACT_DROP,FUNCTION,241, v_result := -1;
WS_ACT_DROP,FUNCTION,242, Else
WS_ACT_DROP,FUNCTION,243, v_MsgText := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version ||
WS_ACT_DROP,FUNCTION,244, ' Step ' ||v_step||' Object ' ||p_obj_key;
WS_ACT_DROP,FUNCTION,245, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP,FUNCTION,246, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DROP,FUNCTION,247, p_return_msg := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_DROP,FUNCTION,248, p_status_code := -3;
WS_ACT_DROP,FUNCTION,249, v_result := -3;
WS_ACT_DROP,FUNCTION,250, End If;
WS_ACT_DROP,FUNCTION,251, END;
WS_ACT_DROP,FUNCTION,252, --=====================================================
WS_ACT_DROP,FUNCTION,253, -- Put detail message
WS_ACT_DROP,FUNCTION,254, --=====================================================
WS_ACT_DROP,FUNCTION,255, v_step := 700;
WS_ACT_DROP,FUNCTION,256, IF v_index_done = 1 THEN
WS_ACT_DROP,FUNCTION,257,
WS_ACT_DROP,FUNCTION,258, v_step := 800;
WS_ACT_DROP,FUNCTION,259, v_MsgText := 'Index ' || v_index_with_schema || ' dropped';
WS_ACT_DROP,FUNCTION,260, v_msg_result := WsWrkError(
WS_ACT_DROP,FUNCTION,261, 'I'
WS_ACT_DROP,FUNCTION,262, , p_job_name
WS_ACT_DROP,FUNCTION,263, , p_task_name
WS_ACT_DROP,FUNCTION,264, , p_sequence
WS_ACT_DROP,FUNCTION,265, , v_MsgText
WS_ACT_DROP,FUNCTION,266, , NULL
WS_ACT_DROP,FUNCTION,267, , NULL
WS_ACT_DROP,FUNCTION,268, , p_task_id
WS_ACT_DROP,FUNCTION,269, , p_job_id
WS_ACT_DROP,FUNCTION,270, , NULL);
WS_ACT_DROP,FUNCTION,271,
WS_ACT_DROP,FUNCTION,272, END IF;
WS_ACT_DROP,FUNCTION,273,
WS_ACT_DROP,FUNCTION,274, ElsIf p_obj_type = v_ws_obj_dim_view
WS_ACT_DROP,FUNCTION,275, OR p_obj_type = v_ws_obj_view Then
WS_ACT_DROP,FUNCTION,276,
WS_ACT_DROP,FUNCTION,277, v_stmt := 'drop view '|| v_table_with_schema;
WS_ACT_DROP,FUNCTION,278, v_step := 900;
WS_ACT_DROP,FUNCTION,279, BEGIN
WS_ACT_DROP,FUNCTION,280, Execute Immediate v_stmt;
WS_ACT_DROP,FUNCTION,281, p_status_code := 1;
WS_ACT_DROP,FUNCTION,282, p_return_msg := 'View '|| v_table_with_schema ||' dropped';
WS_ACT_DROP,FUNCTION,283, EXCEPTION
WS_ACT_DROP,FUNCTION,284, WHEN OTHERS THEN
WS_ACT_DROP,FUNCTION,285, If SQLCODE = -1418 OR SQLCODE = -942 Then
WS_ACT_DROP,FUNCTION,286, p_return_msg := 'View to be dropped does not exist';
WS_ACT_DROP,FUNCTION,287, p_status_code := -1;
WS_ACT_DROP,FUNCTION,288, v_result := -1;
WS_ACT_DROP,FUNCTION,289, Else
WS_ACT_DROP,FUNCTION,290, v_MsgText := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version ||
WS_ACT_DROP,FUNCTION,291, ' Step ' ||v_step;
WS_ACT_DROP,FUNCTION,292, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP,FUNCTION,293, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DROP,FUNCTION,294, p_return_msg := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_DROP,FUNCTION,295, p_status_code := -3;
WS_ACT_DROP,FUNCTION,296, v_result := -3;
WS_ACT_DROP,FUNCTION,297, End If;
WS_ACT_DROP,FUNCTION,298, END;
WS_ACT_DROP,FUNCTION,299, Else
WS_ACT_DROP,FUNCTION,300, --=====================================================
WS_ACT_DROP,FUNCTION,301, -- Table. But if an agg need to drop the materialized view
WS_ACT_DROP,FUNCTION,302, --=====================================================
WS_ACT_DROP,FUNCTION,303, If p_obj_type = v_ws_obj_agg Then
WS_ACT_DROP,FUNCTION,304, v_stmt := 'drop materialized view '|| v_table_with_schema;
WS_ACT_DROP,FUNCTION,305, v_step := 1000;
WS_ACT_DROP,FUNCTION,306, BEGIN
WS_ACT_DROP,FUNCTION,307, Execute Immediate v_stmt;
WS_ACT_DROP,FUNCTION,308, p_status_code := 1;
WS_ACT_DROP,FUNCTION,309, p_return_msg := 'Materialized view '|| v_table_with_schema||' dropped';
WS_ACT_DROP,FUNCTION,310, EXCEPTION
WS_ACT_DROP,FUNCTION,311, WHEN OTHERS THEN
WS_ACT_DROP,FUNCTION,312, p_status_code := -1;
WS_ACT_DROP,FUNCTION,313, END;
WS_ACT_DROP,FUNCTION,314, End If;
WS_ACT_DROP,FUNCTION,315,
WS_ACT_DROP,FUNCTION,316, --=====================================================
WS_ACT_DROP,FUNCTION,317, -- Now drop the Table
WS_ACT_DROP,FUNCTION,318, --=====================================================
WS_ACT_DROP,FUNCTION,319, v_stmt := 'DROP TABLE '|| v_table_with_schema || ' PURGE';
WS_ACT_DROP,FUNCTION,320, v_step := 1100;
WS_ACT_DROP,FUNCTION,321, BEGIN
WS_ACT_DROP,FUNCTION,322, Execute Immediate v_stmt;
WS_ACT_DROP,FUNCTION,323, p_status_code := 1;
WS_ACT_DROP,FUNCTION,324, p_return_msg := 'Table '|| v_table_with_schema ||' dropped';
WS_ACT_DROP,FUNCTION,325, EXCEPTION
WS_ACT_DROP,FUNCTION,326, WHEN OTHERS THEN
WS_ACT_DROP,FUNCTION,327, If SQLCODE = -1418 OR SQLCODE = -942 Then
WS_ACT_DROP,FUNCTION,328, p_return_msg := 'Table to be dropped does not exist';
WS_ACT_DROP,FUNCTION,329, p_status_code := -1;
WS_ACT_DROP,FUNCTION,330, v_result := -1;
WS_ACT_DROP,FUNCTION,331, Else
WS_ACT_DROP,FUNCTION,332, v_MsgText := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version ||
WS_ACT_DROP,FUNCTION,333, ' Step ' ||v_step;
WS_ACT_DROP,FUNCTION,334, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP,FUNCTION,335, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DROP,FUNCTION,336, p_return_msg := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_DROP,FUNCTION,337, p_status_code := -3;
WS_ACT_DROP,FUNCTION,338, v_result := -3;
WS_ACT_DROP,FUNCTION,339, End If;
WS_ACT_DROP,FUNCTION,340, END;
WS_ACT_DROP,FUNCTION,341, End If;
WS_ACT_DROP,FUNCTION,342,
WS_ACT_DROP,FUNCTION,343, COMMIT;
WS_ACT_DROP,FUNCTION,344, RETURN v_result;
WS_ACT_DROP,FUNCTION,345,
WS_ACT_DROP,FUNCTION,346,EXCEPTION
WS_ACT_DROP,FUNCTION,347, WHEN OTHERS THEN
WS_ACT_DROP,FUNCTION,348, v_MsgText := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version ||
WS_ACT_DROP,FUNCTION,349, ' Step ' ||v_step;
WS_ACT_DROP,FUNCTION,350, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP,FUNCTION,351, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DROP,FUNCTION,352, p_return_msg := 'Unhandled Exception in ws_act_drop '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_DROP,FUNCTION,353, p_status_code := -3;
WS_ACT_DROP,FUNCTION,354, RETURN -3;
WS_ACT_DROP,FUNCTION,355,
WS_ACT_DROP,FUNCTION,356,END ws_act_drop;
WS_ACT_DROP,FUNCTION,357,
WS_ACT_DROP_ALL,FUNCTION,1,function ws_act_drop_all
WS_ACT_DROP_ALL,FUNCTION,2, (
WS_ACT_DROP_ALL,FUNCTION,3, p_sequence IN number,
WS_ACT_DROP_ALL,FUNCTION,4, p_obj_type IN number,
WS_ACT_DROP_ALL,FUNCTION,5, p_action IN number,
WS_ACT_DROP_ALL,FUNCTION,6, p_obj_key IN number,
WS_ACT_DROP_ALL,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_DROP_ALL,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_DROP_ALL,FUNCTION,9, p_job_id IN number,
WS_ACT_DROP_ALL,FUNCTION,10, p_task_id IN number,
WS_ACT_DROP_ALL,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_DROP_ALL,FUNCTION,12, p_status_code OUT number
WS_ACT_DROP_ALL,FUNCTION,13, )
WS_ACT_DROP_ALL,FUNCTION,14, Return integer
WS_ACT_DROP_ALL,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_DROP_ALL,FUNCTION,16, IS
WS_ACT_DROP_ALL,FUNCTION,17,
WS_ACT_DROP_ALL,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_DROP_ALL,FUNCTION,19,
WS_ACT_DROP_ALL,FUNCTION,20, -- =============================================================================
WS_ACT_DROP_ALL,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_DROP_ALL,FUNCTION,22, -- Script Name : ws_act_drop_all
WS_ACT_DROP_ALL,FUNCTION,23, -- Description : Drop all indexes associated with an object
WS_ACT_DROP_ALL,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_DROP_ALL,FUNCTION,25, -- =============================================================================
WS_ACT_DROP_ALL,FUNCTION,26,
WS_ACT_DROP_ALL,FUNCTION,27, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,28, -- Constants
WS_ACT_DROP_ALL,FUNCTION,29, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,30, v_ws_pro_version constant varchar(15) := '(8.4.1.0)';
WS_ACT_DROP_ALL,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_DROP_ALL,FUNCTION,32, v_ws_obj_directive constant number := 2;
WS_ACT_DROP_ALL,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_DROP_ALL,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_DROP_ALL,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_DROP_ALL,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_DROP_ALL,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_DROP_ALL,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_DROP_ALL,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_DROP_ALL,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_DROP_ALL,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_DROP_ALL,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_DROP_ALL,FUNCTION,43,
WS_ACT_DROP_ALL,FUNCTION,44, v_ws_act_drop constant number := 0;
WS_ACT_DROP_ALL,FUNCTION,45, v_ws_act_create constant number := 1;
WS_ACT_DROP_ALL,FUNCTION,46, v_ws_act_compile constant number := 2;
WS_ACT_DROP_ALL,FUNCTION,47, v_ws_act_drop_all constant number := 3;
WS_ACT_DROP_ALL,FUNCTION,48, v_ws_act_pre_drop constant number := 4;
WS_ACT_DROP_ALL,FUNCTION,49, v_ws_act_load constant number := 5;
WS_ACT_DROP_ALL,FUNCTION,50, v_ws_act_update constant number := 6;
WS_ACT_DROP_ALL,FUNCTION,51, v_ws_act_execute constant number := 7;
WS_ACT_DROP_ALL,FUNCTION,52, v_ws_act_process constant number := 8;
WS_ACT_DROP_ALL,FUNCTION,53, v_ws_act_build constant number := 9;
WS_ACT_DROP_ALL,FUNCTION,54, v_ws_act_build_all constant number := 10;
WS_ACT_DROP_ALL,FUNCTION,55, v_ws_act_analyze constant number := 11;
WS_ACT_DROP_ALL,FUNCTION,56, v_ws_act_quick_analyze constant number := 12;
WS_ACT_DROP_ALL,FUNCTION,57, v_ws_act_statistics constant number := 13;
WS_ACT_DROP_ALL,FUNCTION,58, v_ws_act_quick_statistics constant number := 14;
WS_ACT_DROP_ALL,FUNCTION,59,
WS_ACT_DROP_ALL,FUNCTION,60, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,61, -- Variables
WS_ACT_DROP_ALL,FUNCTION,62, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,63, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_DROP_ALL,FUNCTION,64, v_step integer := 0; -- return code
WS_ACT_DROP_ALL,FUNCTION,65, v_result integer := 0; -- return code
WS_ACT_DROP_ALL,FUNCTION,66, v_stmt varchar2(1024);
WS_ACT_DROP_ALL,FUNCTION,67, v_count integer := 0;
WS_ACT_DROP_ALL,FUNCTION,68, v_part_count integer := 0;
WS_ACT_DROP_ALL,FUNCTION,69, v_schema_flag integer := 0;
WS_ACT_DROP_ALL,FUNCTION,70, v_satellite_ind varchar2(1);
WS_ACT_DROP_ALL,FUNCTION,71, v_dss_schema varchar2(64);
WS_ACT_DROP_ALL,FUNCTION,72, v_index_done integer; -- used to flag successful drop
WS_ACT_DROP_ALL,FUNCTION,73, v_msg_result integer := 0; -- return code
WS_ACT_DROP_ALL,FUNCTION,74, v_table_schema varchar2(64);
WS_ACT_DROP_ALL,FUNCTION,75, v_table_name varchar2(64);
WS_ACT_DROP_ALL,FUNCTION,76, v_table_with_schema varchar2(150);
WS_ACT_DROP_ALL,FUNCTION,77, v_index_name varchar2(64);
WS_ACT_DROP_ALL,FUNCTION,78, v_index_with_schema varchar2(150);
WS_ACT_DROP_ALL,FUNCTION,79,
WS_ACT_DROP_ALL,FUNCTION,80, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,81, -- Cursor for all indexes
WS_ACT_DROP_ALL,FUNCTION,82, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,83, Cursor c_Index is
WS_ACT_DROP_ALL,FUNCTION,84, Select * from ws_index_header
WS_ACT_DROP_ALL,FUNCTION,85, Where ih_obj_key = p_obj_key;
WS_ACT_DROP_ALL,FUNCTION,86,
WS_ACT_DROP_ALL,FUNCTION,87,BEGIN
WS_ACT_DROP_ALL,FUNCTION,88,
WS_ACT_DROP_ALL,FUNCTION,89, v_step := 100;
WS_ACT_DROP_ALL,FUNCTION,90, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,91, -- See if we have the flag set for including schema
WS_ACT_DROP_ALL,FUNCTION,92, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,93,
WS_ACT_DROP_ALL,FUNCTION,94, v_satellite_ind := '';
WS_ACT_DROP_ALL,FUNCTION,95,
WS_ACT_DROP_ALL,FUNCTION,96, v_table_schema := '';
WS_ACT_DROP_ALL,FUNCTION,97,
WS_ACT_DROP_ALL,FUNCTION,98, -- needs to look up the schema from ws_dbc_target
WS_ACT_DROP_ALL,FUNCTION,99, BEGIN
WS_ACT_DROP_ALL,FUNCTION,100, IF p_obj_type = v_ws_obj_index THEN
WS_ACT_DROP_ALL,FUNCTION,101, v_step := 110;
WS_ACT_DROP_ALL,FUNCTION,102, SELECT NVL(dt_schema, '')
WS_ACT_DROP_ALL,FUNCTION,103, ,oo_name
WS_ACT_DROP_ALL,FUNCTION,104, ,ih_index_name
WS_ACT_DROP_ALL,FUNCTION,105, INTO v_table_schema
WS_ACT_DROP_ALL,FUNCTION,106, ,v_table_name
WS_ACT_DROP_ALL,FUNCTION,107, ,v_index_name
WS_ACT_DROP_ALL,FUNCTION,108, FROM ws_index_header
WS_ACT_DROP_ALL,FUNCTION,109, LEFT JOIN ws_obj_object
WS_ACT_DROP_ALL,FUNCTION,110, ON ws_obj_object.oo_obj_key = ih_obj_key
WS_ACT_DROP_ALL,FUNCTION,111, LEFT JOIN ws_dbc_target
WS_ACT_DROP_ALL,FUNCTION,112, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_DROP_ALL,FUNCTION,113, WHERE ws_index_header.ih_index_key = p_obj_key
WS_ACT_DROP_ALL,FUNCTION,114, ;
WS_ACT_DROP_ALL,FUNCTION,115, else
WS_ACT_DROP_ALL,FUNCTION,116, v_step := 120;
WS_ACT_DROP_ALL,FUNCTION,117, v_index_name := '';
WS_ACT_DROP_ALL,FUNCTION,118, SELECT NVL(dt_schema, '')
WS_ACT_DROP_ALL,FUNCTION,119, ,oo_name
WS_ACT_DROP_ALL,FUNCTION,120, INTO v_table_schema
WS_ACT_DROP_ALL,FUNCTION,121, ,v_table_name
WS_ACT_DROP_ALL,FUNCTION,122, FROM ws_obj_object
WS_ACT_DROP_ALL,FUNCTION,123, LEFT JOIN ws_dbc_target
WS_ACT_DROP_ALL,FUNCTION,124, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_DROP_ALL,FUNCTION,125, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_DROP_ALL,FUNCTION,126, ;
WS_ACT_DROP_ALL,FUNCTION,127, END IF;
WS_ACT_DROP_ALL,FUNCTION,128,
WS_ACT_DROP_ALL,FUNCTION,129, v_table_schema := TRIM(v_table_schema);
WS_ACT_DROP_ALL,FUNCTION,130,
WS_ACT_DROP_ALL,FUNCTION,131, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_DROP_ALL,FUNCTION,132, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_DROP_ALL,FUNCTION,133, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP_ALL,FUNCTION,134, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_DROP_ALL,FUNCTION,135, p_return_msg := 'Object could not be found';
WS_ACT_DROP_ALL,FUNCTION,136, p_status_code := -2;
WS_ACT_DROP_ALL,FUNCTION,137, RETURN -2;
WS_ACT_DROP_ALL,FUNCTION,138, END;
WS_ACT_DROP_ALL,FUNCTION,139,
WS_ACT_DROP_ALL,FUNCTION,140, v_step := 130;
WS_ACT_DROP_ALL,FUNCTION,141, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_DROP_ALL,FUNCTION,142, -- meta_satellite_ind = A
WS_ACT_DROP_ALL,FUNCTION,143, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_DROP_ALL,FUNCTION,144,
WS_ACT_DROP_ALL,FUNCTION,145, SELECT meta_satellite_ind,
WS_ACT_DROP_ALL,FUNCTION,146, TRIM(meta_dss_schema)
WS_ACT_DROP_ALL,FUNCTION,147, INTO v_satellite_ind,
WS_ACT_DROP_ALL,FUNCTION,148, v_dss_schema
WS_ACT_DROP_ALL,FUNCTION,149, FROM ws_meta
WS_ACT_DROP_ALL,FUNCTION,150, WHERE rownum = 1;
WS_ACT_DROP_ALL,FUNCTION,151,
WS_ACT_DROP_ALL,FUNCTION,152, IF v_satellite_ind = 'A' THEN
WS_ACT_DROP_ALL,FUNCTION,153, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_DROP_ALL,FUNCTION,154, v_schema_flag := 1;
WS_ACT_DROP_ALL,FUNCTION,155, v_table_schema := v_dss_schema;
WS_ACT_DROP_ALL,FUNCTION,156, END IF;
WS_ACT_DROP_ALL,FUNCTION,157, END IF;
WS_ACT_DROP_ALL,FUNCTION,158,
WS_ACT_DROP_ALL,FUNCTION,159, v_step := 140;
WS_ACT_DROP_ALL,FUNCTION,160, -- If still not set then defaults to the current user
WS_ACT_DROP_ALL,FUNCTION,161, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_DROP_ALL,FUNCTION,162, SELECT user
WS_ACT_DROP_ALL,FUNCTION,163, INTO v_table_schema
WS_ACT_DROP_ALL,FUNCTION,164, FROM dual;
WS_ACT_DROP_ALL,FUNCTION,165, END IF;
WS_ACT_DROP_ALL,FUNCTION,166,
WS_ACT_DROP_ALL,FUNCTION,167, End If;
WS_ACT_DROP_ALL,FUNCTION,168,
WS_ACT_DROP_ALL,FUNCTION,169, v_step := 150;
WS_ACT_DROP_ALL,FUNCTION,170,
WS_ACT_DROP_ALL,FUNCTION,171, v_table_schema := TRIM(v_table_schema);
WS_ACT_DROP_ALL,FUNCTION,172,
WS_ACT_DROP_ALL,FUNCTION,173, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_DROP_ALL,FUNCTION,174, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_DROP_ALL,FUNCTION,175, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_DROP_ALL,FUNCTION,176, END IF;
WS_ACT_DROP_ALL,FUNCTION,177,
WS_ACT_DROP_ALL,FUNCTION,178, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_DROP_ALL,FUNCTION,179,
WS_ACT_DROP_ALL,FUNCTION,180, v_step := 200;
WS_ACT_DROP_ALL,FUNCTION,181,
WS_ACT_DROP_ALL,FUNCTION,182, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,183, -- Loop through all the indexes to drop
WS_ACT_DROP_ALL,FUNCTION,184, -- May not be any
WS_ACT_DROP_ALL,FUNCTION,185, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,186, p_status_code := 1;
WS_ACT_DROP_ALL,FUNCTION,187, p_return_msg := '';
WS_ACT_DROP_ALL,FUNCTION,188, FOR v_IndRec in c_Index LOOP
WS_ACT_DROP_ALL,FUNCTION,189, v_step := 300;
WS_ACT_DROP_ALL,FUNCTION,190,
WS_ACT_DROP_ALL,FUNCTION,191, v_index_name := v_IndRec.ih_index_name;
WS_ACT_DROP_ALL,FUNCTION,192, v_index_with_schema := TRIM(v_table_schema);
WS_ACT_DROP_ALL,FUNCTION,193, IF TRIM(v_index_with_schema) IS NOT NULL THEN
WS_ACT_DROP_ALL,FUNCTION,194, v_index_with_schema := v_index_with_schema ||'.';
WS_ACT_DROP_ALL,FUNCTION,195, END IF;
WS_ACT_DROP_ALL,FUNCTION,196, v_index_with_schema := v_index_with_schema || v_index_name;
WS_ACT_DROP_ALL,FUNCTION,197,
WS_ACT_DROP_ALL,FUNCTION,198, v_step := 350;
WS_ACT_DROP_ALL,FUNCTION,199, If v_IndRec.ih_partition_type is NULL Then
WS_ACT_DROP_ALL,FUNCTION,200, v_part_count := 0;
WS_ACT_DROP_ALL,FUNCTION,201, else
WS_ACT_DROP_ALL,FUNCTION,202, Select count(1) into v_part_count
WS_ACT_DROP_ALL,FUNCTION,203, from all_tab_partitions
WS_ACT_DROP_ALL,FUNCTION,204, Where table_owner = upper(v_table_schema)
WS_ACT_DROP_ALL,FUNCTION,205, And table_name = upper(v_table_name);
WS_ACT_DROP_ALL,FUNCTION,206, End If;
WS_ACT_DROP_ALL,FUNCTION,207,
WS_ACT_DROP_ALL,FUNCTION,208, v_step := 400;
WS_ACT_DROP_ALL,FUNCTION,209, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_DROP_ALL,FUNCTION,210, And v_part_count = 0 Then
WS_ACT_DROP_ALL,FUNCTION,211, v_stmt := 'alter table '||v_table_with_schema ||
WS_ACT_DROP_ALL,FUNCTION,212, ' drop constraint '||v_index_name;
WS_ACT_DROP_ALL,FUNCTION,213, Else
WS_ACT_DROP_ALL,FUNCTION,214, v_stmt := 'drop index '||v_index_with_schema;
WS_ACT_DROP_ALL,FUNCTION,215, End If;
WS_ACT_DROP_ALL,FUNCTION,216,
WS_ACT_DROP_ALL,FUNCTION,217, -- Execute the drop
WS_ACT_DROP_ALL,FUNCTION,218, v_step := 500;
WS_ACT_DROP_ALL,FUNCTION,219, BEGIN
WS_ACT_DROP_ALL,FUNCTION,220, v_index_done := 1;
WS_ACT_DROP_ALL,FUNCTION,221, Execute Immediate v_stmt;
WS_ACT_DROP_ALL,FUNCTION,222,
WS_ACT_DROP_ALL,FUNCTION,223, EXCEPTION
WS_ACT_DROP_ALL,FUNCTION,224, WHEN OTHERS THEN
WS_ACT_DROP_ALL,FUNCTION,225, If SQLCODE = -2443 Then
WS_ACT_DROP_ALL,FUNCTION,226, v_stmt := 'drop index '||v_index_with_schema ;
WS_ACT_DROP_ALL,FUNCTION,227, BEGIN
WS_ACT_DROP_ALL,FUNCTION,228, Execute Immediate v_stmt;
WS_ACT_DROP_ALL,FUNCTION,229, EXCEPTION
WS_ACT_DROP_ALL,FUNCTION,230, WHEN OTHERS THEN
WS_ACT_DROP_ALL,FUNCTION,231, v_index_done := 0;
WS_ACT_DROP_ALL,FUNCTION,232, v_MsgText := 'Index '||v_index_with_schema ||' does not exist';
WS_ACT_DROP_ALL,FUNCTION,233, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP_ALL,FUNCTION,234, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_DROP_ALL,FUNCTION,235, END;
WS_ACT_DROP_ALL,FUNCTION,236, ElsIf SQLCODE = -1418 OR SQLCODE = -942 Then
WS_ACT_DROP_ALL,FUNCTION,237, v_index_done := 0;
WS_ACT_DROP_ALL,FUNCTION,238, v_MsgText := 'Index '||v_index_with_schema ||' does not exist';
WS_ACT_DROP_ALL,FUNCTION,239, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP_ALL,FUNCTION,240, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_DROP_ALL,FUNCTION,241, Else
WS_ACT_DROP_ALL,FUNCTION,242, v_index_done := 0;
WS_ACT_DROP_ALL,FUNCTION,243, v_MsgText := 'Unhandled Exception in ws_act_drop_all '|| v_ws_pro_version ||
WS_ACT_DROP_ALL,FUNCTION,244, ' Step ' ||v_step;
WS_ACT_DROP_ALL,FUNCTION,245, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP_ALL,FUNCTION,246, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DROP_ALL,FUNCTION,247, p_return_msg := 'Unhandled Exception in ws_act_drop_all step ' ||v_step;
WS_ACT_DROP_ALL,FUNCTION,248, p_status_code := -3;
WS_ACT_DROP_ALL,FUNCTION,249, v_result := -3;
WS_ACT_DROP_ALL,FUNCTION,250, End If;
WS_ACT_DROP_ALL,FUNCTION,251, END;
WS_ACT_DROP_ALL,FUNCTION,252, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,253, -- Put detail message
WS_ACT_DROP_ALL,FUNCTION,254, --=====================================================
WS_ACT_DROP_ALL,FUNCTION,255, v_step := 600;
WS_ACT_DROP_ALL,FUNCTION,256, IF v_index_done = 1 THEN
WS_ACT_DROP_ALL,FUNCTION,257,
WS_ACT_DROP_ALL,FUNCTION,258, v_count := v_count + 1;
WS_ACT_DROP_ALL,FUNCTION,259, v_step := 700;
WS_ACT_DROP_ALL,FUNCTION,260, v_MsgText := 'Index ' || v_index_with_schema || ' dropped';
WS_ACT_DROP_ALL,FUNCTION,261,
WS_ACT_DROP_ALL,FUNCTION,262, v_msg_result := WsWrkError(
WS_ACT_DROP_ALL,FUNCTION,263, 'I'
WS_ACT_DROP_ALL,FUNCTION,264, , p_job_name
WS_ACT_DROP_ALL,FUNCTION,265, , p_task_name
WS_ACT_DROP_ALL,FUNCTION,266, , p_sequence
WS_ACT_DROP_ALL,FUNCTION,267, , v_MsgText
WS_ACT_DROP_ALL,FUNCTION,268, , NULL
WS_ACT_DROP_ALL,FUNCTION,269, , NULL
WS_ACT_DROP_ALL,FUNCTION,270, , p_task_id
WS_ACT_DROP_ALL,FUNCTION,271, , p_job_id
WS_ACT_DROP_ALL,FUNCTION,272, , NULL);
WS_ACT_DROP_ALL,FUNCTION,273,
WS_ACT_DROP_ALL,FUNCTION,274, END IF;
WS_ACT_DROP_ALL,FUNCTION,275,
WS_ACT_DROP_ALL,FUNCTION,276, v_step := 800;
WS_ACT_DROP_ALL,FUNCTION,277, END LOOP;
WS_ACT_DROP_ALL,FUNCTION,278,
WS_ACT_DROP_ALL,FUNCTION,279, v_step := 900;
WS_ACT_DROP_ALL,FUNCTION,280, -- tell them how many indexes we dropped
WS_ACT_DROP_ALL,FUNCTION,281, If v_count = 0 Then
WS_ACT_DROP_ALL,FUNCTION,282, p_return_msg := 'No indexes to drop'||p_return_msg;
WS_ACT_DROP_ALL,FUNCTION,283, ElsIf v_count = 1 Then
WS_ACT_DROP_ALL,FUNCTION,284, p_return_msg := v_count||' index dropped'||p_return_msg;
WS_ACT_DROP_ALL,FUNCTION,285, Else
WS_ACT_DROP_ALL,FUNCTION,286, p_return_msg := v_count||' indexes dropped'||p_return_msg;
WS_ACT_DROP_ALL,FUNCTION,287, End If;
WS_ACT_DROP_ALL,FUNCTION,288,
WS_ACT_DROP_ALL,FUNCTION,289, COMMIT;
WS_ACT_DROP_ALL,FUNCTION,290, RETURN v_result;
WS_ACT_DROP_ALL,FUNCTION,291,
WS_ACT_DROP_ALL,FUNCTION,292,EXCEPTION
WS_ACT_DROP_ALL,FUNCTION,293, WHEN OTHERS THEN
WS_ACT_DROP_ALL,FUNCTION,294, v_MsgText := 'Unhandled Exception in ws_act_drop_all '|| v_ws_pro_version ||
WS_ACT_DROP_ALL,FUNCTION,295, ' Step ' ||v_step;
WS_ACT_DROP_ALL,FUNCTION,296, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_DROP_ALL,FUNCTION,297, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_DROP_ALL,FUNCTION,298, p_return_msg := 'Unhandled Exception in ws_act_drop_all '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_DROP_ALL,FUNCTION,299, p_status_code := -3;
WS_ACT_DROP_ALL,FUNCTION,300, RETURN -3;
WS_ACT_DROP_ALL,FUNCTION,301,
WS_ACT_DROP_ALL,FUNCTION,302,END ws_act_drop_all;
WS_ACT_DROP_ALL,FUNCTION,303,
WS_ACT_EXECUTE,FUNCTION,1,function ws_act_execute
WS_ACT_EXECUTE,FUNCTION,2, (
WS_ACT_EXECUTE,FUNCTION,3, p_sequence IN number,
WS_ACT_EXECUTE,FUNCTION,4, p_obj_type IN number,
WS_ACT_EXECUTE,FUNCTION,5, p_action IN number,
WS_ACT_EXECUTE,FUNCTION,6, p_job_name IN varchar2,
WS_ACT_EXECUTE,FUNCTION,7, p_task_name IN varchar2,
WS_ACT_EXECUTE,FUNCTION,8, p_job_id IN number,
WS_ACT_EXECUTE,FUNCTION,9, p_task_id IN number,
WS_ACT_EXECUTE,FUNCTION,10, p_return_msg OUT varchar2,
WS_ACT_EXECUTE,FUNCTION,11, p_status_code OUT number
WS_ACT_EXECUTE,FUNCTION,12, )
WS_ACT_EXECUTE,FUNCTION,13, Return integer
WS_ACT_EXECUTE,FUNCTION,14, AUTHID CURRENT_USER
WS_ACT_EXECUTE,FUNCTION,15, IS
WS_ACT_EXECUTE,FUNCTION,16,
WS_ACT_EXECUTE,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_EXECUTE,FUNCTION,18,
WS_ACT_EXECUTE,FUNCTION,19, -- =============================================================================
WS_ACT_EXECUTE,FUNCTION,20, -- DBMS Name : Oracle
WS_ACT_EXECUTE,FUNCTION,21, -- Script Name : ws_act_execute
WS_ACT_EXECUTE,FUNCTION,22, -- Description : Execute a function or procedure
WS_ACT_EXECUTE,FUNCTION,23, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_EXECUTE,FUNCTION,24, -- =============================================================================
WS_ACT_EXECUTE,FUNCTION,25,
WS_ACT_EXECUTE,FUNCTION,26, --=====================================================
WS_ACT_EXECUTE,FUNCTION,27, -- Constants
WS_ACT_EXECUTE,FUNCTION,28, --=====================================================
WS_ACT_EXECUTE,FUNCTION,29, v_ws_obj_procedure constant number := 1;
WS_ACT_EXECUTE,FUNCTION,30, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_EXECUTE,FUNCTION,31, v_ws_obj_script constant number := 3;
WS_ACT_EXECUTE,FUNCTION,32, v_ws_obj_template constant number := 4;
WS_ACT_EXECUTE,FUNCTION,33, v_ws_obj_fact constant number := 5;
WS_ACT_EXECUTE,FUNCTION,34, v_ws_obj_dim constant number := 6;
WS_ACT_EXECUTE,FUNCTION,35, v_ws_obj_stage constant number := 7;
WS_ACT_EXECUTE,FUNCTION,36, v_ws_obj_load constant number := 8;
WS_ACT_EXECUTE,FUNCTION,37, v_ws_obj_agg constant number := 9;
WS_ACT_EXECUTE,FUNCTION,38, v_ws_obj_index constant number := 10;
WS_ACT_EXECUTE,FUNCTION,39, v_ws_obj_connect constant number := 11;
WS_ACT_EXECUTE,FUNCTION,40, v_ws_obj_dim_view constant number := 12;
WS_ACT_EXECUTE,FUNCTION,41,
WS_ACT_EXECUTE,FUNCTION,42, v_ws_act_drop constant number := 0;
WS_ACT_EXECUTE,FUNCTION,43, v_ws_act_create constant number := 1;
WS_ACT_EXECUTE,FUNCTION,44, v_ws_act_compile constant number := 2;
WS_ACT_EXECUTE,FUNCTION,45, v_ws_act_drop_all constant number := 3;
WS_ACT_EXECUTE,FUNCTION,46, v_ws_act_pre_drop constant number := 4;
WS_ACT_EXECUTE,FUNCTION,47, v_ws_act_load constant number := 5;
WS_ACT_EXECUTE,FUNCTION,48, v_ws_act_update constant number := 6;
WS_ACT_EXECUTE,FUNCTION,49, v_ws_act_execute constant number := 7;
WS_ACT_EXECUTE,FUNCTION,50, v_ws_act_process constant number := 8;
WS_ACT_EXECUTE,FUNCTION,51, v_ws_act_build constant number := 9;
WS_ACT_EXECUTE,FUNCTION,52, v_ws_act_build_all constant number := 10;
WS_ACT_EXECUTE,FUNCTION,53, v_ws_act_analyze constant number := 11;
WS_ACT_EXECUTE,FUNCTION,54, v_ws_act_quick_analyze constant number := 12;
WS_ACT_EXECUTE,FUNCTION,55, v_ws_act_statistics constant number := 13;
WS_ACT_EXECUTE,FUNCTION,56, v_ws_act_quick_statistics constant number := 14;
WS_ACT_EXECUTE,FUNCTION,57,
WS_ACT_EXECUTE,FUNCTION,58, --=====================================================
WS_ACT_EXECUTE,FUNCTION,59, -- Variables
WS_ACT_EXECUTE,FUNCTION,60, --=====================================================
WS_ACT_EXECUTE,FUNCTION,61, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_EXECUTE,FUNCTION,62, v_step integer := 0; -- return code
WS_ACT_EXECUTE,FUNCTION,63, v_result integer := 0; -- return code
WS_ACT_EXECUTE,FUNCTION,64, v_stmt varchar2(1024);
WS_ACT_EXECUTE,FUNCTION,65, v_cursor number;
WS_ACT_EXECUTE,FUNCTION,66,
WS_ACT_EXECUTE,FUNCTION,67,
WS_ACT_EXECUTE,FUNCTION,68,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_EXECUTE,FUNCTION,69,BEGIN
WS_ACT_EXECUTE,FUNCTION,70,
WS_ACT_EXECUTE,FUNCTION,71, v_step := 10;
WS_ACT_EXECUTE,FUNCTION,72, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_EXECUTE,FUNCTION,73, v_step := 12;
WS_ACT_EXECUTE,FUNCTION,74, -- Build up our execute statement for the procedure
WS_ACT_EXECUTE,FUNCTION,75, v_stmt := 'BEGIN '|| p_task_name
WS_ACT_EXECUTE,FUNCTION,76, || '(:p1, :p2, :p3, :p4, :p5, :p6, :p7); END;';
WS_ACT_EXECUTE,FUNCTION,77, v_step := 14;
WS_ACT_EXECUTE,FUNCTION,78, DBMS_SQL.PARSE(v_cursor, v_stmt, 1);
WS_ACT_EXECUTE,FUNCTION,79, v_step := 20;
WS_ACT_EXECUTE,FUNCTION,80,
WS_ACT_EXECUTE,FUNCTION,81, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p1', p_sequence);
WS_ACT_EXECUTE,FUNCTION,82, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p2', p_job_name,64);
WS_ACT_EXECUTE,FUNCTION,83, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p3', p_task_name,64);
WS_ACT_EXECUTE,FUNCTION,84, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p4', p_job_id);
WS_ACT_EXECUTE,FUNCTION,85, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p5', p_task_id);
WS_ACT_EXECUTE,FUNCTION,86, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p6', p_return_msg,1024);
WS_ACT_EXECUTE,FUNCTION,87, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p7', p_status_code);
WS_ACT_EXECUTE,FUNCTION,88, v_step := 30;
WS_ACT_EXECUTE,FUNCTION,89,
WS_ACT_EXECUTE,FUNCTION,90, --=====================================================
WS_ACT_EXECUTE,FUNCTION,91, -- Call the procedure
WS_ACT_EXECUTE,FUNCTION,92, --=====================================================
WS_ACT_EXECUTE,FUNCTION,93, BEGIN
WS_ACT_EXECUTE,FUNCTION,94, v_step := 39;
WS_ACT_EXECUTE,FUNCTION,95, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_EXECUTE,FUNCTION,96, v_step := 40;
WS_ACT_EXECUTE,FUNCTION,97, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p6', p_return_msg);
WS_ACT_EXECUTE,FUNCTION,98, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p7', p_status_code);
WS_ACT_EXECUTE,FUNCTION,99, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_EXECUTE,FUNCTION,100, EXCEPTION WHEN OTHERS THEN
WS_ACT_EXECUTE,FUNCTION,101, p_return_msg := 'Unhandled Exception in call to ' ||p_task_name;
WS_ACT_EXECUTE,FUNCTION,102, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_EXECUTE,FUNCTION,103, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_EXECUTE,FUNCTION,104, p_status_code := -3;
WS_ACT_EXECUTE,FUNCTION,105, END;
WS_ACT_EXECUTE,FUNCTION,106,
WS_ACT_EXECUTE,FUNCTION,107, COMMIT;
WS_ACT_EXECUTE,FUNCTION,108, RETURN v_result;
WS_ACT_EXECUTE,FUNCTION,109,
WS_ACT_EXECUTE,FUNCTION,110,EXCEPTION
WS_ACT_EXECUTE,FUNCTION,111, WHEN OTHERS THEN
WS_ACT_EXECUTE,FUNCTION,112, v_MsgText := 'Unhandled Exception in ws_act_execute. '||
WS_ACT_EXECUTE,FUNCTION,113, ' Step ' ||v_step;
WS_ACT_EXECUTE,FUNCTION,114, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_EXECUTE,FUNCTION,115, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_EXECUTE,FUNCTION,116, p_return_msg := 'Unhandled Exception in ws_act_execute step ' ||v_step;
WS_ACT_EXECUTE,FUNCTION,117, p_status_code := -3;
WS_ACT_EXECUTE,FUNCTION,118, RETURN -3;
WS_ACT_EXECUTE,FUNCTION,119,
WS_ACT_EXECUTE,FUNCTION,120,END ws_act_execute;
WS_ACT_EXECUTE,FUNCTION,121,
WS_ACT_EXPORT,FUNCTION,1,function ws_act_export
WS_ACT_EXPORT,FUNCTION,2, (
WS_ACT_EXPORT,FUNCTION,3, p_sequence IN number,
WS_ACT_EXPORT,FUNCTION,4, p_obj_type IN number,
WS_ACT_EXPORT,FUNCTION,5, p_action IN number,
WS_ACT_EXPORT,FUNCTION,6, p_obj_key IN number,
WS_ACT_EXPORT,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_EXPORT,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_EXPORT,FUNCTION,9, p_job_id IN number,
WS_ACT_EXPORT,FUNCTION,10, p_task_id IN number,
WS_ACT_EXPORT,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_EXPORT,FUNCTION,12, p_status_code OUT number
WS_ACT_EXPORT,FUNCTION,13, )
WS_ACT_EXPORT,FUNCTION,14, Return integer
WS_ACT_EXPORT,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_EXPORT,FUNCTION,16, IS
WS_ACT_EXPORT,FUNCTION,17,
WS_ACT_EXPORT,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_EXPORT,FUNCTION,19,
WS_ACT_EXPORT,FUNCTION,20, -- =============================================================================
WS_ACT_EXPORT,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_EXPORT,FUNCTION,22, -- Script Name : ws_act_export
WS_ACT_EXPORT,FUNCTION,23, -- Description : Exports an export object
WS_ACT_EXPORT,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_EXPORT,FUNCTION,25, -- =============================================================================
WS_ACT_EXPORT,FUNCTION,26,
WS_ACT_EXPORT,FUNCTION,27, --=====================================================
WS_ACT_EXPORT,FUNCTION,28, -- Constants
WS_ACT_EXPORT,FUNCTION,29, --=====================================================
WS_ACT_EXPORT,FUNCTION,30, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_EXPORT,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_EXPORT,FUNCTION,32, v_ws_obj_directive constant number := 2;
WS_ACT_EXPORT,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_EXPORT,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_EXPORT,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_EXPORT,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_EXPORT,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_EXPORT,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_EXPORT,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_EXPORT,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_EXPORT,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_EXPORT,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_EXPORT,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_ACT_EXPORT,FUNCTION,44,
WS_ACT_EXPORT,FUNCTION,45, v_ws_act_drop constant number := 0;
WS_ACT_EXPORT,FUNCTION,46, v_ws_act_create constant number := 1;
WS_ACT_EXPORT,FUNCTION,47, v_ws_act_compile constant number := 2;
WS_ACT_EXPORT,FUNCTION,48, v_ws_act_drop_all constant number := 3;
WS_ACT_EXPORT,FUNCTION,49, v_ws_act_pre_drop constant number := 4;
WS_ACT_EXPORT,FUNCTION,50, v_ws_act_load constant number := 5;
WS_ACT_EXPORT,FUNCTION,51, v_ws_act_update constant number := 6;
WS_ACT_EXPORT,FUNCTION,52, v_ws_act_execute constant number := 7;
WS_ACT_EXPORT,FUNCTION,53, v_ws_act_process constant number := 8;
WS_ACT_EXPORT,FUNCTION,54, v_ws_act_build constant number := 9;
WS_ACT_EXPORT,FUNCTION,55, v_ws_act_build_all constant number := 10;
WS_ACT_EXPORT,FUNCTION,56, v_ws_act_analyze constant number := 11;
WS_ACT_EXPORT,FUNCTION,57, v_ws_act_quick_analyze constant number := 12;
WS_ACT_EXPORT,FUNCTION,58, v_ws_act_statistics constant number := 13;
WS_ACT_EXPORT,FUNCTION,59, v_ws_act_quick_statistics constant number := 14;
WS_ACT_EXPORT,FUNCTION,60,
WS_ACT_EXPORT,FUNCTION,61, --=====================================================
WS_ACT_EXPORT,FUNCTION,62, -- Variables
WS_ACT_EXPORT,FUNCTION,63, --=====================================================
WS_ACT_EXPORT,FUNCTION,64, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_EXPORT,FUNCTION,65, v_DbText varchar2(1024); -- Text in audit_trail
WS_ACT_EXPORT,FUNCTION,66, v_step integer := 0; -- return code
WS_ACT_EXPORT,FUNCTION,67, v_result integer := 0; -- return code
WS_ACT_EXPORT,FUNCTION,68, v_stmt varchar2(4000);
WS_ACT_EXPORT,FUNCTION,69,
WS_ACT_EXPORT,FUNCTION,70, v_ExportRec ws_export_tab%ROWTYPE;
WS_ACT_EXPORT,FUNCTION,71,
WS_ACT_EXPORT,FUNCTION,72,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_EXPORT,FUNCTION,73,BEGIN
WS_ACT_EXPORT,FUNCTION,74,
WS_ACT_EXPORT,FUNCTION,75, v_step := 10;
WS_ACT_EXPORT,FUNCTION,76,
WS_ACT_EXPORT,FUNCTION,77, --=====================================================
WS_ACT_EXPORT,FUNCTION,78, -- First get the export table information
WS_ACT_EXPORT,FUNCTION,79, --=====================================================
WS_ACT_EXPORT,FUNCTION,80, select * into v_ExportRec
WS_ACT_EXPORT,FUNCTION,81, from ws_export_tab
WS_ACT_EXPORT,FUNCTION,82, where et_obj_key = p_obj_key;
WS_ACT_EXPORT,FUNCTION,83,
WS_ACT_EXPORT,FUNCTION,84, v_step := 20;
WS_ACT_EXPORT,FUNCTION,85,
WS_ACT_EXPORT,FUNCTION,86, --=====================================================
WS_ACT_EXPORT,FUNCTION,87, -- Handle any pre-export action
WS_ACT_EXPORT,FUNCTION,88, --=====================================================
WS_ACT_EXPORT,FUNCTION,89, If v_ExportRec.et_pre_action = 'E' Then
WS_ACT_EXPORT,FUNCTION,90, v_step := 40;
WS_ACT_EXPORT,FUNCTION,91, v_stmt := rtrim(v_ExportRec.et_pre_sql);
WS_ACT_EXPORT,FUNCTION,92, v_stmt := replace(v_stmt,chr(10),' ');
WS_ACT_EXPORT,FUNCTION,93, v_stmt := replace(v_stmt,chr(13),' ');
WS_ACT_EXPORT,FUNCTION,94, BEGIN
WS_ACT_EXPORT,FUNCTION,95, execute immediate v_stmt;
WS_ACT_EXPORT,FUNCTION,96, COMMIT;
WS_ACT_EXPORT,FUNCTION,97, v_MsgText := substr('Executed pre export sql. '||v_stmt,1,1023);
WS_ACT_EXPORT,FUNCTION,98, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_EXPORT,FUNCTION,99, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_EXPORT,FUNCTION,100, EXCEPTION WHEN OTHERS THEN
WS_ACT_EXPORT,FUNCTION,101, COMMIT;
WS_ACT_EXPORT,FUNCTION,102, v_DbText := substr(SQLERRM,1,1023);
WS_ACT_EXPORT,FUNCTION,103, v_MsgText := 'Unhandled exception in pre-export sql';
WS_ACT_EXPORT,FUNCTION,104, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_EXPORT,FUNCTION,105, v_MsgText,SQLCODE, v_DbText , p_task_id, p_job_id);
WS_ACT_EXPORT,FUNCTION,106, v_MsgText := substr(v_stmt,1,1023);
WS_ACT_EXPORT,FUNCTION,107, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_EXPORT,FUNCTION,108, v_MsgText,SQLCODE, v_DbText , p_task_id, p_job_id);
WS_ACT_EXPORT,FUNCTION,109, p_return_msg := 'Unhandled exception in pre-export sql';
WS_ACT_EXPORT,FUNCTION,110, p_status_code := -2;
WS_ACT_EXPORT,FUNCTION,111, v_result := -2;
WS_ACT_EXPORT,FUNCTION,112, RETURN v_result;
WS_ACT_EXPORT,FUNCTION,113, END;
WS_ACT_EXPORT,FUNCTION,114, End If;
WS_ACT_EXPORT,FUNCTION,115,
WS_ACT_EXPORT,FUNCTION,116,
WS_ACT_EXPORT,FUNCTION,117, --=====================================================
WS_ACT_EXPORT,FUNCTION,118, -- See what type of export this is
WS_ACT_EXPORT,FUNCTION,119, -- S = Script based export
WS_ACT_EXPORT,FUNCTION,120, -- F = File based export
WS_ACT_EXPORT,FUNCTION,121, -- I = Integration Services export
WS_ACT_EXPORT,FUNCTION,122, -- E = External export
WS_ACT_EXPORT,FUNCTION,123, --=====================================================
WS_ACT_EXPORT,FUNCTION,124, If v_ExportRec.et_type = 'F' Then
WS_ACT_EXPORT,FUNCTION,125, v_result := ws_act_host_script(p_sequence,p_obj_type,p_action, p_obj_key,
WS_ACT_EXPORT,FUNCTION,126, p_job_name, p_task_name, p_job_id, p_task_id,
WS_ACT_EXPORT,FUNCTION,127, p_return_msg, p_status_code);
WS_ACT_EXPORT,FUNCTION,128, -- If script prepared okay then indicate to our caller that we want to
WS_ACT_EXPORT,FUNCTION,129, -- run a script by returning a result of 2
WS_ACT_EXPORT,FUNCTION,130, If v_result = 1 Then
WS_ACT_EXPORT,FUNCTION,131, v_result := 2;
WS_ACT_EXPORT,FUNCTION,132, p_status_code := 2;
WS_ACT_EXPORT,FUNCTION,133, End If;
WS_ACT_EXPORT,FUNCTION,134,
WS_ACT_EXPORT,FUNCTION,135, --**********************************
WS_ACT_EXPORT,FUNCTION,136, -- Script export
WS_ACT_EXPORT,FUNCTION,137, --**********************************
WS_ACT_EXPORT,FUNCTION,138, ElsIf v_ExportRec.et_type = 'S' Then
WS_ACT_EXPORT,FUNCTION,139, v_result := ws_act_host_script(p_sequence,p_obj_type,p_action,p_obj_key,
WS_ACT_EXPORT,FUNCTION,140, p_job_name, p_task_name, p_job_id, p_task_id,
WS_ACT_EXPORT,FUNCTION,141, p_return_msg, p_status_code);
WS_ACT_EXPORT,FUNCTION,142, -- If script prepared okay then indicate to our caller that we want to
WS_ACT_EXPORT,FUNCTION,143, -- run a script by returning a result of 2
WS_ACT_EXPORT,FUNCTION,144, If v_result = 1 Then
WS_ACT_EXPORT,FUNCTION,145, v_result := 2;
WS_ACT_EXPORT,FUNCTION,146, p_status_code := 2;
WS_ACT_EXPORT,FUNCTION,147, End If;
WS_ACT_EXPORT,FUNCTION,148,
WS_ACT_EXPORT,FUNCTION,149,
WS_ACT_EXPORT,FUNCTION,150, --**********************************
WS_ACT_EXPORT,FUNCTION,151, -- Integration Services export
WS_ACT_EXPORT,FUNCTION,152, --**********************************
WS_ACT_EXPORT,FUNCTION,153, ElsIf v_ExportRec.et_type = 'I' Then
WS_ACT_EXPORT,FUNCTION,154, p_return_msg := 'Integration Services export';
WS_ACT_EXPORT,FUNCTION,155, v_result := 14;
WS_ACT_EXPORT,FUNCTION,156, p_status_code := 2;
WS_ACT_EXPORT,FUNCTION,157,
WS_ACT_EXPORT,FUNCTION,158,
WS_ACT_EXPORT,FUNCTION,159, --**********************************
WS_ACT_EXPORT,FUNCTION,160, -- External export
WS_ACT_EXPORT,FUNCTION,161, --**********************************
WS_ACT_EXPORT,FUNCTION,162, ElsIf v_ExportRec.et_type = 'E' Then
WS_ACT_EXPORT,FUNCTION,163, p_return_msg := 'Externally exported';
WS_ACT_EXPORT,FUNCTION,164, p_status_code := 1;
WS_ACT_EXPORT,FUNCTION,165, v_result := 1;
WS_ACT_EXPORT,FUNCTION,166,
WS_ACT_EXPORT,FUNCTION,167, --**********************************
WS_ACT_EXPORT,FUNCTION,168, -- Unsupported export type
WS_ACT_EXPORT,FUNCTION,169, --**********************************
WS_ACT_EXPORT,FUNCTION,170, Else
WS_ACT_EXPORT,FUNCTION,171, v_MsgText := 'Unsupported export Type ';
WS_ACT_EXPORT,FUNCTION,172, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_EXPORT,FUNCTION,173, v_MsgText,NULL, NULL, p_task_id, p_job_id);
WS_ACT_EXPORT,FUNCTION,174, p_return_msg := 'Unsupport export type in ws_act_export (5.5.0.17)';
WS_ACT_EXPORT,FUNCTION,175, p_status_code := -2;
WS_ACT_EXPORT,FUNCTION,176, v_result := -2;
WS_ACT_EXPORT,FUNCTION,177, End If;
WS_ACT_EXPORT,FUNCTION,178,
WS_ACT_EXPORT,FUNCTION,179,
WS_ACT_EXPORT,FUNCTION,180, COMMIT;
WS_ACT_EXPORT,FUNCTION,181, RETURN v_result;
WS_ACT_EXPORT,FUNCTION,182,
WS_ACT_EXPORT,FUNCTION,183,EXCEPTION
WS_ACT_EXPORT,FUNCTION,184, WHEN OTHERS THEN
WS_ACT_EXPORT,FUNCTION,185, -- Need to commit or rollback otherwise oracle will still be
WS_ACT_EXPORT,FUNCTION,186, -- doing the db link transaction and will disallow pragma autonomous
WS_ACT_EXPORT,FUNCTION,187, -- and will fail the WsWrkAudit calls
WS_ACT_EXPORT,FUNCTION,188, COMMIT;
WS_ACT_EXPORT,FUNCTION,189, v_MsgText := 'Unhandled Exception in ws_act_export '|| v_ws_pro_version ||
WS_ACT_EXPORT,FUNCTION,190, ' Step ' ||v_step;
WS_ACT_EXPORT,FUNCTION,191, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_EXPORT,FUNCTION,192, v_MsgText,SQLCODE, SUBSTR(SQLERRM,1,1023), p_task_id, p_job_id);
WS_ACT_EXPORT,FUNCTION,193, p_return_msg := 'Unhandled Exception in ws_act_export (5.5.0.17) step ' ||v_step;
WS_ACT_EXPORT,FUNCTION,194, p_status_code := -3;
WS_ACT_EXPORT,FUNCTION,195, RETURN -3;
WS_ACT_EXPORT,FUNCTION,196,
WS_ACT_EXPORT,FUNCTION,197,END ws_act_export;
WS_ACT_EXPORT,FUNCTION,198,
WS_ACT_HOST_SCRIPT,FUNCTION,1,function ws_act_host_script
WS_ACT_HOST_SCRIPT,FUNCTION,2, (
WS_ACT_HOST_SCRIPT,FUNCTION,3, p_sequence IN number,
WS_ACT_HOST_SCRIPT,FUNCTION,4, p_obj_type IN number,
WS_ACT_HOST_SCRIPT,FUNCTION,5, p_action IN number,
WS_ACT_HOST_SCRIPT,FUNCTION,6, p_obj_key IN number,
WS_ACT_HOST_SCRIPT,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_HOST_SCRIPT,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_HOST_SCRIPT,FUNCTION,9, p_job_id IN number,
WS_ACT_HOST_SCRIPT,FUNCTION,10, p_task_id IN number,
WS_ACT_HOST_SCRIPT,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_HOST_SCRIPT,FUNCTION,12, p_status_code OUT number
WS_ACT_HOST_SCRIPT,FUNCTION,13, )
WS_ACT_HOST_SCRIPT,FUNCTION,14, Return integer
WS_ACT_HOST_SCRIPT,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_HOST_SCRIPT,FUNCTION,16, IS
WS_ACT_HOST_SCRIPT,FUNCTION,17,
WS_ACT_HOST_SCRIPT,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_HOST_SCRIPT,FUNCTION,19,
WS_ACT_HOST_SCRIPT,FUNCTION,20, -- ===============================================================================
WS_ACT_HOST_SCRIPT,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_HOST_SCRIPT,FUNCTION,22, -- Script Name : ws_act_host_script
WS_ACT_HOST_SCRIPT,FUNCTION,23, -- Description : Handles a host script, file or script based load
WS_ACT_HOST_SCRIPT,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_HOST_SCRIPT,FUNCTION,25, -- ===============================================================================
WS_ACT_HOST_SCRIPT,FUNCTION,26,
WS_ACT_HOST_SCRIPT,FUNCTION,27, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,28, -- Constants
WS_ACT_HOST_SCRIPT,FUNCTION,29, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,30, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_HOST_SCRIPT,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,32, v_ws_obj_directive constant number := 2;
WS_ACT_HOST_SCRIPT,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_HOST_SCRIPT,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_HOST_SCRIPT,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_HOST_SCRIPT,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_HOST_SCRIPT,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_HOST_SCRIPT,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_HOST_SCRIPT,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_HOST_SCRIPT,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_HOST_SCRIPT,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_HOST_SCRIPT,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_HOST_SCRIPT,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_ACT_HOST_SCRIPT,FUNCTION,44,
WS_ACT_HOST_SCRIPT,FUNCTION,45, v_ws_act_drop constant number := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,46, v_ws_act_create constant number := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,47, v_ws_act_compile constant number := 2;
WS_ACT_HOST_SCRIPT,FUNCTION,48, v_ws_act_drop_all constant number := 3;
WS_ACT_HOST_SCRIPT,FUNCTION,49, v_ws_act_pre_drop constant number := 4;
WS_ACT_HOST_SCRIPT,FUNCTION,50, v_ws_act_load constant number := 5;
WS_ACT_HOST_SCRIPT,FUNCTION,51, v_ws_act_update constant number := 6;
WS_ACT_HOST_SCRIPT,FUNCTION,52, v_ws_act_execute constant number := 7;
WS_ACT_HOST_SCRIPT,FUNCTION,53, v_ws_act_process constant number := 8;
WS_ACT_HOST_SCRIPT,FUNCTION,54, v_ws_act_build constant number := 9;
WS_ACT_HOST_SCRIPT,FUNCTION,55, v_ws_act_build_all constant number := 10;
WS_ACT_HOST_SCRIPT,FUNCTION,56, v_ws_act_analyze constant number := 11;
WS_ACT_HOST_SCRIPT,FUNCTION,57, v_ws_act_quick_analyze constant number := 12;
WS_ACT_HOST_SCRIPT,FUNCTION,58, v_ws_act_statistics constant number := 13;
WS_ACT_HOST_SCRIPT,FUNCTION,59, v_ws_act_quick_statistics constant number := 14;
WS_ACT_HOST_SCRIPT,FUNCTION,60,
WS_ACT_HOST_SCRIPT,FUNCTION,61, v_ws_script_execute constant varchar2(1) := 'S';
WS_ACT_HOST_SCRIPT,FUNCTION,62, v_ws_load_script constant varchar2(1) := 'L';
WS_ACT_HOST_SCRIPT,FUNCTION,63, v_ws_load_file constant varchar2(1) := 'F';
WS_ACT_HOST_SCRIPT,FUNCTION,64, v_ws_load_xml constant varchar2(1) := 'X';
WS_ACT_HOST_SCRIPT,FUNCTION,65,
WS_ACT_HOST_SCRIPT,FUNCTION,66, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,67, -- Variables
WS_ACT_HOST_SCRIPT,FUNCTION,68, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,69, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_HOST_SCRIPT,FUNCTION,70, v_step integer := 0; -- return code
WS_ACT_HOST_SCRIPT,FUNCTION,71, v_result integer := 0; -- return code
WS_ACT_HOST_SCRIPT,FUNCTION,72, v_stmt varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,73, v_file_charset varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,74, v_create varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,75, v_rec_delimiter varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,76, v_rec_options varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,77, v_rec_when varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,78, v_rec_enclosed varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,79, v_count integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,80, v_view integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,81, v_cursor number;
WS_ACT_HOST_SCRIPT,FUNCTION,82, v_row_count integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,83, v_source_con_type varchar2(1);
WS_ACT_HOST_SCRIPT,FUNCTION,84, v_connect_key integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,85, v_script_key integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,86, v_load_key integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,87, v_script_type varchar2(1);
WS_ACT_HOST_SCRIPT,FUNCTION,88, v_load_type varchar2(1);
WS_ACT_HOST_SCRIPT,FUNCTION,89, v_host_type varchar2(1);
WS_ACT_HOST_SCRIPT,FUNCTION,90, v_line_no integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,91, v_min_line_no integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,92, v_col_count integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,93, v_row integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,94, v_fix varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,95, v_script varchar2(512);
WS_ACT_HOST_SCRIPT,FUNCTION,96, v_lookfor varchar2(512);
WS_ACT_HOST_SCRIPT,FUNCTION,97, v_work_dir varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,98, v_file_path varchar2(1024);
WS_ACT_HOST_SCRIPT,FUNCTION,99, v_trig_path varchar2(1024);
WS_ACT_HOST_SCRIPT,FUNCTION,100, v_compress_path varchar2(1024);
WS_ACT_HOST_SCRIPT,FUNCTION,101, v_file_rename varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,102, v_trig_rename varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,103, v_file_repath varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,104, v_trig_repath varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,105, v_skip varchar2(12);
WS_ACT_HOST_SCRIPT,FUNCTION,106, v_pos integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,107, v_cpos integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,108, v_epos integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,109, v_spos integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,110, v_action varchar2(10);
WS_ACT_HOST_SCRIPT,FUNCTION,111, v_rename varchar2(512);
WS_ACT_HOST_SCRIPT,FUNCTION,112, v_command varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,113, v_new_command varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,114, v_current_date date;
WS_ACT_HOST_SCRIPT,FUNCTION,115, v_work varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,116, v_work2 varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,117, v_work3 varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,118, v_shell varchar2(24);
WS_ACT_HOST_SCRIPT,FUNCTION,119, v_file_seq integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,120, v_wild integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,121, v_t1pos integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,122, v_t2pos integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,123, v_compress integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,124, v_rowseq integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,125, v_rowname integer := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,126, v_first_time integer;
WS_ACT_HOST_SCRIPT,FUNCTION,127, v_nlength integer;
WS_ACT_HOST_SCRIPT,FUNCTION,128, v_src_table varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,129, v_line varchar2(256);
WS_ACT_HOST_SCRIPT,FUNCTION,130, v_protector varchar2(10);
WS_ACT_HOST_SCRIPT,FUNCTION,131, v_file_slash varchar2(10);
WS_ACT_HOST_SCRIPT,FUNCTION,132, v_str_quote varchar2(10);
WS_ACT_HOST_SCRIPT,FUNCTION,133, v_enclosed_by varchar2(10);
WS_ACT_HOST_SCRIPT,FUNCTION,134, v_table_schema varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,135, v_dc_attributes varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,136, v_att_slice varchar2(4000);
WS_ACT_HOST_SCRIPT,FUNCTION,137, v_att_pos integer;
WS_ACT_HOST_SCRIPT,FUNCTION,138, v_att_len integer;
WS_ACT_HOST_SCRIPT,FUNCTION,139, v_load_table_schema varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,140, v_load_table_db varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,141, v_load_table_fullname varchar2(194);
WS_ACT_HOST_SCRIPT,FUNCTION,142, v_load_target_dsn varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,143, v_load_target_server varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,144, v_load_target_dbport varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,145, v_load_target_dbid varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,146, v_load_source_dsn varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,147, v_load_source_server varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,148, v_load_source_dbport varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,149, v_load_source_dbid varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,150, v_load_source_db varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,151, v_load_source_schema varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,152, v_exp_source_table varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,153, v_exp_source_schema varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,154, v_exp_source_db varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,155, v_exp_source_fullname varchar2(194);
WS_ACT_HOST_SCRIPT,FUNCTION,156, v_exp_source_dsn varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,157, v_exp_source_server varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,158, v_exp_source_dbport varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,159, v_exp_source_dbid varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,160, v_meta_dsn varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,161, v_meta_server varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,162, v_meta_dbid varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,163, v_meta_db varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,164, v_meta_schema varchar2(65);
WS_ACT_HOST_SCRIPT,FUNCTION,165, v_param_obj_name varchar2(64);
WS_ACT_HOST_SCRIPT,FUNCTION,166,
WS_ACT_HOST_SCRIPT,FUNCTION,167, v_LoadRec ws_load_tab%ROWTYPE;
WS_ACT_HOST_SCRIPT,FUNCTION,168, v_ExpRec ws_export_tab%ROWTYPE;
WS_ACT_HOST_SCRIPT,FUNCTION,169, v_ConnectRec ws_dbc_connect%ROWTYPE;
WS_ACT_HOST_SCRIPT,FUNCTION,170, v_ScriptRec ws_scr_header%ROWTYPE;
WS_ACT_HOST_SCRIPT,FUNCTION,171, v_ParameterRec dss_parameter%ROWTYPE;
WS_ACT_HOST_SCRIPT,FUNCTION,172,
WS_ACT_HOST_SCRIPT,FUNCTION,173, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,174, -- Cursor for all columns in the load table (parsed)
WS_ACT_HOST_SCRIPT,FUNCTION,175, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,176, Cursor c_LoadCol is
WS_ACT_HOST_SCRIPT,FUNCTION,177, Select lc_col_name, lc_data_type, lc_transform_code, lc_src_column,
WS_ACT_HOST_SCRIPT,FUNCTION,178, lc_transform_type
WS_ACT_HOST_SCRIPT,FUNCTION,179, From ws_load_col
WS_ACT_HOST_SCRIPT,FUNCTION,180, Where lc_obj_key = p_obj_key
WS_ACT_HOST_SCRIPT,FUNCTION,181, and lc_src_column like 'COL%'
WS_ACT_HOST_SCRIPT,FUNCTION,182, Order by lc_order;
WS_ACT_HOST_SCRIPT,FUNCTION,183,
WS_ACT_HOST_SCRIPT,FUNCTION,184, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,185, -- Cursor for all columns in the export object (parsed)
WS_ACT_HOST_SCRIPT,FUNCTION,186, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,187, Cursor c_ExpCol is
WS_ACT_HOST_SCRIPT,FUNCTION,188, Select ec_col_name, ec_data_type, ec_transform_code, ec_src_column,
WS_ACT_HOST_SCRIPT,FUNCTION,189, ec_transform_type, ec_src_table, ec_display_name
WS_ACT_HOST_SCRIPT,FUNCTION,190, From ws_export_col
WS_ACT_HOST_SCRIPT,FUNCTION,191, Where ec_obj_key = p_obj_key
WS_ACT_HOST_SCRIPT,FUNCTION,192, Order by ec_order;
WS_ACT_HOST_SCRIPT,FUNCTION,193,
WS_ACT_HOST_SCRIPT,FUNCTION,194, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,195, -- Cursor for all column names in the load table
WS_ACT_HOST_SCRIPT,FUNCTION,196, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,197, Cursor c_LoadAll is
WS_ACT_HOST_SCRIPT,FUNCTION,198, Select lc_col_name
WS_ACT_HOST_SCRIPT,FUNCTION,199, From ws_load_col
WS_ACT_HOST_SCRIPT,FUNCTION,200, Where lc_obj_key = p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,201,
WS_ACT_HOST_SCRIPT,FUNCTION,202,BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,203,
WS_ACT_HOST_SCRIPT,FUNCTION,204, v_step := 100;
WS_ACT_HOST_SCRIPT,FUNCTION,205,
WS_ACT_HOST_SCRIPT,FUNCTION,206, -- Clean out the script file in case a restart on a child job
WS_ACT_HOST_SCRIPT,FUNCTION,207, Delete from ws_wrk_task_scr_line
WS_ACT_HOST_SCRIPT,FUNCTION,208, where wtsl_task_key = p_task_id
WS_ACT_HOST_SCRIPT,FUNCTION,209, and wtsl_job_key = p_job_id
WS_ACT_HOST_SCRIPT,FUNCTION,210, and wtsl_sequence = p_sequence;
WS_ACT_HOST_SCRIPT,FUNCTION,211,
WS_ACT_HOST_SCRIPT,FUNCTION,212, Delete from ws_wrk_task_scr_hdr
WS_ACT_HOST_SCRIPT,FUNCTION,213, where wtsh_task_key = p_task_id
WS_ACT_HOST_SCRIPT,FUNCTION,214, and wtsh_job_key = p_job_id
WS_ACT_HOST_SCRIPT,FUNCTION,215, and wtsh_sequence = p_sequence;
WS_ACT_HOST_SCRIPT,FUNCTION,216,
WS_ACT_HOST_SCRIPT,FUNCTION,217, v_step := 101;
WS_ACT_HOST_SCRIPT,FUNCTION,218,
WS_ACT_HOST_SCRIPT,FUNCTION,219, -- needs to look up the schema from ws_dbc_target
WS_ACT_HOST_SCRIPT,FUNCTION,220, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,221, SELECT NVL(dt_schema, '')
WS_ACT_HOST_SCRIPT,FUNCTION,222, INTO v_table_schema
WS_ACT_HOST_SCRIPT,FUNCTION,223, FROM ws_dbc_target
WS_ACT_HOST_SCRIPT,FUNCTION,224, INNER JOIN ws_obj_object
WS_ACT_HOST_SCRIPT,FUNCTION,225, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_HOST_SCRIPT,FUNCTION,226, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_HOST_SCRIPT,FUNCTION,227, ;
WS_ACT_HOST_SCRIPT,FUNCTION,228, v_table_schema := TRIM(v_table_schema);
WS_ACT_HOST_SCRIPT,FUNCTION,229,
WS_ACT_HOST_SCRIPT,FUNCTION,230, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,231, v_table_schema := '';
WS_ACT_HOST_SCRIPT,FUNCTION,232, END;
WS_ACT_HOST_SCRIPT,FUNCTION,233,
WS_ACT_HOST_SCRIPT,FUNCTION,234, v_step := 102;
WS_ACT_HOST_SCRIPT,FUNCTION,235,
WS_ACT_HOST_SCRIPT,FUNCTION,236, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,237, -- Handle:
WS_ACT_HOST_SCRIPT,FUNCTION,238, -- (1) a straight script execution where we are just
WS_ACT_HOST_SCRIPT,FUNCTION,239, -- passed the script object
WS_ACT_HOST_SCRIPT,FUNCTION,240, -- (2) a script based load where we are passed the
WS_ACT_HOST_SCRIPT,FUNCTION,241, -- the load object and then can lookup the script obj
WS_ACT_HOST_SCRIPT,FUNCTION,242, -- (3) a file based load where we have to build up
WS_ACT_HOST_SCRIPT,FUNCTION,243, -- the script to be used.
WS_ACT_HOST_SCRIPT,FUNCTION,244, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,245,
WS_ACT_HOST_SCRIPT,FUNCTION,246, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,247,
WS_ACT_HOST_SCRIPT,FUNCTION,248, If p_obj_type = v_ws_obj_script Then
WS_ACT_HOST_SCRIPT,FUNCTION,249, v_script_key := p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,250, v_script_type := v_ws_script_execute;
WS_ACT_HOST_SCRIPT,FUNCTION,251, ElsIf p_obj_type = v_ws_obj_load Then
WS_ACT_HOST_SCRIPT,FUNCTION,252, select * into v_LoadRec
WS_ACT_HOST_SCRIPT,FUNCTION,253, from ws_load_tab
WS_ACT_HOST_SCRIPT,FUNCTION,254, where lt_obj_key = p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,255,
WS_ACT_HOST_SCRIPT,FUNCTION,256, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,257, select dc_type into v_source_con_type
WS_ACT_HOST_SCRIPT,FUNCTION,258, from ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,259, where dc_obj_key = v_LoadRec.lt_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,260, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,261, v_source_con_type := '';
WS_ACT_HOST_SCRIPT,FUNCTION,262, END;
WS_ACT_HOST_SCRIPT,FUNCTION,263,
WS_ACT_HOST_SCRIPT,FUNCTION,264, v_step := 200;
WS_ACT_HOST_SCRIPT,FUNCTION,265, v_load_type := v_LoadRec.lt_type;
WS_ACT_HOST_SCRIPT,FUNCTION,266, If v_LoadRec.lt_type = 'S' Then
WS_ACT_HOST_SCRIPT,FUNCTION,267, v_script_key := v_LoadRec.lt_script_key;
WS_ACT_HOST_SCRIPT,FUNCTION,268, v_script_type := v_ws_load_script;
WS_ACT_HOST_SCRIPT,FUNCTION,269, v_load_type := '';
WS_ACT_HOST_SCRIPT,FUNCTION,270, ElsIf v_LoadRec.lt_type = 'F' Then
WS_ACT_HOST_SCRIPT,FUNCTION,271, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,272, v_script_type := v_ws_load_file;
WS_ACT_HOST_SCRIPT,FUNCTION,273, ElsIf v_LoadRec.lt_type = 'X' Then
WS_ACT_HOST_SCRIPT,FUNCTION,274, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,275, v_script_type := v_ws_load_xml;
WS_ACT_HOST_SCRIPT,FUNCTION,276, Else
WS_ACT_HOST_SCRIPT,FUNCTION,277, p_return_msg := 'Unsupported host script method. Not a File, XML or Script Load. Load Type is ' ||
WS_ACT_HOST_SCRIPT,FUNCTION,278, v_LoadRec.lt_type;
WS_ACT_HOST_SCRIPT,FUNCTION,279, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,280, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,281, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,282, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,283,
WS_ACT_HOST_SCRIPT,FUNCTION,284, -- If a file load then replace any parameters in the file name
WS_ACT_HOST_SCRIPT,FUNCTION,285, If v_LoadRec.lt_type = 'F' Then
WS_ACT_HOST_SCRIPT,FUNCTION,286, v_step := 210;
WS_ACT_HOST_SCRIPT,FUNCTION,287, -- lt_file_name
WS_ACT_HOST_SCRIPT,FUNCTION,288, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,289, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,290, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,291, v_cpos := Instr(v_LoadRec.lt_file_name,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,292, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,293, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,294, v_epos := Instr(v_LoadRec.lt_file_name,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,295, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,296, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,297, v_work := WsParameterRead(substr(v_loadRec.lt_file_name,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,298, If v_epos+1 <= LENGTH(v_LoadRec.lt_file_name) Then
WS_ACT_HOST_SCRIPT,FUNCTION,299, v_work2 := Substr(v_LoadRec.lt_file_name,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,300, Else
WS_ACT_HOST_SCRIPT,FUNCTION,301, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,302, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,303, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,304, v_LoadRec.lt_file_name := Substr(v_LoadRec.lt_file_name,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,305, Else
WS_ACT_HOST_SCRIPT,FUNCTION,306, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,307, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,308, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,309, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,310,
WS_ACT_HOST_SCRIPT,FUNCTION,311, -- lt_file_path
WS_ACT_HOST_SCRIPT,FUNCTION,312, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,313, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,314, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,315, v_cpos := Instr(v_LoadRec.lt_file_path,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,316, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,317, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,318, v_epos := Instr(v_LoadRec.lt_file_path,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,319, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,320, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,321, v_work := WsParameterRead(substr(v_loadRec.lt_file_path,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,322, If v_epos+1 <= LENGTH(v_LoadRec.lt_file_path) Then
WS_ACT_HOST_SCRIPT,FUNCTION,323, v_work2 := Substr(v_LoadRec.lt_file_path,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,324, Else
WS_ACT_HOST_SCRIPT,FUNCTION,325, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,326, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,327, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,328, v_LoadRec.lt_file_path := Substr(v_LoadRec.lt_file_path,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,329, Else
WS_ACT_HOST_SCRIPT,FUNCTION,330, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,331, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,332, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,333, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,334,
WS_ACT_HOST_SCRIPT,FUNCTION,335, -- lt_trig_name
WS_ACT_HOST_SCRIPT,FUNCTION,336, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,337, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,338, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,339, v_cpos := Instr(v_LoadRec.lt_trig_name,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,340, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,341, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,342, v_epos := Instr(v_LoadRec.lt_trig_name,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,343, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,344, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,345, v_work := WsParameterRead(substr(v_loadRec.lt_trig_name,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,346, If v_epos+1 <= LENGTH(v_LoadRec.lt_trig_name) Then
WS_ACT_HOST_SCRIPT,FUNCTION,347, v_work2 := Substr(v_LoadRec.lt_trig_name,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,348, Else
WS_ACT_HOST_SCRIPT,FUNCTION,349, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,350, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,351, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,352, v_LoadRec.lt_trig_name := Substr(v_LoadRec.lt_trig_name,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,353, Else
WS_ACT_HOST_SCRIPT,FUNCTION,354, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,355, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,356, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,357, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,358,
WS_ACT_HOST_SCRIPT,FUNCTION,359, -- lt_trig_path
WS_ACT_HOST_SCRIPT,FUNCTION,360, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,361, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,362, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,363, v_cpos := Instr(v_LoadRec.lt_trig_path,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,364, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,365, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,366, v_epos := Instr(v_LoadRec.lt_trig_path,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,367, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,368, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,369, v_work := WsParameterRead(substr(v_loadRec.lt_trig_path,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,370, If v_epos+1 <= LENGTH(v_LoadRec.lt_trig_path) Then
WS_ACT_HOST_SCRIPT,FUNCTION,371, v_work2 := Substr(v_LoadRec.lt_trig_path,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,372, Else
WS_ACT_HOST_SCRIPT,FUNCTION,373, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,374, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,375, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,376, v_LoadRec.lt_trig_path := Substr(v_LoadRec.lt_trig_path,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,377, Else
WS_ACT_HOST_SCRIPT,FUNCTION,378, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,379, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,380, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,381, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,382,
WS_ACT_HOST_SCRIPT,FUNCTION,383,
WS_ACT_HOST_SCRIPT,FUNCTION,384, -- lt_file_name_rename
WS_ACT_HOST_SCRIPT,FUNCTION,385, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,386, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,387, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,388, v_cpos := Instr(v_LoadRec.lt_file_name_rename,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,389, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,390, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,391, v_epos := Instr(v_LoadRec.lt_file_name_rename,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,392, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,393, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,394, v_work := WsParameterRead(substr(v_loadRec.lt_file_name_rename,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,395, If v_epos+1 <= LENGTH(v_LoadRec.lt_file_name_rename) Then
WS_ACT_HOST_SCRIPT,FUNCTION,396, v_work2 := Substr(v_LoadRec.lt_file_name_rename,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,397, Else
WS_ACT_HOST_SCRIPT,FUNCTION,398, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,399, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,400, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,401, v_LoadRec.lt_file_name_rename := Substr(v_LoadRec.lt_file_name_rename,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,402, Else
WS_ACT_HOST_SCRIPT,FUNCTION,403, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,404, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,405, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,406, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,407,
WS_ACT_HOST_SCRIPT,FUNCTION,408, -- lt_file_path_rename
WS_ACT_HOST_SCRIPT,FUNCTION,409, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,410, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,411, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,412, v_cpos := Instr(v_LoadRec.lt_file_path_rename,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,413, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,414, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,415, v_epos := Instr(v_LoadRec.lt_file_path_rename,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,416, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,417, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,418, v_work := WsParameterRead(substr(v_loadRec.lt_file_path_rename,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,419, If v_epos+1 <= LENGTH(v_LoadRec.lt_file_path_rename) Then
WS_ACT_HOST_SCRIPT,FUNCTION,420, v_work2 := Substr(v_LoadRec.lt_file_path_rename,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,421, Else
WS_ACT_HOST_SCRIPT,FUNCTION,422, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,423, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,424, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,425, v_LoadRec.lt_file_path_rename := Substr(v_LoadRec.lt_file_path_rename,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,426, Else
WS_ACT_HOST_SCRIPT,FUNCTION,427, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,428, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,429, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,430, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,431,
WS_ACT_HOST_SCRIPT,FUNCTION,432, -- lt_trig_name_rename
WS_ACT_HOST_SCRIPT,FUNCTION,433, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,434, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,435, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,436, v_cpos := Instr(v_LoadRec.lt_trig_name_rename,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,437, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,438, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,439, v_epos := Instr(v_LoadRec.lt_trig_name_rename,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,440, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,441, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,442, v_work := WsParameterRead(substr(v_loadRec.lt_trig_name_rename,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,443, If v_epos+1 <= LENGTH(v_LoadRec.lt_trig_name_rename) Then
WS_ACT_HOST_SCRIPT,FUNCTION,444, v_work2 := Substr(v_LoadRec.lt_trig_name_rename,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,445, Else
WS_ACT_HOST_SCRIPT,FUNCTION,446, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,447, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,448, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,449, v_LoadRec.lt_trig_name_rename := Substr(v_LoadRec.lt_trig_name_rename,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,450, Else
WS_ACT_HOST_SCRIPT,FUNCTION,451, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,452, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,453, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,454, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,455,
WS_ACT_HOST_SCRIPT,FUNCTION,456, -- lt_trig_path_rename
WS_ACT_HOST_SCRIPT,FUNCTION,457, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,458, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,459, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,460, v_cpos := Instr(v_LoadRec.lt_trig_path_rename,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,461, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,462, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,463, v_epos := Instr(v_LoadRec.lt_trig_path_rename,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,464, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,465, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,466, v_work := WsParameterRead(substr(v_loadRec.lt_trig_path_rename,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,467, If v_epos+1 <= LENGTH(v_LoadRec.lt_trig_path_rename) Then
WS_ACT_HOST_SCRIPT,FUNCTION,468, v_work2 := Substr(v_LoadRec.lt_trig_path_rename,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,469, Else
WS_ACT_HOST_SCRIPT,FUNCTION,470, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,471, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,472, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,473, v_LoadRec.lt_trig_path_rename := Substr(v_LoadRec.lt_trig_path_rename,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,474, Else
WS_ACT_HOST_SCRIPT,FUNCTION,475, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,476, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,477, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,478, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,479,
WS_ACT_HOST_SCRIPT,FUNCTION,480, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,481,
WS_ACT_HOST_SCRIPT,FUNCTION,482, If v_LoadRec.lt_type = 'S' Then
WS_ACT_HOST_SCRIPT,FUNCTION,483,
WS_ACT_HOST_SCRIPT,FUNCTION,484, v_load_table_schema := trim(NVL(v_table_schema,''));
WS_ACT_HOST_SCRIPT,FUNCTION,485, If v_load_table_schema IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,486, v_load_table_schema := v_load_table_schema||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,487, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,488,
WS_ACT_HOST_SCRIPT,FUNCTION,489, v_load_table_db := '';
WS_ACT_HOST_SCRIPT,FUNCTION,490,
WS_ACT_HOST_SCRIPT,FUNCTION,491, v_load_table_fullname := coalesce(trim(v_load_table_db),'');
WS_ACT_HOST_SCRIPT,FUNCTION,492, If v_load_table_fullname IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,493, v_load_table_fullname := v_load_table_fullname||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,494, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,495, If v_load_table_schema IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,496, v_load_table_fullname := v_load_table_fullname||v_load_table_schema;
WS_ACT_HOST_SCRIPT,FUNCTION,497, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,498, v_load_table_fullname := v_load_table_fullname||v_LoadRec.lt_table_name;
WS_ACT_HOST_SCRIPT,FUNCTION,499,
WS_ACT_HOST_SCRIPT,FUNCTION,500, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,501, SELECT dc_odbc_source
WS_ACT_HOST_SCRIPT,FUNCTION,502, , dc_database_id
WS_ACT_HOST_SCRIPT,FUNCTION,503, , dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,504, INTO v_load_target_dsn
WS_ACT_HOST_SCRIPT,FUNCTION,505, , v_load_target_dbid
WS_ACT_HOST_SCRIPT,FUNCTION,506, , v_dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,507, FROM ws_obj_object
WS_ACT_HOST_SCRIPT,FUNCTION,508, LEFT JOIN ws_dbc_target
WS_ACT_HOST_SCRIPT,FUNCTION,509, ON oo_target_key = dt_target_key
WS_ACT_HOST_SCRIPT,FUNCTION,510, LEFT JOIN ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,511, ON (oo_target_key <> 0 AND dt_connect_key = dc_obj_key) OR (oo_target_key = 0 AND dc_attributes LIKE '%DataWarehouse;%')
WS_ACT_HOST_SCRIPT,FUNCTION,512, WHERE oo_obj_key = p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,513, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,514, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,515, v_load_target_dsn := '';
WS_ACT_HOST_SCRIPT,FUNCTION,516, v_load_target_dbid := '';
WS_ACT_HOST_SCRIPT,FUNCTION,517, v_dc_attributes := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,518, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,519, v_MsgText := 'Multiple rows found for load storage connection, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,520, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,521, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,522, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,523, END;
WS_ACT_HOST_SCRIPT,FUNCTION,524,
WS_ACT_HOST_SCRIPT,FUNCTION,525, If v_dc_attributes IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,526, v_att_pos := instr(v_dc_attributes, 'DBServer~=');
WS_ACT_HOST_SCRIPT,FUNCTION,527, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,528, v_att_slice := substr(v_dc_attributes, v_att_pos + 10);
WS_ACT_HOST_SCRIPT,FUNCTION,529, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,530, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,531, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,532, v_load_target_server := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,533, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,534, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,535,
WS_ACT_HOST_SCRIPT,FUNCTION,536, v_att_pos := instr(v_dc_attributes, 'DBPort~=');
WS_ACT_HOST_SCRIPT,FUNCTION,537, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,538, v_att_slice := substr(v_dc_attributes, v_att_pos + 8);
WS_ACT_HOST_SCRIPT,FUNCTION,539, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,540, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,541, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,542, v_load_target_dbport := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,543, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,544, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,545, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,546,
WS_ACT_HOST_SCRIPT,FUNCTION,547, If v_source_con_type = 'D' OR v_source_con_type = 'O' Then
WS_ACT_HOST_SCRIPT,FUNCTION,548, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,549, SELECT lt_source_schema
WS_ACT_HOST_SCRIPT,FUNCTION,550, INTO v_load_source_schema
WS_ACT_HOST_SCRIPT,FUNCTION,551, FROM ws_load_tab
WS_ACT_HOST_SCRIPT,FUNCTION,552, WHERE lt_obj_key = p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,553, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,554, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,555, v_load_source_schema := '';
WS_ACT_HOST_SCRIPT,FUNCTION,556, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,557, v_MsgText := 'Multiple rows found for load table source schema, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,558, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,559, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,560, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,561, END;
WS_ACT_HOST_SCRIPT,FUNCTION,562,
WS_ACT_HOST_SCRIPT,FUNCTION,563, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,564, SELECT dc_odbc_source
WS_ACT_HOST_SCRIPT,FUNCTION,565, , dc_database_id
WS_ACT_HOST_SCRIPT,FUNCTION,566, , dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,567, INTO v_load_source_dsn
WS_ACT_HOST_SCRIPT,FUNCTION,568, , v_load_source_dbid
WS_ACT_HOST_SCRIPT,FUNCTION,569, , v_dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,570, FROM ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,571, WHERE dc_obj_key = v_LoadRec.lt_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,572, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,573, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,574, v_load_source_dsn := '';
WS_ACT_HOST_SCRIPT,FUNCTION,575, v_load_source_dbid := '';
WS_ACT_HOST_SCRIPT,FUNCTION,576, v_dc_attributes := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,577, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,578, v_MsgText := 'Multiple rows found for load table source connection, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,579, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,580, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,581, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,582, END;
WS_ACT_HOST_SCRIPT,FUNCTION,583,
WS_ACT_HOST_SCRIPT,FUNCTION,584, If v_dc_attributes IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,585, v_att_pos := instr(v_dc_attributes, 'DBServer~=');
WS_ACT_HOST_SCRIPT,FUNCTION,586, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,587, v_att_slice := substr(v_dc_attributes, v_att_pos + 10);
WS_ACT_HOST_SCRIPT,FUNCTION,588, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,589, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,590, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,591, v_load_source_server := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,592, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,593, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,594,
WS_ACT_HOST_SCRIPT,FUNCTION,595, v_att_pos := instr(v_dc_attributes, 'DBPort~=');
WS_ACT_HOST_SCRIPT,FUNCTION,596, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,597, v_att_slice := substr(v_dc_attributes, v_att_pos + 8);
WS_ACT_HOST_SCRIPT,FUNCTION,598, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,599, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,600, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,601, v_load_source_dbport := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,602, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,603, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,604, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,605,
WS_ACT_HOST_SCRIPT,FUNCTION,606, v_load_source_db := '';
WS_ACT_HOST_SCRIPT,FUNCTION,607, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,608,
WS_ACT_HOST_SCRIPT,FUNCTION,609, v_param_obj_name := v_LoadRec.lt_table_name;
WS_ACT_HOST_SCRIPT,FUNCTION,610, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,611,
WS_ACT_HOST_SCRIPT,FUNCTION,612, ElsIf p_obj_type = v_ws_obj_export Then
WS_ACT_HOST_SCRIPT,FUNCTION,613, select * into v_ExpRec
WS_ACT_HOST_SCRIPT,FUNCTION,614, from ws_export_tab
WS_ACT_HOST_SCRIPT,FUNCTION,615, where et_obj_key = p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,616,
WS_ACT_HOST_SCRIPT,FUNCTION,617, v_step := 200;
WS_ACT_HOST_SCRIPT,FUNCTION,618, v_load_type := v_ExpRec.et_type;
WS_ACT_HOST_SCRIPT,FUNCTION,619, If v_ExpRec.et_type = 'S' Then
WS_ACT_HOST_SCRIPT,FUNCTION,620, v_script_key := v_ExpRec.et_script_key;
WS_ACT_HOST_SCRIPT,FUNCTION,621, v_script_type := v_ws_load_script;
WS_ACT_HOST_SCRIPT,FUNCTION,622, v_load_type := '';
WS_ACT_HOST_SCRIPT,FUNCTION,623, ElsIf v_ExpRec.et_type = 'F' Then
WS_ACT_HOST_SCRIPT,FUNCTION,624, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,625, v_script_type := v_ws_load_file;
WS_ACT_HOST_SCRIPT,FUNCTION,626, Else
WS_ACT_HOST_SCRIPT,FUNCTION,627, p_return_msg := 'Unsupported host script method. Not a File or Script Export. Export Type is ' ||
WS_ACT_HOST_SCRIPT,FUNCTION,628, v_ExpRec.et_type;
WS_ACT_HOST_SCRIPT,FUNCTION,629, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,630, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,631, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,632, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,633,
WS_ACT_HOST_SCRIPT,FUNCTION,634, -- Convert et_file_delimiter to literal ASCII value if it contains CHAR(AsciiVal)
WS_ACT_HOST_SCRIPT,FUNCTION,635, v_work := UPPER(v_ExpRec.et_file_delimiter);
WS_ACT_HOST_SCRIPT,FUNCTION,636, IF ( INSTR(v_work,'CHAR(') > 0 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,637, v_work := REPLACE(v_work,'CHAR(',NULL);
WS_ACT_HOST_SCRIPT,FUNCTION,638, IF ( INSTR(v_work,')') > 0 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,639, v_work := REPLACE(v_work,')',NULL);
WS_ACT_HOST_SCRIPT,FUNCTION,640, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,641, v_work := CHR(v_work);
WS_ACT_HOST_SCRIPT,FUNCTION,642, v_ExpRec.et_file_delimiter := v_work;
WS_ACT_HOST_SCRIPT,FUNCTION,643, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,644, WHEN OTHERS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,645, NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,646, END;
WS_ACT_HOST_SCRIPT,FUNCTION,647, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,648, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,649,
WS_ACT_HOST_SCRIPT,FUNCTION,650, -- Convert et_trig_delimiter to literal ASCII value if it contains CHAR(AsciiVal)
WS_ACT_HOST_SCRIPT,FUNCTION,651, v_work := UPPER(v_ExpRec.et_trig_delimiter);
WS_ACT_HOST_SCRIPT,FUNCTION,652, IF ( INSTR(v_work,'CHAR(') > 0 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,653, v_work := REPLACE(v_work,'CHAR(',NULL);
WS_ACT_HOST_SCRIPT,FUNCTION,654, IF ( INSTR(v_work,')') > 0 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,655, v_work := REPLACE(v_work,')',NULL);
WS_ACT_HOST_SCRIPT,FUNCTION,656, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,657, v_work := CHR(v_work);
WS_ACT_HOST_SCRIPT,FUNCTION,658, v_ExpRec.et_trig_delimiter := v_work;
WS_ACT_HOST_SCRIPT,FUNCTION,659, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,660, WHEN OTHERS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,661, NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,662, END;
WS_ACT_HOST_SCRIPT,FUNCTION,663, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,664, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,665,
WS_ACT_HOST_SCRIPT,FUNCTION,666, -- If a file export then replace any parameters in the file name
WS_ACT_HOST_SCRIPT,FUNCTION,667, If v_ExpRec.et_type = 'F' Then
WS_ACT_HOST_SCRIPT,FUNCTION,668, v_step := 210;
WS_ACT_HOST_SCRIPT,FUNCTION,669, -- et_file_name
WS_ACT_HOST_SCRIPT,FUNCTION,670, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,671, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,672, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,673, v_cpos := Instr(v_ExpRec.et_file_name,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,674, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,675, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,676, v_epos := Instr(v_ExpRec.et_file_name,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,677, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,678, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,679, v_work := WsParameterRead(substr(v_ExpRec.et_file_name,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,680, If v_epos+1 <= LENGTH(v_ExpRec.et_file_name) Then
WS_ACT_HOST_SCRIPT,FUNCTION,681, v_work2 := Substr(v_ExpRec.et_file_name,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,682, Else
WS_ACT_HOST_SCRIPT,FUNCTION,683, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,684, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,685, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,686, v_ExpRec.et_file_name := Substr(v_ExpRec.et_file_name,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,687, Else
WS_ACT_HOST_SCRIPT,FUNCTION,688, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,689, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,690, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,691, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,692,
WS_ACT_HOST_SCRIPT,FUNCTION,693, -- et_file_path
WS_ACT_HOST_SCRIPT,FUNCTION,694, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,695, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,696, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,697, v_cpos := Instr(v_ExpRec.et_file_path,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,698, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,699, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,700, v_epos := Instr(v_ExpRec.et_file_path,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,701, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,702, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,703, v_work := WsParameterRead(substr(v_ExpRec.et_file_path,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,704, If v_epos+1 <= LENGTH(v_ExpRec.et_file_path) Then
WS_ACT_HOST_SCRIPT,FUNCTION,705, v_work2 := Substr(v_ExpRec.et_file_path,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,706, Else
WS_ACT_HOST_SCRIPT,FUNCTION,707, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,708, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,709, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,710, v_ExpRec.et_file_path := Substr(v_ExpRec.et_file_path,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,711, Else
WS_ACT_HOST_SCRIPT,FUNCTION,712, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,713, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,714, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,715, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,716,
WS_ACT_HOST_SCRIPT,FUNCTION,717, -- et_trig_name
WS_ACT_HOST_SCRIPT,FUNCTION,718, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,719, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,720, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,721, v_cpos := Instr(v_ExpRec.et_trig_name,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,722, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,723, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,724, v_epos := Instr(v_ExpRec.et_trig_name,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,725, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,726, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,727, v_work := WsParameterRead(substr(v_ExpRec.et_trig_name,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,728, If v_epos+1 <= LENGTH(v_ExpRec.et_trig_name) Then
WS_ACT_HOST_SCRIPT,FUNCTION,729, v_work2 := Substr(v_ExpRec.et_trig_name,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,730, Else
WS_ACT_HOST_SCRIPT,FUNCTION,731, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,732, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,733, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,734, v_ExpRec.et_trig_name := Substr(v_ExpRec.et_trig_name,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,735, Else
WS_ACT_HOST_SCRIPT,FUNCTION,736, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,737, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,738, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,739, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,740,
WS_ACT_HOST_SCRIPT,FUNCTION,741, -- et_trig_path
WS_ACT_HOST_SCRIPT,FUNCTION,742, v_cpos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,743, While v_cpos > 0 Loop
WS_ACT_HOST_SCRIPT,FUNCTION,744, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,745, v_cpos := Instr(v_ExpRec.et_trig_path,'$P');
WS_ACT_HOST_SCRIPT,FUNCTION,746, If v_cpos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,747, v_step := 230;
WS_ACT_HOST_SCRIPT,FUNCTION,748, v_epos := Instr(v_ExpRec.et_trig_path,'$',v_cpos+2);
WS_ACT_HOST_SCRIPT,FUNCTION,749, If v_epos > v_cpos Then
WS_ACT_HOST_SCRIPT,FUNCTION,750, v_step := 240;
WS_ACT_HOST_SCRIPT,FUNCTION,751, v_work := WsParameterRead(substr(v_ExpRec.et_trig_path,v_cpos+2,(v_epos-v_cpos)-2));
WS_ACT_HOST_SCRIPT,FUNCTION,752, If v_epos+1 <= LENGTH(v_ExpRec.et_trig_path) Then
WS_ACT_HOST_SCRIPT,FUNCTION,753, v_work2 := Substr(v_ExpRec.et_trig_path,v_epos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,754, Else
WS_ACT_HOST_SCRIPT,FUNCTION,755, v_work2 := '';
WS_ACT_HOST_SCRIPT,FUNCTION,756, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,757, v_step := 260;
WS_ACT_HOST_SCRIPT,FUNCTION,758, v_ExpRec.et_trig_path := Substr(v_ExpRec.et_trig_path,1,v_cpos-1)||v_work||v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,759, Else
WS_ACT_HOST_SCRIPT,FUNCTION,760, v_cpos := -1;
WS_ACT_HOST_SCRIPT,FUNCTION,761, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,762, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,763, End Loop;
WS_ACT_HOST_SCRIPT,FUNCTION,764,
WS_ACT_HOST_SCRIPT,FUNCTION,765, v_step := 220;
WS_ACT_HOST_SCRIPT,FUNCTION,766, -- look up export source object schema from ws_dbc_target
WS_ACT_HOST_SCRIPT,FUNCTION,767, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,768, SELECT NVL(ws_dbc_target.dt_schema, '')
WS_ACT_HOST_SCRIPT,FUNCTION,769, INTO v_table_schema
WS_ACT_HOST_SCRIPT,FUNCTION,770, FROM ws_obj_object
WS_ACT_HOST_SCRIPT,FUNCTION,771, LEFT OUTER JOIN ws_dbc_target ON ws_obj_object.oo_target_key = ws_dbc_target.dt_target_key
WS_ACT_HOST_SCRIPT,FUNCTION,772, LEFT OUTER JOIN ws_dbc_connect ON ws_dbc_connect.dc_obj_key = ws_dbc_target.dt_connect_key
WS_ACT_HOST_SCRIPT,FUNCTION,773, WHERE UPPER(ws_obj_object.oo_name) IN (
WS_ACT_HOST_SCRIPT,FUNCTION,774, SELECT DISTINCT UPPER(ec_src_table)
WS_ACT_HOST_SCRIPT,FUNCTION,775, FROM ws_export_col
WS_ACT_HOST_SCRIPT,FUNCTION,776, WHERE ec_obj_key = p_obj_key
WS_ACT_HOST_SCRIPT,FUNCTION,777, );
WS_ACT_HOST_SCRIPT,FUNCTION,778, v_table_schema := TRIM(v_table_schema);
WS_ACT_HOST_SCRIPT,FUNCTION,779,
WS_ACT_HOST_SCRIPT,FUNCTION,780, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,781, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,782, v_table_schema := '';
WS_ACT_HOST_SCRIPT,FUNCTION,783,
WS_ACT_HOST_SCRIPT,FUNCTION,784, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,785, v_MsgText := 'Multiple sources found for export source, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,786, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,787, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,788, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,789, END;
WS_ACT_HOST_SCRIPT,FUNCTION,790, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,791,
WS_ACT_HOST_SCRIPT,FUNCTION,792, If v_ExpRec.et_type = 'S' Then
WS_ACT_HOST_SCRIPT,FUNCTION,793,
WS_ACT_HOST_SCRIPT,FUNCTION,794, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,795, SELECT MAX(ec_src_table)
WS_ACT_HOST_SCRIPT,FUNCTION,796, INTO v_exp_source_table
WS_ACT_HOST_SCRIPT,FUNCTION,797, FROM ws_export_col
WS_ACT_HOST_SCRIPT,FUNCTION,798, WHERE ec_obj_key = p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,799, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,800, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,801, v_exp_source_table := '';
WS_ACT_HOST_SCRIPT,FUNCTION,802, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,803, v_MsgText := 'Multiple rows found for export table name, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,804, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,805, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,806, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,807, END;
WS_ACT_HOST_SCRIPT,FUNCTION,808,
WS_ACT_HOST_SCRIPT,FUNCTION,809, If trim(NVL(v_exp_source_table,'')) = '' Then
WS_ACT_HOST_SCRIPT,FUNCTION,810, v_MsgText := 'Unable to determine export table, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,811, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,812, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,813, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,814, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,815,
WS_ACT_HOST_SCRIPT,FUNCTION,816, v_exp_source_schema := trim(NVL(v_table_schema,''));
WS_ACT_HOST_SCRIPT,FUNCTION,817, If v_exp_source_schema IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,818, v_exp_source_schema := v_exp_source_schema||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,819, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,820,
WS_ACT_HOST_SCRIPT,FUNCTION,821, v_exp_source_db := '';
WS_ACT_HOST_SCRIPT,FUNCTION,822,
WS_ACT_HOST_SCRIPT,FUNCTION,823, v_exp_source_fullname := coalesce(trim(v_exp_source_db),'');
WS_ACT_HOST_SCRIPT,FUNCTION,824, If v_exp_source_fullname IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,825, v_exp_source_fullname := v_exp_source_fullname||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,826, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,827, If v_exp_source_schema IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,828, v_exp_source_fullname := v_exp_source_fullname||v_exp_source_schema;
WS_ACT_HOST_SCRIPT,FUNCTION,829, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,830, v_exp_source_fullname := v_exp_source_fullname||v_exp_source_table;
WS_ACT_HOST_SCRIPT,FUNCTION,831,
WS_ACT_HOST_SCRIPT,FUNCTION,832, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,833, SELECT dc_odbc_source
WS_ACT_HOST_SCRIPT,FUNCTION,834, , dc_database_id
WS_ACT_HOST_SCRIPT,FUNCTION,835, , dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,836, INTO v_exp_source_dsn
WS_ACT_HOST_SCRIPT,FUNCTION,837, , v_exp_source_dbid
WS_ACT_HOST_SCRIPT,FUNCTION,838, , v_dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,839, FROM ws_obj_object
WS_ACT_HOST_SCRIPT,FUNCTION,840, LEFT JOIN ws_dbc_target
WS_ACT_HOST_SCRIPT,FUNCTION,841, ON oo_target_key = dt_target_key
WS_ACT_HOST_SCRIPT,FUNCTION,842, LEFT JOIN ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,843, ON (oo_target_key <> 0 AND dt_connect_key = dc_obj_key) OR (oo_target_key = 0 AND dc_attributes LIKE '%DataWarehouse;%')
WS_ACT_HOST_SCRIPT,FUNCTION,844, WHERE oo_name = v_exp_source_table;
WS_ACT_HOST_SCRIPT,FUNCTION,845, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,846, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,847, v_exp_source_dsn := '';
WS_ACT_HOST_SCRIPT,FUNCTION,848, v_exp_source_dbid := '';
WS_ACT_HOST_SCRIPT,FUNCTION,849, v_dc_attributes := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,850, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,851, v_MsgText := 'Multiple rows found for export table storage connection, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,852, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,853, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,854, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,855, END;
WS_ACT_HOST_SCRIPT,FUNCTION,856,
WS_ACT_HOST_SCRIPT,FUNCTION,857, If v_dc_attributes IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,858, v_att_pos := instr(v_dc_attributes, 'DBServer~=');
WS_ACT_HOST_SCRIPT,FUNCTION,859, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,860, v_att_slice := substr(v_dc_attributes, v_att_pos + 10);
WS_ACT_HOST_SCRIPT,FUNCTION,861, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,862, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,863, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,864, v_exp_source_server := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,865, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,866, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,867,
WS_ACT_HOST_SCRIPT,FUNCTION,868, v_att_pos := instr(v_dc_attributes, 'DBPort~=');
WS_ACT_HOST_SCRIPT,FUNCTION,869, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,870, v_att_slice := substr(v_dc_attributes, v_att_pos + 8);
WS_ACT_HOST_SCRIPT,FUNCTION,871, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,872, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,873, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,874, v_exp_source_dbport := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,875, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,876, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,877, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,878,
WS_ACT_HOST_SCRIPT,FUNCTION,879, v_param_obj_name := v_ExpRec.et_table_name;
WS_ACT_HOST_SCRIPT,FUNCTION,880, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,881,
WS_ACT_HOST_SCRIPT,FUNCTION,882, Else
WS_ACT_HOST_SCRIPT,FUNCTION,883, p_return_msg := 'Unsupported host script method. Not a script or a file load or export. Type is ' ||
WS_ACT_HOST_SCRIPT,FUNCTION,884, p_obj_type;
WS_ACT_HOST_SCRIPT,FUNCTION,885, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,886, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,887, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,888, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,889,
WS_ACT_HOST_SCRIPT,FUNCTION,890, If (p_obj_type = v_ws_obj_load And v_LoadRec.lt_type = 'S')
WS_ACT_HOST_SCRIPT,FUNCTION,891, Or (p_obj_type = v_ws_obj_export And v_ExpRec.et_type = 'S')
WS_ACT_HOST_SCRIPT,FUNCTION,892, Then
WS_ACT_HOST_SCRIPT,FUNCTION,893, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,894, SELECT dc_odbc_source
WS_ACT_HOST_SCRIPT,FUNCTION,895, , dc_database_id
WS_ACT_HOST_SCRIPT,FUNCTION,896, , dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,897, INTO v_meta_dsn
WS_ACT_HOST_SCRIPT,FUNCTION,898, , v_meta_dbid
WS_ACT_HOST_SCRIPT,FUNCTION,899, , v_dc_attributes
WS_ACT_HOST_SCRIPT,FUNCTION,900, FROM ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,901, WHERE dc_attributes LIKE '%DataWarehouse;%';
WS_ACT_HOST_SCRIPT,FUNCTION,902, EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,903, WHEN NO_DATA_FOUND THEN
WS_ACT_HOST_SCRIPT,FUNCTION,904, v_meta_dsn := '';
WS_ACT_HOST_SCRIPT,FUNCTION,905, v_meta_dbid := '';
WS_ACT_HOST_SCRIPT,FUNCTION,906, v_dc_attributes := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,907, WHEN TOO_MANY_ROWS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,908, v_MsgText := 'Multiple rows found for load table storage connection, job: '|| p_job_name ||'.';
WS_ACT_HOST_SCRIPT,FUNCTION,909, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,910, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,911, RETURN -2;
WS_ACT_HOST_SCRIPT,FUNCTION,912, END;
WS_ACT_HOST_SCRIPT,FUNCTION,913,
WS_ACT_HOST_SCRIPT,FUNCTION,914, If v_dc_attributes IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,915, v_att_pos := instr(v_dc_attributes, 'DBServer~=');
WS_ACT_HOST_SCRIPT,FUNCTION,916, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,917, v_att_slice := substr(v_dc_attributes, v_att_pos + 10);
WS_ACT_HOST_SCRIPT,FUNCTION,918, v_att_pos := instr(v_att_slice, ';');
WS_ACT_HOST_SCRIPT,FUNCTION,919, If v_att_pos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,920, v_att_len := to_number(substr(v_att_slice, 1, v_att_pos - 1));
WS_ACT_HOST_SCRIPT,FUNCTION,921, v_meta_server := substr(v_att_slice, v_att_pos + 1, v_att_len);
WS_ACT_HOST_SCRIPT,FUNCTION,922, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,923, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,924, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,925,
WS_ACT_HOST_SCRIPT,FUNCTION,926, v_meta_db := '';
WS_ACT_HOST_SCRIPT,FUNCTION,927, v_meta_schema := '';
WS_ACT_HOST_SCRIPT,FUNCTION,928, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,929,
WS_ACT_HOST_SCRIPT,FUNCTION,930, v_step := 300;
WS_ACT_HOST_SCRIPT,FUNCTION,931,
WS_ACT_HOST_SCRIPT,FUNCTION,932, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,933, -- If a script key then copy over the script
WS_ACT_HOST_SCRIPT,FUNCTION,934, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,935, If v_script_type = v_ws_script_execute
WS_ACT_HOST_SCRIPT,FUNCTION,936, Or v_script_type = v_ws_load_script Then
WS_ACT_HOST_SCRIPT,FUNCTION,937,
WS_ACT_HOST_SCRIPT,FUNCTION,938, v_step := 400;
WS_ACT_HOST_SCRIPT,FUNCTION,939, -- Get the Connection key
WS_ACT_HOST_SCRIPT,FUNCTION,940, select * into v_ScriptRec
WS_ACT_HOST_SCRIPT,FUNCTION,941, from ws_scr_header
WS_ACT_HOST_SCRIPT,FUNCTION,942, where sh_obj_key = v_script_key;
WS_ACT_HOST_SCRIPT,FUNCTION,943,
WS_ACT_HOST_SCRIPT,FUNCTION,944, If v_script_type = v_ws_script_execute Then
WS_ACT_HOST_SCRIPT,FUNCTION,945, v_connect_key := v_ScriptRec.sh_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,946, v_load_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,947, ElsIf p_obj_type = v_ws_obj_load Then
WS_ACT_HOST_SCRIPT,FUNCTION,948, If v_source_con_type = 'D' Or v_source_con_type = 'O' Then
WS_ACT_HOST_SCRIPT,FUNCTION,949, v_connect_key := v_ScriptRec.sh_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,950, Else
WS_ACT_HOST_SCRIPT,FUNCTION,951, v_connect_key := v_LoadRec.lt_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,952, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,953, v_load_key := p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,954, Else
WS_ACT_HOST_SCRIPT,FUNCTION,955, v_connect_key := v_ExpRec.et_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,956, v_load_key := p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,957, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,958,
WS_ACT_HOST_SCRIPT,FUNCTION,959, -- Change the value for wtsh_load_type to indicate a Powershell script
WS_ACT_HOST_SCRIPT,FUNCTION,960, If v_ScriptRec.sh_type = 'P' Then
WS_ACT_HOST_SCRIPT,FUNCTION,961, v_load_type := 'P';
WS_ACT_HOST_SCRIPT,FUNCTION,962, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,963,
WS_ACT_HOST_SCRIPT,FUNCTION,964, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,965, -- Get the work directory from the connection
WS_ACT_HOST_SCRIPT,FUNCTION,966, -- If no Connection then we have a problem
WS_ACT_HOST_SCRIPT,FUNCTION,967, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,968, v_step := 500;
WS_ACT_HOST_SCRIPT,FUNCTION,969, If v_connect_key > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,970, select * into v_ConnectRec
WS_ACT_HOST_SCRIPT,FUNCTION,971, from ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,972, where dc_obj_key = v_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,973, Else
WS_ACT_HOST_SCRIPT,FUNCTION,974, If v_script_type = v_ws_script_execute Then
WS_ACT_HOST_SCRIPT,FUNCTION,975, p_return_msg := 'No connection defined. Unable to execute script';
WS_ACT_HOST_SCRIPT,FUNCTION,976, Else
WS_ACT_HOST_SCRIPT,FUNCTION,977, p_return_msg := 'No connection defined. Unable to perform load';
WS_ACT_HOST_SCRIPT,FUNCTION,978, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,979, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,980, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,981, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,982, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,983,
WS_ACT_HOST_SCRIPT,FUNCTION,984, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,985, -- Build up the work directory for Unix and Windows
WS_ACT_HOST_SCRIPT,FUNCTION,986, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,987, v_step := 600;
WS_ACT_HOST_SCRIPT,FUNCTION,988, If v_ConnectRec.dc_type = 'U' OR v_ConnectRec.dc_type = 'H' Then
WS_ACT_HOST_SCRIPT,FUNCTION,989, v_work_dir := v_ConnectRec.dc_work_dir;
WS_ACT_HOST_SCRIPT,FUNCTION,990, If substr(v_work_dir,-1,1) <> '/' Then
WS_ACT_HOST_SCRIPT,FUNCTION,991, v_work_dir := v_work_dir || '/';
WS_ACT_HOST_SCRIPT,FUNCTION,992, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,993, Else
WS_ACT_HOST_SCRIPT,FUNCTION,994, v_work_dir := v_ConnectRec.dc_work_dir;
WS_ACT_HOST_SCRIPT,FUNCTION,995, If substr(v_work_dir,-1,1) <> '\' Then
WS_ACT_HOST_SCRIPT,FUNCTION,996, v_work_dir := v_work_dir || '\';
WS_ACT_HOST_SCRIPT,FUNCTION,997, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,998, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,999,
WS_ACT_HOST_SCRIPT,FUNCTION,1000, -- Copy over the script
WS_ACT_HOST_SCRIPT,FUNCTION,1001, v_line_no := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1002,
WS_ACT_HOST_SCRIPT,FUNCTION,1003, SELECT MIN(sl_line_no)
WS_ACT_HOST_SCRIPT,FUNCTION,1004, INTO v_min_line_no
WS_ACT_HOST_SCRIPT,FUNCTION,1005, FROM ws_scr_line
WS_ACT_HOST_SCRIPT,FUNCTION,1006, WHERE sl_obj_key = v_script_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1007,
WS_ACT_HOST_SCRIPT,FUNCTION,1008, SELECT sl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1009, INTO v_line
WS_ACT_HOST_SCRIPT,FUNCTION,1010, FROM ws_scr_line
WS_ACT_HOST_SCRIPT,FUNCTION,1011, WHERE sl_obj_key = v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,1012, AND sl_line_no = v_min_line_no;
WS_ACT_HOST_SCRIPT,FUNCTION,1013,
WS_ACT_HOST_SCRIPT,FUNCTION,1014, IF v_ConnectRec.dc_type = 'W' AND lower(substr(trim(v_line), 1, 5)) = '@echo'
WS_ACT_HOST_SCRIPT,FUNCTION,1015, THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1016, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1017, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1018, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1019, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1020, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1021, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1022, )
WS_ACT_HOST_SCRIPT,FUNCTION,1023, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1024, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1025, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1026, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1027, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1028, NVL(WsParameterReplace(v_line,4000),v_line)
WS_ACT_HOST_SCRIPT,FUNCTION,1029, );
WS_ACT_HOST_SCRIPT,FUNCTION,1030, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1031,
WS_ACT_HOST_SCRIPT,FUNCTION,1032, -- Prevent this line from being inserted again later.
WS_ACT_HOST_SCRIPT,FUNCTION,1033, v_min_line_no := v_min_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1034, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1035,
WS_ACT_HOST_SCRIPT,FUNCTION,1036, IF v_ConnectRec.dc_type = 'U' OR v_ConnectRec.dc_type = 'H' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1037,
WS_ACT_HOST_SCRIPT,FUNCTION,1038, -- Use the shell configured in the connection, otherwise guess
WS_ACT_HOST_SCRIPT,FUNCTION,1039, -- based on the name of the connection
WS_ACT_HOST_SCRIPT,FUNCTION,1040, v_shell := null;
WS_ACT_HOST_SCRIPT,FUNCTION,1041, v_cpos := instr(v_ConnectRec.dc_attributes, 'ScriptShell~='); -- ScriptShell~=LENGTH;VALUE;
WS_ACT_HOST_SCRIPT,FUNCTION,1042, If v_cpos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1043, v_cpos := v_cpos + 13;
WS_ACT_HOST_SCRIPT,FUNCTION,1044, v_epos := instr(v_ConnectRec.dc_attributes, ';', v_cpos);
WS_ACT_HOST_SCRIPT,FUNCTION,1045, If v_epos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1046, v_work := substr(v_ConnectRec.dc_attributes, v_cpos, v_epos-v_cpos);
WS_ACT_HOST_SCRIPT,FUNCTION,1047, v_nlength := to_number(v_work);
WS_ACT_HOST_SCRIPT,FUNCTION,1048, If v_nlength > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1049, v_shell := '#!' || substr(v_ConnectRec.dc_attributes, v_epos+1, v_nlength);
WS_ACT_HOST_SCRIPT,FUNCTION,1050, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1051, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1052, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1053, If v_shell is null Then
WS_ACT_HOST_SCRIPT,FUNCTION,1054, If instr(upper(v_ConnectRec.dc_name),'LINUX') > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1055, v_shell := '#!/bin/sh';
WS_ACT_HOST_SCRIPT,FUNCTION,1056, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1057, v_shell := '#!/bin/ksh';
WS_ACT_HOST_SCRIPT,FUNCTION,1058, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1059, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1060,
WS_ACT_HOST_SCRIPT,FUNCTION,1061, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1062, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1063, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1064, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1065, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1066, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1067, )
WS_ACT_HOST_SCRIPT,FUNCTION,1068, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1069, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1070, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1071, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1072, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1073, v_shell||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1074, );
WS_ACT_HOST_SCRIPT,FUNCTION,1075, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1076,
WS_ACT_HOST_SCRIPT,FUNCTION,1077, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1078, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1079, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1080, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1081, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1082, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1083, )
WS_ACT_HOST_SCRIPT,FUNCTION,1084, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1085, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1086, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1087, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1088, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1089, 'set -a'||chr(10) -- automatically export assigned variables
WS_ACT_HOST_SCRIPT,FUNCTION,1090, );
WS_ACT_HOST_SCRIPT,FUNCTION,1091, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1092,
WS_ACT_HOST_SCRIPT,FUNCTION,1093, IF v_ConnectRec.dc_database_id IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1094, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1095, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1096, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1097, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1098, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1099, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1100, )
WS_ACT_HOST_SCRIPT,FUNCTION,1101, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1102, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1103, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1104, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1105, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1106, 'WSL_SID='''||replace(trim(v_ConnectRec.dc_database_id),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1107, );
WS_ACT_HOST_SCRIPT,FUNCTION,1108, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1109, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1110,
WS_ACT_HOST_SCRIPT,FUNCTION,1111, IF p_job_name IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1112, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1113, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1114, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1115, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1116, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1117, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1118, )
WS_ACT_HOST_SCRIPT,FUNCTION,1119, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1120, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1121, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1122, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1123, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1124, 'JOB_NAME='''||replace(trim(p_job_name),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1125, );
WS_ACT_HOST_SCRIPT,FUNCTION,1126, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1127, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1128,
WS_ACT_HOST_SCRIPT,FUNCTION,1129, IF p_task_name IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1130, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1131, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1132, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1133, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1134, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1135, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1136, )
WS_ACT_HOST_SCRIPT,FUNCTION,1137, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1138, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1139, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1140, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1141, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1142, 'TASK_NAME='''||replace(trim(p_task_name),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1143, );
WS_ACT_HOST_SCRIPT,FUNCTION,1144, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1145, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1146,
WS_ACT_HOST_SCRIPT,FUNCTION,1147, IF p_obj_type = v_ws_obj_export THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1148,
WS_ACT_HOST_SCRIPT,FUNCTION,1149, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1150, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1151, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1152, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1153, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1154, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1155, )
WS_ACT_HOST_SCRIPT,FUNCTION,1156, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1157, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1158, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1159, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1160, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1161, 'EXP_NAME='''||replace(coalesce(trim(v_ExpRec.et_table_name),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1162, );
WS_ACT_HOST_SCRIPT,FUNCTION,1163, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1164,
WS_ACT_HOST_SCRIPT,FUNCTION,1165, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1166, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1167, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1168, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1169, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1170, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1171, )
WS_ACT_HOST_SCRIPT,FUNCTION,1172, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1173, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1174, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1175, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1176, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1177, 'EXP_FULLNAME='''||replace(coalesce(trim(v_exp_source_fullname),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1178, );
WS_ACT_HOST_SCRIPT,FUNCTION,1179, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1180,
WS_ACT_HOST_SCRIPT,FUNCTION,1181, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1182, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1183, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1184, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1185, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1186, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1187, )
WS_ACT_HOST_SCRIPT,FUNCTION,1188, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1189, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1190, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1191, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1192, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1193, 'EXP_TABLE='''||replace(coalesce(trim(v_exp_source_table),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1194, );
WS_ACT_HOST_SCRIPT,FUNCTION,1195, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1196,
WS_ACT_HOST_SCRIPT,FUNCTION,1197, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1198, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1199, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1200, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1201, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1202, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1203, )
WS_ACT_HOST_SCRIPT,FUNCTION,1204, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1205, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1206, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1207, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1208, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1209, 'EXP_SCHEMA='''||replace(coalesce(trim(v_exp_source_schema),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1210, );
WS_ACT_HOST_SCRIPT,FUNCTION,1211, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1212,
WS_ACT_HOST_SCRIPT,FUNCTION,1213, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1214, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1215, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1216, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1217, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1218, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1219, )
WS_ACT_HOST_SCRIPT,FUNCTION,1220, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1221, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1222, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1223, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1224, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1225, 'EXP_DB='''||replace(coalesce(trim(v_exp_source_db),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1226, );
WS_ACT_HOST_SCRIPT,FUNCTION,1227, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1228,
WS_ACT_HOST_SCRIPT,FUNCTION,1229, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1230, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1231, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1232, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1233, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1234, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1235, )
WS_ACT_HOST_SCRIPT,FUNCTION,1236, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1237, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1238, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1239, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1240, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1241, 'SRC_DSN='''||replace(coalesce(trim(v_exp_source_dsn),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1242, );
WS_ACT_HOST_SCRIPT,FUNCTION,1243, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1244,
WS_ACT_HOST_SCRIPT,FUNCTION,1245, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1246, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1247, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1248, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1249, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1250, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1251, )
WS_ACT_HOST_SCRIPT,FUNCTION,1252, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1253, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1254, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1255, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1256, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1257, 'SRC_SERVER='''||replace(coalesce(trim(v_exp_source_server),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1258, );
WS_ACT_HOST_SCRIPT,FUNCTION,1259, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1260,
WS_ACT_HOST_SCRIPT,FUNCTION,1261, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1262, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1263, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1264, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1265, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1266, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1267, )
WS_ACT_HOST_SCRIPT,FUNCTION,1268, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1269, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1270, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1271, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1272, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1273, 'SRC_DBPORT='''||replace(coalesce(trim(v_exp_source_dbport),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1274, );
WS_ACT_HOST_SCRIPT,FUNCTION,1275, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1276,
WS_ACT_HOST_SCRIPT,FUNCTION,1277, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1278, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1279, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1280, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1281, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1282, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1283, )
WS_ACT_HOST_SCRIPT,FUNCTION,1284, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1285, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1286, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1287, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1288, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1289, 'SRC_DBID='''||replace(coalesce(trim(v_exp_source_dbid),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1290, );
WS_ACT_HOST_SCRIPT,FUNCTION,1291, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1292,
WS_ACT_HOST_SCRIPT,FUNCTION,1293, ELSIF p_obj_type = v_ws_obj_load THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1294,
WS_ACT_HOST_SCRIPT,FUNCTION,1295, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1296, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1297, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1298, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1299, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1300, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1301, )
WS_ACT_HOST_SCRIPT,FUNCTION,1302, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1303, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1304, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1305, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1306, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1307, 'LOAD_FULLNAME='''||replace(coalesce(trim(v_load_table_fullname),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1308, );
WS_ACT_HOST_SCRIPT,FUNCTION,1309, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1310,
WS_ACT_HOST_SCRIPT,FUNCTION,1311, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1312, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1313, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1314, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1315, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1316, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1317, )
WS_ACT_HOST_SCRIPT,FUNCTION,1318, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1319, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1320, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1321, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1322, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1323, 'LOAD_TABLE='''||replace(coalesce(trim(v_LoadRec.lt_table_name),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1324, );
WS_ACT_HOST_SCRIPT,FUNCTION,1325, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1326,
WS_ACT_HOST_SCRIPT,FUNCTION,1327, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1328, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1329, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1330, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1331, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1332, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1333, )
WS_ACT_HOST_SCRIPT,FUNCTION,1334, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1335, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1336, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1337, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1338, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1339, 'LOAD_SCHEMA='''||replace(coalesce(trim(v_load_table_schema),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1340, );
WS_ACT_HOST_SCRIPT,FUNCTION,1341, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1342,
WS_ACT_HOST_SCRIPT,FUNCTION,1343, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1344, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1345, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1346, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1347, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1348, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1349, )
WS_ACT_HOST_SCRIPT,FUNCTION,1350, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1351, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1352, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1353, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1354, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1355, 'LOAD_DB='''||replace(coalesce(trim(v_load_table_db),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1356, );
WS_ACT_HOST_SCRIPT,FUNCTION,1357, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1358,
WS_ACT_HOST_SCRIPT,FUNCTION,1359, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1360, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1361, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1362, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1363, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1364, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1365, )
WS_ACT_HOST_SCRIPT,FUNCTION,1366, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1367, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1368, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1369, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1370, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1371, 'TGT_DSN='''||replace(coalesce(trim(v_load_target_dsn),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1372, );
WS_ACT_HOST_SCRIPT,FUNCTION,1373, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1374,
WS_ACT_HOST_SCRIPT,FUNCTION,1375, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1376, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1377, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1378, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1379, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1380, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1381, )
WS_ACT_HOST_SCRIPT,FUNCTION,1382, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1383, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1384, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1385, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1386, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1387, 'TGT_SERVER='''||replace(coalesce(trim(v_load_target_server),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1388, );
WS_ACT_HOST_SCRIPT,FUNCTION,1389, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1390,
WS_ACT_HOST_SCRIPT,FUNCTION,1391, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1392, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1393, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1394, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1395, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1396, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1397, )
WS_ACT_HOST_SCRIPT,FUNCTION,1398, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1399, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1400, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1401, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1402, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1403, 'TGT_DBPORT='''||replace(coalesce(trim(v_load_target_dbport),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1404, );
WS_ACT_HOST_SCRIPT,FUNCTION,1405, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1406,
WS_ACT_HOST_SCRIPT,FUNCTION,1407, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1408, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1409, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1410, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1411, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1412, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1413, )
WS_ACT_HOST_SCRIPT,FUNCTION,1414, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1415, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1416, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1417, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1418, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1419, 'TGT_DBID='''||replace(coalesce(trim(v_load_target_dbid),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1420, );
WS_ACT_HOST_SCRIPT,FUNCTION,1421, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1422,
WS_ACT_HOST_SCRIPT,FUNCTION,1423, IF v_source_con_type = 'D' OR v_source_con_type = 'O' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1424, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1425, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1426, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1427, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1428, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1429, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1430, )
WS_ACT_HOST_SCRIPT,FUNCTION,1431, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1432, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1433, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1434, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1435, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1436, 'SRC_DSN='''||replace(coalesce(trim(v_load_source_dsn),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1437, );
WS_ACT_HOST_SCRIPT,FUNCTION,1438, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1439,
WS_ACT_HOST_SCRIPT,FUNCTION,1440, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1441, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1442, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1443, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1444, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1445, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1446, )
WS_ACT_HOST_SCRIPT,FUNCTION,1447, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1448, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1449, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1450, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1451, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1452, 'SRC_SERVER='''||replace(coalesce(trim(v_load_source_server),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1453, );
WS_ACT_HOST_SCRIPT,FUNCTION,1454, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1455,
WS_ACT_HOST_SCRIPT,FUNCTION,1456, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1457, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1458, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1459, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1460, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1461, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1462, )
WS_ACT_HOST_SCRIPT,FUNCTION,1463, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1464, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1465, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1466, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1467, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1468, 'SRC_DBPORT='''||replace(coalesce(trim(v_load_source_dbport),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1469, );
WS_ACT_HOST_SCRIPT,FUNCTION,1470, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1471,
WS_ACT_HOST_SCRIPT,FUNCTION,1472, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1473, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1474, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1475, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1476, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1477, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1478, )
WS_ACT_HOST_SCRIPT,FUNCTION,1479, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1480, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1481, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1482, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1483, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1484, 'SRC_DBID='''||replace(coalesce(trim(v_load_source_dbid),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1485, );
WS_ACT_HOST_SCRIPT,FUNCTION,1486, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1487,
WS_ACT_HOST_SCRIPT,FUNCTION,1488, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1489, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1490, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1491, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1492, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1493, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1494, )
WS_ACT_HOST_SCRIPT,FUNCTION,1495, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1496, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1497, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1498, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1499, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1500, 'SRC_DB='''||replace(coalesce(trim(v_load_source_db),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1501, );
WS_ACT_HOST_SCRIPT,FUNCTION,1502, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1503,
WS_ACT_HOST_SCRIPT,FUNCTION,1504, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1505, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1506, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1507, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1508, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1509, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1510, )
WS_ACT_HOST_SCRIPT,FUNCTION,1511, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1512, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1513, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1514, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1515, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1516, 'SRC_SCHEMA='''||replace(coalesce(trim(v_load_source_schema),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1517, );
WS_ACT_HOST_SCRIPT,FUNCTION,1518, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1519, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1520,
WS_ACT_HOST_SCRIPT,FUNCTION,1521, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1522,
WS_ACT_HOST_SCRIPT,FUNCTION,1523, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1524, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1525, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1526, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1527, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1528, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1529, )
WS_ACT_HOST_SCRIPT,FUNCTION,1530, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1531, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1532, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1533, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1534, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1535, 'META_DSN=${META_DSN-'''||replace(coalesce(trim(v_meta_dsn),''),'''','''\''''')||'''}'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1536, );
WS_ACT_HOST_SCRIPT,FUNCTION,1537, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1538,
WS_ACT_HOST_SCRIPT,FUNCTION,1539, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1540, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1541, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1542, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1543, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1544, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1545, )
WS_ACT_HOST_SCRIPT,FUNCTION,1546, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1547, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1548, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1549, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1550, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1551, 'META_SERVER=${META_SERVER-'''||replace(coalesce(trim(v_meta_server),''),'''','''\''''')||'''}'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1552, );
WS_ACT_HOST_SCRIPT,FUNCTION,1553, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1554,
WS_ACT_HOST_SCRIPT,FUNCTION,1555, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1556, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1557, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1558, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1559, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1560, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1561, )
WS_ACT_HOST_SCRIPT,FUNCTION,1562, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1563, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1564, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1565, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1566, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1567, 'META_DBID=${META_DBID-${ORACLE_SID-'''||replace(coalesce(trim(v_meta_dbid),''),'''','''\''''')||'''}}'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1568, );
WS_ACT_HOST_SCRIPT,FUNCTION,1569, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1570,
WS_ACT_HOST_SCRIPT,FUNCTION,1571, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1572, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1573, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1574, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1575, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1576, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1577, )
WS_ACT_HOST_SCRIPT,FUNCTION,1578, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1579, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1580, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1581, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1582, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1583, 'META_DB=${META_DB-'''||replace(coalesce(trim(v_meta_db),''),'''','''\''''')||'''}'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1584, );
WS_ACT_HOST_SCRIPT,FUNCTION,1585, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1586,
WS_ACT_HOST_SCRIPT,FUNCTION,1587, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1588, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1589, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1590, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1591, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1592, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1593, )
WS_ACT_HOST_SCRIPT,FUNCTION,1594, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1595, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1596, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1597, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1598, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1599, 'META_SCHEMA=${META_SCHEMA-$(test "${DSS_USER+X}" && echo "${DSS_USER:+${DSS_USER}.}" || echo '''||replace(coalesce(trim(v_meta_schema),''),'''','''\''''')||''')}'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1600, );
WS_ACT_HOST_SCRIPT,FUNCTION,1601, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1602,
WS_ACT_HOST_SCRIPT,FUNCTION,1603, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1604, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1605, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1606, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1607, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1608, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1609, )
WS_ACT_HOST_SCRIPT,FUNCTION,1610, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1611, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1612, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1613, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1614, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1615, 'WORKDIR='''||replace(coalesce(trim(v_work_dir),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1616, );
WS_ACT_HOST_SCRIPT,FUNCTION,1617, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1618,
WS_ACT_HOST_SCRIPT,FUNCTION,1619, If v_param_obj_name IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,1620, FOR v_ParameterRec in (
WS_ACT_HOST_SCRIPT,FUNCTION,1621, SELECT *
WS_ACT_HOST_SCRIPT,FUNCTION,1622, FROM dss_parameter
WS_ACT_HOST_SCRIPT,FUNCTION,1623, WHERE UPPER(dss_parameter_name) LIKE UPPER(v_param_obj_name||'%')
WS_ACT_HOST_SCRIPT,FUNCTION,1624, ORDER BY dss_parameter_name
WS_ACT_HOST_SCRIPT,FUNCTION,1625, )
WS_ACT_HOST_SCRIPT,FUNCTION,1626, LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,1627, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1628, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1629, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1630, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1631, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1632, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1633, )
WS_ACT_HOST_SCRIPT,FUNCTION,1634, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1635, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1636, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1637, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1638, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1639, 'PARAM'||substr(v_ParameterRec.dss_parameter_name,length(v_param_obj_name)+1)||'='''||replace(coalesce(trim(v_ParameterRec.dss_parameter_value),''),'''','''\''''')||''''||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1640, );
WS_ACT_HOST_SCRIPT,FUNCTION,1641, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1642, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,1643, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1644,
WS_ACT_HOST_SCRIPT,FUNCTION,1645, -- Write a line to delimit the environment variable setting code from the body of the script
WS_ACT_HOST_SCRIPT,FUNCTION,1646, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1647, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1648, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1649, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1650, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1651, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1652, )
WS_ACT_HOST_SCRIPT,FUNCTION,1653, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1654, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1655, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1656, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1657, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1658, 'exit 1 # ~~WSL_CUT_HERE~~'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1659, );
WS_ACT_HOST_SCRIPT,FUNCTION,1660, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1661,
WS_ACT_HOST_SCRIPT,FUNCTION,1662, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,1663,
WS_ACT_HOST_SCRIPT,FUNCTION,1664, IF p_obj_type = v_ws_obj_export THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1665,
WS_ACT_HOST_SCRIPT,FUNCTION,1666, If v_load_type = 'P' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1667, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1668, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1669, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1670, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1671, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1672, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1673, )
WS_ACT_HOST_SCRIPT,FUNCTION,1674, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1675, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1676, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1677, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1678, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1679, 'if (-not (Test-Path "env:WSL_EXP_SCHEMA")) { ${env:WSL_EXP_SCHEMA} = '''||coalesce(trim(v_exp_source_schema),'')||''' }'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1680, );
WS_ACT_HOST_SCRIPT,FUNCTION,1681, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1682, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1683, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1684, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1685, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1686, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1687, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1688, )
WS_ACT_HOST_SCRIPT,FUNCTION,1689, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1690, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1691, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1692, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1693, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1694, 'if not defined WSL_EXP_SCHEMA SET WSL_EXP_SCHEMA='||coalesce(trim(v_exp_source_schema),'')||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1695, );
WS_ACT_HOST_SCRIPT,FUNCTION,1696, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1697, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1698,
WS_ACT_HOST_SCRIPT,FUNCTION,1699, ELSIF p_obj_type = v_ws_obj_load THEN
WS_ACT_HOST_SCRIPT,FUNCTION,1700,
WS_ACT_HOST_SCRIPT,FUNCTION,1701, If v_load_type = 'P' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1702, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1703, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1704, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1705, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1706, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1707, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1708, )
WS_ACT_HOST_SCRIPT,FUNCTION,1709, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1710, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1711, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1712, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1713, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1714, 'if (-not (Test-Path "env:WSL_LOAD_SCHEMA")) { ${env:WSL_LOAD_SCHEMA} = '''||coalesce(trim(v_load_table_schema),'')||''' }'||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1715, );
WS_ACT_HOST_SCRIPT,FUNCTION,1716, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1717, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1718, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1719, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1720, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1721, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1722, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1723, )
WS_ACT_HOST_SCRIPT,FUNCTION,1724, VALUES (
WS_ACT_HOST_SCRIPT,FUNCTION,1725, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1726, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1727, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1728, v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1729, 'if not defined WSL_LOAD_SCHEMA SET WSL_LOAD_SCHEMA='||coalesce(trim(v_load_table_schema),'')||chr(10)
WS_ACT_HOST_SCRIPT,FUNCTION,1730, );
WS_ACT_HOST_SCRIPT,FUNCTION,1731, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1732, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1733,
WS_ACT_HOST_SCRIPT,FUNCTION,1734, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1735,
WS_ACT_HOST_SCRIPT,FUNCTION,1736, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,1737,
WS_ACT_HOST_SCRIPT,FUNCTION,1738, -- Insert all the remaining lines into the script.
WS_ACT_HOST_SCRIPT,FUNCTION,1739, INSERT INTO ws_wrk_task_scr_line (
WS_ACT_HOST_SCRIPT,FUNCTION,1740, wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1741, wtsl_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1742, wtsl_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1743, wtsl_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,1744, wtsl_line
WS_ACT_HOST_SCRIPT,FUNCTION,1745, )
WS_ACT_HOST_SCRIPT,FUNCTION,1746, SELECT
WS_ACT_HOST_SCRIPT,FUNCTION,1747, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1748, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1749, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1750, v_line_no + (sl_line_no - v_min_line_no),
WS_ACT_HOST_SCRIPT,FUNCTION,1751, NVL(WsParameterReplace(sl_line,4000),sl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,1752, FROM ws_scr_line
WS_ACT_HOST_SCRIPT,FUNCTION,1753, WHERE sl_obj_key = v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,1754, AND sl_line_no >= v_min_line_no;
WS_ACT_HOST_SCRIPT,FUNCTION,1755,
WS_ACT_HOST_SCRIPT,FUNCTION,1756, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1757, -- Write out the task script header
WS_ACT_HOST_SCRIPT,FUNCTION,1758, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1759, v_step := 800;
WS_ACT_HOST_SCRIPT,FUNCTION,1760, Insert into ws_wrk_task_scr_hdr (
WS_ACT_HOST_SCRIPT,FUNCTION,1761, wtsh_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1762, wtsh_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1763, wtsh_name,
WS_ACT_HOST_SCRIPT,FUNCTION,1764, wtsh_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1765, wtsh_host_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1766, wtsh_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1767, wtsh_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1768, wtsh_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,1769, wtsh_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1770, wtsh_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1771, wtsh_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,1772, ) values (
WS_ACT_HOST_SCRIPT,FUNCTION,1773, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1774, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1775, p_task_name,
WS_ACT_HOST_SCRIPT,FUNCTION,1776, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1777, v_ConnectRec.dc_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1778, v_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1779, v_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1780, v_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,1781, v_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1782, v_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1783, v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,1784, );
WS_ACT_HOST_SCRIPT,FUNCTION,1785, COMMIT;
WS_ACT_HOST_SCRIPT,FUNCTION,1786,
WS_ACT_HOST_SCRIPT,FUNCTION,1787,
WS_ACT_HOST_SCRIPT,FUNCTION,1788, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1789, -- XML File based Load. Build the script header
WS_ACT_HOST_SCRIPT,FUNCTION,1790, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1791, ElsIf v_script_type = v_ws_load_xml Then
WS_ACT_HOST_SCRIPT,FUNCTION,1792, v_step := 1900;
WS_ACT_HOST_SCRIPT,FUNCTION,1793, v_connect_key := v_LoadRec.lt_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1794, v_load_key := p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1795, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,1796,
WS_ACT_HOST_SCRIPT,FUNCTION,1797, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1798, -- Get the work directory from the connection
WS_ACT_HOST_SCRIPT,FUNCTION,1799, -- If no Connection then we have a problem
WS_ACT_HOST_SCRIPT,FUNCTION,1800, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1801, v_step := 11000;
WS_ACT_HOST_SCRIPT,FUNCTION,1802, If v_connect_key > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1803, select * into v_ConnectRec
WS_ACT_HOST_SCRIPT,FUNCTION,1804, from ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,1805, where dc_obj_key = v_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1806, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1807, If v_script_type = v_ws_script_execute Then
WS_ACT_HOST_SCRIPT,FUNCTION,1808, p_return_msg := 'No connection defined. Unable to execute script';
WS_ACT_HOST_SCRIPT,FUNCTION,1809, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1810, p_return_msg := 'No connection defined. Unable to perform load';
WS_ACT_HOST_SCRIPT,FUNCTION,1811, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1812, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,1813, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,1814, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,1815, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1816,
WS_ACT_HOST_SCRIPT,FUNCTION,1817, v_step := 11100;
WS_ACT_HOST_SCRIPT,FUNCTION,1818, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1819, -- Unix XML load not supported
WS_ACT_HOST_SCRIPT,FUNCTION,1820, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1821, If v_ConnectRec.dc_type = 'U' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1822,
WS_ACT_HOST_SCRIPT,FUNCTION,1823, v_step := 11200;
WS_ACT_HOST_SCRIPT,FUNCTION,1824, p_return_msg := 'Unix based XML loads are not supported';
WS_ACT_HOST_SCRIPT,FUNCTION,1825, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,1826, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,1827, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,1828,
WS_ACT_HOST_SCRIPT,FUNCTION,1829, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1830, -- Windows XMLfile based load. Build a script header
WS_ACT_HOST_SCRIPT,FUNCTION,1831, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1832, ElsIf v_ConnectRec.dc_type = 'W' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1833,
WS_ACT_HOST_SCRIPT,FUNCTION,1834, -- Create a unique name for the ctrl files and log files
WS_ACT_HOST_SCRIPT,FUNCTION,1835, v_work_dir := v_ConnectRec.dc_work_dir;
WS_ACT_HOST_SCRIPT,FUNCTION,1836, If substr(v_work_dir,-1,1) <> '\' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1837, v_work_dir := v_work_dir || '\';
WS_ACT_HOST_SCRIPT,FUNCTION,1838, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1839,
WS_ACT_HOST_SCRIPT,FUNCTION,1840, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1841, -- Write out the task script header
WS_ACT_HOST_SCRIPT,FUNCTION,1842, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1843, Insert into ws_wrk_task_scr_hdr (
WS_ACT_HOST_SCRIPT,FUNCTION,1844, wtsh_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1845, wtsh_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1846, wtsh_name,
WS_ACT_HOST_SCRIPT,FUNCTION,1847, wtsh_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1848, wtsh_host_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1849, wtsh_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1850, wtsh_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1851, wtsh_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,1852, wtsh_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1853, wtsh_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1854, wtsh_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,1855, ) values (
WS_ACT_HOST_SCRIPT,FUNCTION,1856, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1857, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,1858, p_task_name,
WS_ACT_HOST_SCRIPT,FUNCTION,1859, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,1860, v_ConnectRec.dc_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1861, v_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1862, v_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,1863, v_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,1864, v_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1865, v_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,1866, v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,1867, );
WS_ACT_HOST_SCRIPT,FUNCTION,1868, COMMIT;
WS_ACT_HOST_SCRIPT,FUNCTION,1869, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1870,
WS_ACT_HOST_SCRIPT,FUNCTION,1871,-- XXXXXXXXXXX
WS_ACT_HOST_SCRIPT,FUNCTION,1872,
WS_ACT_HOST_SCRIPT,FUNCTION,1873, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1874, -- File based Load. Build the script below once we work
WS_ACT_HOST_SCRIPT,FUNCTION,1875, -- out if a Unix or Windows connection
WS_ACT_HOST_SCRIPT,FUNCTION,1876, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1877, ElsIf p_obj_type = v_ws_obj_load Then
WS_ACT_HOST_SCRIPT,FUNCTION,1878, v_step := 900;
WS_ACT_HOST_SCRIPT,FUNCTION,1879, v_connect_key := v_LoadRec.lt_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1880, v_load_key := p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1881, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,1882,
WS_ACT_HOST_SCRIPT,FUNCTION,1883, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1884, -- Get the work directory from the connection
WS_ACT_HOST_SCRIPT,FUNCTION,1885, -- If no Connection then we have a problem
WS_ACT_HOST_SCRIPT,FUNCTION,1886, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1887, v_step := 1000;
WS_ACT_HOST_SCRIPT,FUNCTION,1888, If v_connect_key > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1889, select * into v_ConnectRec
WS_ACT_HOST_SCRIPT,FUNCTION,1890, from ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,1891, where dc_obj_key = v_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,1892, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1893, If v_script_type = v_ws_script_execute Then
WS_ACT_HOST_SCRIPT,FUNCTION,1894, p_return_msg := 'No connection defined. Unable to execute script';
WS_ACT_HOST_SCRIPT,FUNCTION,1895, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1896, p_return_msg := 'No connection defined. Unable to perform load';
WS_ACT_HOST_SCRIPT,FUNCTION,1897, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1898, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,1899, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,1900, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,1901, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1902,
WS_ACT_HOST_SCRIPT,FUNCTION,1903, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1904, -- See if we have a record delimiter in the load_option field
WS_ACT_HOST_SCRIPT,FUNCTION,1905, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1906, v_step := 1099;
WS_ACT_HOST_SCRIPT,FUNCTION,1907, v_rec_delimiter := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1908, v_rec_enclosed := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1909, v_rec_options := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1910, v_file_charset := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1911, v_rec_when := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1912, If v_LoadRec.lt_load_options IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,1913, v_epos := Instr(v_LoadRec.lt_load_options,'REC_DELIM=');
WS_ACT_HOST_SCRIPT,FUNCTION,1914, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1915, v_spos := to_number(substr(v_LoadRec.lt_load_options,v_epos+10,4));
WS_ACT_HOST_SCRIPT,FUNCTION,1916, If v_spos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1917, v_rec_delimiter := substr(v_LoadRec.lt_load_options,v_epos+15,v_spos);
WS_ACT_HOST_SCRIPT,FUNCTION,1918, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1919, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1920, v_epos := Instr(v_LoadRec.lt_load_options,'ENCLOSED=');
WS_ACT_HOST_SCRIPT,FUNCTION,1921, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1922, v_spos := to_number(substr(v_LoadRec.lt_load_options,v_epos+9,4));
WS_ACT_HOST_SCRIPT,FUNCTION,1923, If v_spos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1924, v_rec_enclosed := substr(v_LoadRec.lt_load_options,v_epos+14,v_spos);
WS_ACT_HOST_SCRIPT,FUNCTION,1925, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1926, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1927, v_epos := Instr(v_LoadRec.lt_load_options,'OPTIONS=');
WS_ACT_HOST_SCRIPT,FUNCTION,1928, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1929, v_spos := to_number(substr(v_LoadRec.lt_load_options,v_epos+8,4));
WS_ACT_HOST_SCRIPT,FUNCTION,1930, If v_spos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1931, v_rec_options := substr(v_LoadRec.lt_load_options,v_epos+13,v_spos);
WS_ACT_HOST_SCRIPT,FUNCTION,1932, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1933, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1934,
WS_ACT_HOST_SCRIPT,FUNCTION,1935, v_epos := Instr(v_LoadRec.lt_load_options,'CHARSET=');
WS_ACT_HOST_SCRIPT,FUNCTION,1936, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1937, v_spos := to_number(substr(v_LoadRec.lt_load_options,v_epos+8,4));
WS_ACT_HOST_SCRIPT,FUNCTION,1938, If v_spos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1939, v_file_charset := substr(v_LoadRec.lt_load_options,v_epos+13,v_spos);
WS_ACT_HOST_SCRIPT,FUNCTION,1940, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1941, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1942,
WS_ACT_HOST_SCRIPT,FUNCTION,1943, v_epos := Instr(v_LoadRec.lt_load_options,'COMPRESS_ON_RENAME;');
WS_ACT_HOST_SCRIPT,FUNCTION,1944, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1945, v_compress := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,1946, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1947,
WS_ACT_HOST_SCRIPT,FUNCTION,1948, If v_rec_options IS NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,1949, v_work := UPPER(v_rec_options);
WS_ACT_HOST_SCRIPT,FUNCTION,1950, v_epos := Instr(v_work,'WHEN');
WS_ACT_HOST_SCRIPT,FUNCTION,1951, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,1952, v_rec_when := replace(substr(v_rec_options,v_epos,9999),'>','^>');
WS_ACT_HOST_SCRIPT,FUNCTION,1953, v_rec_options := substr(v_rec_options,1,v_epos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,1954, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1955, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1956, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1957, v_rec_enclosed := '"';
WS_ACT_HOST_SCRIPT,FUNCTION,1958, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1959,
WS_ACT_HOST_SCRIPT,FUNCTION,1960, v_step := 1100;
WS_ACT_HOST_SCRIPT,FUNCTION,1961, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1962, -- U N I X U N I X
WS_ACT_HOST_SCRIPT,FUNCTION,1963, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1964, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1965, -- Unix file based load. Build a UNIX script
WS_ACT_HOST_SCRIPT,FUNCTION,1966, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,1967, If v_ConnectRec.dc_type = 'U' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1968,
WS_ACT_HOST_SCRIPT,FUNCTION,1969, v_step := 1200;
WS_ACT_HOST_SCRIPT,FUNCTION,1970, -- add a slash to any directory if required
WS_ACT_HOST_SCRIPT,FUNCTION,1971, v_work_dir := v_ConnectRec.dc_work_dir;
WS_ACT_HOST_SCRIPT,FUNCTION,1972, If substr(v_work_dir,-1,1) <> '/' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1973, v_work_dir := v_work_dir || '/';
WS_ACT_HOST_SCRIPT,FUNCTION,1974, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1975,
WS_ACT_HOST_SCRIPT,FUNCTION,1976, If v_LoadRec.lt_file_path is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,1977, If substr(v_LoadRec.lt_file_path,-1,1) <> '/' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1978, v_file_path := v_LoadRec.lt_file_path || '/';
WS_ACT_HOST_SCRIPT,FUNCTION,1979, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1980, v_file_path := v_LoadRec.lt_file_path;
WS_ACT_HOST_SCRIPT,FUNCTION,1981, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1982, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1983, v_file_path := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1984, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1985,
WS_ACT_HOST_SCRIPT,FUNCTION,1986, If v_LoadRec.lt_trig_path is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,1987, If substr(v_LoadRec.lt_trig_path,-1,1) <> '/' Then
WS_ACT_HOST_SCRIPT,FUNCTION,1988, v_trig_path := v_LoadRec.lt_trig_path || '/';
WS_ACT_HOST_SCRIPT,FUNCTION,1989, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1990, v_trig_path := v_LoadRec.lt_trig_path;
WS_ACT_HOST_SCRIPT,FUNCTION,1991, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1992, Else
WS_ACT_HOST_SCRIPT,FUNCTION,1993, v_trig_path := '';
WS_ACT_HOST_SCRIPT,FUNCTION,1994, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,1995,
WS_ACT_HOST_SCRIPT,FUNCTION,1996,
WS_ACT_HOST_SCRIPT,FUNCTION,1997, -- Create a unique name for the ctrl files and log files
WS_ACT_HOST_SCRIPT,FUNCTION,1998, v_script := v_work_dir||'wsl'||p_sequence||'j'||p_job_id||'t'||p_task_id;
WS_ACT_HOST_SCRIPT,FUNCTION,1999, If v_LoadRec.lt_file_header_line = 'Y' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2000, v_skip := 'skip=1 ';
WS_ACT_HOST_SCRIPT,FUNCTION,2001, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2002, v_skip := ' ';
WS_ACT_HOST_SCRIPT,FUNCTION,2003, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2004,
WS_ACT_HOST_SCRIPT,FUNCTION,2005,
WS_ACT_HOST_SCRIPT,FUNCTION,2006, -- If we have a trigger then use that as the lookup file
WS_ACT_HOST_SCRIPT,FUNCTION,2007, -- otherwise use the actual file
WS_ACT_HOST_SCRIPT,FUNCTION,2008, If v_LoadRec.lt_trig_name is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2009, v_lookfor := v_trig_path||v_LoadRec.lt_trig_name;
WS_ACT_HOST_SCRIPT,FUNCTION,2010, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2011, v_lookfor := v_file_path||v_LoadRec.lt_file_name;
WS_ACT_HOST_SCRIPT,FUNCTION,2012, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2013,
WS_ACT_HOST_SCRIPT,FUNCTION,2014, -- Use the shell configured in the connection, otherwise guess
WS_ACT_HOST_SCRIPT,FUNCTION,2015, -- based on the name of the connection
WS_ACT_HOST_SCRIPT,FUNCTION,2016, v_shell := null;
WS_ACT_HOST_SCRIPT,FUNCTION,2017, v_cpos := instr(v_ConnectRec.dc_attributes, 'ScriptShell~='); -- ScriptShell~=LENGTH;VALUE;
WS_ACT_HOST_SCRIPT,FUNCTION,2018, If v_cpos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2019, v_cpos := v_cpos + 13;
WS_ACT_HOST_SCRIPT,FUNCTION,2020, v_epos := instr(v_ConnectRec.dc_attributes, ';', v_cpos);
WS_ACT_HOST_SCRIPT,FUNCTION,2021, If v_epos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2022, v_work := substr(v_ConnectRec.dc_attributes, v_cpos, v_epos-v_cpos);
WS_ACT_HOST_SCRIPT,FUNCTION,2023, v_nlength := to_number(v_work);
WS_ACT_HOST_SCRIPT,FUNCTION,2024, If v_nlength > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2025, v_shell := '#!' || substr(v_ConnectRec.dc_attributes, v_epos+1, v_nlength);
WS_ACT_HOST_SCRIPT,FUNCTION,2026, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2027, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2028, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2029, If v_shell is null Then
WS_ACT_HOST_SCRIPT,FUNCTION,2030, If instr(upper(v_ConnectRec.dc_name),'LINUX') > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2031, v_shell := '#!/bin/sh';
WS_ACT_HOST_SCRIPT,FUNCTION,2032, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2033, v_shell := '#!/bin/ksh';
WS_ACT_HOST_SCRIPT,FUNCTION,2034, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2035, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2036,
WS_ACT_HOST_SCRIPT,FUNCTION,2037, -- Create the script
WS_ACT_HOST_SCRIPT,FUNCTION,2038, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2039, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2040, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2041, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2042, v_shell||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2043,
WS_ACT_HOST_SCRIPT,FUNCTION,2044, -- Do the waiting
WS_ACT_HOST_SCRIPT,FUNCTION,2045, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2046, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2047, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2048, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2049, 'WAITSECS='||v_LoadRec.lt_file_wait|| chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2050, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2051, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2052, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2053, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2054, 'if [ "$WAITSECS" -gt "0" ] '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2055, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2056, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2057, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2058, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2059, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2060, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2061, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2062, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2063, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2064, '  NOW_HH=`date +%H | bc`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2065, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2066, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2067, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2068, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2069, '  NOW_MM=`date +%M | bc`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2070, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2071, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2072, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2073, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2074, '  NOW_SS=`date +%S | bc`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2075, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2076, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2077, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2078, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2079, '  let NOW_HH="$NOW_HH * 3600"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2080, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2081, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2082, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2083, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2084, '  let NOW_MM="$NOW_MM * 60"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2085, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2086, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2087, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2088, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2089, '  let NOW_TIME="$NOW_HH + $NOW_MM + $NOW_SS"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2090, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2091, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2092, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2093, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2094, '  let TILL_TIME="$NOW_TIME + $WAITSECS"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2095, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2096, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2097, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2098, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2099, '  let START_TIME="$NOW_TIME"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2100, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2101, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2102, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2103, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2104, '  while [ "$NOW_TIME" -lt "$TILL_TIME" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2105, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2106, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2107, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2108, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2109, '  do '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2110, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2111, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2112, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2113, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2114,-- if [ -r ||v_lookfor|| ]||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2115, '    if [ `ls "'||v_LoadRec.lt_trig_path||'" | grep "'||
WS_ACT_HOST_SCRIPT,FUNCTION,2116, v_LoadRec.lt_trig_name||'" | wc -l` -gt "0" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2117, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2118, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2119, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2120, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2121, '    then '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2122, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2123, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2124, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2125, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2126, '      let NOW_TIME="$TILL_TIME"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2127, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2128, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2129, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2130, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2131, '    else '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2132, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2133, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2134, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2135, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2136, '      sleep 30 '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2137, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2138, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2139, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2140, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2141, '      NOW_HH=`date +%H | bc` '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2142, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2143, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2144, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2145, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2146, '      NOW_MM=`date +%M | bc` '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2147, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2148, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2149, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2150, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2151, '      NOW_SS=`date +%S | bc` '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2152, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2153, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2154, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2155, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2156, '      let NOW_HH="$NOW_HH * 3600" '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2157, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2158, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2159, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2160, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2161, '      let NOW_MM="$NOW_MM * 60" '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2162, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2163, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2164, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2165, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2166, '      let NOW_TIME="$NOW_HH + $NOW_MM + $NOW_SS" '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2167, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2168, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2169, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2170, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2171, '      if [ "$NOW_TIME" -lt "$START_TIME" ] '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2172, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2173, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2174, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2175, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2176, '      then '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2177, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2178, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2179, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2180, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2181, '        let NOW_TIME="$NOW_TIME + 86400" '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2182, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2183, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2184, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2185, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2186, '      fi '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2187, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2188, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2189, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2190, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2191, '    fi '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2192, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2193, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2194, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2195, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2196, '  done '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2197, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2198, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2199, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2200, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2201, 'fi '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2202,
WS_ACT_HOST_SCRIPT,FUNCTION,2203, -- check that the file exists
WS_ACT_HOST_SCRIPT,FUNCTION,2204, -- use a loop in case of wild cards
WS_ACT_HOST_SCRIPT,FUNCTION,2205, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2206, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2207, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2208, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2209, 'FLIST=`find '||v_lookfor||' -print`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2210, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2211, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2212, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2213, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2214, 'if [ "$FLIST" = "" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2215, --v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2216, --Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2217, -- wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2218, --Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2219, -- if [ ! -r ||v_lookfor|| ]||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2220, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2221, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2222, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2223, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2224, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2225,
WS_ACT_HOST_SCRIPT,FUNCTION,2226, If upper(v_LoadRec.lt_wait_action) = 'S' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2227, v_action := '1';
WS_ACT_HOST_SCRIPT,FUNCTION,2228, ElsIf upper(v_LoadRec.lt_wait_action) = 'E' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2229, v_action := '-2';
WS_ACT_HOST_SCRIPT,FUNCTION,2230, ElsIf upper(v_LoadRec.lt_wait_action) = 'F' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2231, v_action := '-3';
WS_ACT_HOST_SCRIPT,FUNCTION,2232, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2233, v_action := '-1';
WS_ACT_HOST_SCRIPT,FUNCTION,2234, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2235, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2236, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2237, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2238, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2239, '  echo "'||v_action||'"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2240, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2241, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2242, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2243, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2244, '  echo "File '||v_lookfor||' was not found. No load"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2245, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2246, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2247, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2248, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2249, '  exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2250, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2251, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2252, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2253, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2254, 'fi'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2255,
WS_ACT_HOST_SCRIPT,FUNCTION,2256,
WS_ACT_HOST_SCRIPT,FUNCTION,2257, -- Get the first trigger file name
WS_ACT_HOST_SCRIPT,FUNCTION,2258, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2259, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2260, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2261, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2262, 'for ACTFILE in $FLIST'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2263, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2264, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2265, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2266, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2267, 'do'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2268,
WS_ACT_HOST_SCRIPT,FUNCTION,2269, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2270, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2271, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2272, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2273, '  TRIG_ACTFILE=$ACTFILE'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2274, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2275, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2276, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2277, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2278, '  break'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2279, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2280, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2281, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2282, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2283, 'done'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2284,
WS_ACT_HOST_SCRIPT,FUNCTION,2285, -- SID
WS_ACT_HOST_SCRIPT,FUNCTION,2286, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2287, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2288, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2289, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2290, 'if [ -z "$ORACLE_SID" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2291, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2292, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2293, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2294, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2295, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2296, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2297, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2298, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2299, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2300, '  SID=@'||v_ConnectRec.dc_database_id||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2301, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2302, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2303, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2304, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2305, 'else'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2306, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2307, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2308, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2309, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2310, '  SID=@$ORACLE_SID'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2311, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2312, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2313, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2314, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2315, 'fi'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2316, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2317, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2318, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2319, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2320, 'export SID'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2321,
WS_ACT_HOST_SCRIPT,FUNCTION,2322, -- handle the trigger parameters
WS_ACT_HOST_SCRIPT,FUNCTION,2323, If v_LoadRec.lt_trig_name is not NULL And
WS_ACT_HOST_SCRIPT,FUNCTION,2324, v_LoadRec.lt_trig_prefix is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2325,
WS_ACT_HOST_SCRIPT,FUNCTION,2326, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2327, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2328, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2329, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2330, 'sqlplus -s <<EOF >/dev/null'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2331, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2332, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2333, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2334, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2335, v_ConnectRec.dc_admin_userid||'/'||v_ConnectRec.dc_admin_pwd||'${SID}'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2336, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2337, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2338, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2339, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2340, 'set sqlprompt "";'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2341, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2342, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2343, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2344, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2345, 'set heading off;'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2346, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2347, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2348, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2349, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2350, 'set pagesize 0'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2351, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2352, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2353, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2354, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2355, 'set linesize 256'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2356, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2357, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2358, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2359, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2360, 'set trimspool on'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2361, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2362, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2363, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2364, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2365, 'set echo off;'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2366, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2367, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2368, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2369, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2370, 'update dss_parameter set dss_parameter_value = NULL'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2371, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2372, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2373, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2374, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2375, 'where dss_parameter_name like '''||v_LoadRec.lt_trig_prefix||'_%'''||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2376, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2377, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2378, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2379, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2380, 'exit;'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2381, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2382, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2383, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2384, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2385, 'EOF'||CHR(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2386, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2387, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2388, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2389, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2390, 'if [ "$'||chr(63)||'" -ne "0" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2391, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2392, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2393, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2394, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2395, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2396, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2397, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2398, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2399, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2400, '   echo "-1"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2401, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2402, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2403, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2404, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2405, '   echo "Parameter clear Sqlplus returned a non standard return code of $'||chr(63)||'"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2406, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2407, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2408, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2409, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2410, 'fi'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2411,
WS_ACT_HOST_SCRIPT,FUNCTION,2412, -- NOW LOADUP THE PARAMETERS
WS_ACT_HOST_SCRIPT,FUNCTION,2413, If v_LoadRec.lt_trig_delimiter is NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2414, v_fix := '\012';
WS_ACT_HOST_SCRIPT,FUNCTION,2415, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2416, v_fix := v_LoadRec.lt_trig_delimiter;
WS_ACT_HOST_SCRIPT,FUNCTION,2417, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2418, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2419, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2420, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2421, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2422, 'cat $TRIG_ACTFILE | tr "'||v_fix||
WS_ACT_HOST_SCRIPT,FUNCTION,2423, -- cat ||v_trig_path||v_LoadRec.lt_trig_name|| | tr ||v_fix||
WS_ACT_HOST_SCRIPT,FUNCTION,2424, '" "\012" >'||v_script||'.trg'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2425, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2426, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2427, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2428, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2429, 'TRIGNO=`cat '||v_script||'.trg'||' | wc -l | tr -d " "`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2430, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2431, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2432, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2433, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2434, 'if [ "$TRIGNO" != "0" ] '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2435, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2436, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2437, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2438, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2439, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2440, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2441, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2442, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2443, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2444, '  ROWNUM=0'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2445, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2446, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2447, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2448, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2449, '  while [ "$ROWNUM" -lt "$TRIGNO" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2450, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2451, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2452, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2453, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2454, '  do'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2455, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2456, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2457, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2458, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2459, '    let ROWNUM="$ROWNUM+1"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2460, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2461, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2462, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2463, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2464, '    TRIG_NO="'||v_LoadRec.lt_trig_prefix||'_$ROWNUM"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2465, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2466, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2467, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2468, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2469, '    TRIG_MSG=`cat '||v_script||'.trg | head -$ROWNUM | tail -1 | sed "s/''/''''/g"`'
WS_ACT_HOST_SCRIPT,FUNCTION,2470, ||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2471, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2472, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2473, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2474, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2475, '    sqlplus -s <<EOF1 >/dev/null'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2476, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2477, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2478, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2479, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2480, '    '||v_ConnectRec.dc_admin_userid||'/'||v_ConnectRec.dc_admin_pwd||'${SID}'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2481, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2482, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2483, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2484, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2485, '    variable x number;'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2486, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2487, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2488, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2489, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2490, '    exec :x := WsParameterWrite(''$TRIG_NO'',''$TRIG_MSG'',''load of '||
WS_ACT_HOST_SCRIPT,FUNCTION,2491, v_file_path||v_LoadRec.lt_file_name||''')'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2492, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2493, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2494, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2495, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2496, '    exit;'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2497, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2498, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2499, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2500, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2501, 'EOF1'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2502, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2503, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2504, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2505, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2506, '  done'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2507, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2508, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2509, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2510, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2511, 'fi'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2512,
WS_ACT_HOST_SCRIPT,FUNCTION,2513, End If; -- End of trigger processing
WS_ACT_HOST_SCRIPT,FUNCTION,2514,
WS_ACT_HOST_SCRIPT,FUNCTION,2515, -- Load the data using sqlldr
WS_ACT_HOST_SCRIPT,FUNCTION,2516,
WS_ACT_HOST_SCRIPT,FUNCTION,2517, -- SETUP the Loop in case of wildcards
WS_ACT_HOST_SCRIPT,FUNCTION,2518, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2519, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2520, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2521, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2522, 'FLIST=`find '||v_file_path||v_LoadRec.lt_file_name||' -print`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2523, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2524, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2525, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2526, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2527, 'for ACTFILE in $FLIST'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2528, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2529, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2530, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2531, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2532, 'do'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2533,
WS_ACT_HOST_SCRIPT,FUNCTION,2534, -- if options specified then add them
WS_ACT_HOST_SCRIPT,FUNCTION,2535, If v_rec_options is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2536, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2537, v_fix := 'echo "'||replace(v_rec_options,'"','\"')||'" >'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,2538, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2539, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2540, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,2541,
WS_ACT_HOST_SCRIPT,FUNCTION,2542, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2543, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2544, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2545, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2546, 'echo "load data" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2547, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2548, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2549, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2550, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2551, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2552, 'echo "load data" >'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2553, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2554,
WS_ACT_HOST_SCRIPT,FUNCTION,2555, -- if charset specified then add them
WS_ACT_HOST_SCRIPT,FUNCTION,2556, If v_file_charset is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2557, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2558, v_fix := 'echo "CHARACTERSET '||v_file_charset||'" >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,2559, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2560, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2561, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,2562, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2563,
WS_ACT_HOST_SCRIPT,FUNCTION,2564, -- see if we have a fixed length record
WS_ACT_HOST_SCRIPT,FUNCTION,2565, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2566, v_fix := 'echo "infile ''$ACTFILE'' ';
WS_ACT_HOST_SCRIPT,FUNCTION,2567, If substr(v_rec_delimiter,1,4) = 'FIX ' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2568, v_fix := v_fix || '\"' || v_rec_delimiter || '\"';
WS_ACT_HOST_SCRIPT,FUNCTION,2569, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2570, v_fix := v_fix || '" >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,2571, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2572, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2573, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,2574,
WS_ACT_HOST_SCRIPT,FUNCTION,2575,
WS_ACT_HOST_SCRIPT,FUNCTION,2576, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2577, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2578, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2579, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2580, 'echo "badfile '''||v_script||'.bad''" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2581, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2582, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,2583, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2584, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2585, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2586, 'echo "into table '||v_table_schema||'.'||v_LoadRec.lt_table_name||'" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2587, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,2588, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2589, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2590, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2591, 'echo "into table '||v_LoadRec.lt_table_name||'" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2592, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,2593,
WS_ACT_HOST_SCRIPT,FUNCTION,2594, If v_rec_when is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2595, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2596, v_fix := 'echo "'||v_rec_when||'" >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,2597, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2598, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2599, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,2600, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2601,
WS_ACT_HOST_SCRIPT,FUNCTION,2602, If v_LoadRec.lt_file_delimiter is Not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2603, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2604, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2605, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2606, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2607, 'echo "fields terminated by \"'||v_LoadRec.lt_file_delimiter||'\"" >>'
WS_ACT_HOST_SCRIPT,FUNCTION,2608, ||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2609,
WS_ACT_HOST_SCRIPT,FUNCTION,2610, If v_rec_enclosed is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2611, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2612, v_fix := 'echo "optionally enclosed by '''||replace(v_rec_enclosed,'"','\"')||'''" >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,2613, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2614, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2615, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,2616, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2617,-- v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2618,-- Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2619,-- wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2620,-- Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2621,-- echo optionally enclosed by \ >>||v_script||.ctl||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2622, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2623,
WS_ACT_HOST_SCRIPT,FUNCTION,2624, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2625, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2626, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2627, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2628, 'echo "trailing nullcols" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2629, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2630, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2631, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2632, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2633, 'echo "(" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2634,
WS_ACT_HOST_SCRIPT,FUNCTION,2635, --**************************************************************************************
WS_ACT_HOST_SCRIPT,FUNCTION,2636, -- See if a parsed file or single column
WS_ACT_HOST_SCRIPT,FUNCTION,2637, -- If a parsed file then get all the columns
WS_ACT_HOST_SCRIPT,FUNCTION,2638, --**************************************************************************************
WS_ACT_HOST_SCRIPT,FUNCTION,2639, If v_LoadRec.lt_file_parsed = 'Y' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2640, Select count(1) into v_col_count
WS_ACT_HOST_SCRIPT,FUNCTION,2641, From ws_load_col Where lc_obj_key = p_obj_key
WS_ACT_HOST_SCRIPT,FUNCTION,2642, And lc_src_column like 'COL%';
WS_ACT_HOST_SCRIPT,FUNCTION,2643, v_row := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2644, v_pos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2645, FOR v_ColRec in c_LoadCol LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,2646, v_fix := '';
WS_ACT_HOST_SCRIPT,FUNCTION,2647,
WS_ACT_HOST_SCRIPT,FUNCTION,2648, -- see if this is width based and if so add the width to the column
WS_ACT_HOST_SCRIPT,FUNCTION,2649, v_epos := Instr(v_ColRec.lc_src_column,'_width_');
WS_ACT_HOST_SCRIPT,FUNCTION,2650, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2651, v_spos := to_number(substr(v_ColRec.lc_src_column,v_epos+7));
WS_ACT_HOST_SCRIPT,FUNCTION,2652, If v_spos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2653, v_spos := v_spos-1+v_pos;
WS_ACT_HOST_SCRIPT,FUNCTION,2654, v_fix := v_fix||' position('||v_pos||':'||v_spos||')';
WS_ACT_HOST_SCRIPT,FUNCTION,2655, v_pos := v_spos+1;
WS_ACT_HOST_SCRIPT,FUNCTION,2656, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2657, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2658,
WS_ACT_HOST_SCRIPT,FUNCTION,2659,
WS_ACT_HOST_SCRIPT,FUNCTION,2660, IF v_ColRec.lc_transform_code is not Null
WS_ACT_HOST_SCRIPT,FUNCTION,2661, AND UPPER(v_ColRec.lc_transform_type) <> 'A' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2662, v_work := v_ColRec.lc_transform_code;
WS_ACT_HOST_SCRIPT,FUNCTION,2663, -- Get rid of any comments in the transform
WS_ACT_HOST_SCRIPT,FUNCTION,2664, v_t1pos := Instr(v_work,CHR(45)||CHR(45));
WS_ACT_HOST_SCRIPT,FUNCTION,2665, WHILE v_t1pos > 0 LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,2666, v_t2pos := Instr(v_work,CHR(10),v_t1pos);
WS_ACT_HOST_SCRIPT,FUNCTION,2667, IF v_t2pos > 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,2668, v_work2 := SUBSTR(v_work,1,v_t1pos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,2669, v_work := v_work2||SUBSTR(v_work,v_t2pos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,2670, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,2671, v_work := SUBSTR(v_work,1,v_t1pos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,2672, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,2673, v_t1pos := Instr(v_work,CHR(45)||CHR(45));
WS_ACT_HOST_SCRIPT,FUNCTION,2674, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,2675, v_work := replace(replace(v_work,CHR(13),''),CHR(10),''); -- RED_2771
WS_ACT_HOST_SCRIPT,FUNCTION,2676, v_work := LTRIM(RTRIM(v_work));
WS_ACT_HOST_SCRIPT,FUNCTION,2677, v_work := substr(replace(v_work,'%FILE_NAME%','$ACTFILE'),1,255);
WS_ACT_HOST_SCRIPT,FUNCTION,2678, v_fix := v_fix||' '||replace(v_work,'"','\"');
WS_ACT_HOST_SCRIPT,FUNCTION,2679, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2680, v_fix := v_fix||'';
WS_ACT_HOST_SCRIPT,FUNCTION,2681, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2682, v_row := v_row + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2683, If v_col_count = v_row Then
WS_ACT_HOST_SCRIPT,FUNCTION,2684, v_fix := v_fix||'';
WS_ACT_HOST_SCRIPT,FUNCTION,2685, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2686, v_fix := v_fix||',';
WS_ACT_HOST_SCRIPT,FUNCTION,2687, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2688, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2689, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2690, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2691, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2692, 'echo "'||v_ColRec.lc_col_name||v_fix||'">>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2693, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,2694, v_pos := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2695, v_spos := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2696, v_epos := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2697, Else -- single column load
WS_ACT_HOST_SCRIPT,FUNCTION,2698,
WS_ACT_HOST_SCRIPT,FUNCTION,2699, -- first see what columns we have
WS_ACT_HOST_SCRIPT,FUNCTION,2700, v_rowseq := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2701, v_rowname := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2702, FOR v_ColRec in c_LoadAll LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,2703, IF LOWER(v_ColRec.lc_col_name) = 'row_number' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2704, v_rowseq := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2705, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2706, IF LOWER(v_ColRec.lc_col_name) = 'row_file_name' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2707, v_rowname := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2708, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2709, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,2710,
WS_ACT_HOST_SCRIPT,FUNCTION,2711, IF v_rowseq = 1 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2712, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2713, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2714, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2715, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2716, 'echo  "row_number sequence(1,1)," >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2717, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,2718, IF v_rowname = 1 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,2719, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2720, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2721, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2722, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2723, 'echo  "row_data char(4000)," >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2724, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2725, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2726, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2727, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2728, 'echo  "row_file_name constant ''$ACTFILE''" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2729, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,2730, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2731, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2732, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2733, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2734, 'echo  "row_data char(4000)" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2735, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,2736, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2737,
WS_ACT_HOST_SCRIPT,FUNCTION,2738, -- Build the rest of the script
WS_ACT_HOST_SCRIPT,FUNCTION,2739, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2740, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2741, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2742, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2743, 'echo ")" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2744, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2745,
WS_ACT_HOST_SCRIPT,FUNCTION,2746, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2747, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2748, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2749, 'sqlldr userid='||v_ConnectRec.dc_admin_userid||'/\"'||v_ConnectRec.dc_admin_pwd||'\"'
WS_ACT_HOST_SCRIPT,FUNCTION,2750, ||'${SID} control='||v_script
WS_ACT_HOST_SCRIPT,FUNCTION,2751, ||'.ctl '||v_skip||'silent=HEADER,FEEDBACK log='||v_script||'.log >> '||v_script||'.log'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2752, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2753, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2754, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2755, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2756, 'retcode=`echo $'||chr(63)||'` '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2757, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2758, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2759, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2760, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2761, 'rows=`cat '||v_script||'.log | grep Rows | grep success`'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2762, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2763, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2764, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2765, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2766, 'case "$retcode" in '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2767, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2768, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2769, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2770, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2771, '0) echo "1"; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2772, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2773, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,2774, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2775, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2776, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2777, '    echo "'||v_table_schema||'.'||v_LoadRec.lt_table_name||' completed. $rows"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2778, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,2779, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2780, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2781, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2782, '    echo "'||v_LoadRec.lt_table_name||' completed. $rows"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2783, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,2784, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2785, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2786, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2787, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2788, '  ;; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2789, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2790, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2791, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2792, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2793, '2) echo "-1"; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2794, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2795, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2796, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2797, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2798, '    echo "Not all rows loaded. $rows. see error trail" ;'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2799, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2800, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2801, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2802, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2803, '    cat '||v_script||'.log | grep Rows'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2804, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2805,
WS_ACT_HOST_SCRIPT,FUNCTION,2806, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2807, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2808, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2809, '    cat '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2810, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2811, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2812, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2813, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2814, '    ;; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2815, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2816, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2817, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2818, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2819, '1) echo "-2"; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2820, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2821, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2822, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2823, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2824, '    echo "SQL*Loader execution exited with EX_FAIL, see error trail";'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2825, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2826, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2827, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2828, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2829, '    cat '||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2830, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2831, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2832, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2833, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2834, '     ;; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2835, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2836, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2837, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2838, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2839, '3) echo "-3"; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2840, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2841, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2842, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2843, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2844, '    echo "SQL*Loader execution encountered a fatal error" '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2845, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2846, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2847, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2848, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2849, '    cat '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2850, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2851, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2852, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2853, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2854, '    ;; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2855, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2856, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2857, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2858, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2859, '*) echo "-3";'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2860, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2861, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2862, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2863, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2864, '    echo "SQL*Loader unknown return code"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2865, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2866, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2867, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2868, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2869, '    cat '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2870, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2871, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2872, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2873, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2874, '    ;; '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2875, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2876, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2877, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2878, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2879, 'esac '||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2880,
WS_ACT_HOST_SCRIPT,FUNCTION,2881, v_step := 1300;
WS_ACT_HOST_SCRIPT,FUNCTION,2882,
WS_ACT_HOST_SCRIPT,FUNCTION,2883, -- Do any renames required
WS_ACT_HOST_SCRIPT,FUNCTION,2884, If v_LoadRec.lt_trig_name_rename is not NULL Or
WS_ACT_HOST_SCRIPT,FUNCTION,2885, v_LoadRec.lt_trig_path_rename is not NULL Or
WS_ACT_HOST_SCRIPT,FUNCTION,2886, v_LoadRec.lt_file_name_rename is not NULL Or
WS_ACT_HOST_SCRIPT,FUNCTION,2887, v_LoadRec.lt_file_path_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2888,
WS_ACT_HOST_SCRIPT,FUNCTION,2889, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2890, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2891, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2892, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2893, 'if [ "$retcode" -eq "0" -o "$retcode" -eq "2" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2894, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2895, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2896, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2897, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2898, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2899,
WS_ACT_HOST_SCRIPT,FUNCTION,2900, v_step := 2300;
WS_ACT_HOST_SCRIPT,FUNCTION,2901, If v_LoadRec.lt_trig_name_rename is not NULL Or
WS_ACT_HOST_SCRIPT,FUNCTION,2902, v_LoadRec.lt_trig_path_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2903,
WS_ACT_HOST_SCRIPT,FUNCTION,2904,-- If v_LoadRec.lt_trig_name_rename is NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2905,-- v_trig_rename := v_LoadRec.lt_trig_name;
WS_ACT_HOST_SCRIPT,FUNCTION,2906,-- Else
WS_ACT_HOST_SCRIPT,FUNCTION,2907, v_trig_rename := v_LoadRec.lt_trig_name_rename;
WS_ACT_HOST_SCRIPT,FUNCTION,2908,-- End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2909, If v_LoadRec.lt_trig_path_rename is NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2910, v_trig_repath := v_LoadRec.lt_trig_path;
WS_ACT_HOST_SCRIPT,FUNCTION,2911, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2912, v_trig_repath := v_LoadRec.lt_trig_path_rename;
WS_ACT_HOST_SCRIPT,FUNCTION,2913, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2914,
WS_ACT_HOST_SCRIPT,FUNCTION,2915,
WS_ACT_HOST_SCRIPT,FUNCTION,2916, v_step := 2400;
WS_ACT_HOST_SCRIPT,FUNCTION,2917, -- find a matching pair of $ signs in the rename file name
WS_ACT_HOST_SCRIPT,FUNCTION,2918, -- and handle a sequence, YYYY, MM, DD, HH, MI, SS
WS_ACT_HOST_SCRIPT,FUNCTION,2919, v_rename := '';
WS_ACT_HOST_SCRIPT,FUNCTION,2920, v_spos := instr(v_trig_rename,'$',1,1);
WS_ACT_HOST_SCRIPT,FUNCTION,2921, If v_spos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2922, v_epos := instr(v_trig_rename,'$',1,2);
WS_ACT_HOST_SCRIPT,FUNCTION,2923, If v_epos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2924, v_command := substr(v_trig_rename,v_spos+1,v_epos-v_spos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,2925, If upper(v_command) = 'SEQUENCE' Then
WS_ACT_HOST_SCRIPT,FUNCTION,2926, If v_file_seq = 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2927, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,2928, Select ws_file_seq.NextVal into v_file_seq from dual;
WS_ACT_HOST_SCRIPT,FUNCTION,2929, v_rename := '  REFILE='||v_file_seq;
WS_ACT_HOST_SCRIPT,FUNCTION,2930, v_trig_rename := v_trig_rename||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,2931, EXCEPTION WHEN OTHERS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,2932, v_rename := '  REFILE=`date +%Y%m%d%H%M%S`';
WS_ACT_HOST_SCRIPT,FUNCTION,2933, v_trig_rename := v_trig_rename||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,2934, v_file_seq := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,2935, END;
WS_ACT_HOST_SCRIPT,FUNCTION,2936, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2937, v_rename := '  REFILE=`date +%Y%m%d%H%M%S`';
WS_ACT_HOST_SCRIPT,FUNCTION,2938, v_trig_rename := v_trig_rename||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,2939, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2940, Else
WS_ACT_HOST_SCRIPT,FUNCTION,2941, v_step := 2500;
WS_ACT_HOST_SCRIPT,FUNCTION,2942, If instr(v_command,'YYYY') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2943, v_rename := v_rename||'%Y';
WS_ACT_HOST_SCRIPT,FUNCTION,2944, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2945, If instr(v_command,'MM') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2946, v_rename := v_rename||'%m';
WS_ACT_HOST_SCRIPT,FUNCTION,2947, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2948, If instr(v_command,'DD') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2949, v_rename := v_rename||'%d';
WS_ACT_HOST_SCRIPT,FUNCTION,2950, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2951, If instr(v_command,'HH') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2952, v_rename := v_rename||'%H';
WS_ACT_HOST_SCRIPT,FUNCTION,2953, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2954, If instr(v_command,'MI') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2955, v_rename := v_rename||'%M';
WS_ACT_HOST_SCRIPT,FUNCTION,2956, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2957, If instr(v_command,'SS') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2958, v_rename := v_rename||'%S';
WS_ACT_HOST_SCRIPT,FUNCTION,2959, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2960,
WS_ACT_HOST_SCRIPT,FUNCTION,2961, If v_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2962, v_step := 2600;
WS_ACT_HOST_SCRIPT,FUNCTION,2963, v_work := '';
WS_ACT_HOST_SCRIPT,FUNCTION,2964, v_rename := '  REFILE=`date +'||v_rename||'`';
WS_ACT_HOST_SCRIPT,FUNCTION,2965, v_step := 2700;
WS_ACT_HOST_SCRIPT,FUNCTION,2966, If v_spos > 1 Then
WS_ACT_HOST_SCRIPT,FUNCTION,2967, v_work := substr(v_trig_rename,1,v_spos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,2968, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2969, v_step := 2800;
WS_ACT_HOST_SCRIPT,FUNCTION,2970, v_work := v_work||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,2971, v_step := 2900;
WS_ACT_HOST_SCRIPT,FUNCTION,2972, If v_epos < length(v_trig_rename) Then
WS_ACT_HOST_SCRIPT,FUNCTION,2973, v_work := v_work||substr(v_trig_rename,v_epos+1,length(v_trig_rename)-v_epos);
WS_ACT_HOST_SCRIPT,FUNCTION,2974, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2975, v_trig_rename := v_work;
WS_ACT_HOST_SCRIPT,FUNCTION,2976, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2977,
WS_ACT_HOST_SCRIPT,FUNCTION,2978, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2979, End If; -- end of epos found
WS_ACT_HOST_SCRIPT,FUNCTION,2980, End If; -- end of spos found
WS_ACT_HOST_SCRIPT,FUNCTION,2981, If v_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,2982, v_step := 3000;
WS_ACT_HOST_SCRIPT,FUNCTION,2983, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2984, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2985, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2986, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2987, v_rename||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2988, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,2989,
WS_ACT_HOST_SCRIPT,FUNCTION,2990, v_step := 3100;
WS_ACT_HOST_SCRIPT,FUNCTION,2991, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2992, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,2993, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,2994, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,2995, '  mv $TRIG_ACTFILE '||v_trig_repath||v_trig_rename||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2996,-- mv ||v_trig_path||v_LoadRec.lt_trig_name||
WS_ACT_HOST_SCRIPT,FUNCTION,2997,-- ||v_trig_repath||v_trig_rename||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,2998, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,2999, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3000, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3001, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3002, '  echo "$TRIG_ACTFILE renamed to '||v_trig_repath||v_trig_rename||'"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3003,-- echo ||v_trig_path||v_LoadRec.lt_trig_name||
WS_ACT_HOST_SCRIPT,FUNCTION,3004,-- renamed to ||v_trig_repath||v_trig_rename||||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3005,
WS_ACT_HOST_SCRIPT,FUNCTION,3006, End If; -- end of trigger rename
WS_ACT_HOST_SCRIPT,FUNCTION,3007,
WS_ACT_HOST_SCRIPT,FUNCTION,3008,
WS_ACT_HOST_SCRIPT,FUNCTION,3009, v_step := 1400;
WS_ACT_HOST_SCRIPT,FUNCTION,3010, If v_LoadRec.lt_file_name_rename is not NULL Or
WS_ACT_HOST_SCRIPT,FUNCTION,3011, v_LoadRec.lt_file_path_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3012,
WS_ACT_HOST_SCRIPT,FUNCTION,3013, -- wont work if a wild card in the file name
WS_ACT_HOST_SCRIPT,FUNCTION,3014,-- If v_LoadRec.lt_file_name_rename is NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3015,-- v_file_rename := v_LoadRec.lt_file_name;
WS_ACT_HOST_SCRIPT,FUNCTION,3016,-- Else
WS_ACT_HOST_SCRIPT,FUNCTION,3017, v_file_rename := v_LoadRec.lt_file_name_rename;
WS_ACT_HOST_SCRIPT,FUNCTION,3018,-- End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3019, If v_LoadRec.lt_file_path_rename is NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3020, v_file_repath := v_LoadRec.lt_file_path;
WS_ACT_HOST_SCRIPT,FUNCTION,3021, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3022, v_file_repath := v_LoadRec.lt_file_path_rename;
WS_ACT_HOST_SCRIPT,FUNCTION,3023, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3024,
WS_ACT_HOST_SCRIPT,FUNCTION,3025, v_step := 1500;
WS_ACT_HOST_SCRIPT,FUNCTION,3026, -- find a matching pair of $ signs in the rename file name
WS_ACT_HOST_SCRIPT,FUNCTION,3027, -- and handle a sequence, YYYY, MM, DD, HH, MI, SS
WS_ACT_HOST_SCRIPT,FUNCTION,3028, v_rename := '';
WS_ACT_HOST_SCRIPT,FUNCTION,3029, v_spos := instr(v_file_rename,'$',1,1);
WS_ACT_HOST_SCRIPT,FUNCTION,3030, If v_spos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3031, v_epos := instr(v_file_rename,'$',1,2);
WS_ACT_HOST_SCRIPT,FUNCTION,3032, If v_epos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3033, v_command := substr(v_file_rename,v_spos+1,v_epos-v_spos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,3034, If upper(v_command) = 'SEQUENCE' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3035, BEGIN
WS_ACT_HOST_SCRIPT,FUNCTION,3036, Select ws_file_seq.NextVal into v_file_seq from dual;
WS_ACT_HOST_SCRIPT,FUNCTION,3037, v_rename := '  REFILE='||v_file_seq;
WS_ACT_HOST_SCRIPT,FUNCTION,3038, v_file_rename := v_file_rename||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,3039, EXCEPTION WHEN OTHERS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3040, v_rename := '  REFILE=`date +%Y%m%d%H%M%S`';
WS_ACT_HOST_SCRIPT,FUNCTION,3041, v_file_rename := v_file_rename||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,3042, v_file_seq := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3043, END;
WS_ACT_HOST_SCRIPT,FUNCTION,3044, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3045, v_step := 1600;
WS_ACT_HOST_SCRIPT,FUNCTION,3046, If instr(v_command,'YYYY') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3047, v_rename := v_rename||'%Y';
WS_ACT_HOST_SCRIPT,FUNCTION,3048, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3049, If instr(v_command,'MM') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3050, v_rename := v_rename||'%m';
WS_ACT_HOST_SCRIPT,FUNCTION,3051, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3052, If instr(v_command,'DD') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3053, v_rename := v_rename||'%d';
WS_ACT_HOST_SCRIPT,FUNCTION,3054, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3055, If instr(v_command,'HH') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3056, v_rename := v_rename||'%H';
WS_ACT_HOST_SCRIPT,FUNCTION,3057, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3058, If instr(v_command,'MI') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3059, v_rename := v_rename||'%M';
WS_ACT_HOST_SCRIPT,FUNCTION,3060, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3061, If instr(v_command,'SS') <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3062, v_rename := v_rename||'%S';
WS_ACT_HOST_SCRIPT,FUNCTION,3063, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3064,
WS_ACT_HOST_SCRIPT,FUNCTION,3065, If v_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3066, v_step := 1700;
WS_ACT_HOST_SCRIPT,FUNCTION,3067, v_work := '';
WS_ACT_HOST_SCRIPT,FUNCTION,3068, v_rename := '  REFILE=`date +'||v_rename||'`';
WS_ACT_HOST_SCRIPT,FUNCTION,3069, v_step := 1800;
WS_ACT_HOST_SCRIPT,FUNCTION,3070, If v_spos > 1 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3071, v_work := substr(v_file_rename,1,v_spos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,3072, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3073, v_step := 1900;
WS_ACT_HOST_SCRIPT,FUNCTION,3074, v_work := v_work||'$REFILE';
WS_ACT_HOST_SCRIPT,FUNCTION,3075, v_step := 2000;
WS_ACT_HOST_SCRIPT,FUNCTION,3076, If v_epos < length(v_file_rename) Then
WS_ACT_HOST_SCRIPT,FUNCTION,3077, v_work := v_work||substr(v_file_rename,v_epos+1,length(v_file_rename)-v_epos);
WS_ACT_HOST_SCRIPT,FUNCTION,3078, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3079, v_file_rename := v_work;
WS_ACT_HOST_SCRIPT,FUNCTION,3080, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3081,
WS_ACT_HOST_SCRIPT,FUNCTION,3082, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3083, End If; -- end of epos found
WS_ACT_HOST_SCRIPT,FUNCTION,3084, End If; -- end of spos found
WS_ACT_HOST_SCRIPT,FUNCTION,3085, If v_rename is not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3086, v_step := 2100;
WS_ACT_HOST_SCRIPT,FUNCTION,3087, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3088, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3089, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3090, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3091, v_rename||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3092, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3093,
WS_ACT_HOST_SCRIPT,FUNCTION,3094, v_step := 2200;
WS_ACT_HOST_SCRIPT,FUNCTION,3095, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3096, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3097, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3098, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3099, '  mv $ACTFILE '||v_file_repath||v_file_rename||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3100, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3101, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3102, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3103, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3104, '  echo "$ACTFILE renamed to '||v_file_repath||v_file_rename||'"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3105,
WS_ACT_HOST_SCRIPT,FUNCTION,3106,
WS_ACT_HOST_SCRIPT,FUNCTION,3107, -- If compress set then compress the file
WS_ACT_HOST_SCRIPT,FUNCTION,3108, If v_compress = 1 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3109,
WS_ACT_HOST_SCRIPT,FUNCTION,3110, IF v_file_rename IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3111, v_work := v_file_rename;
WS_ACT_HOST_SCRIPT,FUNCTION,3112, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3113, v_work := v_LoadRec.lt_file_name;
WS_ACT_HOST_SCRIPT,FUNCTION,3114, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3115, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3116, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3117, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3118, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3119, '  compress '||v_file_repath||v_work||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3120, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3121, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3122, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3123, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3124, '  echo "compressed '||v_file_repath||v_work||'"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3125, End IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3126,
WS_ACT_HOST_SCRIPT,FUNCTION,3127,-- echo ||v_file_path||v_LoadRec.lt_file_name||
WS_ACT_HOST_SCRIPT,FUNCTION,3128,-- mv ||v_file_path||v_LoadRec.lt_file_name||
WS_ACT_HOST_SCRIPT,FUNCTION,3129,
WS_ACT_HOST_SCRIPT,FUNCTION,3130, End If; -- end of file rename
WS_ACT_HOST_SCRIPT,FUNCTION,3131,
WS_ACT_HOST_SCRIPT,FUNCTION,3132,
WS_ACT_HOST_SCRIPT,FUNCTION,3133,
WS_ACT_HOST_SCRIPT,FUNCTION,3134, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3135, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3136, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3137, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3138, 'fi'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3139, End If; -- end of renames
WS_ACT_HOST_SCRIPT,FUNCTION,3140,
WS_ACT_HOST_SCRIPT,FUNCTION,3141,
WS_ACT_HOST_SCRIPT,FUNCTION,3142, -- only process one file at this stage
WS_ACT_HOST_SCRIPT,FUNCTION,3143, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3144, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3145, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3146, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3147, 'break'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3148, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3149, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3150, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3151, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3152, 'done'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3153, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3154, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3155, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3156, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3157, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3158,
WS_ACT_HOST_SCRIPT,FUNCTION,3159, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3160, -- Write out the task script header
WS_ACT_HOST_SCRIPT,FUNCTION,3161, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3162, Insert into ws_wrk_task_scr_hdr (
WS_ACT_HOST_SCRIPT,FUNCTION,3163, wtsh_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3164, wtsh_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3165, wtsh_name,
WS_ACT_HOST_SCRIPT,FUNCTION,3166, wtsh_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,3167, wtsh_host_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3168, wtsh_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3169, wtsh_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3170, wtsh_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,3171, wtsh_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3172, wtsh_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3173, wtsh_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,3174, ) values (
WS_ACT_HOST_SCRIPT,FUNCTION,3175, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,3176, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,3177, p_task_name,
WS_ACT_HOST_SCRIPT,FUNCTION,3178, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,3179, v_ConnectRec.dc_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3180, v_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3181, v_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3182, v_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,3183, v_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3184, v_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3185, v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,3186, );
WS_ACT_HOST_SCRIPT,FUNCTION,3187, COMMIT;
WS_ACT_HOST_SCRIPT,FUNCTION,3188,
WS_ACT_HOST_SCRIPT,FUNCTION,3189, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3190, -- W I N D O W S W I N D O W S
WS_ACT_HOST_SCRIPT,FUNCTION,3191, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3192, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3193, -- Windows file based load. Build a windows script
WS_ACT_HOST_SCRIPT,FUNCTION,3194, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3195, ElsIf v_ConnectRec.dc_type = 'W' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3196,
WS_ACT_HOST_SCRIPT,FUNCTION,3197, -- Create a unique name for the ctrl files and log files
WS_ACT_HOST_SCRIPT,FUNCTION,3198, v_work_dir := v_ConnectRec.dc_work_dir;
WS_ACT_HOST_SCRIPT,FUNCTION,3199, If substr(v_work_dir,-1,1) <> '\' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3200, v_work_dir := v_work_dir || '\';
WS_ACT_HOST_SCRIPT,FUNCTION,3201, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3202, v_script := v_work_dir||'wsl'||p_sequence||'j'||p_job_id||'t'||p_task_id;
WS_ACT_HOST_SCRIPT,FUNCTION,3203, If v_LoadRec.lt_file_header_line = 'Y' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3204, v_skip := 'skip=1 ';
WS_ACT_HOST_SCRIPT,FUNCTION,3205, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3206, v_skip := ' ';
WS_ACT_HOST_SCRIPT,FUNCTION,3207, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3208,
WS_ACT_HOST_SCRIPT,FUNCTION,3209, -- see if wild cards in the file name
WS_ACT_HOST_SCRIPT,FUNCTION,3210, v_epos := Instr(v_LoadRec.lt_file_path||v_LoadRec.lt_file_name,'*');
WS_ACT_HOST_SCRIPT,FUNCTION,3211, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3212, v_wild := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3213, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3214, v_epos := Instr(v_LoadRec.lt_file_path||v_LoadRec.lt_file_name,CHR(63));
WS_ACT_HOST_SCRIPT,FUNCTION,3215, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3216, v_wild := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3217, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3218,
WS_ACT_HOST_SCRIPT,FUNCTION,3219, -- Create the script
WS_ACT_HOST_SCRIPT,FUNCTION,3220, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3221, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3222, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3223, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3224, '@echo off'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3225, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3226, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3227, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3228, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3229, 'setlocal enabledelayedexpansion'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3230, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3231, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3232, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3233, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3234, 'setlocal enableextensions'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3235,
WS_ACT_HOST_SCRIPT,FUNCTION,3236, -- SETUP the Loop in case of wildcards
WS_ACT_HOST_SCRIPT,FUNCTION,3237, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3238, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3239, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3240, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3241, 'SET /A RESULT_CODE = 1'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3242, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3243, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3244, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3245, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3246, 'SET RESULT_MSG=Load Completed'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3247, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3248, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3249, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3250, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3251, 'SET FILE_NAME=NO_MORE_FILES'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3252, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3253, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3254, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3255, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3256, 'SET LOAD_FILE="'||v_LoadRec.lt_file_path||v_LoadRec.lt_file_name||'"'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3257, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3258, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3259, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3260, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3261, 'for %%A in (%LOAD_FILE%) do if "!FILE_NAME!"=="NO_MORE_FILES" SET FILE_NAME=%%A'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3262, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3263, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3264, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3265, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3266, 'if "!FILE_NAME!"==NO_MORE_FILES goto LABEL_EXIT'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3267,
WS_ACT_HOST_SCRIPT,FUNCTION,3268, If v_LoadRec.lt_file_parsed is NULL OR v_LoadRec.lt_file_parsed <> 'Y' Then -- RED_2257
WS_ACT_HOST_SCRIPT,FUNCTION,3269, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3270, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3271, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3272, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3273, 'SET CONSTANT_FILE_NAME=%FILE_NAME:\=\\%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3274, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3275,
WS_ACT_HOST_SCRIPT,FUNCTION,3276, -- if options specified then add them
WS_ACT_HOST_SCRIPT,FUNCTION,3277, If v_rec_options is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3278, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3279, v_fix := 'echo '||v_rec_options||' >'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,3280, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3281, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3282, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,3283,
WS_ACT_HOST_SCRIPT,FUNCTION,3284, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3285, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3286, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3287, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3288, 'echo load data >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3289, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3290, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3291, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3292, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3293, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3294, 'echo load data >'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3295, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3296, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3297,
WS_ACT_HOST_SCRIPT,FUNCTION,3298, -- if charset specified then add them
WS_ACT_HOST_SCRIPT,FUNCTION,3299, If v_file_charset is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3300, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3301, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3302, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3303, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3304, 'echo CHARACTERSET ' || v_file_charset || ' >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3305, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3306, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3307,
WS_ACT_HOST_SCRIPT,FUNCTION,3308, -- see if we have a fixed length record
WS_ACT_HOST_SCRIPT,FUNCTION,3309, -- If a wild card in the file name then we wont have quote delimiters
WS_ACT_HOST_SCRIPT,FUNCTION,3310, -- any more
WS_ACT_HOST_SCRIPT,FUNCTION,3311, If v_wild = 1 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3312, v_fix := 'echo infile ''%FILE_NAME%'' ';
WS_ACT_HOST_SCRIPT,FUNCTION,3313, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3314, v_fix := 'echo infile %FILE_NAME% ';
WS_ACT_HOST_SCRIPT,FUNCTION,3315, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3316, If substr(v_rec_delimiter,1,4) = 'FIX ' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3317, v_fix := v_fix || '"' || v_rec_delimiter || '"';
WS_ACT_HOST_SCRIPT,FUNCTION,3318, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3319, v_fix := v_fix || ' >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,3320, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3321, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3322, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,3323,
WS_ACT_HOST_SCRIPT,FUNCTION,3324, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3325, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3326, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3327, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3328, 'echo badfile '''||v_script||'.bad'' >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3329, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3330, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3331, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3332, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3333, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3334, 'echo append into table '||v_table_schema||'.'||v_LoadRec.lt_table_name||' >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3335, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3336, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3337, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3338, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3339, 'echo append into table '||v_LoadRec.lt_table_name||' >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3340, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3341,
WS_ACT_HOST_SCRIPT,FUNCTION,3342, -- if when statement then add it
WS_ACT_HOST_SCRIPT,FUNCTION,3343, If v_rec_when is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3344, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3345, v_fix := 'echo '||v_rec_when ||' >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,3346, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3347, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3348, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,3349, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3350,
WS_ACT_HOST_SCRIPT,FUNCTION,3351, If v_LoadRec.lt_file_delimiter is Not NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3352, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3353, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3354, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3355, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3356, 'echo fields terminated by "'||v_LoadRec.lt_file_delimiter||'" >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3357, If v_rec_enclosed is NOT NULL Then
WS_ACT_HOST_SCRIPT,FUNCTION,3358, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3359, v_fix := 'echo optionally enclosed by '''||replace(v_rec_enclosed,'"','^"')||''' >>'||v_script||'.ctl'||chr(10);
WS_ACT_HOST_SCRIPT,FUNCTION,3360, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3361, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3362, Values (p_task_id, p_job_id, p_sequence,v_line_no,v_fix);
WS_ACT_HOST_SCRIPT,FUNCTION,3363, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3364,-- v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3365,-- Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3366,-- wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3367,-- Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3368,-- echo optionally enclosed by ^ >>||v_script||.ctl||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3369, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3370, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3371, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3372, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3373, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3374, 'echo trailing nullcols >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3375, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3376, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3377, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3378, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3379, 'echo ( >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3380,
WS_ACT_HOST_SCRIPT,FUNCTION,3381, --**************************************************************************************
WS_ACT_HOST_SCRIPT,FUNCTION,3382, -- See if a parsed file or single column
WS_ACT_HOST_SCRIPT,FUNCTION,3383, -- If a parsed file then get all the columns
WS_ACT_HOST_SCRIPT,FUNCTION,3384, --**************************************************************************************
WS_ACT_HOST_SCRIPT,FUNCTION,3385, If v_LoadRec.lt_file_parsed = 'Y' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3386, Select count(1) into v_col_count
WS_ACT_HOST_SCRIPT,FUNCTION,3387, From ws_load_col Where lc_obj_key = p_obj_key
WS_ACT_HOST_SCRIPT,FUNCTION,3388, And lc_src_column like 'COL%';
WS_ACT_HOST_SCRIPT,FUNCTION,3389, v_row := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3390, v_pos := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3391, FOR v_ColRec in c_LoadCol LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,3392, v_fix := '';
WS_ACT_HOST_SCRIPT,FUNCTION,3393,
WS_ACT_HOST_SCRIPT,FUNCTION,3394, -- see if this is width based and if so add the width to the column
WS_ACT_HOST_SCRIPT,FUNCTION,3395, v_epos := Instr(v_ColRec.lc_src_column,'_width_');
WS_ACT_HOST_SCRIPT,FUNCTION,3396, If v_epos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3397, v_spos := to_number(substr(v_ColRec.lc_src_column,v_epos+7));
WS_ACT_HOST_SCRIPT,FUNCTION,3398, If v_spos > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3399, v_spos := v_spos-1+v_pos;
WS_ACT_HOST_SCRIPT,FUNCTION,3400, v_fix := v_fix||' position('||v_pos||':'||v_spos||')';
WS_ACT_HOST_SCRIPT,FUNCTION,3401, v_pos := v_spos+1;
WS_ACT_HOST_SCRIPT,FUNCTION,3402, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3403, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3404,
WS_ACT_HOST_SCRIPT,FUNCTION,3405,
WS_ACT_HOST_SCRIPT,FUNCTION,3406, If v_ColRec.lc_transform_code is not Null
WS_ACT_HOST_SCRIPT,FUNCTION,3407, AND UPPER(v_ColRec.lc_transform_type) <> 'A' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3408, v_work := v_ColRec.lc_transform_code;
WS_ACT_HOST_SCRIPT,FUNCTION,3409, -- Get rid of any comments in the transform
WS_ACT_HOST_SCRIPT,FUNCTION,3410, v_t1pos := Instr(v_work,CHR(45)||CHR(45));
WS_ACT_HOST_SCRIPT,FUNCTION,3411, WHILE v_t1pos > 0 LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,3412, v_t2pos := Instr(v_work,CHR(10),v_t1pos);
WS_ACT_HOST_SCRIPT,FUNCTION,3413, IF v_t2pos > 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3414, v_work2 := SUBSTR(v_work,1,v_t1pos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,3415, v_work := v_work2||SUBSTR(v_work,v_t2pos+1,9999);
WS_ACT_HOST_SCRIPT,FUNCTION,3416, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3417, v_work := SUBSTR(v_work,1,v_t1pos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,3418, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3419, v_t1pos := Instr(v_work,CHR(45)||CHR(45));
WS_ACT_HOST_SCRIPT,FUNCTION,3420, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,3421, v_work := replace(replace(v_work,CHR(13),''),CHR(10),''); -- RED_2771
WS_ACT_HOST_SCRIPT,FUNCTION,3422, v_work := LTRIM(RTRIM(v_work));
WS_ACT_HOST_SCRIPT,FUNCTION,3423, v_fix := v_fix||' '||substr(v_work,1,255);
WS_ACT_HOST_SCRIPT,FUNCTION,3424, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3425, v_fix := v_fix||'';
WS_ACT_HOST_SCRIPT,FUNCTION,3426, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3427, v_row := v_row + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3428, If v_col_count = v_row Then
WS_ACT_HOST_SCRIPT,FUNCTION,3429, v_fix := v_fix||'';
WS_ACT_HOST_SCRIPT,FUNCTION,3430, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3431, v_fix := v_fix||',';
WS_ACT_HOST_SCRIPT,FUNCTION,3432, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3433, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3434, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3435, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3436, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3437, 'echo '||v_ColRec.lc_col_name||v_fix||'>>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3438, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,3439, Else -- single column load
WS_ACT_HOST_SCRIPT,FUNCTION,3440,
WS_ACT_HOST_SCRIPT,FUNCTION,3441, -- first see what columns we have
WS_ACT_HOST_SCRIPT,FUNCTION,3442, v_rowseq := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3443, v_rowname := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3444, FOR v_ColRec in c_LoadAll LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,3445, IF LOWER(v_ColRec.lc_col_name) = 'row_number' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3446, v_rowseq := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3447, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3448, IF LOWER(v_ColRec.lc_col_name) = 'row_file_name' Then
WS_ACT_HOST_SCRIPT,FUNCTION,3449, v_rowname := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3450, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3451, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,3452,
WS_ACT_HOST_SCRIPT,FUNCTION,3453, IF v_rowseq = 1 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3454, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3455, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3456, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3457, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3458, 'echo  row_number sequence(1,1), >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3459, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3460, IF v_rowname = 1 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3461, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3462, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3463, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3464, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3465, 'echo  row_data char(4000), >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3466, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3467, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3468, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3469, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3470, 'echo  row_file_name constant %CONSTANT_FILE_NAME% >>'||v_script||'.ctl'||chr(10)); -- RED_2257
WS_ACT_HOST_SCRIPT,FUNCTION,3471, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3472, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3473, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3474, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3475, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3476, 'echo  row_data char(4000) >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3477, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3478,
WS_ACT_HOST_SCRIPT,FUNCTION,3479, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3480,
WS_ACT_HOST_SCRIPT,FUNCTION,3481, -- Complete the script
WS_ACT_HOST_SCRIPT,FUNCTION,3482, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3483, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3484, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3485, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3486, 'echo ) >>'||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3487, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3488, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3489, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3490, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3491, 'sqlldr userid=%WSL_USER%/\"!WSL_PWD!\"' -- RED_4372
WS_ACT_HOST_SCRIPT,FUNCTION,3492, ||'@'||v_ConnectRec.dc_database_id||' > NUL control='||v_script
WS_ACT_HOST_SCRIPT,FUNCTION,3493, ||'.ctl '||v_skip||'silent=HEADER,FEEDBACK log='||v_script||'.log'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3494,
WS_ACT_HOST_SCRIPT,FUNCTION,3495, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3496, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3497, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3498, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3499, 'if %errorlevel% GTR 2 goto answerbad'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3500, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3501, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3502, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3503, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3504, 'if %errorlevel% LSS 0 goto answerbad'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3505,
WS_ACT_HOST_SCRIPT,FUNCTION,3506, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3507, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3508, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3509, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3510, 'goto answer%errorlevel%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3511,
WS_ACT_HOST_SCRIPT,FUNCTION,3512,
WS_ACT_HOST_SCRIPT,FUNCTION,3513, --SUCCESS
WS_ACT_HOST_SCRIPT,FUNCTION,3514, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3515, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3516, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3517, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3518, ':answer0'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3519, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3520, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3521, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3522, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3523, 'type '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3524, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3525, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3526, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3527, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3528, 'echo %RESULT_CODE%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3529, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3530, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3531, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3532, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3533, 'echo %RESULT_MSG%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3534, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3535, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3536, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3537, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3538, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3539,
WS_ACT_HOST_SCRIPT,FUNCTION,3540, -- WARNING
WS_ACT_HOST_SCRIPT,FUNCTION,3541, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3542, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3543, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3544, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3545, ':answer2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3546, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3547, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3548, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3549, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3550, 'SET /A RESULT_CODE=-1'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3551, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3552, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3553, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3554, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3555, 'SET RESULT_MSG=WARNING: Not all rows loaded. See error trail'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3556, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3557, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3558, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3559, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3560, 'type '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3561, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3562, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3563, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3564, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3565, 'echo %RESULT_CODE%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3566, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3567, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3568, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3569, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3570, 'echo %RESULT_MSG%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3571, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3572, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3573, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3574, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3575, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3576,
WS_ACT_HOST_SCRIPT,FUNCTION,3577, --ERROR
WS_ACT_HOST_SCRIPT,FUNCTION,3578, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3579, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3580, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3581, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3582, ':answer1'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3583, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3584, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3585, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3586, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3587, 'echo -2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3588, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3589, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3590, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3591, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3592, 'echo SQL*Loader execution exited with EX_FAIL, see error trail'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3593, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3594, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3595, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3596, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3597, 'type '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3598, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3599, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3600, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3601, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3602, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3603, --FATAL
WS_ACT_HOST_SCRIPT,FUNCTION,3604, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3605, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3606, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3607, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3608, ':answer3'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3609, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3610, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3611, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3612, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3613, 'echo -3'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3614, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3615, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3616, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3617, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3618, 'echo SQL*Loader execution encountered a fatal error'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3619, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3620, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3621, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3622, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3623, 'type '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3624, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3625, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3626, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3627, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3628, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3629, --FATAL
WS_ACT_HOST_SCRIPT,FUNCTION,3630, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3631, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3632, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3633, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3634, ':answerbad'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3635, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3636, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3637, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3638, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3639, 'echo -3'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3640, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3641, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3642, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3643, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3644, 'echo SQL*Loader execution encountered an unexpected fatal error'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3645, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3646, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3647, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3648, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3649, 'type '||v_script||'.log >' || Chr(38) || '2'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3650, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3651, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3652, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3653, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3654, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3655,
WS_ACT_HOST_SCRIPT,FUNCTION,3656, -- END OF LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,3657, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3658, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3659, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3660, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3661, ':LABEL_EXIT'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3662, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3663, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3664, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3665, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3666, 'echo %RESULT_CODE%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3667, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3668, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3669, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3670, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3671, 'echo %RESULT_MSG%'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3672, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3673, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3674, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3675, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3676, 'exit'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3677,
WS_ACT_HOST_SCRIPT,FUNCTION,3678, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3679, -- Write out the task script header
WS_ACT_HOST_SCRIPT,FUNCTION,3680, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3681, Insert into ws_wrk_task_scr_hdr (
WS_ACT_HOST_SCRIPT,FUNCTION,3682, wtsh_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3683, wtsh_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3684, wtsh_name,
WS_ACT_HOST_SCRIPT,FUNCTION,3685, wtsh_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,3686, wtsh_host_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3687, wtsh_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3688, wtsh_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3689, wtsh_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,3690, wtsh_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3691, wtsh_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3692, wtsh_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,3693, ) values (
WS_ACT_HOST_SCRIPT,FUNCTION,3694, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,3695, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,3696, p_task_name,
WS_ACT_HOST_SCRIPT,FUNCTION,3697, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,3698, v_ConnectRec.dc_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3699, v_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3700, v_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,3701, v_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,3702, v_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3703, v_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3704, v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,3705, );
WS_ACT_HOST_SCRIPT,FUNCTION,3706, COMMIT;
WS_ACT_HOST_SCRIPT,FUNCTION,3707, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3708,
WS_ACT_HOST_SCRIPT,FUNCTION,3709,
WS_ACT_HOST_SCRIPT,FUNCTION,3710, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3711, -- File based Export. Build the script below once we work
WS_ACT_HOST_SCRIPT,FUNCTION,3712, -- out if a Unix or Windows connection
WS_ACT_HOST_SCRIPT,FUNCTION,3713, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3714, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3715,
WS_ACT_HOST_SCRIPT,FUNCTION,3716, v_step := 900;
WS_ACT_HOST_SCRIPT,FUNCTION,3717, v_connect_key := v_ExpRec.et_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,3718, v_load_key := p_obj_key;
WS_ACT_HOST_SCRIPT,FUNCTION,3719, v_script_key := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3720,
WS_ACT_HOST_SCRIPT,FUNCTION,3721, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3722, -- Get the work directory from the connection
WS_ACT_HOST_SCRIPT,FUNCTION,3723, -- If no Connection then we have a problem
WS_ACT_HOST_SCRIPT,FUNCTION,3724, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3725, v_step := 1000;
WS_ACT_HOST_SCRIPT,FUNCTION,3726,
WS_ACT_HOST_SCRIPT,FUNCTION,3727, IF v_connect_key > 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3728, SELECT *
WS_ACT_HOST_SCRIPT,FUNCTION,3729, INTO v_ConnectRec
WS_ACT_HOST_SCRIPT,FUNCTION,3730, FROM ws_dbc_connect
WS_ACT_HOST_SCRIPT,FUNCTION,3731, WHERE dc_obj_key = v_connect_key;
WS_ACT_HOST_SCRIPT,FUNCTION,3732, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3733, IF v_script_type = v_ws_script_execute THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3734, p_return_msg := 'No connection defined. Unable to execute script';
WS_ACT_HOST_SCRIPT,FUNCTION,3735, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3736, p_return_msg := 'No connection defined. Unable to perform load';
WS_ACT_HOST_SCRIPT,FUNCTION,3737, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3738, p_status_code := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,3739, v_result := -2;
WS_ACT_HOST_SCRIPT,FUNCTION,3740, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,3741, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3742,
WS_ACT_HOST_SCRIPT,FUNCTION,3743, v_step := 1100;
WS_ACT_HOST_SCRIPT,FUNCTION,3744, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3745, -- Set Unix/DOS Differences variables
WS_ACT_HOST_SCRIPT,FUNCTION,3746, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3747, v_enclosed_by := v_ExpRec.et_enclosed_by;
WS_ACT_HOST_SCRIPT,FUNCTION,3748, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3749,
WS_ACT_HOST_SCRIPT,FUNCTION,3750, v_protector := '';
WS_ACT_HOST_SCRIPT,FUNCTION,3751, v_file_slash := '/';
WS_ACT_HOST_SCRIPT,FUNCTION,3752, v_str_quote := '"';
WS_ACT_HOST_SCRIPT,FUNCTION,3753, IF TRIM(v_enclosed_by) = v_str_quote THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3754, v_enclosed_by := '\"';
WS_ACT_HOST_SCRIPT,FUNCTION,3755, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3756,
WS_ACT_HOST_SCRIPT,FUNCTION,3757, ELSIF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3758,
WS_ACT_HOST_SCRIPT,FUNCTION,3759, v_protector := '^';
WS_ACT_HOST_SCRIPT,FUNCTION,3760, v_file_slash := '\';
WS_ACT_HOST_SCRIPT,FUNCTION,3761, v_str_quote := '';
WS_ACT_HOST_SCRIPT,FUNCTION,3762,
WS_ACT_HOST_SCRIPT,FUNCTION,3763, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3764,
WS_ACT_HOST_SCRIPT,FUNCTION,3765, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3766, -- File based export. Builds a UNIX or DOS script
WS_ACT_HOST_SCRIPT,FUNCTION,3767, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,3768,
WS_ACT_HOST_SCRIPT,FUNCTION,3769, -- Create a unique name for the ctrl files and log files
WS_ACT_HOST_SCRIPT,FUNCTION,3770, v_work_dir := v_ConnectRec.dc_work_dir;
WS_ACT_HOST_SCRIPT,FUNCTION,3771,
WS_ACT_HOST_SCRIPT,FUNCTION,3772, IF SUBSTR(v_work_dir,-1,1) <> v_file_slash THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3773, v_work_dir := v_work_dir || v_file_slash;
WS_ACT_HOST_SCRIPT,FUNCTION,3774, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3775,
WS_ACT_HOST_SCRIPT,FUNCTION,3776, v_script := v_work_dir||'wsl'||p_sequence||'j'||p_job_id||'t'||p_task_id;
WS_ACT_HOST_SCRIPT,FUNCTION,3777,
WS_ACT_HOST_SCRIPT,FUNCTION,3778, IF v_ExpRec.et_file_path IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3779, IF SUBSTR(v_ExpRec.et_file_path,-1,1) <> v_file_slash THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3780, v_file_path := v_ExpRec.et_file_path || v_file_slash;
WS_ACT_HOST_SCRIPT,FUNCTION,3781, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3782, v_file_path := v_ExpRec.et_file_path;
WS_ACT_HOST_SCRIPT,FUNCTION,3783, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3784, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3785, v_file_path := '';
WS_ACT_HOST_SCRIPT,FUNCTION,3786, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3787,
WS_ACT_HOST_SCRIPT,FUNCTION,3788, -- loop on a matching pair of $ signs in the file name
WS_ACT_HOST_SCRIPT,FUNCTION,3789, -- and handle a sequence, YYYY, MM, DD, HH, MI, SS
WS_ACT_HOST_SCRIPT,FUNCTION,3790, v_spos := INSTR(v_ExpRec.et_file_name,'$',1);
WS_ACT_HOST_SCRIPT,FUNCTION,3791, WHILE v_spos <> 0 LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,3792, v_epos := INSTR(v_ExpRec.et_file_name,'$',v_spos+1);
WS_ACT_HOST_SCRIPT,FUNCTION,3793, IF v_epos <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3794, v_command := SUBSTR(v_ExpRec.et_file_name,v_spos+1,v_epos-v_spos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,3795, v_new_command := v_command;
WS_ACT_HOST_SCRIPT,FUNCTION,3796, IF INSTR('SEQUENCE',v_new_command) <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3797, v_new_command := REPLACE(v_new_command,'SEQUENCE',TO_CHAR(p_sequence));
WS_ACT_HOST_SCRIPT,FUNCTION,3798, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3799, v_current_date := SYSDATE;
WS_ACT_HOST_SCRIPT,FUNCTION,3800, IF INSTR(v_new_command,'YYYY') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3801, v_new_command := REPLACE(v_new_command,'YYYY',TO_CHAR(v_current_date,'YYYY'));
WS_ACT_HOST_SCRIPT,FUNCTION,3802, ELSIF INSTR(v_new_command,'YY') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3803, v_new_command := REPLACE(v_new_command,'YY',TO_CHAR(v_current_date,'YY'));
WS_ACT_HOST_SCRIPT,FUNCTION,3804, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3805, IF INSTR(v_new_command,'MM') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3806, v_new_command := REPLACE(v_new_command,'MM',TO_CHAR(v_current_date,'MM'));
WS_ACT_HOST_SCRIPT,FUNCTION,3807, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3808, IF INSTR(v_new_command,'DD') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3809, v_new_command := REPLACE(v_new_command,'DD',TO_CHAR(v_current_date,'DD'));
WS_ACT_HOST_SCRIPT,FUNCTION,3810, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3811, IF INSTR(v_new_command,'HH') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3812, v_new_command := REPLACE(v_new_command,'HH',TO_CHAR(v_current_date,'HH'));
WS_ACT_HOST_SCRIPT,FUNCTION,3813, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3814, IF INSTR(v_new_command,'MI') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3815, v_new_command := REPLACE(v_new_command,'MI',TO_CHAR(v_current_date,'MI'));
WS_ACT_HOST_SCRIPT,FUNCTION,3816, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3817, IF INSTR(v_new_command,'SS') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3818, v_new_command := REPLACE(v_new_command,'SS',TO_CHAR(v_current_date,'SS'));
WS_ACT_HOST_SCRIPT,FUNCTION,3819, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3820, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3821, IF NVL(v_new_command,' ') <> ' ' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3822, v_ExpRec.et_file_name := REPLACE(v_ExpRec.et_file_name,'$'||v_command||'$',v_new_command);
WS_ACT_HOST_SCRIPT,FUNCTION,3823, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3824, END IF; -- END of epos found
WS_ACT_HOST_SCRIPT,FUNCTION,3825, IF ((NVL(v_new_command,' ') <> ' ') AND (v_epos <> 0)) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3826, v_spos := INSTR(v_ExpRec.et_file_name,'$',1);
WS_ACT_HOST_SCRIPT,FUNCTION,3827, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3828, v_spos := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3829, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3830, END LOOP; -- END of spos while
WS_ACT_HOST_SCRIPT,FUNCTION,3831,
WS_ACT_HOST_SCRIPT,FUNCTION,3832, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3833, v_line := '@echo off';
WS_ACT_HOST_SCRIPT,FUNCTION,3834, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3835, -- Use the shell configured in the connection, otherwise guess
WS_ACT_HOST_SCRIPT,FUNCTION,3836, -- based on the name of the connection
WS_ACT_HOST_SCRIPT,FUNCTION,3837, v_shell := null;
WS_ACT_HOST_SCRIPT,FUNCTION,3838, v_cpos := instr(v_ConnectRec.dc_attributes, 'ScriptShell~='); -- ScriptShell~=LENGTH;VALUE;
WS_ACT_HOST_SCRIPT,FUNCTION,3839, If v_cpos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3840, v_cpos := v_cpos + 13;
WS_ACT_HOST_SCRIPT,FUNCTION,3841, v_epos := instr(v_ConnectRec.dc_attributes, ';', v_cpos);
WS_ACT_HOST_SCRIPT,FUNCTION,3842, If v_epos <> 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3843, v_work := substr(v_ConnectRec.dc_attributes, v_cpos, v_epos-v_cpos);
WS_ACT_HOST_SCRIPT,FUNCTION,3844, v_nlength := to_number(v_work);
WS_ACT_HOST_SCRIPT,FUNCTION,3845, If v_nlength > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3846, v_shell := '#!' || substr(v_ConnectRec.dc_attributes, v_epos+1, v_nlength);
WS_ACT_HOST_SCRIPT,FUNCTION,3847, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3848, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3849, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3850, If v_shell is null Then
WS_ACT_HOST_SCRIPT,FUNCTION,3851, If instr(upper(v_ConnectRec.dc_name),'LINUX') > 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,3852, v_line := '#!/bin/sh';
WS_ACT_HOST_SCRIPT,FUNCTION,3853, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3854, v_line := '#!/bin/ksh';
WS_ACT_HOST_SCRIPT,FUNCTION,3855, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3856, Else
WS_ACT_HOST_SCRIPT,FUNCTION,3857, v_line := v_shell;
WS_ACT_HOST_SCRIPT,FUNCTION,3858, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,3859, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3860, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3861, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3862, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3863, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3864, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3865,
WS_ACT_HOST_SCRIPT,FUNCTION,3866, v_line := 'set pages '||v_protector||'0 ';
WS_ACT_HOST_SCRIPT,FUNCTION,3867, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3868, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3869, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3870, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3871, 'echo '||v_str_quote||v_line||v_str_quote||' > '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3872,
WS_ACT_HOST_SCRIPT,FUNCTION,3873, v_line := 'set lines 32767';
WS_ACT_HOST_SCRIPT,FUNCTION,3874, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3875, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3876, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3877, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3878, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3879,
WS_ACT_HOST_SCRIPT,FUNCTION,3880, v_line := 'set feed off';
WS_ACT_HOST_SCRIPT,FUNCTION,3881, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3882, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3883, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3884, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3885, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3886,
WS_ACT_HOST_SCRIPT,FUNCTION,3887, v_line := 'set term off';
WS_ACT_HOST_SCRIPT,FUNCTION,3888, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3889, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3890, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3891, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3892, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3893,
WS_ACT_HOST_SCRIPT,FUNCTION,3894, v_line := 'set trimspool on';
WS_ACT_HOST_SCRIPT,FUNCTION,3895, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3896, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3897, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3898, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3899, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3900,
WS_ACT_HOST_SCRIPT,FUNCTION,3901, IF ( TRIM(v_ExpRec.et_export_options) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3902, v_line := TRIM(v_ExpRec.et_export_options);
WS_ACT_HOST_SCRIPT,FUNCTION,3903, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3904, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3905, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3906, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3907, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3908, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3909,
WS_ACT_HOST_SCRIPT,FUNCTION,3910, -- SID
WS_ACT_HOST_SCRIPT,FUNCTION,3911, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3912, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3913, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3914, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3915, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3916, 'if [ -z "$ORACLE_SID" ]'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3917, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3918, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3919, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3920, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3921, 'then'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3922, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3923, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3924, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3925, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3926, '  SID=@'||v_ConnectRec.dc_database_id||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3927, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3928, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3929, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3930, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3931, 'else'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3932, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3933, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3934, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3935, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3936, '  SID=@$ORACLE_SID'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3937, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3938, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3939, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3940, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3941, 'fi'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3942, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3943, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3944, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3945, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3946, 'export SID'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3947, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3948,
WS_ACT_HOST_SCRIPT,FUNCTION,3949, v_line := 'WHENEVER OSERROR EXIT FAILURE';
WS_ACT_HOST_SCRIPT,FUNCTION,3950, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3951, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3952, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3953, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3954, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3955,
WS_ACT_HOST_SCRIPT,FUNCTION,3956, v_line := 'WHENEVER SQLERROR EXIT SQL.SQLCODE';
WS_ACT_HOST_SCRIPT,FUNCTION,3957, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3958, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3959, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3960, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3961, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3962,
WS_ACT_HOST_SCRIPT,FUNCTION,3963, v_line := 'spool ' || v_file_path || v_ExpRec.et_file_name;
WS_ACT_HOST_SCRIPT,FUNCTION,3964, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3965, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3966, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3967, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3968, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3969,
WS_ACT_HOST_SCRIPT,FUNCTION,3970, IF (( v_ExpRec.et_header_row_ind <> 'N' )
WS_ACT_HOST_SCRIPT,FUNCTION,3971, AND ( v_ExpRec.et_header_row_ind IS NOT NULL )
WS_ACT_HOST_SCRIPT,FUNCTION,3972, AND ( SUBSTR(v_ExpRec.et_export_format,1,1) = 'D' )) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3973,
WS_ACT_HOST_SCRIPT,FUNCTION,3974, v_work := 'SELECT ''';
WS_ACT_HOST_SCRIPT,FUNCTION,3975, v_count := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3976, v_first_time := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3977,
WS_ACT_HOST_SCRIPT,FUNCTION,3978, FOR v_ExpColRec in c_ExpCol LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,3979,
WS_ACT_HOST_SCRIPT,FUNCTION,3980, IF ( v_first_time = 1 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3981, v_src_table := v_ExpColRec.ec_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,3982, v_first_time := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3983, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,3984, v_work := v_work || v_protector || v_ExpRec.et_file_delimiter;
WS_ACT_HOST_SCRIPT,FUNCTION,3985, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3986,
WS_ACT_HOST_SCRIPT,FUNCTION,3987,-- IF ( v_count = 8 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3988,-- v_line := v_work || ;
WS_ACT_HOST_SCRIPT,FUNCTION,3989,-- v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,3990,-- Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,3991,-- wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,3992,-- Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,3993,-- echo ||v_str_quote||v_line||v_str_quote|| >> ||v_script||.ctl||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,3994,-- v_work := ||v_protector|||||v_protector|||;
WS_ACT_HOST_SCRIPT,FUNCTION,3995,-- v_count := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,3996,-- END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,3997,
WS_ACT_HOST_SCRIPT,FUNCTION,3998, IF ( v_ExpRec.et_header_row_ind = 'B' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,3999, v_work2 := v_ExpColRec.ec_display_name;
WS_ACT_HOST_SCRIPT,FUNCTION,4000,-- v_work := v_work || v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,4001, ELSIF ( v_ExpRec.et_header_row_ind = 'C' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4002, v_work2 := v_ExpColRec.ec_col_name;
WS_ACT_HOST_SCRIPT,FUNCTION,4003,-- v_work := v_work || v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,4004, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4005,
WS_ACT_HOST_SCRIPT,FUNCTION,4006, v_work := v_work || v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,4007,
WS_ACT_HOST_SCRIPT,FUNCTION,4008, v_line := v_work || '''' ;
WS_ACT_HOST_SCRIPT,FUNCTION,4009, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4010, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4011, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4012, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4013, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4014, v_work := '    '||v_protector||'|'||v_protector||'|''';
WS_ACT_HOST_SCRIPT,FUNCTION,4015,
WS_ACT_HOST_SCRIPT,FUNCTION,4016, v_count := v_count + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4017,
WS_ACT_HOST_SCRIPT,FUNCTION,4018, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,4019,
WS_ACT_HOST_SCRIPT,FUNCTION,4020,-- IF ( v_count > 1 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4021,-- v_line := v_work || ;
WS_ACT_HOST_SCRIPT,FUNCTION,4022,-- v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4023,-- Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4024,-- wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4025,-- Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4026,-- echo ||v_str_quote||v_line||v_str_quote|| >> ||v_script||.ctl||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4027,-- END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4028,
WS_ACT_HOST_SCRIPT,FUNCTION,4029, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4030, v_line := 'FROM ' || v_table_schema || '.' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4031, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4032, v_line := 'FROM ' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4033, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4034, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4035, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4036, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4037, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4038, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4039,
WS_ACT_HOST_SCRIPT,FUNCTION,4040, v_line := 'WHERE ROWNUM='||v_protector||'1 ' ;
WS_ACT_HOST_SCRIPT,FUNCTION,4041, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4042, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4043, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4044, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4045, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4046,
WS_ACT_HOST_SCRIPT,FUNCTION,4047, v_line := ';';
WS_ACT_HOST_SCRIPT,FUNCTION,4048, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4049, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4050, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4051, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4052, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4053,
WS_ACT_HOST_SCRIPT,FUNCTION,4054, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4055,
WS_ACT_HOST_SCRIPT,FUNCTION,4056, v_first_time := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4057,
WS_ACT_HOST_SCRIPT,FUNCTION,4058, For v_ExpColRec in c_ExpCol LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,4059,
WS_ACT_HOST_SCRIPT,FUNCTION,4060, IF ( SUBSTR(v_ExpRec.et_export_format,1,1) = 'D' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4061,
WS_ACT_HOST_SCRIPT,FUNCTION,4062, IF ( v_first_time = 1 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4063, v_line := 'Select ';
WS_ACT_HOST_SCRIPT,FUNCTION,4064, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4065, v_line := ' '||v_protector||'|'||v_protector||'| '''||v_protector||
WS_ACT_HOST_SCRIPT,FUNCTION,4066, v_ExpRec.et_file_delimiter||''' '||v_protector||'|'||v_protector||'| ';
WS_ACT_HOST_SCRIPT,FUNCTION,4067, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4068, v_work := TRIM(LOWER(v_ExpColRec.ec_data_type));
WS_ACT_HOST_SCRIPT,FUNCTION,4069, IF ( TRIM(v_ExpColRec.ec_transform_code) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4070, v_line := v_line || v_ExpColRec.ec_transform_code;
WS_ACT_HOST_SCRIPT,FUNCTION,4071, ELSIF (( SUBSTR(v_work,1,7) = 'varchar' ) Or ( SUBSTR(v_work,1,4) = 'char' )) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4072, IF ( TRIM(v_enclosed_by) = q'[']') THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4073,                        v_line := v_line || q'['''']' || v_protector || '|' || v_protector || '|';
WS_ACT_HOST_SCRIPT,FUNCTION,4074,                    ELSIF ( TRIM(v_enclosed_by) = q'[\]') THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4075,                        v_line := v_line || q'['\\']' || v_protector || '|' || v_protector || '|';
WS_ACT_HOST_SCRIPT,FUNCTION,4076,                    ELSIF ( TRIM(v_enclosed_by) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4077,                        v_line := v_line || '''' || v_enclosed_by || '''' || '||';
WS_ACT_HOST_SCRIPT,FUNCTION,4078,                    END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4079,                    v_line := v_line || v_ExpColRec.ec_src_column;
WS_ACT_HOST_SCRIPT,FUNCTION,4080,                    IF ( TRIM(v_enclosed_by) = q'[']' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4081, v_line := v_line || v_protector || '|' || v_protector || '|' || q'['''']';
WS_ACT_HOST_SCRIPT,FUNCTION,4082, ELSIF ( TRIM(v_enclosed_by) = q'[\]' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4083, v_line := v_line || v_protector || '|' || v_protector || '|' || q'['\\']';
WS_ACT_HOST_SCRIPT,FUNCTION,4084, ELSIF ( TRIM(v_enclosed_by) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4085, v_line := v_line || '||' || '''' || v_enclosed_by || '''';
WS_ACT_HOST_SCRIPT,FUNCTION,4086, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4087, ELSIF ( SUBSTR(v_work,1,4) = 'date' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4088, v_line := v_line || 'TO_CHAR(' || v_ExpColRec.ec_src_column || ',''YYYYMMDDhh24miss'')';
WS_ACT_HOST_SCRIPT,FUNCTION,4089, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4090, v_line := v_line || 'TO_CHAR(' || v_ExpColRec.ec_src_column || ')';
WS_ACT_HOST_SCRIPT,FUNCTION,4091, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4092,
WS_ACT_HOST_SCRIPT,FUNCTION,4093, ELSIF ( SUBSTR(v_ExpRec.et_export_format,1,1) = 'W' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4094,
WS_ACT_HOST_SCRIPT,FUNCTION,4095, v_work := TRIM(LOWER(v_ExpColRec.ec_data_type));
WS_ACT_HOST_SCRIPT,FUNCTION,4096, IF (( SUBSTR(v_work,1,7) = 'varchar' ) Or ( SUBSTR(v_work,1,4) = 'char' )) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4097,
WS_ACT_HOST_SCRIPT,FUNCTION,4098, v_cpos := INSTR(v_work,'(');
WS_ACT_HOST_SCRIPT,FUNCTION,4099, IF ( v_cpos = 0 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4100, v_work := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,4101, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4102, v_work := SUBSTR(v_work,v_cpos+1);
WS_ACT_HOST_SCRIPT,FUNCTION,4103, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4104, v_cpos := Instr(v_work,')');
WS_ACT_HOST_SCRIPT,FUNCTION,4105, IF ( v_cpos = 0 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4106, v_nLength := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,4107, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4108, v_nLength := TO_NUMBER(SUBSTR(v_work,1,v_cpos-1));
WS_ACT_HOST_SCRIPT,FUNCTION,4109, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4110, ELSIF ( SUBSTR(v_work,1,4) = 'date' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4111, v_nLength := 14;
WS_ACT_HOST_SCRIPT,FUNCTION,4112, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4113, v_nLength := 30;
WS_ACT_HOST_SCRIPT,FUNCTION,4114, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4115,
WS_ACT_HOST_SCRIPT,FUNCTION,4116, IF ( TRIM(v_ExpColRec.ec_transform_code) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4117, v_work2 := v_ExpColRec.ec_transform_code;
WS_ACT_HOST_SCRIPT,FUNCTION,4118, ELSIF (( SUBSTR(v_work,1,7) = 'varchar' ) Or ( SUBSTR(v_work,1,4) = 'char' )) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4119, v_work2 := v_ExpColRec.ec_src_column;
WS_ACT_HOST_SCRIPT,FUNCTION,4120, ELSIF ( SUBSTR(v_work,1,4) = 'date' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4121, v_work2 := 'TO_CHAR(' || v_ExpColRec.ec_src_column || ',''YYYYMMDDhh24miss'')';
WS_ACT_HOST_SCRIPT,FUNCTION,4122, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4123, v_work2 := 'TO_CHAR(' || v_ExpColRec.ec_src_column || ')';
WS_ACT_HOST_SCRIPT,FUNCTION,4124, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4125,
WS_ACT_HOST_SCRIPT,FUNCTION,4126, IF ( v_first_time = 1 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4127, v_line := 'Select ';
WS_ACT_HOST_SCRIPT,FUNCTION,4128, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4129, v_line := ' '||v_protector||'|'||v_protector||'| ';
WS_ACT_HOST_SCRIPT,FUNCTION,4130, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4131,
WS_ACT_HOST_SCRIPT,FUNCTION,4132, v_line := v_line || 'RPAD(NVL(' || v_work2 || ','' ''),' || TO_CHAR(v_nlength) || ','' '')';
WS_ACT_HOST_SCRIPT,FUNCTION,4133,
WS_ACT_HOST_SCRIPT,FUNCTION,4134, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4135,
WS_ACT_HOST_SCRIPT,FUNCTION,4136, IF ( v_first_time = 1 ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4137, v_src_table := v_ExpColRec.ec_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4138, v_first_time := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,4139, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4140,
WS_ACT_HOST_SCRIPT,FUNCTION,4141, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4142, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4143, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4144, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4145, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4146,
WS_ACT_HOST_SCRIPT,FUNCTION,4147, END LOOP;
WS_ACT_HOST_SCRIPT,FUNCTION,4148,
WS_ACT_HOST_SCRIPT,FUNCTION,4149, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4150, v_line := 'FROM ' || v_table_schema || '.' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4151, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4152, v_line := 'FROM ' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4153, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4154, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4155, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4156, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4157, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4158, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4159,
WS_ACT_HOST_SCRIPT,FUNCTION,4160, IF ( TRIM(v_ExpRec.et_where_clause) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4161, v_line := REPLACE(REPLACE(v_ExpRec.et_where_clause,'<',v_protector||'<'),'>',v_protector||'>');
WS_ACT_HOST_SCRIPT,FUNCTION,4162, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4163, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4164, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4165, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4166, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4167, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4168,
WS_ACT_HOST_SCRIPT,FUNCTION,4169, v_line := '/';
WS_ACT_HOST_SCRIPT,FUNCTION,4170, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4171, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4172, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4173, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4174, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4175,
WS_ACT_HOST_SCRIPT,FUNCTION,4176, v_line := 'spool off';
WS_ACT_HOST_SCRIPT,FUNCTION,4177, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4178, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4179, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4180, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4181, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4182,
WS_ACT_HOST_SCRIPT,FUNCTION,4183, v_line := 'exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4184, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4185, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4186, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4187, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4188, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4189,
WS_ACT_HOST_SCRIPT,FUNCTION,4190, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4191, v_line := 'RES=`sqlplus -s $DSS_USER/"$DSS_PWD"$SID <<EOF';
WS_ACT_HOST_SCRIPT,FUNCTION,4192, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4193, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4194, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4195, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4196, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4197,
WS_ACT_HOST_SCRIPT,FUNCTION,4198, v_line := 'set heading off';
WS_ACT_HOST_SCRIPT,FUNCTION,4199, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4200, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4201, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4202, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4203, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4204,
WS_ACT_HOST_SCRIPT,FUNCTION,4205, v_line := 'set echo off';
WS_ACT_HOST_SCRIPT,FUNCTION,4206, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4207, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4208, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4209, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4210, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4211,
WS_ACT_HOST_SCRIPT,FUNCTION,4212, v_line := 'set feedback 0';
WS_ACT_HOST_SCRIPT,FUNCTION,4213, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4214, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4215, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4216, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4217, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4218,
WS_ACT_HOST_SCRIPT,FUNCTION,4219, v_line := 'set pagesize 0';
WS_ACT_HOST_SCRIPT,FUNCTION,4220, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4221, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4222, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4223, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4224, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4225,
WS_ACT_HOST_SCRIPT,FUNCTION,4226, v_line := 'SELECT dc_admin_userid || CHR(9)|| dc_admin_pwd FROM ws_dbc_connect WHERE  dc_obj_key = ' || v_connect_key || ';';
WS_ACT_HOST_SCRIPT,FUNCTION,4227, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4228, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4229, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4230, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4231, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4232,
WS_ACT_HOST_SCRIPT,FUNCTION,4233, v_line := 'EOF`';
WS_ACT_HOST_SCRIPT,FUNCTION,4234, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4235, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4236, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4237, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4238, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4239,
WS_ACT_HOST_SCRIPT,FUNCTION,4240, v_line := 'USER=`echo "$RES" | cut -f1`';
WS_ACT_HOST_SCRIPT,FUNCTION,4241, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4242, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4243, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4244, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4245, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4246,
WS_ACT_HOST_SCRIPT,FUNCTION,4247, v_line := 'PWD=`echo "$RES" | cut -f2`';
WS_ACT_HOST_SCRIPT,FUNCTION,4248, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4249, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4250, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4251, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4252, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4253,
WS_ACT_HOST_SCRIPT,FUNCTION,4254, v_line := 'sqlplus $USER/"$PWD"${SID}' || ' @"' || v_script || '.ctl" > "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4255, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4256, v_line := 'sqlplus %WSL_USER%/"%WSL_PWD%"@' || v_ConnectRec.dc_database_id || ' @"' || v_script || '.ctl" > "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4257, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4258, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4259, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4260, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4261, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4262, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4263,
WS_ACT_HOST_SCRIPT,FUNCTION,4264, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4265, v_line := 'SET ERRLEV=%errorlevel%';
WS_ACT_HOST_SCRIPT,FUNCTION,4266, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4267, v_line := 'ERRLEV=$?';
WS_ACT_HOST_SCRIPT,FUNCTION,4268, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4269, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4270, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4271, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4272, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4273, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4274,
WS_ACT_HOST_SCRIPT,FUNCTION,4275, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4276, v_line := 'IF %ERRLEV% EQU 0 GOTO LABEL_OKAY';
WS_ACT_HOST_SCRIPT,FUNCTION,4277, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4278, v_line := 'if [ "$ERRLEV" -ne "0" ]';
WS_ACT_HOST_SCRIPT,FUNCTION,4279, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4280, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4281, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4282, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4283, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4284, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4285,
WS_ACT_HOST_SCRIPT,FUNCTION,4286, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4287, v_line := 'then';
WS_ACT_HOST_SCRIPT,FUNCTION,4288, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4289, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4290, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4291, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4292, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4293, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4294,
WS_ACT_HOST_SCRIPT,FUNCTION,4295, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4296, v_line := 'echo -2';
WS_ACT_HOST_SCRIPT,FUNCTION,4297, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4298, v_line := '  echo -2';
WS_ACT_HOST_SCRIPT,FUNCTION,4299, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4300, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4301, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4302, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4303, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4304, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4305,
WS_ACT_HOST_SCRIPT,FUNCTION,4306, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4307, v_line := 'echo Export failed with return status %ERRLEV% See error log for details';
WS_ACT_HOST_SCRIPT,FUNCTION,4308, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4309, v_line := '  echo Export failed with return status $ERRLEV See error log for details';
WS_ACT_HOST_SCRIPT,FUNCTION,4310, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4311, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4312, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4313, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4314, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4315, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4316,
WS_ACT_HOST_SCRIPT,FUNCTION,4317, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4318, v_line := 'type "' || v_script || '_a.aud" >' || Chr(38) || '2';
WS_ACT_HOST_SCRIPT,FUNCTION,4319, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4320, v_line := '  cat "' || v_script || '_a.aud" >' || Chr(38) || '2';
WS_ACT_HOST_SCRIPT,FUNCTION,4321, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4322, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4323, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4324, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4325, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4326, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4327,
WS_ACT_HOST_SCRIPT,FUNCTION,4328, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4329, v_line := 'exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4330, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4331, v_line := '  exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4332, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4333, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4334, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4335, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4336, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4337, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4338,
WS_ACT_HOST_SCRIPT,FUNCTION,4339, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4340, v_line := ':LABEL_OKAY';
WS_ACT_HOST_SCRIPT,FUNCTION,4341, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4342, v_line := 'fi';
WS_ACT_HOST_SCRIPT,FUNCTION,4343, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4344, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4345, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4346, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4347, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4348, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4349,
WS_ACT_HOST_SCRIPT,FUNCTION,4350, -- Compress Output File
WS_ACT_HOST_SCRIPT,FUNCTION,4351, IF (( TRIM(v_ExpRec.et_compress_ind) = 'Y' )
WS_ACT_HOST_SCRIPT,FUNCTION,4352, And ( TRIM(v_ExpRec.et_compress_name) IS NOT NULL )) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4353,
WS_ACT_HOST_SCRIPT,FUNCTION,4354, IF v_ExpRec.et_compress_path is not NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4355, IF substr(v_ExpRec.et_compress_path,-1,1) <> v_file_slash THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4356, v_compress_path := v_ExpRec.et_compress_path || v_file_slash;
WS_ACT_HOST_SCRIPT,FUNCTION,4357, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4358, v_compress_path := v_ExpRec.et_compress_path;
WS_ACT_HOST_SCRIPT,FUNCTION,4359, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4360, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4361, v_compress_path := '';
WS_ACT_HOST_SCRIPT,FUNCTION,4362, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4363,
WS_ACT_HOST_SCRIPT,FUNCTION,4364, v_line := '"' || v_compress_path || TRIM(v_ExpRec.et_compress_name) || '" '
WS_ACT_HOST_SCRIPT,FUNCTION,4365, || REPLACE(TRIM(v_ExpRec.et_compress_param),'$EXPFILE$',v_file_path||v_ExpRec.et_file_name)
WS_ACT_HOST_SCRIPT,FUNCTION,4366, || ' >> "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4367, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4368, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4369, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4370, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4371, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4372,
WS_ACT_HOST_SCRIPT,FUNCTION,4373, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4374, v_line := 'SET ERRLEV=%errorlevel%';
WS_ACT_HOST_SCRIPT,FUNCTION,4375, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4376, v_line := 'ERRLEV=$?';
WS_ACT_HOST_SCRIPT,FUNCTION,4377, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4378, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4379, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4380, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4381, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4382, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4383,
WS_ACT_HOST_SCRIPT,FUNCTION,4384, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4385, v_line := 'IF %ERRLEV% EQU 0 GOTO LABEL_OKAY2';
WS_ACT_HOST_SCRIPT,FUNCTION,4386, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4387, v_line := 'if [ "$ERRLEV" -ne "0" ]';
WS_ACT_HOST_SCRIPT,FUNCTION,4388, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4389, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4390, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4391, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4392, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4393, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4394,
WS_ACT_HOST_SCRIPT,FUNCTION,4395, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4396, v_line := 'then';
WS_ACT_HOST_SCRIPT,FUNCTION,4397, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4398, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4399, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4400, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4401, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4402, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4403,
WS_ACT_HOST_SCRIPT,FUNCTION,4404, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4405, v_line := 'echo -2';
WS_ACT_HOST_SCRIPT,FUNCTION,4406, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4407, v_line := '  echo -2';
WS_ACT_HOST_SCRIPT,FUNCTION,4408, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4409, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4410, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4411, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4412, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4413, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4414,
WS_ACT_HOST_SCRIPT,FUNCTION,4415, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4416, v_line := 'echo Export compress failed with return status %ERRLEV% See error log for details';
WS_ACT_HOST_SCRIPT,FUNCTION,4417, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4418, v_line := '  echo Export compress failed with return status $ERRLEV See error log for details';
WS_ACT_HOST_SCRIPT,FUNCTION,4419, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4420, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4421, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4422, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4423, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4424, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4425,
WS_ACT_HOST_SCRIPT,FUNCTION,4426, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4427, v_line := 'type "' || v_script || '_a.aud" >' || Chr(38) || '2';
WS_ACT_HOST_SCRIPT,FUNCTION,4428, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4429, v_line := '  cat "' || v_script || '_a.aud" >' || Chr(38) || '2';
WS_ACT_HOST_SCRIPT,FUNCTION,4430, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4431, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4432, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4433, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4434, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4435, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4436,
WS_ACT_HOST_SCRIPT,FUNCTION,4437, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4438, v_line := 'exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4439, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4440, v_line := '  exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4441, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4442, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4443, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4444, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4445, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4446, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4447,
WS_ACT_HOST_SCRIPT,FUNCTION,4448, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4449, v_line := ':LABEL_OKAY2';
WS_ACT_HOST_SCRIPT,FUNCTION,4450, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4451, v_line := 'fi';
WS_ACT_HOST_SCRIPT,FUNCTION,4452, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4453, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4454, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4455, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4456, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4457, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4458,
WS_ACT_HOST_SCRIPT,FUNCTION,4459, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4460,
WS_ACT_HOST_SCRIPT,FUNCTION,4461, -- Use query tool to generate a trigger file
WS_ACT_HOST_SCRIPT,FUNCTION,4462, IF (( TRIM(v_ExpRec.et_trig_name) IS NOT NULL )
WS_ACT_HOST_SCRIPT,FUNCTION,4463, AND ( TRIM(v_ExpRec.et_trig_param_1) IS NOT NULL )) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4464,
WS_ACT_HOST_SCRIPT,FUNCTION,4465, IF v_ExpRec.et_trig_path is not NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4466, IF substr(v_ExpRec.et_trig_path,-1,1) <> v_file_slash THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4467, v_trig_path := v_ExpRec.et_trig_path || v_file_slash;
WS_ACT_HOST_SCRIPT,FUNCTION,4468, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4469, v_trig_path := v_ExpRec.et_trig_path;
WS_ACT_HOST_SCRIPT,FUNCTION,4470, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4471, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4472, v_trig_path := '';
WS_ACT_HOST_SCRIPT,FUNCTION,4473, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4474,
WS_ACT_HOST_SCRIPT,FUNCTION,4475, -- loop on a matching pair of $ signs in the file name
WS_ACT_HOST_SCRIPT,FUNCTION,4476, -- and handle a sequence, YYYY, MM, DD, HH, MI, SS
WS_ACT_HOST_SCRIPT,FUNCTION,4477, v_spos := INSTR(v_ExpRec.et_trig_name,'$',1);
WS_ACT_HOST_SCRIPT,FUNCTION,4478, WHILE v_spos <> 0 LOOP
WS_ACT_HOST_SCRIPT,FUNCTION,4479, v_epos := INSTR(v_ExpRec.et_trig_name,'$',v_spos+1);
WS_ACT_HOST_SCRIPT,FUNCTION,4480, IF v_epos <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4481, v_command := SUBSTR(v_ExpRec.et_trig_name,v_spos+1,v_epos-v_spos-1);
WS_ACT_HOST_SCRIPT,FUNCTION,4482, v_new_command := v_command;
WS_ACT_HOST_SCRIPT,FUNCTION,4483, IF INSTR('SEQUENCE',v_new_command) <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4484, v_new_command := REPLACE(v_new_command,'SEQUENCE',TO_CHAR(p_sequence));
WS_ACT_HOST_SCRIPT,FUNCTION,4485, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4486, v_current_date := SYSDATE;
WS_ACT_HOST_SCRIPT,FUNCTION,4487, IF INSTR(v_new_command,'YYYY') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4488, v_new_command := REPLACE(v_new_command,'YYYY',TO_CHAR(v_current_date,'YYYY'));
WS_ACT_HOST_SCRIPT,FUNCTION,4489, ELSIF INSTR(v_new_command,'YY') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4490, v_new_command := REPLACE(v_new_command,'YY',TO_CHAR(v_current_date,'YY'));
WS_ACT_HOST_SCRIPT,FUNCTION,4491, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4492, IF INSTR(v_new_command,'MM') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4493, v_new_command := REPLACE(v_new_command,'MM',TO_CHAR(v_current_date,'MM'));
WS_ACT_HOST_SCRIPT,FUNCTION,4494, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4495, IF INSTR(v_new_command,'DD') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4496, v_new_command := REPLACE(v_new_command,'DD',TO_CHAR(v_current_date,'DD'));
WS_ACT_HOST_SCRIPT,FUNCTION,4497, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4498, IF INSTR(v_new_command,'HH') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4499, v_new_command := REPLACE(v_new_command,'HH',TO_CHAR(v_current_date,'HH'));
WS_ACT_HOST_SCRIPT,FUNCTION,4500, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4501, IF INSTR(v_new_command,'MI') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4502, v_new_command := REPLACE(v_new_command,'MI',TO_CHAR(v_current_date,'MI'));
WS_ACT_HOST_SCRIPT,FUNCTION,4503, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4504, IF INSTR(v_new_command,'SS') <> 0 THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4505, v_new_command := REPLACE(v_new_command,'SS',TO_CHAR(v_current_date,'SS'));
WS_ACT_HOST_SCRIPT,FUNCTION,4506, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4507, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4508, IF NVL(v_new_command,' ') <> ' ' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4509, v_ExpRec.et_trig_name := REPLACE(v_ExpRec.et_trig_name,'$'||v_command||'$',v_new_command);
WS_ACT_HOST_SCRIPT,FUNCTION,4510, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4511, END IF; -- END of epos found
WS_ACT_HOST_SCRIPT,FUNCTION,4512, IF ((NVL(v_new_command,' ') <> ' ') AND (v_epos <> 0)) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4513, v_spos := INSTR(v_ExpRec.et_trig_name,'$',1);
WS_ACT_HOST_SCRIPT,FUNCTION,4514, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4515, v_spos := 0;
WS_ACT_HOST_SCRIPT,FUNCTION,4516, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4517, END LOOP; -- END of spos while
WS_ACT_HOST_SCRIPT,FUNCTION,4518,
WS_ACT_HOST_SCRIPT,FUNCTION,4519, v_line := 'set pages '||v_protector||'0 ';
WS_ACT_HOST_SCRIPT,FUNCTION,4520, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4521, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4522, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4523, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4524, 'echo '||v_str_quote||v_line||v_str_quote||' > '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4525,
WS_ACT_HOST_SCRIPT,FUNCTION,4526, v_line := 'set lines 32767';
WS_ACT_HOST_SCRIPT,FUNCTION,4527, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4528, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4529, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4530, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4531, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4532,
WS_ACT_HOST_SCRIPT,FUNCTION,4533, v_line := 'set feed off';
WS_ACT_HOST_SCRIPT,FUNCTION,4534, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4535, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4536, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4537, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4538, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4539,
WS_ACT_HOST_SCRIPT,FUNCTION,4540, v_line := 'set term off';
WS_ACT_HOST_SCRIPT,FUNCTION,4541, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4542, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4543, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4544, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4545, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4546,
WS_ACT_HOST_SCRIPT,FUNCTION,4547, v_line := 'set trimspool on';
WS_ACT_HOST_SCRIPT,FUNCTION,4548, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4549, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4550, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4551, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4552, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4553,
WS_ACT_HOST_SCRIPT,FUNCTION,4554, v_line := 'WHENEVER OSERROR EXIT FAILURE';
WS_ACT_HOST_SCRIPT,FUNCTION,4555, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4556, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4557, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4558, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4559, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4560,
WS_ACT_HOST_SCRIPT,FUNCTION,4561, v_line := 'WHENEVER SQLERROR EXIT SQL.SQLCODE';
WS_ACT_HOST_SCRIPT,FUNCTION,4562, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4563, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4564, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4565, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4566, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4567,
WS_ACT_HOST_SCRIPT,FUNCTION,4568, v_line := 'spool ' || v_trig_path || v_ExpRec.et_trig_name;
WS_ACT_HOST_SCRIPT,FUNCTION,4569, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4570, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4571, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4572, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4573, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4574,
WS_ACT_HOST_SCRIPT,FUNCTION,4575, -- IF trig column 1 is populated
WS_ACT_HOST_SCRIPT,FUNCTION,4576, IF ( SUBSTR(v_ExpRec.et_trig_param_1,1,1) = 'R' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4577, v_work := 'TO_CHAR(COUNT(*))';
WS_ACT_HOST_SCRIPT,FUNCTION,4578, ELSIF ( TRIM(v_ExpRec.et_trig_param_1) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4579, v_work := 'TO_CHAR(' || v_ExpRec.et_trig_param_1 || ')';
WS_ACT_HOST_SCRIPT,FUNCTION,4580, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4581, v_work := 'NULL';
WS_ACT_HOST_SCRIPT,FUNCTION,4582, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4583,
WS_ACT_HOST_SCRIPT,FUNCTION,4584, -- IF trig column 2 is populated
WS_ACT_HOST_SCRIPT,FUNCTION,4585, IF ( SUBSTR(v_ExpRec.et_trig_param_2,1,1) = 'R' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4586, v_work2 := 'TO_CHAR(COUNT(*))';
WS_ACT_HOST_SCRIPT,FUNCTION,4587, ELSIF ( TRIM(v_ExpRec.et_trig_param_2) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4588, v_work2 := 'TO_CHAR(' || v_ExpRec.et_trig_param_2 || ')';
WS_ACT_HOST_SCRIPT,FUNCTION,4589, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4590, v_work2 := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,4591, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4592,
WS_ACT_HOST_SCRIPT,FUNCTION,4593, -- IF trig column 3 is populated
WS_ACT_HOST_SCRIPT,FUNCTION,4594, IF ( SUBSTR(v_ExpRec.et_trig_param_3,1,1) = 'R' ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4595, v_work3 := 'TO_CHAR(COUNT(*))';
WS_ACT_HOST_SCRIPT,FUNCTION,4596, ELSIF ( TRIM(v_ExpRec.et_trig_param_3) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4597, v_work3 := 'TO_CHAR(' || v_ExpRec.et_trig_param_3 || ')';
WS_ACT_HOST_SCRIPT,FUNCTION,4598, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4599, v_work3 := NULL;
WS_ACT_HOST_SCRIPT,FUNCTION,4600, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4601,
WS_ACT_HOST_SCRIPT,FUNCTION,4602, -- Put it all together
WS_ACT_HOST_SCRIPT,FUNCTION,4603, v_line := 'SELECT ' || v_work;
WS_ACT_HOST_SCRIPT,FUNCTION,4604, IF ( v_ExpRec.et_trig_delimiter IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4605, v_work := ' '||v_protector||'|'||v_protector||'| '''||v_protector||
WS_ACT_HOST_SCRIPT,FUNCTION,4606, v_ExpRec.et_trig_delimiter||''' '||v_protector||'|'||v_protector||'| ';
WS_ACT_HOST_SCRIPT,FUNCTION,4607, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4608, v_work := ' '||v_protector||'|'||v_protector||'| '' '' '||v_protector||'|'||v_protector||'| ';
WS_ACT_HOST_SCRIPT,FUNCTION,4609, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4610, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4611, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4612, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4613, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4614, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4615,
WS_ACT_HOST_SCRIPT,FUNCTION,4616, IF ( v_work2 IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4617, v_line := v_work || v_work2;
WS_ACT_HOST_SCRIPT,FUNCTION,4618, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4619, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4620, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4621, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4622, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4623, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4624,
WS_ACT_HOST_SCRIPT,FUNCTION,4625, IF ( v_work3 IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4626, v_line := v_work || v_work3;
WS_ACT_HOST_SCRIPT,FUNCTION,4627, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4628, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4629, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4630, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4631, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4632, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4633,
WS_ACT_HOST_SCRIPT,FUNCTION,4634, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4635, v_line := 'FROM ' || v_table_schema || '.' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4636, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4637, v_line := 'FROM ' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4638, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4639, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4640, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4641, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4642, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4643, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4644,
WS_ACT_HOST_SCRIPT,FUNCTION,4645, IF ( TRIM(v_ExpRec.et_where_clause) IS NOT NULL ) THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4646, v_line := REPLACE(REPLACE(v_ExpRec.et_where_clause,'<',v_protector||'<'),'>',v_protector||'>');
WS_ACT_HOST_SCRIPT,FUNCTION,4647, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4648, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4649, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4650, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4651, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4652, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4653,
WS_ACT_HOST_SCRIPT,FUNCTION,4654, v_line := '/';
WS_ACT_HOST_SCRIPT,FUNCTION,4655, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4656, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4657, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4658, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4659, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4660,
WS_ACT_HOST_SCRIPT,FUNCTION,4661, v_line := 'spool off';
WS_ACT_HOST_SCRIPT,FUNCTION,4662, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4663, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4664, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4665, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4666, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4667,
WS_ACT_HOST_SCRIPT,FUNCTION,4668, v_line := 'exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4669, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4670, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4671, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4672, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4673, 'echo '||v_str_quote||v_line||v_str_quote||' >> '||v_script||'.ctl'||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4674,
WS_ACT_HOST_SCRIPT,FUNCTION,4675, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4676, v_line := 'RES=`sqlplus -s $DSS_USER/"$DSS_PWD"$SID <<EOF';
WS_ACT_HOST_SCRIPT,FUNCTION,4677, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4678, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4679, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4680, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4681, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4682,
WS_ACT_HOST_SCRIPT,FUNCTION,4683, v_line := 'set heading off';
WS_ACT_HOST_SCRIPT,FUNCTION,4684, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4685, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4686, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4687, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4688, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4689,
WS_ACT_HOST_SCRIPT,FUNCTION,4690, v_line := 'set echo off';
WS_ACT_HOST_SCRIPT,FUNCTION,4691, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4692, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4693, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4694, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4695, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4696,
WS_ACT_HOST_SCRIPT,FUNCTION,4697, v_line := 'set feedback 0';
WS_ACT_HOST_SCRIPT,FUNCTION,4698, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4699, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4700, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4701, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4702, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4703,
WS_ACT_HOST_SCRIPT,FUNCTION,4704, v_line := 'set pagesize 0';
WS_ACT_HOST_SCRIPT,FUNCTION,4705, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4706, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4707, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4708, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4709, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4710,
WS_ACT_HOST_SCRIPT,FUNCTION,4711, v_line := 'SELECT dc_admin_userid || CHR(9)|| dc_admin_pwd FROM ws_dbc_connect WHERE  dc_obj_key = ' || v_connect_key || ';';
WS_ACT_HOST_SCRIPT,FUNCTION,4712, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4713, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4714, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4715, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4716, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4717,
WS_ACT_HOST_SCRIPT,FUNCTION,4718, v_line := 'EOF`';
WS_ACT_HOST_SCRIPT,FUNCTION,4719, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4720, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4721, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4722, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4723, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4724,
WS_ACT_HOST_SCRIPT,FUNCTION,4725, v_line := 'USER=`echo "$RES" | cut -f1`';
WS_ACT_HOST_SCRIPT,FUNCTION,4726, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4727, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4728, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4729, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4730, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4731,
WS_ACT_HOST_SCRIPT,FUNCTION,4732, v_line := 'PWD=`echo "$RES" | cut -f2`';
WS_ACT_HOST_SCRIPT,FUNCTION,4733, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4734, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4735, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4736, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4737, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4738, v_line := 'sqlplus $USER/"$PWD"${SID}' || ' @"' || v_script || '.ctl" > "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4739, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4740, v_line := 'sqlplus %WSL_USER%/"%WSL_PWD%"@' || v_ConnectRec.dc_database_id || ' @"' || v_script || '.ctl" > "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4741, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4742, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4743, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4744, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4745, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4746, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4747,
WS_ACT_HOST_SCRIPT,FUNCTION,4748, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4749, v_line := 'SET ERRLEV=%errorlevel%';
WS_ACT_HOST_SCRIPT,FUNCTION,4750, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4751, v_line := 'ERRLEV=$?';
WS_ACT_HOST_SCRIPT,FUNCTION,4752, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4753, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4754, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4755, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4756, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4757, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4758,
WS_ACT_HOST_SCRIPT,FUNCTION,4759, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4760, v_line := 'IF %ERRLEV% EQU 0 GOTO LABEL_OKAY3';
WS_ACT_HOST_SCRIPT,FUNCTION,4761, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4762, v_line := 'if [ "$ERRLEV" -ne "0" ]';
WS_ACT_HOST_SCRIPT,FUNCTION,4763, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4764, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4765, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4766, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4767, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4768, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4769,
WS_ACT_HOST_SCRIPT,FUNCTION,4770, IF v_ConnectRec.dc_type = 'U' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4771, v_line := 'then';
WS_ACT_HOST_SCRIPT,FUNCTION,4772, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4773, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4774, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4775, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4776, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4777, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4778,
WS_ACT_HOST_SCRIPT,FUNCTION,4779, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4780, v_line := 'echo -2';
WS_ACT_HOST_SCRIPT,FUNCTION,4781, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4782, v_line := '  echo -2';
WS_ACT_HOST_SCRIPT,FUNCTION,4783, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4784, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4785, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4786, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4787, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4788, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4789,
WS_ACT_HOST_SCRIPT,FUNCTION,4790, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4791, v_line := 'echo Export trigger creation failed with return status %ERRLEV% See error log for details';
WS_ACT_HOST_SCRIPT,FUNCTION,4792, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4793, v_line := '  echo Export trigger creation failed with return status $ERRLEV See error log for details';
WS_ACT_HOST_SCRIPT,FUNCTION,4794, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4795, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4796, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4797, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4798, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4799, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4800,
WS_ACT_HOST_SCRIPT,FUNCTION,4801, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4802, v_line := 'type "' || v_script || '_a.aud" >' || Chr(38) || '2';
WS_ACT_HOST_SCRIPT,FUNCTION,4803, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4804, v_line := '  cat "' || v_script || '_a.aud" >' || Chr(38) || '2';
WS_ACT_HOST_SCRIPT,FUNCTION,4805, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4806, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4807, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4808, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4809, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4810, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4811,
WS_ACT_HOST_SCRIPT,FUNCTION,4812, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4813, v_line := 'exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4814, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4815, v_line := '  exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4816, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4817, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4818, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4819, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4820, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4821, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4822,
WS_ACT_HOST_SCRIPT,FUNCTION,4823, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4824, v_line := ':LABEL_OKAY3';
WS_ACT_HOST_SCRIPT,FUNCTION,4825, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4826, v_line := 'fi';
WS_ACT_HOST_SCRIPT,FUNCTION,4827, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4828, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4829, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4830, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4831, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4832, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4833,
WS_ACT_HOST_SCRIPT,FUNCTION,4834, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4835,
WS_ACT_HOST_SCRIPT,FUNCTION,4836, v_line := 'echo 1';
WS_ACT_HOST_SCRIPT,FUNCTION,4837, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4838, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4839, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4840, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4841, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4842,
WS_ACT_HOST_SCRIPT,FUNCTION,4843, v_line := 'echo Export of ';
WS_ACT_HOST_SCRIPT,FUNCTION,4844, IF v_table_schema IS NOT NULL THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4845, v_line := v_line || v_table_schema || '.' || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4846, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4847, v_line := v_line || v_src_table;
WS_ACT_HOST_SCRIPT,FUNCTION,4848, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4849, v_line := v_line || ' Completed';
WS_ACT_HOST_SCRIPT,FUNCTION,4850, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4851, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4852, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4853, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4854, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4855,
WS_ACT_HOST_SCRIPT,FUNCTION,4856, IF v_ConnectRec.dc_type = 'W' THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4857, v_line := 'type "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4858, ELSE
WS_ACT_HOST_SCRIPT,FUNCTION,4859, v_line := '  cat "' || v_script || '_a.aud"';
WS_ACT_HOST_SCRIPT,FUNCTION,4860, END IF;
WS_ACT_HOST_SCRIPT,FUNCTION,4861, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4862, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4863, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4864, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4865, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4866,
WS_ACT_HOST_SCRIPT,FUNCTION,4867, v_line := 'exit';
WS_ACT_HOST_SCRIPT,FUNCTION,4868, v_line_no := v_line_no + 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4869, Insert into ws_wrk_task_scr_line (wtsl_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4870, wtsl_job_key,wtsl_sequence,wtsl_line_no,wtsl_line)
WS_ACT_HOST_SCRIPT,FUNCTION,4871, Values (p_task_id, p_job_id, p_sequence,v_line_no,
WS_ACT_HOST_SCRIPT,FUNCTION,4872, v_line||chr(10));
WS_ACT_HOST_SCRIPT,FUNCTION,4873,
WS_ACT_HOST_SCRIPT,FUNCTION,4874, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,4875, -- Write out the task script header
WS_ACT_HOST_SCRIPT,FUNCTION,4876, --=====================================================
WS_ACT_HOST_SCRIPT,FUNCTION,4877, Insert into ws_wrk_task_scr_hdr (
WS_ACT_HOST_SCRIPT,FUNCTION,4878, wtsh_task_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4879, wtsh_job_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4880, wtsh_name,
WS_ACT_HOST_SCRIPT,FUNCTION,4881, wtsh_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,4882, wtsh_host_type,
WS_ACT_HOST_SCRIPT,FUNCTION,4883, wtsh_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,4884, wtsh_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,4885, wtsh_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,4886, wtsh_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4887, wtsh_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4888, wtsh_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,4889, ) values (
WS_ACT_HOST_SCRIPT,FUNCTION,4890, p_task_id,
WS_ACT_HOST_SCRIPT,FUNCTION,4891, p_job_id,
WS_ACT_HOST_SCRIPT,FUNCTION,4892, p_task_name,
WS_ACT_HOST_SCRIPT,FUNCTION,4893, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,4894, v_ConnectRec.dc_type,
WS_ACT_HOST_SCRIPT,FUNCTION,4895, v_script_type,
WS_ACT_HOST_SCRIPT,FUNCTION,4896, v_load_type,
WS_ACT_HOST_SCRIPT,FUNCTION,4897, v_work_dir,
WS_ACT_HOST_SCRIPT,FUNCTION,4898, v_connect_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4899, v_load_key,
WS_ACT_HOST_SCRIPT,FUNCTION,4900, v_script_key
WS_ACT_HOST_SCRIPT,FUNCTION,4901, );
WS_ACT_HOST_SCRIPT,FUNCTION,4902, COMMIT;
WS_ACT_HOST_SCRIPT,FUNCTION,4903,
WS_ACT_HOST_SCRIPT,FUNCTION,4904, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,4905,
WS_ACT_HOST_SCRIPT,FUNCTION,4906, p_status_code := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4907, p_return_msg := 'Script prepared';
WS_ACT_HOST_SCRIPT,FUNCTION,4908, v_result := 1;
WS_ACT_HOST_SCRIPT,FUNCTION,4909,
WS_ACT_HOST_SCRIPT,FUNCTION,4910, COMMIT;
WS_ACT_HOST_SCRIPT,FUNCTION,4911, RETURN v_result;
WS_ACT_HOST_SCRIPT,FUNCTION,4912,
WS_ACT_HOST_SCRIPT,FUNCTION,4913,EXCEPTION
WS_ACT_HOST_SCRIPT,FUNCTION,4914, WHEN OTHERS THEN
WS_ACT_HOST_SCRIPT,FUNCTION,4915, p_status_code := -3;
WS_ACT_HOST_SCRIPT,FUNCTION,4916, If v_step = 400 Then
WS_ACT_HOST_SCRIPT,FUNCTION,4917, If v_script_key <= 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,4918, v_MsgText := 'Host Script not defined for load table. Please define a load script or change '||
WS_ACT_HOST_SCRIPT,FUNCTION,4919, 'the load type. In ws_act_host_script '|| v_ws_pro_version ||
WS_ACT_HOST_SCRIPT,FUNCTION,4920, ' Step ' ||v_step;
WS_ACT_HOST_SCRIPT,FUNCTION,4921, Else
WS_ACT_HOST_SCRIPT,FUNCTION,4922, v_MsgText := 'Failed to find script in ws_act_host_script '|| v_ws_pro_version ||
WS_ACT_HOST_SCRIPT,FUNCTION,4923, ' Step ' ||v_step;
WS_ACT_HOST_SCRIPT,FUNCTION,4924, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,4925, ElsIf v_step = 500 Or v_step = 1000 Then
WS_ACT_HOST_SCRIPT,FUNCTION,4926, If v_connect_key <= 0 Then
WS_ACT_HOST_SCRIPT,FUNCTION,4927, v_MsgText := 'Connection not defined for load table. Please define a connection. '||
WS_ACT_HOST_SCRIPT,FUNCTION,4928, 'In ws_act_host_script '|| v_ws_pro_version ||
WS_ACT_HOST_SCRIPT,FUNCTION,4929, ' Step ' ||v_step;
WS_ACT_HOST_SCRIPT,FUNCTION,4930, Else
WS_ACT_HOST_SCRIPT,FUNCTION,4931, v_MsgText := 'Failed to find connection in ws_act_host_script '|| v_ws_pro_version ||
WS_ACT_HOST_SCRIPT,FUNCTION,4932, ' Step ' ||v_step;
WS_ACT_HOST_SCRIPT,FUNCTION,4933, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,4934, Else
WS_ACT_HOST_SCRIPT,FUNCTION,4935, v_MsgText := 'Unhandled Exception in ws_act_host_script '|| v_ws_pro_version ||
WS_ACT_HOST_SCRIPT,FUNCTION,4936, ' Step ' ||v_step;
WS_ACT_HOST_SCRIPT,FUNCTION,4937, End If;
WS_ACT_HOST_SCRIPT,FUNCTION,4938, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_HOST_SCRIPT,FUNCTION,4939, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_HOST_SCRIPT,FUNCTION,4940, p_return_msg := v_MsgText;
WS_ACT_HOST_SCRIPT,FUNCTION,4941, RETURN -3;
WS_ACT_HOST_SCRIPT,FUNCTION,4942,
WS_ACT_HOST_SCRIPT,FUNCTION,4943,END ws_act_host_script;
WS_ACT_HOST_SCRIPT,FUNCTION,4944,
WS_ACT_INITIAL_BUILD,FUNCTION,1,function ws_act_initial_build
WS_ACT_INITIAL_BUILD,FUNCTION,2, (
WS_ACT_INITIAL_BUILD,FUNCTION,3, p_sequence IN number,
WS_ACT_INITIAL_BUILD,FUNCTION,4, p_obj_type IN number,
WS_ACT_INITIAL_BUILD,FUNCTION,5, p_action IN number,
WS_ACT_INITIAL_BUILD,FUNCTION,6, p_obj_key IN number,
WS_ACT_INITIAL_BUILD,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_INITIAL_BUILD,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_INITIAL_BUILD,FUNCTION,9, p_job_id IN number,
WS_ACT_INITIAL_BUILD,FUNCTION,10, p_task_id IN number,
WS_ACT_INITIAL_BUILD,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_INITIAL_BUILD,FUNCTION,12, p_status_code OUT number
WS_ACT_INITIAL_BUILD,FUNCTION,13, )
WS_ACT_INITIAL_BUILD,FUNCTION,14, Return integer
WS_ACT_INITIAL_BUILD,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_INITIAL_BUILD,FUNCTION,16, IS
WS_ACT_INITIAL_BUILD,FUNCTION,17,
WS_ACT_INITIAL_BUILD,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_INITIAL_BUILD,FUNCTION,19,
WS_ACT_INITIAL_BUILD,FUNCTION,20, -- =============================================================================
WS_ACT_INITIAL_BUILD,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_INITIAL_BUILD,FUNCTION,22, -- Script Name : ws_act_initial_build
WS_ACT_INITIAL_BUILD,FUNCTION,23, -- Description : Execute the build procedure associated with a table
WS_ACT_INITIAL_BUILD,FUNCTION,24, --
WS_ACT_INITIAL_BUILD,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_INITIAL_BUILD,FUNCTION,26, -- =============================================================================
WS_ACT_INITIAL_BUILD,FUNCTION,27,
WS_ACT_INITIAL_BUILD,FUNCTION,28, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,29, -- Constants
WS_ACT_INITIAL_BUILD,FUNCTION,30, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,31, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_INITIAL_BUILD,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_INITIAL_BUILD,FUNCTION,33, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_INITIAL_BUILD,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_INITIAL_BUILD,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_INITIAL_BUILD,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_INITIAL_BUILD,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_INITIAL_BUILD,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_INITIAL_BUILD,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_INITIAL_BUILD,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_INITIAL_BUILD,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_INITIAL_BUILD,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_INITIAL_BUILD,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_INITIAL_BUILD,FUNCTION,44, v_ws_obj_export constant number := 13;
WS_ACT_INITIAL_BUILD,FUNCTION,45, v_ws_obj_cube constant number := 15;
WS_ACT_INITIAL_BUILD,FUNCTION,46, v_ws_obj_cube_virtual constant number := 16;
WS_ACT_INITIAL_BUILD,FUNCTION,47, v_ws_obj_report constant number := 17;
WS_ACT_INITIAL_BUILD,FUNCTION,48, v_ws_obj_view constant number := 18;
WS_ACT_INITIAL_BUILD,FUNCTION,49, v_ws_obj_file constant number := 19;
WS_ACT_INITIAL_BUILD,FUNCTION,50, v_ws_obj_join constant number := 20;
WS_ACT_INITIAL_BUILD,FUNCTION,51, v_ws_obj_retro constant number := 21;
WS_ACT_INITIAL_BUILD,FUNCTION,52, v_ws_obj_retro_copy constant number := 22;
WS_ACT_INITIAL_BUILD,FUNCTION,53, v_ws_obj_olap_cube constant number := 23;
WS_ACT_INITIAL_BUILD,FUNCTION,54, v_ws_obj_olap_dim constant number := 24;
WS_ACT_INITIAL_BUILD,FUNCTION,55, v_ws_obj_olap_role constant number := 25;
WS_ACT_INITIAL_BUILD,FUNCTION,56, v_ws_obj_ods constant number := 26;
WS_ACT_INITIAL_BUILD,FUNCTION,57, v_ws_obj_normal constant number := 27;
WS_ACT_INITIAL_BUILD,FUNCTION,58, v_ws_obj_hub constant number := 28;
WS_ACT_INITIAL_BUILD,FUNCTION,59, v_ws_obj_satellite constant number := 29;
WS_ACT_INITIAL_BUILD,FUNCTION,60, v_ws_obj_link constant number := 30;
WS_ACT_INITIAL_BUILD,FUNCTION,61, v_ws_obj_custom1 constant number := 31;
WS_ACT_INITIAL_BUILD,FUNCTION,62, v_ws_obj_custom2 constant number := 32;
WS_ACT_INITIAL_BUILD,FUNCTION,63,
WS_ACT_INITIAL_BUILD,FUNCTION,64, v_ws_obj_job constant number := 50;
WS_ACT_INITIAL_BUILD,FUNCTION,65, v_ws_obj_source_mapping constant number := 69;
WS_ACT_INITIAL_BUILD,FUNCTION,66,
WS_ACT_INITIAL_BUILD,FUNCTION,67, v_ws_act_drop constant number := 1;
WS_ACT_INITIAL_BUILD,FUNCTION,68, v_ws_act_create constant number := 2;
WS_ACT_INITIAL_BUILD,FUNCTION,69, v_ws_act_drop_all constant number := 3;
WS_ACT_INITIAL_BUILD,FUNCTION,70, v_ws_act_pre_drop constant number := 4;
WS_ACT_INITIAL_BUILD,FUNCTION,71, v_ws_act_load constant number := 5;
WS_ACT_INITIAL_BUILD,FUNCTION,72, v_ws_act_update constant number := 6;
WS_ACT_INITIAL_BUILD,FUNCTION,73, v_ws_act_execute constant number := 7;
WS_ACT_INITIAL_BUILD,FUNCTION,74, v_ws_act_process constant number := 8;
WS_ACT_INITIAL_BUILD,FUNCTION,75, v_ws_act_build constant number := 9;
WS_ACT_INITIAL_BUILD,FUNCTION,76, v_ws_act_build_all constant number := 10;
WS_ACT_INITIAL_BUILD,FUNCTION,77, v_ws_act_analyze constant number := 11;
WS_ACT_INITIAL_BUILD,FUNCTION,78, v_ws_act_quick_analyze constant number := 12;
WS_ACT_INITIAL_BUILD,FUNCTION,79, v_ws_act_statistics constant number := 13;
WS_ACT_INITIAL_BUILD,FUNCTION,80, v_ws_act_quick_statistics constant number := 14;
WS_ACT_INITIAL_BUILD,FUNCTION,81, v_ws_act_initial constant number := 15;
WS_ACT_INITIAL_BUILD,FUNCTION,82, v_ws_act_cube_dim constant number := 16;
WS_ACT_INITIAL_BUILD,FUNCTION,83, v_ws_act_db_dim constant number := 17;
WS_ACT_INITIAL_BUILD,FUNCTION,84, v_ws_act_custom constant number := 18;
WS_ACT_INITIAL_BUILD,FUNCTION,85, v_ws_act_truncate constant number := 19;
WS_ACT_INITIAL_BUILD,FUNCTION,86,
WS_ACT_INITIAL_BUILD,FUNCTION,87, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,88, -- Variables
WS_ACT_INITIAL_BUILD,FUNCTION,89, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,90, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_INITIAL_BUILD,FUNCTION,91, v_step integer := 0; -- return code
WS_ACT_INITIAL_BUILD,FUNCTION,92, v_result integer := 0; -- return code
WS_ACT_INITIAL_BUILD,FUNCTION,93, v_stmt varchar2(1024);
WS_ACT_INITIAL_BUILD,FUNCTION,94, v_cursor number;
WS_ACT_INITIAL_BUILD,FUNCTION,95, v_procedure_key number;
WS_ACT_INITIAL_BUILD,FUNCTION,96, v_procedure varchar2(64);
WS_ACT_INITIAL_BUILD,FUNCTION,97, v_procedure_type varchar2(1);
WS_ACT_INITIAL_BUILD,FUNCTION,98,
WS_ACT_INITIAL_BUILD,FUNCTION,99,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_INITIAL_BUILD,FUNCTION,100,BEGIN
WS_ACT_INITIAL_BUILD,FUNCTION,101,
WS_ACT_INITIAL_BUILD,FUNCTION,102, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,103, -- See what table we have and get the update procedure
WS_ACT_INITIAL_BUILD,FUNCTION,104, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,105, BEGIN
WS_ACT_INITIAL_BUILD,FUNCTION,106, v_step := 100;
WS_ACT_INITIAL_BUILD,FUNCTION,107, v_procedure_key := 0;
WS_ACT_INITIAL_BUILD,FUNCTION,108, If p_obj_type = v_ws_obj_dim Then
WS_ACT_INITIAL_BUILD,FUNCTION,109, Select dt_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,110, From ws_dim_tab
WS_ACT_INITIAL_BUILD,FUNCTION,111, Where dt_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,112, ElsIf p_obj_type = v_ws_obj_dim_view Then
WS_ACT_INITIAL_BUILD,FUNCTION,113, Select dt_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,114, From ws_dim_tab
WS_ACT_INITIAL_BUILD,FUNCTION,115, Where dt_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,116, ElsIf p_obj_type = v_ws_obj_view Then
WS_ACT_INITIAL_BUILD,FUNCTION,117, Select vt_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,118, From ws_view_tab
WS_ACT_INITIAL_BUILD,FUNCTION,119, Where vt_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,120, ElsIf p_obj_type = v_ws_obj_fact Then
WS_ACT_INITIAL_BUILD,FUNCTION,121, Select ft_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,122, From ws_fact_tab
WS_ACT_INITIAL_BUILD,FUNCTION,123, Where ft_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,124, ElsIf p_obj_type = v_ws_obj_fact_kpi Then
WS_ACT_INITIAL_BUILD,FUNCTION,125, Select ft_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,126, From ws_fact_tab
WS_ACT_INITIAL_BUILD,FUNCTION,127, Where ft_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,128, ElsIf p_obj_type = v_ws_obj_stage Then
WS_ACT_INITIAL_BUILD,FUNCTION,129, Select st_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,130, From ws_stage_tab
WS_ACT_INITIAL_BUILD,FUNCTION,131, Where st_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,132, ElsIf p_obj_type = v_ws_obj_agg Then
WS_ACT_INITIAL_BUILD,FUNCTION,133, Select at_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,134, From ws_agg_tab
WS_ACT_INITIAL_BUILD,FUNCTION,135, Where at_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,136, ElsIf p_obj_type = v_ws_obj_retro_copy Then
WS_ACT_INITIAL_BUILD,FUNCTION,137, Select rt_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,138, From ws_retro_tab
WS_ACT_INITIAL_BUILD,FUNCTION,139, Where rt_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,140, ElsIf p_obj_type = v_ws_obj_ods Then
WS_ACT_INITIAL_BUILD,FUNCTION,141, Select ot_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,142, From ws_ods_tab
WS_ACT_INITIAL_BUILD,FUNCTION,143, Where ot_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,144, ElsIf p_obj_type = v_ws_obj_normal
WS_ACT_INITIAL_BUILD,FUNCTION,145, OR p_obj_type = v_ws_obj_hub
WS_ACT_INITIAL_BUILD,FUNCTION,146, OR p_obj_type = v_ws_obj_satellite
WS_ACT_INITIAL_BUILD,FUNCTION,147, OR p_obj_type = v_ws_obj_link
WS_ACT_INITIAL_BUILD,FUNCTION,148, OR p_obj_type = v_ws_obj_custom1
WS_ACT_INITIAL_BUILD,FUNCTION,149, OR p_obj_type = v_ws_obj_custom2
WS_ACT_INITIAL_BUILD,FUNCTION,150, Then
WS_ACT_INITIAL_BUILD,FUNCTION,151, Select nt_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,152, From ws_normal_tab
WS_ACT_INITIAL_BUILD,FUNCTION,153, Where nt_obj_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,154, ElsIf p_obj_type = v_ws_obj_source_mapping Then
WS_ACT_INITIAL_BUILD,FUNCTION,155, Select smt_build_key into v_procedure_key
WS_ACT_INITIAL_BUILD,FUNCTION,156, From ws_source_mapping_tab
WS_ACT_INITIAL_BUILD,FUNCTION,157, Where smt_source_mapping_key = p_obj_key;
WS_ACT_INITIAL_BUILD,FUNCTION,158, End If;
WS_ACT_INITIAL_BUILD,FUNCTION,159, EXCEPTION WHEN OTHERS THEN
WS_ACT_INITIAL_BUILD,FUNCTION,160, v_step := 200;
WS_ACT_INITIAL_BUILD,FUNCTION,161, If SQLCODE = 100 Then
WS_ACT_INITIAL_BUILD,FUNCTION,162, p_return_msg := 'Unable to acquire custom (build) procedure for ' ||p_task_name;
WS_ACT_INITIAL_BUILD,FUNCTION,163, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,164, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,165, p_return_msg := 'Please check that a custom (build) procedure has been defined';
WS_ACT_INITIAL_BUILD,FUNCTION,166, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,167, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,168, p_status_code := -3;
WS_ACT_INITIAL_BUILD,FUNCTION,169, Else
WS_ACT_INITIAL_BUILD,FUNCTION,170, p_return_msg := 'Unable to acquire custom (build) procedure for ' ||p_task_name;
WS_ACT_INITIAL_BUILD,FUNCTION,171, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,172, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,173, p_status_code := -3;
WS_ACT_INITIAL_BUILD,FUNCTION,174, End If;
WS_ACT_INITIAL_BUILD,FUNCTION,175, END;
WS_ACT_INITIAL_BUILD,FUNCTION,176,
WS_ACT_INITIAL_BUILD,FUNCTION,177, v_step := 300;
WS_ACT_INITIAL_BUILD,FUNCTION,178,
WS_ACT_INITIAL_BUILD,FUNCTION,179, If v_procedure_key <= 0
WS_ACT_INITIAL_BUILD,FUNCTION,180, Or v_procedure_key is NULL Then
WS_ACT_INITIAL_BUILD,FUNCTION,181, v_MsgText := 'Custom (build) procedure not found for table '||p_task_name;
WS_ACT_INITIAL_BUILD,FUNCTION,182, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,183, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,184, p_return_msg := 'Please check that a custom (build) procedure has been defined';
WS_ACT_INITIAL_BUILD,FUNCTION,185, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,186, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,187, p_return_msg := 'Custom (build) procedure not found for table '||p_task_name;
WS_ACT_INITIAL_BUILD,FUNCTION,188, p_status_code := -2;
WS_ACT_INITIAL_BUILD,FUNCTION,189, v_result := -2;
WS_ACT_INITIAL_BUILD,FUNCTION,190, RETURN v_result;
WS_ACT_INITIAL_BUILD,FUNCTION,191, End If;
WS_ACT_INITIAL_BUILD,FUNCTION,192,
WS_ACT_INITIAL_BUILD,FUNCTION,193, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,194, -- Get the procedure name
WS_ACT_INITIAL_BUILD,FUNCTION,195, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,196, v_step := 400;
WS_ACT_INITIAL_BUILD,FUNCTION,197, SELECT ph_name, NVL(ph_type,'P')
WS_ACT_INITIAL_BUILD,FUNCTION,198, INTO v_procedure, v_procedure_type
WS_ACT_INITIAL_BUILD,FUNCTION,199, FROM ws_pro_header
WS_ACT_INITIAL_BUILD,FUNCTION,200, WHERE ph_obj_key = v_procedure_key;
WS_ACT_INITIAL_BUILD,FUNCTION,201,
WS_ACT_INITIAL_BUILD,FUNCTION,202,-- --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,203,-- -- IF SQLBLOCK then return for calling
WS_ACT_INITIAL_BUILD,FUNCTION,204,-- --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,205,
WS_ACT_INITIAL_BUILD,FUNCTION,206, v_step := 500;
WS_ACT_INITIAL_BUILD,FUNCTION,207, IF v_procedure_type = 'B'
WS_ACT_INITIAL_BUILD,FUNCTION,208, THEN
WS_ACT_INITIAL_BUILD,FUNCTION,209, -- run a POST SQLBLOCK by returning a result of 17
WS_ACT_INITIAL_BUILD,FUNCTION,210, p_status_code := 17;
WS_ACT_INITIAL_BUILD,FUNCTION,211, v_result := 2;
WS_ACT_INITIAL_BUILD,FUNCTION,212, RETURN v_result;
WS_ACT_INITIAL_BUILD,FUNCTION,213, END IF;
WS_ACT_INITIAL_BUILD,FUNCTION,214,
WS_ACT_INITIAL_BUILD,FUNCTION,215, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,216, -- Bind the columns and execute
WS_ACT_INITIAL_BUILD,FUNCTION,217, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,218, v_step := 600;
WS_ACT_INITIAL_BUILD,FUNCTION,219, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_INITIAL_BUILD,FUNCTION,220, v_step := 700;
WS_ACT_INITIAL_BUILD,FUNCTION,221, -- Build up our execute statement for the procedure
WS_ACT_INITIAL_BUILD,FUNCTION,222, v_stmt := 'BEGIN '|| v_procedure
WS_ACT_INITIAL_BUILD,FUNCTION,223, || '(:p1, :p2, :p3, :p4, :p5, :p6, :p7); END;';
WS_ACT_INITIAL_BUILD,FUNCTION,224, v_step := 800;
WS_ACT_INITIAL_BUILD,FUNCTION,225, DBMS_SQL.PARSE(v_cursor, v_stmt, 1);
WS_ACT_INITIAL_BUILD,FUNCTION,226, v_step := 900;
WS_ACT_INITIAL_BUILD,FUNCTION,227,
WS_ACT_INITIAL_BUILD,FUNCTION,228, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p1', p_sequence);
WS_ACT_INITIAL_BUILD,FUNCTION,229, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p2', p_job_name,64);
WS_ACT_INITIAL_BUILD,FUNCTION,230, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p3', p_task_name,64);
WS_ACT_INITIAL_BUILD,FUNCTION,231, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p4', p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,232, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p5', p_task_id);
WS_ACT_INITIAL_BUILD,FUNCTION,233, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p6', p_return_msg,1024);
WS_ACT_INITIAL_BUILD,FUNCTION,234, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p7', p_status_code);
WS_ACT_INITIAL_BUILD,FUNCTION,235, v_step := 1000;
WS_ACT_INITIAL_BUILD,FUNCTION,236,
WS_ACT_INITIAL_BUILD,FUNCTION,237, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,238, -- Call the procedure
WS_ACT_INITIAL_BUILD,FUNCTION,239, --=====================================================
WS_ACT_INITIAL_BUILD,FUNCTION,240, BEGIN
WS_ACT_INITIAL_BUILD,FUNCTION,241, v_step := 1100;
WS_ACT_INITIAL_BUILD,FUNCTION,242, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_INITIAL_BUILD,FUNCTION,243, v_step := 1200;
WS_ACT_INITIAL_BUILD,FUNCTION,244, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p6', p_return_msg);
WS_ACT_INITIAL_BUILD,FUNCTION,245, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p7', p_status_code);
WS_ACT_INITIAL_BUILD,FUNCTION,246, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_INITIAL_BUILD,FUNCTION,247, EXCEPTION WHEN OTHERS THEN
WS_ACT_INITIAL_BUILD,FUNCTION,248, p_return_msg := 'Unhandled Exception in call to ' ||v_procedure;
WS_ACT_INITIAL_BUILD,FUNCTION,249, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,250, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,251, p_status_code := -3;
WS_ACT_INITIAL_BUILD,FUNCTION,252, END;
WS_ACT_INITIAL_BUILD,FUNCTION,253,
WS_ACT_INITIAL_BUILD,FUNCTION,254, COMMIT;
WS_ACT_INITIAL_BUILD,FUNCTION,255, RETURN v_result;
WS_ACT_INITIAL_BUILD,FUNCTION,256,
WS_ACT_INITIAL_BUILD,FUNCTION,257,EXCEPTION
WS_ACT_INITIAL_BUILD,FUNCTION,258, WHEN OTHERS THEN
WS_ACT_INITIAL_BUILD,FUNCTION,259, v_MsgText := 'Unhandled Exception in Custom procedure routine ws_act_initial_build. '||
WS_ACT_INITIAL_BUILD,FUNCTION,260, ' Step ' ||v_step;
WS_ACT_INITIAL_BUILD,FUNCTION,261, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_INITIAL_BUILD,FUNCTION,262, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_INITIAL_BUILD,FUNCTION,263, p_return_msg := 'Unhandled Exception in Custom procedure routine ws_act_initial_build step ' ||v_step;
WS_ACT_INITIAL_BUILD,FUNCTION,264, p_status_code := -3;
WS_ACT_INITIAL_BUILD,FUNCTION,265, RETURN -3;
WS_ACT_INITIAL_BUILD,FUNCTION,266,
WS_ACT_INITIAL_BUILD,FUNCTION,267,END ws_act_initial_build;
WS_ACT_INITIAL_BUILD,FUNCTION,268,
WS_ACT_LOAD,FUNCTION,1,FUNCTION ws_act_load
WS_ACT_LOAD,FUNCTION,2, (
WS_ACT_LOAD,FUNCTION,3, p_sequence IN number,
WS_ACT_LOAD,FUNCTION,4, p_obj_type IN number,
WS_ACT_LOAD,FUNCTION,5, p_action IN number,
WS_ACT_LOAD,FUNCTION,6, p_obj_key IN number,
WS_ACT_LOAD,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_LOAD,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_LOAD,FUNCTION,9, p_job_id IN number,
WS_ACT_LOAD,FUNCTION,10, p_task_id IN number,
WS_ACT_LOAD,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_LOAD,FUNCTION,12, p_status_code OUT number
WS_ACT_LOAD,FUNCTION,13, )
WS_ACT_LOAD,FUNCTION,14,RETURN INTEGER
WS_ACT_LOAD,FUNCTION,15,AUTHID CURRENT_USER
WS_ACT_LOAD,FUNCTION,16,IS
WS_ACT_LOAD,FUNCTION,17,
WS_ACT_LOAD,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_LOAD,FUNCTION,19,
WS_ACT_LOAD,FUNCTION,20, -- =============================================================================
WS_ACT_LOAD,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_LOAD,FUNCTION,22, -- Script Name : ws_act_load
WS_ACT_LOAD,FUNCTION,23, -- Description : Loads a load table
WS_ACT_LOAD,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_LOAD,FUNCTION,25, -- =============================================================================
WS_ACT_LOAD,FUNCTION,26,
WS_ACT_LOAD,FUNCTION,27, --=====================================================
WS_ACT_LOAD,FUNCTION,28, -- Constants
WS_ACT_LOAD,FUNCTION,29, -- =====================================================
WS_ACT_LOAD,FUNCTION,30,
WS_ACT_LOAD,FUNCTION,31, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_LOAD,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_LOAD,FUNCTION,33, v_ws_obj_directive constant number := 2;
WS_ACT_LOAD,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_LOAD,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_LOAD,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_LOAD,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_LOAD,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_LOAD,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_LOAD,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_LOAD,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_LOAD,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_LOAD,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_LOAD,FUNCTION,44,
WS_ACT_LOAD,FUNCTION,45, v_ws_act_drop constant number := 0;
WS_ACT_LOAD,FUNCTION,46, v_ws_act_create constant number := 1;
WS_ACT_LOAD,FUNCTION,47, v_ws_act_compile constant number := 2;
WS_ACT_LOAD,FUNCTION,48, v_ws_act_drop_all constant number := 3;
WS_ACT_LOAD,FUNCTION,49, v_ws_act_pre_drop constant number := 4;
WS_ACT_LOAD,FUNCTION,50, v_ws_act_load constant number := 5;
WS_ACT_LOAD,FUNCTION,51, v_ws_act_update constant number := 6;
WS_ACT_LOAD,FUNCTION,52, v_ws_act_execute constant number := 7;
WS_ACT_LOAD,FUNCTION,53, v_ws_act_process constant number := 8;
WS_ACT_LOAD,FUNCTION,54, v_ws_act_build constant number := 9;
WS_ACT_LOAD,FUNCTION,55, v_ws_act_build_all constant number := 10;
WS_ACT_LOAD,FUNCTION,56, v_ws_act_analyze constant number := 11;
WS_ACT_LOAD,FUNCTION,57, v_ws_act_quick_analyze constant number := 12;
WS_ACT_LOAD,FUNCTION,58, v_ws_act_statistics constant number := 13;
WS_ACT_LOAD,FUNCTION,59, v_ws_act_quick_statistics constant number := 14;
WS_ACT_LOAD,FUNCTION,60,
WS_ACT_LOAD,FUNCTION,61, -- =====================================================
WS_ACT_LOAD,FUNCTION,62, -- Variables
WS_ACT_LOAD,FUNCTION,63, -- =====================================================
WS_ACT_LOAD,FUNCTION,64, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_LOAD,FUNCTION,65, v_DbText varchar2(1024); -- Text in audit_trail
WS_ACT_LOAD,FUNCTION,66, v_step integer := 0; -- return code
WS_ACT_LOAD,FUNCTION,67, v_result integer := 0; -- return code
WS_ACT_LOAD,FUNCTION,68, v_tabcol varchar2(512);
WS_ACT_LOAD,FUNCTION,69, v_sql varchar2(4000);
WS_ACT_LOAD,FUNCTION,70, v_stmt_pre_sql varchar2(4000);
WS_ACT_LOAD,FUNCTION,71, v_stmt_insert varchar2(4000);
WS_ACT_LOAD,FUNCTION,72, v_stmt_select varchar2(4000);
WS_ACT_LOAD,FUNCTION,73, v_stmt_from_where varchar2(4000);
WS_ACT_LOAD,FUNCTION,74, v_stmt_select_cols0 varchar2(4000);
WS_ACT_LOAD,FUNCTION,75, v_stmt_select_cols1 varchar2(4000);
WS_ACT_LOAD,FUNCTION,76, v_stmt_select_cols2 varchar2(4000);
WS_ACT_LOAD,FUNCTION,77, v_stmt_select_cols3 varchar2(4000);
WS_ACT_LOAD,FUNCTION,78, v_stmt_insert_cols0 varchar2(4000);
WS_ACT_LOAD,FUNCTION,79, v_stmt_insert_cols1 varchar2(4000);
WS_ACT_LOAD,FUNCTION,80, v_stmt_insert_cols2 varchar2(4000);
WS_ACT_LOAD,FUNCTION,81, v_stmt_insert_cols3 varchar2(4000);
WS_ACT_LOAD,FUNCTION,82, v_create varchar2(4000);
WS_ACT_LOAD,FUNCTION,83, v_count integer := 0;
WS_ACT_LOAD,FUNCTION,84, v_view integer := 0;
WS_ACT_LOAD,FUNCTION,85, v_cursor number;
WS_ACT_LOAD,FUNCTION,86, v_col_found integer := 1;
WS_ACT_LOAD,FUNCTION,87, v_row_count integer := 0;
WS_ACT_LOAD,FUNCTION,88, v_row integer := 0;
WS_ACT_LOAD,FUNCTION,89, v_len_select integer := 0;
WS_ACT_LOAD,FUNCTION,90, v_len_insert integer := 0;
WS_ACT_LOAD,FUNCTION,91, v_len_select_cols integer := 0;
WS_ACT_LOAD,FUNCTION,92, v_len_insert_cols integer := 0;
WS_ACT_LOAD,FUNCTION,93, v_len_from_where integer := 0;
WS_ACT_LOAD,FUNCTION,94, v_len_total integer := 0;
WS_ACT_LOAD,FUNCTION,95, v_MissingMsg varchar2(4000); -- Message for missing columns
WS_ACT_LOAD,FUNCTION,96, v_MissingBug integer := 0;
WS_ACT_LOAD,FUNCTION,97, v_MissingRet varchar2(1);
WS_ACT_LOAD,FUNCTION,98, v_where_clause varchar2(4000);
WS_ACT_LOAD,FUNCTION,99, v_spos integer := 0;
WS_ACT_LOAD,FUNCTION,100, v_epos integer := 0;
WS_ACT_LOAD,FUNCTION,101, v_work_select varchar2(4000);
WS_ACT_LOAD,FUNCTION,102, v_work_insert varchar2(4000);
WS_ACT_LOAD,FUNCTION,103, v_parameter varchar2(4000);
WS_ACT_LOAD,FUNCTION,104, v_t1pos integer := 0;
WS_ACT_LOAD,FUNCTION,105, v_t2pos integer := 0;
WS_ACT_LOAD,FUNCTION,106, v_work2 varchar2(4000);
WS_ACT_LOAD,FUNCTION,107, v_schema_flag integer := 0;
WS_ACT_LOAD,FUNCTION,108, v_satellite_ind varchar2(1);
WS_ACT_LOAD,FUNCTION,109, v_dss_schema varchar2(64);
WS_ACT_LOAD,FUNCTION,110, v_table_schema varchar2(64);
WS_ACT_LOAD,FUNCTION,111, v_table_name varchar2(64);
WS_ACT_LOAD,FUNCTION,112, v_table_with_schema varchar2(150);
WS_ACT_LOAD,FUNCTION,113,
WS_ACT_LOAD,FUNCTION,114, v_LoadRec ws_load_tab%ROWTYPE;
WS_ACT_LOAD,FUNCTION,115, v_ConnectRec ws_dbc_connect%ROWTYPE;
WS_ACT_LOAD,FUNCTION,116, v_ScriptRec ws_scr_header%ROWTYPE;
WS_ACT_LOAD,FUNCTION,117,
WS_ACT_LOAD,FUNCTION,118, v_start_location integer := 1;
WS_ACT_LOAD,FUNCTION,119, v_end_location integer;
WS_ACT_LOAD,FUNCTION,120, v_statement varchar2(32000);
WS_ACT_LOAD,FUNCTION,121, v_delimiter varchar2(4000);
WS_ACT_LOAD,FUNCTION,122,
WS_ACT_LOAD,FUNCTION,123, -- =====================================================
WS_ACT_LOAD,FUNCTION,124, -- Cursor for all columns in the load table
WS_ACT_LOAD,FUNCTION,125, -- =====================================================
WS_ACT_LOAD,FUNCTION,126, CURSOR c_Load IS
WS_ACT_LOAD,FUNCTION,127, SELECT * FROM ws_load_col
WS_ACT_LOAD,FUNCTION,128, WHERE lc_obj_key = p_obj_key
WS_ACT_LOAD,FUNCTION,129, ORDER BY lc_order;
WS_ACT_LOAD,FUNCTION,130,
WS_ACT_LOAD,FUNCTION,131,BEGIN
WS_ACT_LOAD,FUNCTION,132, -- =====================================================
WS_ACT_LOAD,FUNCTION,133, -- See if we have the flag set for including schema
WS_ACT_LOAD,FUNCTION,134, -- =====================================================
WS_ACT_LOAD,FUNCTION,135,
WS_ACT_LOAD,FUNCTION,136, v_step := 100;
WS_ACT_LOAD,FUNCTION,137, v_satellite_ind := '';
WS_ACT_LOAD,FUNCTION,138, v_table_schema := '';
WS_ACT_LOAD,FUNCTION,139,
WS_ACT_LOAD,FUNCTION,140, -- needs to look up the schema from ws_dbc_target
WS_ACT_LOAD,FUNCTION,141, BEGIN
WS_ACT_LOAD,FUNCTION,142, SELECT NVL(dt_schema, ''), oo_name
WS_ACT_LOAD,FUNCTION,143, INTO v_table_schema, v_table_name
WS_ACT_LOAD,FUNCTION,144, FROM ws_obj_object
WS_ACT_LOAD,FUNCTION,145, LEFT JOIN ws_dbc_target
WS_ACT_LOAD,FUNCTION,146, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_LOAD,FUNCTION,147, WHERE ws_obj_object.oo_obj_key = p_obj_key;
WS_ACT_LOAD,FUNCTION,148,
WS_ACT_LOAD,FUNCTION,149, v_table_schema := TRIM(v_table_schema);
WS_ACT_LOAD,FUNCTION,150,
WS_ACT_LOAD,FUNCTION,151, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_LOAD,FUNCTION,152, v_MsgText := 'Object could not be found - key:' || p_obj_key;
WS_ACT_LOAD,FUNCTION,153, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, NULL, NULL, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,154,
WS_ACT_LOAD,FUNCTION,155, p_return_msg := 'Object could not be found';
WS_ACT_LOAD,FUNCTION,156, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,157, RETURN -2;
WS_ACT_LOAD,FUNCTION,158, END;
WS_ACT_LOAD,FUNCTION,159,
WS_ACT_LOAD,FUNCTION,160, v_step := 110;
WS_ACT_LOAD,FUNCTION,161,
WS_ACT_LOAD,FUNCTION,162, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_LOAD,FUNCTION,163, -- meta_satellite_ind = A
WS_ACT_LOAD,FUNCTION,164, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_LOAD,FUNCTION,165, SELECT meta_satellite_ind, TRIM(meta_dss_schema)
WS_ACT_LOAD,FUNCTION,166, INTO v_satellite_ind, v_dss_schema
WS_ACT_LOAD,FUNCTION,167, FROM ws_meta
WS_ACT_LOAD,FUNCTION,168, WHERE rownum = 1;
WS_ACT_LOAD,FUNCTION,169,
WS_ACT_LOAD,FUNCTION,170, IF v_satellite_ind = 'A' THEN
WS_ACT_LOAD,FUNCTION,171, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,172, v_schema_flag := 1;
WS_ACT_LOAD,FUNCTION,173, v_table_schema := v_dss_schema;
WS_ACT_LOAD,FUNCTION,174, END IF;
WS_ACT_LOAD,FUNCTION,175, END IF;
WS_ACT_LOAD,FUNCTION,176,
WS_ACT_LOAD,FUNCTION,177, v_step := 120;
WS_ACT_LOAD,FUNCTION,178,
WS_ACT_LOAD,FUNCTION,179, -- If still not set then defaults to the current user
WS_ACT_LOAD,FUNCTION,180, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_LOAD,FUNCTION,181, SELECT USER
WS_ACT_LOAD,FUNCTION,182, INTO v_table_schema
WS_ACT_LOAD,FUNCTION,183, FROM dual;
WS_ACT_LOAD,FUNCTION,184, END IF;
WS_ACT_LOAD,FUNCTION,185, END IF;
WS_ACT_LOAD,FUNCTION,186,
WS_ACT_LOAD,FUNCTION,187, v_step := 130;
WS_ACT_LOAD,FUNCTION,188,
WS_ACT_LOAD,FUNCTION,189, v_table_schema := TRIM(v_table_schema);
WS_ACT_LOAD,FUNCTION,190, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_LOAD,FUNCTION,191,
WS_ACT_LOAD,FUNCTION,192, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,193, v_table_with_schema := v_table_with_schema || '.';
WS_ACT_LOAD,FUNCTION,194, END IF;
WS_ACT_LOAD,FUNCTION,195,
WS_ACT_LOAD,FUNCTION,196, v_step := 140;
WS_ACT_LOAD,FUNCTION,197, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_LOAD,FUNCTION,198,
WS_ACT_LOAD,FUNCTION,199, -- =====================================================
WS_ACT_LOAD,FUNCTION,200, -- First get the load table information
WS_ACT_LOAD,FUNCTION,201, -- =====================================================
WS_ACT_LOAD,FUNCTION,202, v_step := 200;
WS_ACT_LOAD,FUNCTION,203, SELECT * INTO v_LoadRec
WS_ACT_LOAD,FUNCTION,204, FROM ws_load_tab
WS_ACT_LOAD,FUNCTION,205, WHERE lt_obj_key = p_obj_key;
WS_ACT_LOAD,FUNCTION,206,
WS_ACT_LOAD,FUNCTION,207, -- =====================================================
WS_ACT_LOAD,FUNCTION,208, -- Handle any pre - load action
WS_ACT_LOAD,FUNCTION,209, -- =====================================================
WS_ACT_LOAD,FUNCTION,210, v_step := 300;
WS_ACT_LOAD,FUNCTION,211, IF v_LoadRec.lt_pre_action = 'T' OR v_LoadRec.lt_pre_action = 'B' THEN
WS_ACT_LOAD,FUNCTION,212, v_step := 400;
WS_ACT_LOAD,FUNCTION,213, v_stmt_insert := 'Truncate table ' || v_table_with_schema;
WS_ACT_LOAD,FUNCTION,214,
WS_ACT_LOAD,FUNCTION,215, IF v_LoadRec.lt_load_options IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,216, v_epos := Instr(v_LoadRec.lt_load_options, 'TruncOption~=');
WS_ACT_LOAD,FUNCTION,217, IF v_epos > 0 THEN
WS_ACT_LOAD,FUNCTION,218, v_spos := to_number(substr(v_LoadRec.lt_load_options, v_epos + 13, 3));
WS_ACT_LOAD,FUNCTION,219, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,220, v_stmt_insert := v_stmt_insert || ' ' || substr(v_LoadRec.lt_load_options, v_epos + 17, v_spos);
WS_ACT_LOAD,FUNCTION,221, END IF;
WS_ACT_LOAD,FUNCTION,222, END IF;
WS_ACT_LOAD,FUNCTION,223, END IF;
WS_ACT_LOAD,FUNCTION,224,
WS_ACT_LOAD,FUNCTION,225, BEGIN
WS_ACT_LOAD,FUNCTION,226, EXECUTE IMMEDIATE v_stmt_insert;
WS_ACT_LOAD,FUNCTION,227, COMMIT;
WS_ACT_LOAD,FUNCTION,228,
WS_ACT_LOAD,FUNCTION,229, v_MsgText := 'Truncated table ' || v_table_with_schema;
WS_ACT_LOAD,FUNCTION,230, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, NULL, NULL, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,231,
WS_ACT_LOAD,FUNCTION,232, EXCEPTION WHEN OTHERS THEN COMMIT;
WS_ACT_LOAD,FUNCTION,233,
WS_ACT_LOAD,FUNCTION,234, v_DbText := substr(SQLERRM, 1, 1023);
WS_ACT_LOAD,FUNCTION,235, v_MsgText := 'Unhandled exception in truncate of ' || v_table_with_schema;
WS_ACT_LOAD,FUNCTION,236, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText , p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,237,
WS_ACT_LOAD,FUNCTION,238, v_MsgText := substr(v_stmt_insert, 1, 1023);
WS_ACT_LOAD,FUNCTION,239, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText , p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,240,
WS_ACT_LOAD,FUNCTION,241, p_return_msg := 'Unhandled exception in truncate of ' || v_table_with_schema;
WS_ACT_LOAD,FUNCTION,242, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,243, v_result := -2;
WS_ACT_LOAD,FUNCTION,244,
WS_ACT_LOAD,FUNCTION,245, RETURN v_result;
WS_ACT_LOAD,FUNCTION,246, END;
WS_ACT_LOAD,FUNCTION,247, END IF;
WS_ACT_LOAD,FUNCTION,248,
WS_ACT_LOAD,FUNCTION,249, IF v_LoadRec.lt_pre_action = 'E' OR v_LoadRec.lt_pre_action = 'B' THEN
WS_ACT_LOAD,FUNCTION,250, v_step := 500;
WS_ACT_LOAD,FUNCTION,251, v_stmt_pre_sql := rtrim(v_LoadRec.lt_pre_sql);
WS_ACT_LOAD,FUNCTION,252, v_stmt_pre_sql := replace(v_stmt_pre_sql, CHR(10), ' ');
WS_ACT_LOAD,FUNCTION,253, v_stmt_pre_sql := replace(v_stmt_pre_sql, CHR(13), ' ');
WS_ACT_LOAD,FUNCTION,254, v_stmt_pre_sql := replace(v_stmt_pre_sql, '$OBJECT$', v_table_with_schema);
WS_ACT_LOAD,FUNCTION,255, v_stmt_pre_sql := replace(v_stmt_pre_sql, '$SCHEMA$', v_table_schema);
WS_ACT_LOAD,FUNCTION,256,
WS_ACT_LOAD,FUNCTION,257, -- Execute the statements individually based on the end-statement-indicator in the pre-sql statement
WS_ACT_LOAD,FUNCTION,258, -- Get the initial end location of the statement
WS_ACT_LOAD,FUNCTION,259, SELECT COALESCE(LENGTH(v_stmt_pre_sql),0) INTO v_end_location FROM DUAL;
WS_ACT_LOAD,FUNCTION,260,
WS_ACT_LOAD,FUNCTION,261, -- Get the end-of-statement indicator, defaults to <EOS>
WS_ACT_LOAD,FUNCTION,262, SELECT COALESCE(ta_text_3, '<EOS>') INTO v_delimiter FROM ws_table_attributes WHERE ta_obj_key = 0 and ta_type = 'M';
WS_ACT_LOAD,FUNCTION,263,
WS_ACT_LOAD,FUNCTION,264, -- Loop through the override statement and execute each statement individually
WS_ACT_LOAD,FUNCTION,265, WHILE v_end_location > 0
WS_ACT_LOAD,FUNCTION,266, LOOP
WS_ACT_LOAD,FUNCTION,267, SELECT INSTR(v_stmt_pre_sql,v_delimiter, v_start_location) INTO v_end_location FROM DUAL;
WS_ACT_LOAD,FUNCTION,268, SELECT CASE
WS_ACT_LOAD,FUNCTION,269, WHEN v_end_location > 0
WS_ACT_LOAD,FUNCTION,270, THEN SUBSTR(v_stmt_pre_sql,v_start_location,v_end_location -v_start_location)
WS_ACT_LOAD,FUNCTION,271, ELSE SUBSTR(v_stmt_pre_sql,v_start_location)
WS_ACT_LOAD,FUNCTION,272, END INTO v_statement FROM DUAL;
WS_ACT_LOAD,FUNCTION,273,
WS_ACT_LOAD,FUNCTION,274, IF TRIM(TRANSLATE(v_statement, chr(10) || chr(13) || chr(09), '   ')) IS NOT NULL Then
WS_ACT_LOAD,FUNCTION,275, BEGIN
WS_ACT_LOAD,FUNCTION,276, EXECUTE IMMEDIATE v_statement;
WS_ACT_LOAD,FUNCTION,277,
WS_ACT_LOAD,FUNCTION,278, v_MsgText := substr('Executed pre load sql. ' || v_statement, 1, 1023);
WS_ACT_LOAD,FUNCTION,279, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, NULL, NULL, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,280,
WS_ACT_LOAD,FUNCTION,281, EXCEPTION WHEN OTHERS THEN COMMIT;
WS_ACT_LOAD,FUNCTION,282,
WS_ACT_LOAD,FUNCTION,283, v_DbText := substr(SQLERRM, 1, 1023);
WS_ACT_LOAD,FUNCTION,284, v_MsgText := 'Unhandled exception in pre - load sql';
WS_ACT_LOAD,FUNCTION,285, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText , p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,286,
WS_ACT_LOAD,FUNCTION,287, v_MsgText := substr(v_stmt_pre_sql, 1, 1023);
WS_ACT_LOAD,FUNCTION,288, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText , p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,289,
WS_ACT_LOAD,FUNCTION,290, p_return_msg := 'Unhandled exception in pre - load sql';
WS_ACT_LOAD,FUNCTION,291, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,292, v_result := -2;
WS_ACT_LOAD,FUNCTION,293,
WS_ACT_LOAD,FUNCTION,294, RETURN v_result;
WS_ACT_LOAD,FUNCTION,295, END;
WS_ACT_LOAD,FUNCTION,296, END IF;
WS_ACT_LOAD,FUNCTION,297,
WS_ACT_LOAD,FUNCTION,298, SELECT v_end_location + LENGTH(v_delimiter) INTO v_start_location FROM DUAL;
WS_ACT_LOAD,FUNCTION,299, END LOOP;
WS_ACT_LOAD,FUNCTION,300, END IF;
WS_ACT_LOAD,FUNCTION,301,
WS_ACT_LOAD,FUNCTION,302, -- =====================================================
WS_ACT_LOAD,FUNCTION,303, -- L O A D S T A T E M E N T
WS_ACT_LOAD,FUNCTION,304, --
WS_ACT_LOAD,FUNCTION,305, -- If a load statement then it overrides the load method
WS_ACT_LOAD,FUNCTION,306, -- and we will issue that statement to perform the load
WS_ACT_LOAD,FUNCTION,307, -- =====================================================
WS_ACT_LOAD,FUNCTION,308, IF v_LoadRec.lt_load_statement IS NOT NULL AND v_LoadRec.lt_type = 'D' THEN
WS_ACT_LOAD,FUNCTION,309, -- =====================================================
WS_ACT_LOAD,FUNCTION,310, -- Load using the load statement
WS_ACT_LOAD,FUNCTION,311, -- =====================================================
WS_ACT_LOAD,FUNCTION,312, v_step := 600;
WS_ACT_LOAD,FUNCTION,313, BEGIN
WS_ACT_LOAD,FUNCTION,314, -- replace any parameters with their current values
WS_ACT_LOAD,FUNCTION,315, v_where_clause := v_LoadRec.lt_load_statement;
WS_ACT_LOAD,FUNCTION,316, v_where_clause := replace(v_where_clause , '$OBJECT$', v_table_with_schema);
WS_ACT_LOAD,FUNCTION,317, v_where_clause := replace(v_where_clause , '$SCHEMA$', v_table_schema);
WS_ACT_LOAD,FUNCTION,318, v_spos := INSTR(v_where_clause, '$P');
WS_ACT_LOAD,FUNCTION,319, WHILE v_spos > 0 LOOP
WS_ACT_LOAD,FUNCTION,320, v_spos := INSTR(v_where_clause, '$P');
WS_ACT_LOAD,FUNCTION,321, If v_spos > 0 Then
WS_ACT_LOAD,FUNCTION,322, v_epos := INSTR(v_where_clause, '$', v_spos + 2);
WS_ACT_LOAD,FUNCTION,323, If v_epos = 0 Then
WS_ACT_LOAD,FUNCTION,324, v_spos := 0;
WS_ACT_LOAD,FUNCTION,325, Else
WS_ACT_LOAD,FUNCTION,326, v_work_select := SUBSTR(v_where_clause, v_spos + 2, v_epos - v_spos - 2);
WS_ACT_LOAD,FUNCTION,327, v_parameter := WsParameterRead(v_work_select);
WS_ACT_LOAD,FUNCTION,328, v_work_select := SUBSTR(v_where_clause, v_spos, v_epos - v_spos + 1);
WS_ACT_LOAD,FUNCTION,329, v_where_clause := REPLACE(v_where_clause, v_work_select, v_parameter);
WS_ACT_LOAD,FUNCTION,330, END IF;
WS_ACT_LOAD,FUNCTION,331, END IF;
WS_ACT_LOAD,FUNCTION,332, END LOOP;
WS_ACT_LOAD,FUNCTION,333,
WS_ACT_LOAD,FUNCTION,334, v_stmt_insert := v_where_clause;
WS_ACT_LOAD,FUNCTION,335, EXECUTE IMMEDIATE v_stmt_insert;
WS_ACT_LOAD,FUNCTION,336, v_row_count := SQL%ROWCOUNT;
WS_ACT_LOAD,FUNCTION,337, COMMIT;
WS_ACT_LOAD,FUNCTION,338,
WS_ACT_LOAD,FUNCTION,339, -- Need to commit or rollback otherwise oracle could still be
WS_ACT_LOAD,FUNCTION,340, -- doing a db link transaction and will disallow pragma autonomous
WS_ACT_LOAD,FUNCTION,341, -- and will fail the WsWrkAudit calls
WS_ACT_LOAD,FUNCTION,342, EXCEPTION WHEN OTHERS THEN COMMIT;
WS_ACT_LOAD,FUNCTION,343,
WS_ACT_LOAD,FUNCTION,344, v_DbText := substr(SQLERRM, 1, 1023);
WS_ACT_LOAD,FUNCTION,345, v_MsgText := 'Unhandled exception where executing load statement';
WS_ACT_LOAD,FUNCTION,346, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,347,
WS_ACT_LOAD,FUNCTION,348, v_MsgText := substr(v_LoadRec.lt_load_statement, 1, 1023);
WS_ACT_LOAD,FUNCTION,349, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,350,
WS_ACT_LOAD,FUNCTION,351, IF LENGTH(v_stmt_insert) > 1023 THEN
WS_ACT_LOAD,FUNCTION,352, v_MsgText := substr(v_LoadRec.lt_load_statement, - 1023, 1023);
WS_ACT_LOAD,FUNCTION,353, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,354, END IF;
WS_ACT_LOAD,FUNCTION,355,
WS_ACT_LOAD,FUNCTION,356, p_return_msg := 'Unhandled exception where executing load statement';
WS_ACT_LOAD,FUNCTION,357, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,358, v_result := -2;
WS_ACT_LOAD,FUNCTION,359, RETURN v_result;
WS_ACT_LOAD,FUNCTION,360, END;
WS_ACT_LOAD,FUNCTION,361,
WS_ACT_LOAD,FUNCTION,362, v_step := 700;
WS_ACT_LOAD,FUNCTION,363, p_return_msg := v_row_count || ' rows loaded (using load statement override) into ' || v_table_with_schema;
WS_ACT_LOAD,FUNCTION,364,
WS_ACT_LOAD,FUNCTION,365, v_step := 800;
WS_ACT_LOAD,FUNCTION,366, p_status_code := 1;
WS_ACT_LOAD,FUNCTION,367, v_result := 1;
WS_ACT_LOAD,FUNCTION,368, RETURN v_result;
WS_ACT_LOAD,FUNCTION,369, END IF;
WS_ACT_LOAD,FUNCTION,370,
WS_ACT_LOAD,FUNCTION,371, -- =====================================================
WS_ACT_LOAD,FUNCTION,372, -- See what type of load this is
WS_ACT_LOAD,FUNCTION,373, -- D = database Load
WS_ACT_LOAD,FUNCTION,374, -- O = Odbc based Load
WS_ACT_LOAD,FUNCTION,375, -- S = Script based load
WS_ACT_LOAD,FUNCTION,376, -- F = File based load
WS_ACT_LOAD,FUNCTION,377, -- X = XML File based load
WS_ACT_LOAD,FUNCTION,378, -- E = External load
WS_ACT_LOAD,FUNCTION,379, -- =====================================================
WS_ACT_LOAD,FUNCTION,380, IF v_LoadRec.lt_type = 'D' THEN
WS_ACT_LOAD,FUNCTION,381, -- =====================================================
WS_ACT_LOAD,FUNCTION,382, -- Get the connection information
WS_ACT_LOAD,FUNCTION,383, -- =====================================================
WS_ACT_LOAD,FUNCTION,384, BEGIN
WS_ACT_LOAD,FUNCTION,385, v_step := 900;
WS_ACT_LOAD,FUNCTION,386, SELECT * INTO v_ConnectRec
WS_ACT_LOAD,FUNCTION,387, FROM ws_dbc_connect
WS_ACT_LOAD,FUNCTION,388, WHERE dc_obj_key = v_LoadRec.lt_connect_key;
WS_ACT_LOAD,FUNCTION,389,
WS_ACT_LOAD,FUNCTION,390, EXCEPTION WHEN OTHERS THEN
WS_ACT_LOAD,FUNCTION,391, v_MsgText := 'Connection not found for load table. A valid connection must exist.';
WS_ACT_LOAD,FUNCTION,392, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,393,
WS_ACT_LOAD,FUNCTION,394, p_return_msg := 'Connection not found for load table';
WS_ACT_LOAD,FUNCTION,395, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,396, RETURN - 2;
WS_ACT_LOAD,FUNCTION,397, END;
WS_ACT_LOAD,FUNCTION,398,
WS_ACT_LOAD,FUNCTION,399, -- =====================================================
WS_ACT_LOAD,FUNCTION,400, -- If we have a view name then define the remote view
WS_ACT_LOAD,FUNCTION,401, -- =====================================================
WS_ACT_LOAD,FUNCTION,402, IF v_LoadRec.lt_view_name IS NOT NULL AND v_ConnectRec.dc_dblink_id IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,403, v_step := 1000;
WS_ACT_LOAD,FUNCTION,404, v_view := 1;
WS_ACT_LOAD,FUNCTION,405, v_stmt_insert := 'CREATE OR REPLACE VIEW ';
WS_ACT_LOAD,FUNCTION,406,
WS_ACT_LOAD,FUNCTION,407, -- If v_table_schema is not null Then
WS_ACT_LOAD,FUNCTION,408, -- v_stmt_insert := v_stmt_insert || v_table_schema || .;
WS_ACT_LOAD,FUNCTION,409, -- ElsIf v_schema_flag = 1 Then
WS_ACT_LOAD,FUNCTION,410, IF v_schema_flag = 1 THEN
WS_ACT_LOAD,FUNCTION,411, v_stmt_insert := v_stmt_insert || v_dss_schema || '.';
WS_ACT_LOAD,FUNCTION,412, END IF;
WS_ACT_LOAD,FUNCTION,413,
WS_ACT_LOAD,FUNCTION,414, v_stmt_insert := v_stmt_insert || v_LoadRec.lt_view_name;
WS_ACT_LOAD,FUNCTION,415, v_stmt_insert := v_stmt_insert || ' AS SELECT ';
WS_ACT_LOAD,FUNCTION,416,
WS_ACT_LOAD,FUNCTION,417, v_stmt_insert_cols0 := v_LoadRec.lt_view_columns;
WS_ACT_LOAD,FUNCTION,418, v_stmt_insert_cols1 := '';
WS_ACT_LOAD,FUNCTION,419,
WS_ACT_LOAD,FUNCTION,420, v_stmt_from_where := ' FROM ' || v_LoadRec.lt_view_table;
WS_ACT_LOAD,FUNCTION,421,
WS_ACT_LOAD,FUNCTION,422, IF v_LoadRec.lt_view_where is NOT NULL THEN
WS_ACT_LOAD,FUNCTION,423, -- replace any parameters with their current values
WS_ACT_LOAD,FUNCTION,424, v_where_clause := v_LoadRec.lt_view_where;
WS_ACT_LOAD,FUNCTION,425,
WS_ACT_LOAD,FUNCTION,426, v_spos := INSTR(v_where_clause, '$P');
WS_ACT_LOAD,FUNCTION,427, WHILE v_spos > 0 LOOP
WS_ACT_LOAD,FUNCTION,428, v_spos := INSTR(v_where_clause, '$P');
WS_ACT_LOAD,FUNCTION,429, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,430, v_epos := INSTR(v_where_clause, '$', v_spos + 2);
WS_ACT_LOAD,FUNCTION,431, IF v_epos = 0 THEN
WS_ACT_LOAD,FUNCTION,432, v_spos := 0;
WS_ACT_LOAD,FUNCTION,433, ELSE
WS_ACT_LOAD,FUNCTION,434, v_work_insert := SUBSTR(v_where_clause, v_spos + 2, v_epos - v_spos - 2);
WS_ACT_LOAD,FUNCTION,435, v_parameter := WsParameterRead(v_work_insert);
WS_ACT_LOAD,FUNCTION,436, v_work_insert := SUBSTR(v_where_clause, v_spos, v_epos - v_spos + 1);
WS_ACT_LOAD,FUNCTION,437, v_where_clause := REPLACE(v_where_clause, v_work_insert, v_parameter);
WS_ACT_LOAD,FUNCTION,438, END IF;
WS_ACT_LOAD,FUNCTION,439, END IF;
WS_ACT_LOAD,FUNCTION,440, END LOOP;
WS_ACT_LOAD,FUNCTION,441, v_stmt_insert_cols1 := ' ' || v_where_clause;
WS_ACT_LOAD,FUNCTION,442, END IF;
WS_ACT_LOAD,FUNCTION,443,
WS_ACT_LOAD,FUNCTION,444, -- =====================================================
WS_ACT_LOAD,FUNCTION,445, -- Call the view create
WS_ACT_LOAD,FUNCTION,446, -- If the view create fails then we will stop the run
WS_ACT_LOAD,FUNCTION,447, -- =====================================================
WS_ACT_LOAD,FUNCTION,448, BEGIN
WS_ACT_LOAD,FUNCTION,449, v_step := 1100;
WS_ACT_LOAD,FUNCTION,450, v_len_insert := LENGTH(v_stmt_insert);
WS_ACT_LOAD,FUNCTION,451,
WS_ACT_LOAD,FUNCTION,452, v_step := 1200;
WS_ACT_LOAD,FUNCTION,453, v_len_insert_cols := LENGTH(v_stmt_insert_cols0 || v_stmt_insert_cols1);
WS_ACT_LOAD,FUNCTION,454, v_len_from_where := LENGTH(v_stmt_from_where);
WS_ACT_LOAD,FUNCTION,455,
WS_ACT_LOAD,FUNCTION,456, v_step := 1300;
WS_ACT_LOAD,FUNCTION,457, v_len_total := v_len_insert + v_len_insert_cols + v_len_from_where;
WS_ACT_LOAD,FUNCTION,458,
WS_ACT_LOAD,FUNCTION,459, IF v_len_total < 4000 THEN
WS_ACT_LOAD,FUNCTION,460, v_step := 1400;
WS_ACT_LOAD,FUNCTION,461, v_stmt_insert := v_stmt_insert || v_stmt_insert_cols0 || v_stmt_from_where || v_stmt_insert_cols1;
WS_ACT_LOAD,FUNCTION,462,
WS_ACT_LOAD,FUNCTION,463, v_step := 1500;
WS_ACT_LOAD,FUNCTION,464, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_LOAD,FUNCTION,465,
WS_ACT_LOAD,FUNCTION,466, v_step := 1600;
WS_ACT_LOAD,FUNCTION,467, v_create := 'BEGIN dss_view_create@' || v_ConnectRec.dc_dblink_id || '(:p1); END;';
WS_ACT_LOAD,FUNCTION,468,
WS_ACT_LOAD,FUNCTION,469, v_step := 1700;
WS_ACT_LOAD,FUNCTION,470, DBMS_SQL.PARSE(v_cursor, v_create, 1);
WS_ACT_LOAD,FUNCTION,471,
WS_ACT_LOAD,FUNCTION,472, v_step := 1800;
WS_ACT_LOAD,FUNCTION,473, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p1', v_stmt_insert, 4000);
WS_ACT_LOAD,FUNCTION,474,
WS_ACT_LOAD,FUNCTION,475, v_step := 1900;
WS_ACT_LOAD,FUNCTION,476, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_LOAD,FUNCTION,477,
WS_ACT_LOAD,FUNCTION,478, v_step := 2000;
WS_ACT_LOAD,FUNCTION,479, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_LOAD,FUNCTION,480, ELSE
WS_ACT_LOAD,FUNCTION,481, v_step := 2100;
WS_ACT_LOAD,FUNCTION,482, v_stmt_insert_cols2 := 'BEGIN dss_view_create@' || v_ConnectRec.dc_dblink_id || '(''';
WS_ACT_LOAD,FUNCTION,483, v_stmt_insert_cols3 := '''); END;';
WS_ACT_LOAD,FUNCTION,484,
WS_ACT_LOAD,FUNCTION,485, v_stmt_insert_cols0 := REPLACE(v_stmt_insert_cols0, '''', '''''');
WS_ACT_LOAD,FUNCTION,486, v_stmt_from_where := REPLACE(v_stmt_from_where, '''', '''''');
WS_ACT_LOAD,FUNCTION,487, v_stmt_insert_cols1 := REPLACE(v_stmt_insert_cols1, '''', '''''');
WS_ACT_LOAD,FUNCTION,488,
WS_ACT_LOAD,FUNCTION,489, EXECUTE IMMEDIATE v_stmt_insert_cols2 || v_stmt_insert || v_stmt_insert_cols0 ||
WS_ACT_LOAD,FUNCTION,490, v_stmt_from_where || v_stmt_insert_cols1 || v_stmt_insert_cols3;
WS_ACT_LOAD,FUNCTION,491,
WS_ACT_LOAD,FUNCTION,492, END IF;
WS_ACT_LOAD,FUNCTION,493,
WS_ACT_LOAD,FUNCTION,494, COMMIT;
WS_ACT_LOAD,FUNCTION,495,
WS_ACT_LOAD,FUNCTION,496, -- Need to commit or rollback otherwise oracle will still be
WS_ACT_LOAD,FUNCTION,497, -- doing the db link transaction and will disallow pragma autonomous
WS_ACT_LOAD,FUNCTION,498, -- and will fail the WsWrkAudit calls
WS_ACT_LOAD,FUNCTION,499, EXCEPTION WHEN OTHERS THEN COMMIT;
WS_ACT_LOAD,FUNCTION,500,
WS_ACT_LOAD,FUNCTION,501, v_DbText := substr(SQLERRM, 1, 1023);
WS_ACT_LOAD,FUNCTION,502, v_MsgText := substr(v_stmt_insert, 1, 1023);
WS_ACT_LOAD,FUNCTION,503, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,504,
WS_ACT_LOAD,FUNCTION,505, IF LENGTH(v_create) > 1023 THEN
WS_ACT_LOAD,FUNCTION,506, v_MsgText := substr(v_stmt_insert, - 1023, 1023);
WS_ACT_LOAD,FUNCTION,507, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_LOAD,FUNCTION,508, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,509, End If;
WS_ACT_LOAD,FUNCTION,510,
WS_ACT_LOAD,FUNCTION,511, IF SQLCODE = -904 THEN
WS_ACT_LOAD,FUNCTION,512, p_return_msg := 'Invalid Column name in view. View failed to create';
WS_ACT_LOAD,FUNCTION,513, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, p_return_msg, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,514,
WS_ACT_LOAD,FUNCTION,515, v_view := 0;
WS_ACT_LOAD,FUNCTION,516, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,517, v_result := -2;
WS_ACT_LOAD,FUNCTION,518, RETURN v_result;
WS_ACT_LOAD,FUNCTION,519, ELSE
WS_ACT_LOAD,FUNCTION,520, p_return_msg := 'Unhandled Exception in call to dss_view_create. View failed to create. Step ' || v_step;
WS_ACT_LOAD,FUNCTION,521, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, p_return_msg, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,522,
WS_ACT_LOAD,FUNCTION,523, v_view := 0;
WS_ACT_LOAD,FUNCTION,524, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,525, v_result := -2;
WS_ACT_LOAD,FUNCTION,526, RETURN v_result;
WS_ACT_LOAD,FUNCTION,527, END IF;
WS_ACT_LOAD,FUNCTION,528, END;
WS_ACT_LOAD,FUNCTION,529, END IF;
WS_ACT_LOAD,FUNCTION,530,
WS_ACT_LOAD,FUNCTION,531, -- =====================================================
WS_ACT_LOAD,FUNCTION,532, -- Build the load statement
WS_ACT_LOAD,FUNCTION,533, -- =====================================================
WS_ACT_LOAD,FUNCTION,534,
WS_ACT_LOAD,FUNCTION,535, v_step := 2200;
WS_ACT_LOAD,FUNCTION,536, v_stmt_insert := 'INSERT /* + APPEND */ INTO ' || v_table_with_schema;
WS_ACT_LOAD,FUNCTION,537,
WS_ACT_LOAD,FUNCTION,538, IF INSTR(UPPER(v_LoadRec.lt_load_options), 'DISTINCT;') > 0 THEN
WS_ACT_LOAD,FUNCTION,539, v_stmt_select := ' SELECT DISTINCT ';
WS_ACT_LOAD,FUNCTION,540, ELSE
WS_ACT_LOAD,FUNCTION,541, v_stmt_select := ' SELECT ';
WS_ACT_LOAD,FUNCTION,542, END IF;
WS_ACT_LOAD,FUNCTION,543,
WS_ACT_LOAD,FUNCTION,544, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,545, v_stmt_select_cols1 := '';
WS_ACT_LOAD,FUNCTION,546, v_stmt_select_cols2 := '';
WS_ACT_LOAD,FUNCTION,547, v_stmt_select_cols3 := '';
WS_ACT_LOAD,FUNCTION,548, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,549, v_stmt_insert_cols1 := '';
WS_ACT_LOAD,FUNCTION,550, v_stmt_insert_cols2 := '';
WS_ACT_LOAD,FUNCTION,551, v_stmt_insert_cols3 := '';
WS_ACT_LOAD,FUNCTION,552,
WS_ACT_LOAD,FUNCTION,553, IF v_view = 0 THEN
WS_ACT_LOAD,FUNCTION,554, -- Transformation or Ordinary Load
WS_ACT_LOAD,FUNCTION,555, IF NVL(v_LoadRec.lt_transform_ind, 'N') = 'Y' THEN
WS_ACT_LOAD,FUNCTION,556, -- =====================================================
WS_ACT_LOAD,FUNCTION,557, -- Transformation
WS_ACT_LOAD,FUNCTION,558, -- =====================================================
WS_ACT_LOAD,FUNCTION,559, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,560, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,561, v_MissingMsg := '';
WS_ACT_LOAD,FUNCTION,562,
WS_ACT_LOAD,FUNCTION,563, FOR v_ColRec in c_Load LOOP
WS_ACT_LOAD,FUNCTION,564, v_step := 2300;
WS_ACT_LOAD,FUNCTION,565, v_row := v_row + 1;
WS_ACT_LOAD,FUNCTION,566, IF v_row > 1 THEN
WS_ACT_LOAD,FUNCTION,567, v_stmt_select_cols0 := v_stmt_select_cols0 || ', ';
WS_ACT_LOAD,FUNCTION,568, v_stmt_insert_cols0 := v_stmt_insert_cols0 || ', ';
WS_ACT_LOAD,FUNCTION,569,
WS_ACT_LOAD,FUNCTION,570, -- RED-546 do param replace as we go as otherwise risk issue with
WS_ACT_LOAD,FUNCTION,571, -- param replace adding > 500 characters in one bash
WS_ACT_LOAD,FUNCTION,572, v_step := 2400;
WS_ACT_LOAD,FUNCTION,573, v_spos := INSTR(v_stmt_select_cols0, '$P');
WS_ACT_LOAD,FUNCTION,574, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,575, v_step := 2500;
WS_ACT_LOAD,FUNCTION,576, v_stmt_select_cols0 := WsParameterReplace(v_stmt_select_cols0, 4000);
WS_ACT_LOAD,FUNCTION,577, END IF;
WS_ACT_LOAD,FUNCTION,578,
WS_ACT_LOAD,FUNCTION,579, v_spos := INSTR(v_stmt_insert_cols0, '$P');
WS_ACT_LOAD,FUNCTION,580, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,581, v_step := 2500;
WS_ACT_LOAD,FUNCTION,582, v_stmt_insert_cols0 := WsParameterReplace(v_stmt_insert_cols0, 4000);
WS_ACT_LOAD,FUNCTION,583, END IF;
WS_ACT_LOAD,FUNCTION,584,
WS_ACT_LOAD,FUNCTION,585, -- If we have nearly filled this statement then use another
WS_ACT_LOAD,FUNCTION,586, IF LENGTH(v_stmt_select_cols0) > 3500 THEN
WS_ACT_LOAD,FUNCTION,587, IF v_stmt_select_cols1 IS NULL THEN
WS_ACT_LOAD,FUNCTION,588, v_stmt_select_cols1 := v_stmt_select_cols0;
WS_ACT_LOAD,FUNCTION,589, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,590, ElsIf v_stmt_select_cols2 IS NULL THEN
WS_ACT_LOAD,FUNCTION,591, v_stmt_select_cols2 := v_stmt_select_cols0;
WS_ACT_LOAD,FUNCTION,592, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,593, ElsIf v_stmt_select_cols3 IS NULL THEN
WS_ACT_LOAD,FUNCTION,594, v_stmt_select_cols3 := v_stmt_select_cols0;
WS_ACT_LOAD,FUNCTION,595, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,596, END IF;
WS_ACT_LOAD,FUNCTION,597, END IF;
WS_ACT_LOAD,FUNCTION,598,
WS_ACT_LOAD,FUNCTION,599, -- If we have nearly filled this statement then use another
WS_ACT_LOAD,FUNCTION,600, IF LENGTH(v_stmt_insert_cols0) > 3500 THEN
WS_ACT_LOAD,FUNCTION,601, IF v_stmt_insert_cols1 IS NULL THEN
WS_ACT_LOAD,FUNCTION,602, v_stmt_insert_cols1 := v_stmt_insert_cols0;
WS_ACT_LOAD,FUNCTION,603, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,604, ElsIf v_stmt_insert_cols2 IS NULL THEN
WS_ACT_LOAD,FUNCTION,605, v_stmt_insert_cols2 := v_stmt_insert_cols0;
WS_ACT_LOAD,FUNCTION,606, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,607, ElsIf v_stmt_insert_cols3 IS NULL THEN
WS_ACT_LOAD,FUNCTION,608, v_stmt_insert_cols3 := v_stmt_insert_cols0;
WS_ACT_LOAD,FUNCTION,609, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,610, END IF;
WS_ACT_LOAD,FUNCTION,611, END IF;
WS_ACT_LOAD,FUNCTION,612, END IF;
WS_ACT_LOAD,FUNCTION,613,
WS_ACT_LOAD,FUNCTION,614, -- If we have non mandatory columns specified then check to ensure
WS_ACT_LOAD,FUNCTION,615, -- each column exists in the source
WS_ACT_LOAD,FUNCTION,616, v_col_found := 1;
WS_ACT_LOAD,FUNCTION,617, IF nvl(v_LoadRec.lt_non_mandatory_ind, 'N') = 'Y' THEN
WS_ACT_LOAD,FUNCTION,618, BEGIN
WS_ACT_LOAD,FUNCTION,619, IF v_ColRec.lc_src_column IS NOT NULL AND v_ColRec.lc_src_table IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,620, IF v_LoadRec.lt_source_schema is not NULL THEN
WS_ACT_LOAD,FUNCTION,621, v_sql := 'SELECT COUNT(*) FROM all_tab_columns';
WS_ACT_LOAD,FUNCTION,622, ELSE
WS_ACT_LOAD,FUNCTION,623, v_sql := 'SELECT COUNT(*) FROM user_tab_columns';
WS_ACT_LOAD,FUNCTION,624, END IF;
WS_ACT_LOAD,FUNCTION,625,
WS_ACT_LOAD,FUNCTION,626, IF v_ConnectRec.dc_dblink_id is NOT NULL THEN
WS_ACT_LOAD,FUNCTION,627, v_sql := v_sql || '@' || v_ConnectRec.dc_dblink_id;
WS_ACT_LOAD,FUNCTION,628, END IF;
WS_ACT_LOAD,FUNCTION,629,
WS_ACT_LOAD,FUNCTION,630, v_sql := v_sql || ' WHERE table_name = UPPER(''' || v_ColRec.lc_src_table || ''')';
WS_ACT_LOAD,FUNCTION,631, v_sql := v_sql || ' AND column_name = UPPER(''' || v_ColRec.lc_src_column || ''')';
WS_ACT_LOAD,FUNCTION,632,
WS_ACT_LOAD,FUNCTION,633, IF v_LoadRec.lt_source_schema is not NULL THEN
WS_ACT_LOAD,FUNCTION,634, v_sql := v_sql || ' AND OWNER = UPPER(''' || v_LoadRec.lt_source_schema || ''')';
WS_ACT_LOAD,FUNCTION,635, END IF;
WS_ACT_LOAD,FUNCTION,636,
WS_ACT_LOAD,FUNCTION,637, EXECUTE IMMEDIATE v_sql INTO v_count;
WS_ACT_LOAD,FUNCTION,638,
WS_ACT_LOAD,FUNCTION,639, IF v_count <> 1 THEN
WS_ACT_LOAD,FUNCTION,640, v_col_found := 0;
WS_ACT_LOAD,FUNCTION,641, IF v_MissingMsg is NULL THEN
WS_ACT_LOAD,FUNCTION,642, v_MissingMsg := 'The following column(s) were missing from the source system: ';
WS_ACT_LOAD,FUNCTION,643, ELSE
WS_ACT_LOAD,FUNCTION,644, v_MissingMsg := v_MissingMsg || ', ';
WS_ACT_LOAD,FUNCTION,645, END IF;
WS_ACT_LOAD,FUNCTION,646, v_MissingMsg := v_MissingMsg || v_ColRec.lc_src_table || '.' ||
WS_ACT_LOAD,FUNCTION,647, v_ColRec.lc_src_column;
WS_ACT_LOAD,FUNCTION,648, END IF;
WS_ACT_LOAD,FUNCTION,649, END IF; -- End of valid column name to check
WS_ACT_LOAD,FUNCTION,650, EXCEPTION WHEN OTHERS THEN
WS_ACT_LOAD,FUNCTION,651, v_col_found := 1;
WS_ACT_LOAD,FUNCTION,652, v_MissingMsg := 'Error when checking for non mandatory columns ' || SQLERRM;
WS_ACT_LOAD,FUNCTION,653, v_MissingBug := 1;
WS_ACT_LOAD,FUNCTION,654, END;
WS_ACT_LOAD,FUNCTION,655, END IF; -- End of mandatory check
WS_ACT_LOAD,FUNCTION,656,
WS_ACT_LOAD,FUNCTION,657, -- End of column check
WS_ACT_LOAD,FUNCTION,658,
WS_ACT_LOAD,FUNCTION,659, IF nvl(v_ColRec.lc_transform_type, 'Z') = 'D' AND v_ColRec.lc_transform_code is not NULL THEN
WS_ACT_LOAD,FUNCTION,660, v_work_select := v_ColRec.lc_transform_code;
WS_ACT_LOAD,FUNCTION,661, v_work_insert := v_ColRec.lc_col_name;
WS_ACT_LOAD,FUNCTION,662,
WS_ACT_LOAD,FUNCTION,663, -- Get rid of any comments in the transform
WS_ACT_LOAD,FUNCTION,664, v_t1pos := Instr(v_work_select, CHR(45) || CHR(45));
WS_ACT_LOAD,FUNCTION,665, WHILE v_t1pos > 0 LOOP
WS_ACT_LOAD,FUNCTION,666, v_t2pos := Instr(v_work_select, CHR(10), v_t1pos);
WS_ACT_LOAD,FUNCTION,667, IF v_t2pos > 0 THEN
WS_ACT_LOAD,FUNCTION,668, v_work2 := SUBSTR(v_work_select, 1, v_t1pos - 1);
WS_ACT_LOAD,FUNCTION,669, v_work_select := v_work2 || SUBSTR(v_work_select, v_t2pos + 1, 9999);
WS_ACT_LOAD,FUNCTION,670, ELSE
WS_ACT_LOAD,FUNCTION,671, v_work_select := SUBSTR(v_work_select, 1, v_t1pos - 1);
WS_ACT_LOAD,FUNCTION,672, END IF;
WS_ACT_LOAD,FUNCTION,673, v_t1pos := Instr(v_work_select, CHR(45) || CHR(45));
WS_ACT_LOAD,FUNCTION,674, END LOOP;
WS_ACT_LOAD,FUNCTION,675,
WS_ACT_LOAD,FUNCTION,676, v_work_select := LTRIM(RTRIM(v_work_select));
WS_ACT_LOAD,FUNCTION,677,
WS_ACT_LOAD,FUNCTION,678, IF v_col_found = 1 THEN
WS_ACT_LOAD,FUNCTION,679, v_step := 2600;
WS_ACT_LOAD,FUNCTION,680, ELSE
WS_ACT_LOAD,FUNCTION,681, v_step := 2700;
WS_ACT_LOAD,FUNCTION,682, v_sql := v_work_select;
WS_ACT_LOAD,FUNCTION,683, v_tabcol := v_ColRec.lc_src_table || '.' || v_ColRec.lc_src_column;
WS_ACT_LOAD,FUNCTION,684, v_sql := Replace(v_sql, v_tabcol, 'NULL');
WS_ACT_LOAD,FUNCTION,685, v_tabcol := Upper(v_tabcol);
WS_ACT_LOAD,FUNCTION,686, v_sql := Replace(v_sql, v_tabcol, 'NULL');
WS_ACT_LOAD,FUNCTION,687, v_tabcol := Lower(v_tabcol);
WS_ACT_LOAD,FUNCTION,688, v_sql := Replace(v_sql, v_tabcol, 'NULL');
WS_ACT_LOAD,FUNCTION,689, v_tabcol := v_ColRec.lc_src_column;
WS_ACT_LOAD,FUNCTION,690, v_sql := Replace(v_sql, v_tabcol, 'NULL');
WS_ACT_LOAD,FUNCTION,691, v_tabcol := Upper(v_tabcol);
WS_ACT_LOAD,FUNCTION,692, v_sql := Replace(v_sql, v_tabcol, 'NULL');
WS_ACT_LOAD,FUNCTION,693, v_tabcol := Lower(v_tabcol);
WS_ACT_LOAD,FUNCTION,694, v_sql := Replace(v_sql, v_tabcol, 'NULL');
WS_ACT_LOAD,FUNCTION,695, v_work_select := v_sql;
WS_ACT_LOAD,FUNCTION,696, END IF;
WS_ACT_LOAD,FUNCTION,697,
WS_ACT_LOAD,FUNCTION,698, -- RED-546 do param replace as we go as otherwise risk issue with
WS_ACT_LOAD,FUNCTION,699, -- param replace adding > 500 characters in one bash
WS_ACT_LOAD,FUNCTION,700, v_step := 2800;
WS_ACT_LOAD,FUNCTION,701, v_spos := INSTR(v_work_select, '$P');
WS_ACT_LOAD,FUNCTION,702, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,703, v_step := 2900;
WS_ACT_LOAD,FUNCTION,704, v_work_select := WsParameterReplace(v_work_select, 4000);
WS_ACT_LOAD,FUNCTION,705, END IF;
WS_ACT_LOAD,FUNCTION,706,
WS_ACT_LOAD,FUNCTION,707, v_spos := INSTR(v_work_insert, '$P');
WS_ACT_LOAD,FUNCTION,708, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,709, v_step := 2900;
WS_ACT_LOAD,FUNCTION,710, v_work_insert := WsParameterReplace(v_work_insert, 4000);
WS_ACT_LOAD,FUNCTION,711, END IF;
WS_ACT_LOAD,FUNCTION,712,
WS_ACT_LOAD,FUNCTION,713, -- RED-1346 Check append wont blow the sizing
WS_ACT_LOAD,FUNCTION,714, -- If we have nearly filled this statement then use another
WS_ACT_LOAD,FUNCTION,715, IF (LENGTH(v_stmt_select_cols0) + LENGTH(v_work_select)) > 3900 THEN
WS_ACT_LOAD,FUNCTION,716, IF v_stmt_select_cols1 IS NULL THEN
WS_ACT_LOAD,FUNCTION,717, v_stmt_select_cols1 := v_stmt_select_cols0;
WS_ACT_LOAD,FUNCTION,718, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,719, ELSIF v_stmt_select_cols2 IS NULL THEN
WS_ACT_LOAD,FUNCTION,720, v_stmt_select_cols2 := v_stmt_select_cols0;
WS_ACT_LOAD,FUNCTION,721, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,722, ELSIF v_stmt_select_cols3 IS NULL THEN
WS_ACT_LOAD,FUNCTION,723, v_stmt_select_cols3 := v_stmt_select_cols0;
WS_ACT_LOAD,FUNCTION,724, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,725, END IF;
WS_ACT_LOAD,FUNCTION,726, END IF;
WS_ACT_LOAD,FUNCTION,727,
WS_ACT_LOAD,FUNCTION,728, IF (LENGTH(v_stmt_insert_cols0) + LENGTH(v_work_insert)) > 3900 THEN
WS_ACT_LOAD,FUNCTION,729, IF v_stmt_insert_cols1 IS NULL THEN
WS_ACT_LOAD,FUNCTION,730, v_stmt_insert_cols1 := v_stmt_insert_cols0;
WS_ACT_LOAD,FUNCTION,731, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,732, ELSIF v_stmt_insert_cols2 IS NULL THEN
WS_ACT_LOAD,FUNCTION,733, v_stmt_insert_cols2 := v_stmt_insert_cols0;
WS_ACT_LOAD,FUNCTION,734, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,735, ELSIF v_stmt_insert_cols3 IS NULL THEN
WS_ACT_LOAD,FUNCTION,736, v_stmt_insert_cols3 := v_stmt_insert_cols0;
WS_ACT_LOAD,FUNCTION,737, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,738, END IF;
WS_ACT_LOAD,FUNCTION,739, END IF;
WS_ACT_LOAD,FUNCTION,740,
WS_ACT_LOAD,FUNCTION,741, v_step := 3000;
WS_ACT_LOAD,FUNCTION,742, v_stmt_select_cols0 := v_stmt_select_cols0 || v_work_select;
WS_ACT_LOAD,FUNCTION,743, v_stmt_insert_cols0 := v_stmt_insert_cols0 || v_work_insert;
WS_ACT_LOAD,FUNCTION,744,
WS_ACT_LOAD,FUNCTION,745, ELSIF v_ColRec.lc_src_column is not NULL THEN
WS_ACT_LOAD,FUNCTION,746, IF v_col_found = 1 THEN
WS_ACT_LOAD,FUNCTION,747, If v_ColRec.lc_src_table is not NULL THEN
WS_ACT_LOAD,FUNCTION,748, v_stmt_select_cols0 := v_stmt_select_cols0 || v_ColRec.lc_src_table || '.';
WS_ACT_LOAD,FUNCTION,749, -- dont add v_ColRec.lc_src_table to the insert columns
WS_ACT_LOAD,FUNCTION,750, END IF;
WS_ACT_LOAD,FUNCTION,751, v_stmt_select_cols0 := v_stmt_select_cols0 || v_ColRec.lc_src_column;
WS_ACT_LOAD,FUNCTION,752, v_stmt_insert_cols0 := v_stmt_insert_cols0 || v_ColRec.lc_col_name;
WS_ACT_LOAD,FUNCTION,753, ELSE
WS_ACT_LOAD,FUNCTION,754, v_stmt_select_cols0 := v_stmt_select_cols0 || '''''';
WS_ACT_LOAD,FUNCTION,755, v_stmt_insert_cols0 := v_stmt_insert_cols0 || v_ColRec.lc_col_name;
WS_ACT_LOAD,FUNCTION,756, END IF;
WS_ACT_LOAD,FUNCTION,757, ELSE
WS_ACT_LOAD,FUNCTION,758, v_stmt_select_cols0 := v_stmt_select_cols0 || '''''';
WS_ACT_LOAD,FUNCTION,759, v_stmt_insert_cols0 := v_stmt_insert_cols0 || v_ColRec.lc_col_name;
WS_ACT_LOAD,FUNCTION,760, END IF;
WS_ACT_LOAD,FUNCTION,761, END LOOP;
WS_ACT_LOAD,FUNCTION,762, ELSE
WS_ACT_LOAD,FUNCTION,763, v_stmt_select_cols0 := v_LoadRec.lt_source_columns;
WS_ACT_LOAD,FUNCTION,764, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,765, END IF;
WS_ACT_LOAD,FUNCTION,766,
WS_ACT_LOAD,FUNCTION,767, v_stmt_from_where := ' FROM ';
WS_ACT_LOAD,FUNCTION,768, v_stmt_from_where := v_stmt_from_where || v_LoadRec.lt_from_table;
WS_ACT_LOAD,FUNCTION,769,
WS_ACT_LOAD,FUNCTION,770, IF v_LoadRec.lt_where_clause IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,771, -- replace any parameters with their current values
WS_ACT_LOAD,FUNCTION,772, v_where_clause := v_LoadRec.lt_where_clause;
WS_ACT_LOAD,FUNCTION,773, v_spos := INSTR(v_where_clause, '$P');
WS_ACT_LOAD,FUNCTION,774, WHILE v_spos > 0 LOOP
WS_ACT_LOAD,FUNCTION,775, v_spos := INSTR(v_where_clause, '$P');
WS_ACT_LOAD,FUNCTION,776, IF v_spos > 0 THEN
WS_ACT_LOAD,FUNCTION,777, v_epos := INSTR(v_where_clause, '$', v_spos + 2);
WS_ACT_LOAD,FUNCTION,778, IF v_epos = 0 THEN
WS_ACT_LOAD,FUNCTION,779, v_spos := 0;
WS_ACT_LOAD,FUNCTION,780, ELSE
WS_ACT_LOAD,FUNCTION,781, v_work_select := SUBSTR(v_where_clause, v_spos + 2, v_epos - v_spos - 2);
WS_ACT_LOAD,FUNCTION,782, v_parameter := WsParameterRead(v_work_select);
WS_ACT_LOAD,FUNCTION,783, v_work_select := SUBSTR(v_where_clause, v_spos, v_epos - v_spos + 1);
WS_ACT_LOAD,FUNCTION,784, v_where_clause := REPLACE(v_where_clause, v_work_select, v_parameter);
WS_ACT_LOAD,FUNCTION,785, END IF;
WS_ACT_LOAD,FUNCTION,786, END IF;
WS_ACT_LOAD,FUNCTION,787, END LOOP;
WS_ACT_LOAD,FUNCTION,788, v_stmt_from_where := v_stmt_from_where || ' ' || v_where_clause;
WS_ACT_LOAD,FUNCTION,789, END IF;
WS_ACT_LOAD,FUNCTION,790, ELSE -- v_view <> 0
WS_ACT_LOAD,FUNCTION,791, v_stmt_insert := v_stmt_insert || ' * FROM ';
WS_ACT_LOAD,FUNCTION,792, v_stmt_insert := v_stmt_insert || v_LoadRec.lt_view_name;
WS_ACT_LOAD,FUNCTION,793, v_stmt_select_cols0 := '';
WS_ACT_LOAD,FUNCTION,794, v_stmt_insert_cols0 := '';
WS_ACT_LOAD,FUNCTION,795, v_stmt_from_where := '';
WS_ACT_LOAD,FUNCTION,796, IF v_ConnectRec.dc_dblink_id IS NOT NULL THEN
WS_ACT_LOAD,FUNCTION,797, v_stmt_insert := v_stmt_insert || '@' || v_ConnectRec.dc_dblink_id;
WS_ACT_LOAD,FUNCTION,798, END IF;
WS_ACT_LOAD,FUNCTION,799, END IF;
WS_ACT_LOAD,FUNCTION,800,
WS_ACT_LOAD,FUNCTION,801, -- =====================================================
WS_ACT_LOAD,FUNCTION,802, -- Record any missing columns
WS_ACT_LOAD,FUNCTION,803, -- =====================================================
WS_ACT_LOAD,FUNCTION,804, IF v_MissingMsg is not NULL THEN
WS_ACT_LOAD,FUNCTION,805, v_MsgText := substr(v_MissingMsg, 1, 1023);
WS_ACT_LOAD,FUNCTION,806,
WS_ACT_LOAD,FUNCTION,807, IF v_LoadRec.lt_missing_col_act = 'W' THEN
WS_ACT_LOAD,FUNCTION,808, v_MissingRet := 'W';
WS_ACT_LOAD,FUNCTION,809, ELSIF v_LoadRec.lt_missing_col_act = 'E' THEN
WS_ACT_LOAD,FUNCTION,810, v_MissingRet := 'E';
WS_ACT_LOAD,FUNCTION,811, ELSE
WS_ACT_LOAD,FUNCTION,812, v_MissingRet := 'I';
WS_ACT_LOAD,FUNCTION,813, END IF;
WS_ACT_LOAD,FUNCTION,814,
WS_ACT_LOAD,FUNCTION,815, IF v_MissingBug = 1 THEN
WS_ACT_LOAD,FUNCTION,816, v_MissingRet := 'W';
WS_ACT_LOAD,FUNCTION,817, END IF;
WS_ACT_LOAD,FUNCTION,818,
WS_ACT_LOAD,FUNCTION,819, v_result := WsWrkAudit(v_MissingRet, p_job_name, p_task_name, p_sequence, v_MsgText, NULL, NULL, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,820, END IF;
WS_ACT_LOAD,FUNCTION,821,
WS_ACT_LOAD,FUNCTION,822, -- =====================================================
WS_ACT_LOAD,FUNCTION,823, -- Replace any $JOB_SEQUENCE$
WS_ACT_LOAD,FUNCTION,824, -- =====================================================
WS_ACT_LOAD,FUNCTION,825,
WS_ACT_LOAD,FUNCTION,826, v_step := 3100;
WS_ACT_LOAD,FUNCTION,827, v_stmt_select := REPLACE(v_stmt_select, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,828, v_stmt_insert := REPLACE(v_stmt_insert, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,829,
WS_ACT_LOAD,FUNCTION,830, v_step := 3200;
WS_ACT_LOAD,FUNCTION,831, v_stmt_from_where := REPLACE(v_stmt_from_where, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,832,
WS_ACT_LOAD,FUNCTION,833, v_step := 3300;
WS_ACT_LOAD,FUNCTION,834, v_stmt_select_cols0 := REPLACE(v_stmt_select_cols0, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,835, v_stmt_insert_cols0 := REPLACE(v_stmt_insert_cols0, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,836,
WS_ACT_LOAD,FUNCTION,837, v_step := 3400;
WS_ACT_LOAD,FUNCTION,838, v_stmt_select_cols1 := REPLACE(v_stmt_select_cols1, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,839, v_stmt_insert_cols1 := REPLACE(v_stmt_insert_cols1, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,840,
WS_ACT_LOAD,FUNCTION,841, v_step := 3500;
WS_ACT_LOAD,FUNCTION,842, v_stmt_select_cols2 := REPLACE(v_stmt_select_cols2, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,843, v_stmt_insert_cols2 := REPLACE(v_stmt_insert_cols2, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,844,
WS_ACT_LOAD,FUNCTION,845, v_step := 3600;
WS_ACT_LOAD,FUNCTION,846, v_stmt_select_cols3 := REPLACE(v_stmt_select_cols3, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,847, v_stmt_insert_cols3 := REPLACE(v_stmt_insert_cols3, '$JOB_SEQUENCE$', p_sequence);
WS_ACT_LOAD,FUNCTION,848,
WS_ACT_LOAD,FUNCTION,849, -- =====================================================
WS_ACT_LOAD,FUNCTION,850, -- Replace any $P parameters
WS_ACT_LOAD,FUNCTION,851, -- =====================================================
WS_ACT_LOAD,FUNCTION,852,
WS_ACT_LOAD,FUNCTION,853, v_step := 3700;
WS_ACT_LOAD,FUNCTION,854, v_stmt_select := WsParameterReplace(v_stmt_select, 4000);
WS_ACT_LOAD,FUNCTION,855, v_stmt_insert := WsParameterReplace(v_stmt_insert, 4000);
WS_ACT_LOAD,FUNCTION,856,
WS_ACT_LOAD,FUNCTION,857, v_step := 3800;
WS_ACT_LOAD,FUNCTION,858, v_stmt_from_where := WsParameterReplace(v_stmt_from_where, 4000);
WS_ACT_LOAD,FUNCTION,859,
WS_ACT_LOAD,FUNCTION,860, v_step := 3900;
WS_ACT_LOAD,FUNCTION,861, v_stmt_select_cols0 := WsParameterReplace(v_stmt_select_cols0, 4000);
WS_ACT_LOAD,FUNCTION,862, v_stmt_insert_cols0 := WsParameterReplace(v_stmt_insert_cols0, 4000);
WS_ACT_LOAD,FUNCTION,863,
WS_ACT_LOAD,FUNCTION,864, v_step := 4000;
WS_ACT_LOAD,FUNCTION,865, v_stmt_select_cols1 := WsParameterReplace(v_stmt_select_cols1, 4000);
WS_ACT_LOAD,FUNCTION,866, v_stmt_insert_cols1 := WsParameterReplace(v_stmt_insert_cols1, 4000);
WS_ACT_LOAD,FUNCTION,867,
WS_ACT_LOAD,FUNCTION,868, v_step := 4100;
WS_ACT_LOAD,FUNCTION,869, v_stmt_select_cols2 := WsParameterReplace(v_stmt_select_cols2, 4000);
WS_ACT_LOAD,FUNCTION,870, v_stmt_insert_cols2 := WsParameterReplace(v_stmt_insert_cols2, 4000);
WS_ACT_LOAD,FUNCTION,871,
WS_ACT_LOAD,FUNCTION,872, v_step := 4200;
WS_ACT_LOAD,FUNCTION,873, v_stmt_select_cols3 := WsParameterReplace(v_stmt_select_cols3, 4000);
WS_ACT_LOAD,FUNCTION,874, v_stmt_insert_cols3 := WsParameterReplace(v_stmt_insert_cols3, 4000);
WS_ACT_LOAD,FUNCTION,875,
WS_ACT_LOAD,FUNCTION,876, -- =====================================================
WS_ACT_LOAD,FUNCTION,877, -- Perform the Load
WS_ACT_LOAD,FUNCTION,878, -- =====================================================
WS_ACT_LOAD,FUNCTION,879, BEGIN
WS_ACT_LOAD,FUNCTION,880, v_step := 4300;
WS_ACT_LOAD,FUNCTION,881, v_len_insert := LENGTH(v_stmt_insert);
WS_ACT_LOAD,FUNCTION,882, v_len_select := LENGTH(v_stmt_select);
WS_ACT_LOAD,FUNCTION,883,
WS_ACT_LOAD,FUNCTION,884, v_step := 4400;
WS_ACT_LOAD,FUNCTION,885, v_len_insert_cols := LENGTH(v_stmt_insert_cols0 || v_stmt_insert_cols1 || v_stmt_insert_cols2 || v_stmt_insert_cols3);
WS_ACT_LOAD,FUNCTION,886, v_len_select_cols := LENGTH(v_stmt_select_cols0 || v_stmt_select_cols1 || v_stmt_select_cols2 || v_stmt_select_cols3);
WS_ACT_LOAD,FUNCTION,887, v_len_from_where := LENGTH(v_stmt_from_where);
WS_ACT_LOAD,FUNCTION,888,
WS_ACT_LOAD,FUNCTION,889, v_step := 4500;
WS_ACT_LOAD,FUNCTION,890, v_len_total := v_len_insert + v_len_select + v_len_insert_cols + v_len_select_cols + v_len_from_where;
WS_ACT_LOAD,FUNCTION,891,
WS_ACT_LOAD,FUNCTION,892, IF v_len_total < 4000 THEN
WS_ACT_LOAD,FUNCTION,893, v_step := 4600;
WS_ACT_LOAD,FUNCTION,894, IF NVL(v_LoadRec.lt_transform_ind, 'N') = 'Y' THEN
WS_ACT_LOAD,FUNCTION,895, v_stmt_insert :=
WS_ACT_LOAD,FUNCTION,896, v_stmt_insert ||
WS_ACT_LOAD,FUNCTION,897, ' (' || v_stmt_insert_cols1 || v_stmt_insert_cols2 || v_stmt_insert_cols3 || v_stmt_insert_cols0 || ') ' ||
WS_ACT_LOAD,FUNCTION,898, v_stmt_select ||
WS_ACT_LOAD,FUNCTION,899, v_stmt_select_cols1 || v_stmt_select_cols2 || v_stmt_select_cols3 || v_stmt_select_cols0 ||
WS_ACT_LOAD,FUNCTION,900, v_stmt_from_where;
WS_ACT_LOAD,FUNCTION,901, ELSE
WS_ACT_LOAD,FUNCTION,902, v_stmt_insert :=
WS_ACT_LOAD,FUNCTION,903, v_stmt_insert || v_stmt_select ||
WS_ACT_LOAD,FUNCTION,904, v_stmt_select_cols1 || v_stmt_select_cols2 || v_stmt_select_cols3 || v_stmt_select_cols0 ||
WS_ACT_LOAD,FUNCTION,905, v_stmt_from_where;
WS_ACT_LOAD,FUNCTION,906, END IF;
WS_ACT_LOAD,FUNCTION,907,
WS_ACT_LOAD,FUNCTION,908, v_step := 4700;
WS_ACT_LOAD,FUNCTION,909, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_LOAD,FUNCTION,910,
WS_ACT_LOAD,FUNCTION,911, v_step := 4800;
WS_ACT_LOAD,FUNCTION,912, DBMS_SQL.PARSE(v_cursor, v_stmt_insert, 1);
WS_ACT_LOAD,FUNCTION,913,
WS_ACT_LOAD,FUNCTION,914, v_step := 4900;
WS_ACT_LOAD,FUNCTION,915, v_row_count := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_LOAD,FUNCTION,916,
WS_ACT_LOAD,FUNCTION,917, v_step := 5000;
WS_ACT_LOAD,FUNCTION,918, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_LOAD,FUNCTION,919, ELSE
WS_ACT_LOAD,FUNCTION,920, v_step := 5100;
WS_ACT_LOAD,FUNCTION,921, IF NVL(v_LoadRec.lt_transform_ind, 'N') = 'Y' THEN
WS_ACT_LOAD,FUNCTION,922, EXECUTE IMMEDIATE
WS_ACT_LOAD,FUNCTION,923, v_stmt_insert ||
WS_ACT_LOAD,FUNCTION,924, ' (' || v_stmt_insert_cols1 || v_stmt_insert_cols2 || v_stmt_insert_cols3 || v_stmt_insert_cols0 || ') ' ||
WS_ACT_LOAD,FUNCTION,925, v_stmt_select ||
WS_ACT_LOAD,FUNCTION,926, v_stmt_select_cols1 || v_stmt_select_cols2 || v_stmt_select_cols3 || v_stmt_select_cols0 ||
WS_ACT_LOAD,FUNCTION,927, v_stmt_from_where;
WS_ACT_LOAD,FUNCTION,928, ELSE
WS_ACT_LOAD,FUNCTION,929, EXECUTE IMMEDIATE
WS_ACT_LOAD,FUNCTION,930, v_stmt_insert || v_stmt_select ||
WS_ACT_LOAD,FUNCTION,931, v_stmt_select_cols1 || v_stmt_select_cols2 || v_stmt_select_cols3 || v_stmt_select_cols0 ||
WS_ACT_LOAD,FUNCTION,932, v_stmt_from_where;
WS_ACT_LOAD,FUNCTION,933, END IF;
WS_ACT_LOAD,FUNCTION,934, v_row_count := SQL%ROWCOUNT;
WS_ACT_LOAD,FUNCTION,935, END IF;
WS_ACT_LOAD,FUNCTION,936,
WS_ACT_LOAD,FUNCTION,937, COMMIT;
WS_ACT_LOAD,FUNCTION,938,
WS_ACT_LOAD,FUNCTION,939, -- Need to commit or rollback otherwise oracle will still be
WS_ACT_LOAD,FUNCTION,940, -- doing the db link transaction and will disallow pragma autonomous
WS_ACT_LOAD,FUNCTION,941, -- and will fail the WsWrkAudit calls
WS_ACT_LOAD,FUNCTION,942, EXCEPTION WHEN OTHERS THEN COMMIT;
WS_ACT_LOAD,FUNCTION,943,
WS_ACT_LOAD,FUNCTION,944, v_DbText := substr(SQLERRM, 1, 1023);
WS_ACT_LOAD,FUNCTION,945, v_MsgText := 'Unhandled exception in load';
WS_ACT_LOAD,FUNCTION,946, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,947,
WS_ACT_LOAD,FUNCTION,948, v_MsgText := substr(v_stmt_insert, 1, 1023);
WS_ACT_LOAD,FUNCTION,949, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,950,
WS_ACT_LOAD,FUNCTION,951, IF LENGTH(v_stmt_insert) > 1023 THEN
WS_ACT_LOAD,FUNCTION,952, v_MsgText := substr(v_stmt_insert, - 1023, 1023);
WS_ACT_LOAD,FUNCTION,953, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_LOAD,FUNCTION,954, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,955, END IF;
WS_ACT_LOAD,FUNCTION,956,
WS_ACT_LOAD,FUNCTION,957, IF SQLCODE = -6550 THEN
WS_ACT_LOAD,FUNCTION,958, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_LOAD,FUNCTION,959, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_LOAD,FUNCTION,960, v_MsgText, SQLCODE, v_DbText, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,961, END IF;
WS_ACT_LOAD,FUNCTION,962,
WS_ACT_LOAD,FUNCTION,963, p_return_msg := 'Unhandled exception in ws_act_load load(8.4.1.0). ' || substr(v_DbText, 1, 950);
WS_ACT_LOAD,FUNCTION,964, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,965, v_result := -2;
WS_ACT_LOAD,FUNCTION,966, RETURN v_result;
WS_ACT_LOAD,FUNCTION,967, END;
WS_ACT_LOAD,FUNCTION,968,
WS_ACT_LOAD,FUNCTION,969, v_step := 5200;
WS_ACT_LOAD,FUNCTION,970, p_return_msg := v_row_count || ' rows loaded into ' || v_LoadRec.lt_table_name;
WS_ACT_LOAD,FUNCTION,971,
WS_ACT_LOAD,FUNCTION,972, v_step := 5300;
WS_ACT_LOAD,FUNCTION,973, IF v_view = 1 THEN
WS_ACT_LOAD,FUNCTION,974, v_stmt_insert := p_return_msg || ' ( via rview ' || v_loadRec.lt_view_name || ' )';
WS_ACT_LOAD,FUNCTION,975, p_return_msg := substr(v_stmt_insert, 1, 1023);
WS_ACT_LOAD,FUNCTION,976, END IF;
WS_ACT_LOAD,FUNCTION,977, v_step := 5400;
WS_ACT_LOAD,FUNCTION,978, p_status_code := 1;
WS_ACT_LOAD,FUNCTION,979, v_result := 1;
WS_ACT_LOAD,FUNCTION,980,
WS_ACT_LOAD,FUNCTION,981, -- **********************************
WS_ACT_LOAD,FUNCTION,982, -- File Load
WS_ACT_LOAD,FUNCTION,983, -- **********************************
WS_ACT_LOAD,FUNCTION,984, ELSIF v_LoadRec.lt_type = 'F' THEN
WS_ACT_LOAD,FUNCTION,985, v_result := ws_act_host_script(p_sequence, p_obj_type, p_action, p_obj_key, p_job_name,
WS_ACT_LOAD,FUNCTION,986, p_task_name, p_job_id, p_task_id, p_return_msg, p_status_code);
WS_ACT_LOAD,FUNCTION,987,
WS_ACT_LOAD,FUNCTION,988, -- If script prepared okay then indicate to our caller that we want to
WS_ACT_LOAD,FUNCTION,989, -- run a script by returning a result of 2
WS_ACT_LOAD,FUNCTION,990, IF v_result = 1 THEN
WS_ACT_LOAD,FUNCTION,991, v_result := 2;
WS_ACT_LOAD,FUNCTION,992, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,993, END IF;
WS_ACT_LOAD,FUNCTION,994,
WS_ACT_LOAD,FUNCTION,995, -- **********************************
WS_ACT_LOAD,FUNCTION,996, -- XML File Load
WS_ACT_LOAD,FUNCTION,997, -- **********************************
WS_ACT_LOAD,FUNCTION,998, ELSIF v_LoadRec.lt_type = 'X' THEN
WS_ACT_LOAD,FUNCTION,999, v_result := ws_act_host_script(p_sequence, p_obj_type, p_action, p_obj_key, p_job_name,
WS_ACT_LOAD,FUNCTION,1000, p_task_name, p_job_id, p_task_id, p_return_msg, p_status_code);
WS_ACT_LOAD,FUNCTION,1001,
WS_ACT_LOAD,FUNCTION,1002, -- If script prepared okay then indicate to our caller that we want to
WS_ACT_LOAD,FUNCTION,1003, -- run a script by returning a result of 2
WS_ACT_LOAD,FUNCTION,1004, IF v_result = 1 THEN
WS_ACT_LOAD,FUNCTION,1005, v_result := 2;
WS_ACT_LOAD,FUNCTION,1006, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,1007, END IF;
WS_ACT_LOAD,FUNCTION,1008,
WS_ACT_LOAD,FUNCTION,1009, -- **********************************
WS_ACT_LOAD,FUNCTION,1010, -- Script Load
WS_ACT_LOAD,FUNCTION,1011, -- **********************************
WS_ACT_LOAD,FUNCTION,1012, ELSIF v_LoadRec.lt_type = 'S' THEN
WS_ACT_LOAD,FUNCTION,1013, v_result := ws_act_host_script(p_sequence, p_obj_type, p_action, p_obj_key, p_job_name,
WS_ACT_LOAD,FUNCTION,1014, p_task_name, p_job_id, p_task_id, p_return_msg, p_status_code);
WS_ACT_LOAD,FUNCTION,1015,
WS_ACT_LOAD,FUNCTION,1016, -- If script prepared okay then indicate to our caller that we want to
WS_ACT_LOAD,FUNCTION,1017, -- run a script by returning a result of 2
WS_ACT_LOAD,FUNCTION,1018, IF v_result = 1 THEN
WS_ACT_LOAD,FUNCTION,1019, v_result := 2;
WS_ACT_LOAD,FUNCTION,1020, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,1021, END IF;
WS_ACT_LOAD,FUNCTION,1022,
WS_ACT_LOAD,FUNCTION,1023, -- **********************************
WS_ACT_LOAD,FUNCTION,1024, -- ODBC Load
WS_ACT_LOAD,FUNCTION,1025, -- **********************************
WS_ACT_LOAD,FUNCTION,1026, ELSIF v_LoadRec.lt_type = 'O' THEN
WS_ACT_LOAD,FUNCTION,1027, -- run an ODBC load by returning a result of 3
WS_ACT_LOAD,FUNCTION,1028, v_result := 3;
WS_ACT_LOAD,FUNCTION,1029, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,1030,
WS_ACT_LOAD,FUNCTION,1031, -- **********************************
WS_ACT_LOAD,FUNCTION,1032, -- Native ODBC Load
WS_ACT_LOAD,FUNCTION,1033, -- **********************************
WS_ACT_LOAD,FUNCTION,1034, ELSIF v_LoadRec.lt_type = 'N' THEN
WS_ACT_LOAD,FUNCTION,1035, -- run a Native ODBC load by returning a result of 12
WS_ACT_LOAD,FUNCTION,1036, v_result := 12;
WS_ACT_LOAD,FUNCTION,1037, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,1038,
WS_ACT_LOAD,FUNCTION,1039, -- **********************************
WS_ACT_LOAD,FUNCTION,1040, -- Integration Services Load
WS_ACT_LOAD,FUNCTION,1041, -- **********************************
WS_ACT_LOAD,FUNCTION,1042, ELSIF v_LoadRec.lt_type = 'I' THEN
WS_ACT_LOAD,FUNCTION,1043, -- run a SSIS load by returning a result of 14
WS_ACT_LOAD,FUNCTION,1044, v_result := 14;
WS_ACT_LOAD,FUNCTION,1045, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,1046,
WS_ACT_LOAD,FUNCTION,1047, -- **********************************
WS_ACT_LOAD,FUNCTION,1048, -- Apache Sqoop Load
WS_ACT_LOAD,FUNCTION,1049, --**********************************
WS_ACT_LOAD,FUNCTION,1050, ElsIf v_LoadRec.lt_type = 'A' Then
WS_ACT_LOAD,FUNCTION,1051, -- run an Apache Sqoop load by returning a result of 91
WS_ACT_LOAD,FUNCTION,1052, p_return_msg := 'Apache Sqoop load';
WS_ACT_LOAD,FUNCTION,1053, v_result := 91;
WS_ACT_LOAD,FUNCTION,1054, p_status_code := 2;
WS_ACT_LOAD,FUNCTION,1055,
WS_ACT_LOAD,FUNCTION,1056, --**********************************
WS_ACT_LOAD,FUNCTION,1057, -- External Load
WS_ACT_LOAD,FUNCTION,1058, -- **********************************
WS_ACT_LOAD,FUNCTION,1059, ELSIF v_LoadRec.lt_type = 'E' THEN
WS_ACT_LOAD,FUNCTION,1060, p_return_msg := 'Externally loaded';
WS_ACT_LOAD,FUNCTION,1061, p_status_code := 1;
WS_ACT_LOAD,FUNCTION,1062, v_result := 1;
WS_ACT_LOAD,FUNCTION,1063,
WS_ACT_LOAD,FUNCTION,1064, -- **********************************
WS_ACT_LOAD,FUNCTION,1065, -- Unsupported Load type
WS_ACT_LOAD,FUNCTION,1066, -- **********************************
WS_ACT_LOAD,FUNCTION,1067, ELSE
WS_ACT_LOAD,FUNCTION,1068, v_MsgText := 'Unsupported Load Type ';
WS_ACT_LOAD,FUNCTION,1069, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, v_MsgText, NULL, NULL, p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,1070,
WS_ACT_LOAD,FUNCTION,1071, p_return_msg := 'Unsupport load type in ws_act_load (8.4.1.0)';
WS_ACT_LOAD,FUNCTION,1072, p_status_code := -2;
WS_ACT_LOAD,FUNCTION,1073, v_result := -2;
WS_ACT_LOAD,FUNCTION,1074, END IF;
WS_ACT_LOAD,FUNCTION,1075,
WS_ACT_LOAD,FUNCTION,1076, COMMIT;
WS_ACT_LOAD,FUNCTION,1077, RETURN v_result;
WS_ACT_LOAD,FUNCTION,1078,
WS_ACT_LOAD,FUNCTION,1079, -- Need to commit or rollback otherwise oracle will still be
WS_ACT_LOAD,FUNCTION,1080, -- doing the db link transaction and will disallow pragma autonomous
WS_ACT_LOAD,FUNCTION,1081, -- and will fail the WsWrkAudit calls
WS_ACT_LOAD,FUNCTION,1082, EXCEPTION WHEN OTHERS THEN COMMIT;
WS_ACT_LOAD,FUNCTION,1083,
WS_ACT_LOAD,FUNCTION,1084, v_MsgText := 'Unhandled Exception in ws_act_load (8.4.1.0). ' || ' Step ' || v_step;
WS_ACT_LOAD,FUNCTION,1085, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence, v_MsgText, SQLCODE, SUBSTR(SQLERRM, 1, 1023), p_task_id, p_job_id);
WS_ACT_LOAD,FUNCTION,1086,
WS_ACT_LOAD,FUNCTION,1087, p_return_msg := 'Unhandled Exception in ws_act_load (8.4.1.0) step ' || v_step;
WS_ACT_LOAD,FUNCTION,1088, p_status_code := - 3;
WS_ACT_LOAD,FUNCTION,1089, RETURN - 3;
WS_ACT_LOAD,FUNCTION,1090,
WS_ACT_LOAD,FUNCTION,1091,END ws_act_load;
WS_ACT_LOAD,FUNCTION,1092,
WS_ACT_POST_EXPORT,FUNCTION,1,function ws_act_post_export
WS_ACT_POST_EXPORT,FUNCTION,2, (
WS_ACT_POST_EXPORT,FUNCTION,3, p_sequence IN number,
WS_ACT_POST_EXPORT,FUNCTION,4, p_obj_type IN number,
WS_ACT_POST_EXPORT,FUNCTION,5, p_action IN number,
WS_ACT_POST_EXPORT,FUNCTION,6, p_obj_key IN number,
WS_ACT_POST_EXPORT,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_POST_EXPORT,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_POST_EXPORT,FUNCTION,9, p_job_id IN number,
WS_ACT_POST_EXPORT,FUNCTION,10, p_task_id IN number,
WS_ACT_POST_EXPORT,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_POST_EXPORT,FUNCTION,12, p_status_code OUT number
WS_ACT_POST_EXPORT,FUNCTION,13, )
WS_ACT_POST_EXPORT,FUNCTION,14, Return integer
WS_ACT_POST_EXPORT,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_POST_EXPORT,FUNCTION,16, IS
WS_ACT_POST_EXPORT,FUNCTION,17,
WS_ACT_POST_EXPORT,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_POST_EXPORT,FUNCTION,19,
WS_ACT_POST_EXPORT,FUNCTION,20, -- =============================================================================
WS_ACT_POST_EXPORT,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_POST_EXPORT,FUNCTION,22, -- Script Name : ws_act_post_export
WS_ACT_POST_EXPORT,FUNCTION,23, -- Description : Execute the post export procedure associated with
WS_ACT_POST_EXPORT,FUNCTION,24, -- a export object
WS_ACT_POST_EXPORT,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_POST_EXPORT,FUNCTION,26, -- =============================================================================
WS_ACT_POST_EXPORT,FUNCTION,27,
WS_ACT_POST_EXPORT,FUNCTION,28, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,29, -- Constants
WS_ACT_POST_EXPORT,FUNCTION,30, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,31, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_POST_EXPORT,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_POST_EXPORT,FUNCTION,33, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_POST_EXPORT,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_POST_EXPORT,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_POST_EXPORT,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_POST_EXPORT,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_POST_EXPORT,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_POST_EXPORT,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_POST_EXPORT,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_POST_EXPORT,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_POST_EXPORT,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_POST_EXPORT,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_POST_EXPORT,FUNCTION,44, v_ws_obj_export constant number := 14;
WS_ACT_POST_EXPORT,FUNCTION,45,
WS_ACT_POST_EXPORT,FUNCTION,46, v_ws_act_drop constant number := 0;
WS_ACT_POST_EXPORT,FUNCTION,47, v_ws_act_create constant number := 1;
WS_ACT_POST_EXPORT,FUNCTION,48, v_ws_act_compile constant number := 2;
WS_ACT_POST_EXPORT,FUNCTION,49, v_ws_act_drop_all constant number := 3;
WS_ACT_POST_EXPORT,FUNCTION,50, v_ws_act_pre_drop constant number := 4;
WS_ACT_POST_EXPORT,FUNCTION,51, v_ws_act_load constant number := 5;
WS_ACT_POST_EXPORT,FUNCTION,52, v_ws_act_update constant number := 6;
WS_ACT_POST_EXPORT,FUNCTION,53, v_ws_act_execute constant number := 7;
WS_ACT_POST_EXPORT,FUNCTION,54, v_ws_act_process constant number := 8;
WS_ACT_POST_EXPORT,FUNCTION,55, v_ws_act_build constant number := 9;
WS_ACT_POST_EXPORT,FUNCTION,56, v_ws_act_build_all constant number := 10;
WS_ACT_POST_EXPORT,FUNCTION,57, v_ws_act_analyze constant number := 11;
WS_ACT_POST_EXPORT,FUNCTION,58, v_ws_act_quick_analyze constant number := 12;
WS_ACT_POST_EXPORT,FUNCTION,59, v_ws_act_statistics constant number := 13;
WS_ACT_POST_EXPORT,FUNCTION,60, v_ws_act_quick_statistics constant number := 14;
WS_ACT_POST_EXPORT,FUNCTION,61,
WS_ACT_POST_EXPORT,FUNCTION,62, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,63, -- Variables
WS_ACT_POST_EXPORT,FUNCTION,64, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,65, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_POST_EXPORT,FUNCTION,66, v_after_msg varchar2(1024); -- Text from an after transformation
WS_ACT_POST_EXPORT,FUNCTION,67, v_step integer := 0; -- return code
WS_ACT_POST_EXPORT,FUNCTION,68, v_result integer := 0; -- return code
WS_ACT_POST_EXPORT,FUNCTION,69, v_cursor number;
WS_ACT_POST_EXPORT,FUNCTION,70, v_procedure_key number;
WS_ACT_POST_EXPORT,FUNCTION,71, v_procedure varchar2(64);
WS_ACT_POST_EXPORT,FUNCTION,72, v_procedure_type varchar2(1);
WS_ACT_POST_EXPORT,FUNCTION,73, v_stmt varchar2(4000);
WS_ACT_POST_EXPORT,FUNCTION,74, v_stmt2 varchar2(4000);
WS_ACT_POST_EXPORT,FUNCTION,75, v_stmt3 varchar2(4000);
WS_ACT_POST_EXPORT,FUNCTION,76, v_stmt4 varchar2(4000);
WS_ACT_POST_EXPORT,FUNCTION,77, v_stmt5 varchar2(4000);
WS_ACT_POST_EXPORT,FUNCTION,78, v_row_count integer := 0;
WS_ACT_POST_EXPORT,FUNCTION,79, v_row integer := 0;
WS_ACT_POST_EXPORT,FUNCTION,80, v_len integer := 0;
WS_ACT_POST_EXPORT,FUNCTION,81, v_len2 integer := 0;
WS_ACT_POST_EXPORT,FUNCTION,82, v_len3 integer := 0;
WS_ACT_POST_EXPORT,FUNCTION,83,
WS_ACT_POST_EXPORT,FUNCTION,84,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_POST_EXPORT,FUNCTION,85,BEGIN
WS_ACT_POST_EXPORT,FUNCTION,86,
WS_ACT_POST_EXPORT,FUNCTION,87, p_return_msg := '';
WS_ACT_POST_EXPORT,FUNCTION,88, v_step := 100;
WS_ACT_POST_EXPORT,FUNCTION,89,
WS_ACT_POST_EXPORT,FUNCTION,90, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,91, -- Get the post export procedure if it exists
WS_ACT_POST_EXPORT,FUNCTION,92, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,93, BEGIN
WS_ACT_POST_EXPORT,FUNCTION,94, v_step := 200;
WS_ACT_POST_EXPORT,FUNCTION,95, v_procedure_key := 0;
WS_ACT_POST_EXPORT,FUNCTION,96, Select et_procedure_key into v_procedure_key
WS_ACT_POST_EXPORT,FUNCTION,97, From ws_export_tab
WS_ACT_POST_EXPORT,FUNCTION,98, Where et_obj_key = p_obj_key;
WS_ACT_POST_EXPORT,FUNCTION,99, EXCEPTION WHEN OTHERS THEN
WS_ACT_POST_EXPORT,FUNCTION,100, v_step := 300;
WS_ACT_POST_EXPORT,FUNCTION,101, If SQLCODE = 100 Then
WS_ACT_POST_EXPORT,FUNCTION,102, p_return_msg := p_return_msg||'No post export procedure defined';
WS_ACT_POST_EXPORT,FUNCTION,103, p_status_code := 1;
WS_ACT_POST_EXPORT,FUNCTION,104, RETURN 1;
WS_ACT_POST_EXPORT,FUNCTION,105, Else
WS_ACT_POST_EXPORT,FUNCTION,106, p_return_msg := 'Unable to acquire update procedure for ' ||p_task_name;
WS_ACT_POST_EXPORT,FUNCTION,107, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_EXPORT,FUNCTION,108, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_EXPORT,FUNCTION,109, p_status_code := -3;
WS_ACT_POST_EXPORT,FUNCTION,110, End If;
WS_ACT_POST_EXPORT,FUNCTION,111, END;
WS_ACT_POST_EXPORT,FUNCTION,112,
WS_ACT_POST_EXPORT,FUNCTION,113, v_step := 400;
WS_ACT_POST_EXPORT,FUNCTION,114,
WS_ACT_POST_EXPORT,FUNCTION,115, If v_procedure_key <= 0
WS_ACT_POST_EXPORT,FUNCTION,116, Or v_procedure_key is NULL Then
WS_ACT_POST_EXPORT,FUNCTION,117, p_return_msg := p_return_msg||'No post export procedure defined';
WS_ACT_POST_EXPORT,FUNCTION,118, p_status_code := 1;
WS_ACT_POST_EXPORT,FUNCTION,119, RETURN 1;
WS_ACT_POST_EXPORT,FUNCTION,120, End If;
WS_ACT_POST_EXPORT,FUNCTION,121,
WS_ACT_POST_EXPORT,FUNCTION,122,
WS_ACT_POST_EXPORT,FUNCTION,123, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,124, -- Get the procedure name
WS_ACT_POST_EXPORT,FUNCTION,125, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,126, v_step := 500;
WS_ACT_POST_EXPORT,FUNCTION,127, SELECT ph_name, NVL(ph_type,'P')
WS_ACT_POST_EXPORT,FUNCTION,128, INTO v_procedure, v_procedure_type
WS_ACT_POST_EXPORT,FUNCTION,129, FROM ws_pro_header
WS_ACT_POST_EXPORT,FUNCTION,130, WHERE ph_obj_key = v_procedure_key;
WS_ACT_POST_EXPORT,FUNCTION,131,
WS_ACT_POST_EXPORT,FUNCTION,132,
WS_ACT_POST_EXPORT,FUNCTION,133, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,134, -- IF SQLBLOCK then return for calling
WS_ACT_POST_EXPORT,FUNCTION,135, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,136,
WS_ACT_POST_EXPORT,FUNCTION,137, v_step := 600;
WS_ACT_POST_EXPORT,FUNCTION,138,
WS_ACT_POST_EXPORT,FUNCTION,139, IF v_procedure_type = 'B'
WS_ACT_POST_EXPORT,FUNCTION,140, THEN
WS_ACT_POST_EXPORT,FUNCTION,141, -- run a POST SQLBLOCK by returning a result of 17
WS_ACT_POST_EXPORT,FUNCTION,142, p_status_code := 17;
WS_ACT_POST_EXPORT,FUNCTION,143, v_result := 2;
WS_ACT_POST_EXPORT,FUNCTION,144, RETURN v_result;
WS_ACT_POST_EXPORT,FUNCTION,145, END IF;
WS_ACT_POST_EXPORT,FUNCTION,146,
WS_ACT_POST_EXPORT,FUNCTION,147, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,148, -- Bind the columns and execute
WS_ACT_POST_EXPORT,FUNCTION,149, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,150, v_step := 700;
WS_ACT_POST_EXPORT,FUNCTION,151, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_POST_EXPORT,FUNCTION,152, v_step := 800;
WS_ACT_POST_EXPORT,FUNCTION,153, -- Build up our execute statement for the procedure
WS_ACT_POST_EXPORT,FUNCTION,154, v_stmt := 'BEGIN '|| v_procedure
WS_ACT_POST_EXPORT,FUNCTION,155, || '(:p1, :p2, :p3, :p4, :p5, :p6, :p7); END;';
WS_ACT_POST_EXPORT,FUNCTION,156, v_step := 900;
WS_ACT_POST_EXPORT,FUNCTION,157, DBMS_SQL.PARSE(v_cursor, v_stmt, 1);
WS_ACT_POST_EXPORT,FUNCTION,158, v_step := 1000;
WS_ACT_POST_EXPORT,FUNCTION,159,
WS_ACT_POST_EXPORT,FUNCTION,160, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p1', p_sequence);
WS_ACT_POST_EXPORT,FUNCTION,161, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p2', p_job_name,64);
WS_ACT_POST_EXPORT,FUNCTION,162, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p3', p_task_name,64);
WS_ACT_POST_EXPORT,FUNCTION,163, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p4', p_job_id);
WS_ACT_POST_EXPORT,FUNCTION,164, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p5', p_task_id);
WS_ACT_POST_EXPORT,FUNCTION,165, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p6', p_return_msg,1024);
WS_ACT_POST_EXPORT,FUNCTION,166, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p7', p_status_code);
WS_ACT_POST_EXPORT,FUNCTION,167, v_step := 1100;
WS_ACT_POST_EXPORT,FUNCTION,168,
WS_ACT_POST_EXPORT,FUNCTION,169, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,170, -- Call the procedure
WS_ACT_POST_EXPORT,FUNCTION,171, --=====================================================
WS_ACT_POST_EXPORT,FUNCTION,172, BEGIN
WS_ACT_POST_EXPORT,FUNCTION,173, v_step := 1200;
WS_ACT_POST_EXPORT,FUNCTION,174, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_POST_EXPORT,FUNCTION,175, v_step := 1300;
WS_ACT_POST_EXPORT,FUNCTION,176, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p6', p_return_msg);
WS_ACT_POST_EXPORT,FUNCTION,177, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p7', p_status_code);
WS_ACT_POST_EXPORT,FUNCTION,178, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_POST_EXPORT,FUNCTION,179, EXCEPTION WHEN OTHERS THEN
WS_ACT_POST_EXPORT,FUNCTION,180, p_return_msg := 'Unhandled Exception in call from ws_act_post_export to ' ||v_procedure;
WS_ACT_POST_EXPORT,FUNCTION,181, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_EXPORT,FUNCTION,182, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_EXPORT,FUNCTION,183, p_status_code := -3;
WS_ACT_POST_EXPORT,FUNCTION,184, END;
WS_ACT_POST_EXPORT,FUNCTION,185,
WS_ACT_POST_EXPORT,FUNCTION,186, COMMIT;
WS_ACT_POST_EXPORT,FUNCTION,187, p_return_msg := substr(v_after_msg||p_return_msg,1,1023);
WS_ACT_POST_EXPORT,FUNCTION,188, RETURN v_result;
WS_ACT_POST_EXPORT,FUNCTION,189,
WS_ACT_POST_EXPORT,FUNCTION,190,EXCEPTION
WS_ACT_POST_EXPORT,FUNCTION,191, WHEN OTHERS THEN
WS_ACT_POST_EXPORT,FUNCTION,192, v_MsgText := 'Unhandled Exception in ws_act_post_export '|| v_ws_pro_version ||
WS_ACT_POST_EXPORT,FUNCTION,193, ' Step ' ||v_step;
WS_ACT_POST_EXPORT,FUNCTION,194, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_EXPORT,FUNCTION,195, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_EXPORT,FUNCTION,196, p_return_msg := 'Unhandled Exception in ws_act_post_export step ' ||v_step;
WS_ACT_POST_EXPORT,FUNCTION,197, p_status_code := -3;
WS_ACT_POST_EXPORT,FUNCTION,198, RETURN -3;
WS_ACT_POST_EXPORT,FUNCTION,199,
WS_ACT_POST_EXPORT,FUNCTION,200,END ws_act_post_export;
WS_ACT_POST_EXPORT,FUNCTION,201,
WS_ACT_POST_LOAD,FUNCTION,1,function ws_act_post_load
WS_ACT_POST_LOAD,FUNCTION,2, (
WS_ACT_POST_LOAD,FUNCTION,3, p_sequence IN number,
WS_ACT_POST_LOAD,FUNCTION,4, p_obj_type IN number,
WS_ACT_POST_LOAD,FUNCTION,5, p_action IN number,
WS_ACT_POST_LOAD,FUNCTION,6, p_obj_key IN number,
WS_ACT_POST_LOAD,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_POST_LOAD,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_POST_LOAD,FUNCTION,9, p_job_id IN number,
WS_ACT_POST_LOAD,FUNCTION,10, p_task_id IN number,
WS_ACT_POST_LOAD,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_POST_LOAD,FUNCTION,12, p_status_code OUT number
WS_ACT_POST_LOAD,FUNCTION,13, )
WS_ACT_POST_LOAD,FUNCTION,14, Return integer
WS_ACT_POST_LOAD,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_POST_LOAD,FUNCTION,16, IS
WS_ACT_POST_LOAD,FUNCTION,17,
WS_ACT_POST_LOAD,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_POST_LOAD,FUNCTION,19,
WS_ACT_POST_LOAD,FUNCTION,20, -- =============================================================================
WS_ACT_POST_LOAD,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_POST_LOAD,FUNCTION,22, -- Script Name : ws_act_post_load
WS_ACT_POST_LOAD,FUNCTION,23, -- Description : Execute the post load procedure associated with
WS_ACT_POST_LOAD,FUNCTION,24, -- a load table
WS_ACT_POST_LOAD,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_POST_LOAD,FUNCTION,26, -- =============================================================================
WS_ACT_POST_LOAD,FUNCTION,27,
WS_ACT_POST_LOAD,FUNCTION,28, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,29, -- Constants
WS_ACT_POST_LOAD,FUNCTION,30, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,31, v_ws_pro_version constant varchar2(50) := 'Ws_Act_Post_Load(8.4.1.0)';
WS_ACT_POST_LOAD,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_POST_LOAD,FUNCTION,33, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_POST_LOAD,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_POST_LOAD,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_POST_LOAD,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_POST_LOAD,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_POST_LOAD,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_POST_LOAD,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_POST_LOAD,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_POST_LOAD,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_POST_LOAD,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_POST_LOAD,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_POST_LOAD,FUNCTION,44,
WS_ACT_POST_LOAD,FUNCTION,45, v_ws_act_drop constant number := 0;
WS_ACT_POST_LOAD,FUNCTION,46, v_ws_act_create constant number := 1;
WS_ACT_POST_LOAD,FUNCTION,47, v_ws_act_compile constant number := 2;
WS_ACT_POST_LOAD,FUNCTION,48, v_ws_act_drop_all constant number := 3;
WS_ACT_POST_LOAD,FUNCTION,49, v_ws_act_pre_drop constant number := 4;
WS_ACT_POST_LOAD,FUNCTION,50, v_ws_act_load constant number := 5;
WS_ACT_POST_LOAD,FUNCTION,51, v_ws_act_update constant number := 6;
WS_ACT_POST_LOAD,FUNCTION,52, v_ws_act_execute constant number := 7;
WS_ACT_POST_LOAD,FUNCTION,53, v_ws_act_process constant number := 8;
WS_ACT_POST_LOAD,FUNCTION,54, v_ws_act_build constant number := 9;
WS_ACT_POST_LOAD,FUNCTION,55, v_ws_act_build_all constant number := 10;
WS_ACT_POST_LOAD,FUNCTION,56, v_ws_act_analyze constant number := 11;
WS_ACT_POST_LOAD,FUNCTION,57, v_ws_act_quick_analyze constant number := 12;
WS_ACT_POST_LOAD,FUNCTION,58, v_ws_act_statistics constant number := 13;
WS_ACT_POST_LOAD,FUNCTION,59, v_ws_act_quick_statistics constant number := 14;
WS_ACT_POST_LOAD,FUNCTION,60,
WS_ACT_POST_LOAD,FUNCTION,61, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,62, -- Variables
WS_ACT_POST_LOAD,FUNCTION,63, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,64, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_POST_LOAD,FUNCTION,65, v_after_msg varchar2(1024); -- Text from an after transformation
WS_ACT_POST_LOAD,FUNCTION,66, v_step integer := 0; -- return code
WS_ACT_POST_LOAD,FUNCTION,67, v_result integer := 0; -- return code
WS_ACT_POST_LOAD,FUNCTION,68, v_cursor number;
WS_ACT_POST_LOAD,FUNCTION,69, v_procedure_key number;
WS_ACT_POST_LOAD,FUNCTION,70, v_procedure varchar2(64);
WS_ACT_POST_LOAD,FUNCTION,71, v_procedure_type varchar2(1);
WS_ACT_POST_LOAD,FUNCTION,72, v_stmt varchar2(4000);
WS_ACT_POST_LOAD,FUNCTION,73, v_stmt2 varchar2(4000);
WS_ACT_POST_LOAD,FUNCTION,74, v_stmt3 varchar2(4000);
WS_ACT_POST_LOAD,FUNCTION,75, v_stmt4 varchar2(4000);
WS_ACT_POST_LOAD,FUNCTION,76, v_stmt5 varchar2(4000);
WS_ACT_POST_LOAD,FUNCTION,77, v_row_count integer := 0;
WS_ACT_POST_LOAD,FUNCTION,78, v_row integer := 0;
WS_ACT_POST_LOAD,FUNCTION,79, v_len integer := 0;
WS_ACT_POST_LOAD,FUNCTION,80, v_len2 integer := 0;
WS_ACT_POST_LOAD,FUNCTION,81, v_len3 integer := 0;
WS_ACT_POST_LOAD,FUNCTION,82, v_len4 integer := 0;
WS_ACT_POST_LOAD,FUNCTION,83,
WS_ACT_POST_LOAD,FUNCTION,84, v_LoadRec ws_load_tab%ROWTYPE;
WS_ACT_POST_LOAD,FUNCTION,85, v_schema_flag integer := 0;
WS_ACT_POST_LOAD,FUNCTION,86, v_satellite_ind varchar2(1);
WS_ACT_POST_LOAD,FUNCTION,87, v_dss_schema varchar2(64);
WS_ACT_POST_LOAD,FUNCTION,88, v_table_schema varchar2(64);
WS_ACT_POST_LOAD,FUNCTION,89, v_table_name varchar2(64);
WS_ACT_POST_LOAD,FUNCTION,90, v_table_with_schema varchar2(150);
WS_ACT_POST_LOAD,FUNCTION,91, v_dss_load_date_name varchar2(255); -- Configured name for DSS_LOAD_DATE
WS_ACT_POST_LOAD,FUNCTION,92, v_rn_a_ld_trans_on_nw_rcs_only integer := 0;
WS_ACT_POST_LOAD,FUNCTION,93, v_update_where varchar2(255);
WS_ACT_POST_LOAD,FUNCTION,94,
WS_ACT_POST_LOAD,FUNCTION,95, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,96, -- Cursor for all columns in the load table
WS_ACT_POST_LOAD,FUNCTION,97, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,98, Cursor c_Load is
WS_ACT_POST_LOAD,FUNCTION,99, Select * from ws_load_col
WS_ACT_POST_LOAD,FUNCTION,100, Where lc_obj_key = p_obj_key
WS_ACT_POST_LOAD,FUNCTION,101, And lc_transform_type = 'A'
WS_ACT_POST_LOAD,FUNCTION,102, And lc_transform_code is not Null
WS_ACT_POST_LOAD,FUNCTION,103, Order by lc_order;
WS_ACT_POST_LOAD,FUNCTION,104,
WS_ACT_POST_LOAD,FUNCTION,105,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_POST_LOAD,FUNCTION,106,BEGIN
WS_ACT_POST_LOAD,FUNCTION,107,
WS_ACT_POST_LOAD,FUNCTION,108, p_return_msg := '';
WS_ACT_POST_LOAD,FUNCTION,109, v_step := 100;
WS_ACT_POST_LOAD,FUNCTION,110,
WS_ACT_POST_LOAD,FUNCTION,111, -- Lookup DSS_LOAD_DATE name
WS_ACT_POST_LOAD,FUNCTION,112, BEGIN
WS_ACT_POST_LOAD,FUNCTION,113, SELECT NVL(mn_name, 'dss_load_date')
WS_ACT_POST_LOAD,FUNCTION,114, INTO v_dss_load_date_name
WS_ACT_POST_LOAD,FUNCTION,115, FROM ws_meta_names
WS_ACT_POST_LOAD,FUNCTION,116, WHERE mn_object = 'dss_load_date';
WS_ACT_POST_LOAD,FUNCTION,117, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_POST_LOAD,FUNCTION,118, v_dss_load_date_name := 'dss_load_date';
WS_ACT_POST_LOAD,FUNCTION,119, END;
WS_ACT_POST_LOAD,FUNCTION,120,
WS_ACT_POST_LOAD,FUNCTION,121, v_satellite_ind := '';
WS_ACT_POST_LOAD,FUNCTION,122, v_table_schema := '';
WS_ACT_POST_LOAD,FUNCTION,123,
WS_ACT_POST_LOAD,FUNCTION,124, -- needs to look up the schema from ws_dbc_target
WS_ACT_POST_LOAD,FUNCTION,125, BEGIN
WS_ACT_POST_LOAD,FUNCTION,126, v_step := 120;
WS_ACT_POST_LOAD,FUNCTION,127,
WS_ACT_POST_LOAD,FUNCTION,128, SELECT NVL(dt_schema, '')
WS_ACT_POST_LOAD,FUNCTION,129, ,oo_name
WS_ACT_POST_LOAD,FUNCTION,130, INTO v_table_schema
WS_ACT_POST_LOAD,FUNCTION,131, ,v_table_name
WS_ACT_POST_LOAD,FUNCTION,132, FROM ws_obj_object
WS_ACT_POST_LOAD,FUNCTION,133, LEFT JOIN ws_dbc_target
WS_ACT_POST_LOAD,FUNCTION,134, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_POST_LOAD,FUNCTION,135, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_POST_LOAD,FUNCTION,136, ;
WS_ACT_POST_LOAD,FUNCTION,137,
WS_ACT_POST_LOAD,FUNCTION,138, v_table_schema := TRIM(v_table_schema);
WS_ACT_POST_LOAD,FUNCTION,139,
WS_ACT_POST_LOAD,FUNCTION,140, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_POST_LOAD,FUNCTION,141, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_POST_LOAD,FUNCTION,142, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,143, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,144, p_return_msg := 'Object could not be found';
WS_ACT_POST_LOAD,FUNCTION,145, p_status_code := -2;
WS_ACT_POST_LOAD,FUNCTION,146, RETURN -2;
WS_ACT_POST_LOAD,FUNCTION,147, END;
WS_ACT_POST_LOAD,FUNCTION,148,
WS_ACT_POST_LOAD,FUNCTION,149, v_step := 130;
WS_ACT_POST_LOAD,FUNCTION,150, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_POST_LOAD,FUNCTION,151, -- meta_satellite_ind = A
WS_ACT_POST_LOAD,FUNCTION,152, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_POST_LOAD,FUNCTION,153,
WS_ACT_POST_LOAD,FUNCTION,154, SELECT meta_satellite_ind,
WS_ACT_POST_LOAD,FUNCTION,155, TRIM(meta_dss_schema)
WS_ACT_POST_LOAD,FUNCTION,156, INTO v_satellite_ind,
WS_ACT_POST_LOAD,FUNCTION,157, v_dss_schema
WS_ACT_POST_LOAD,FUNCTION,158, FROM ws_meta
WS_ACT_POST_LOAD,FUNCTION,159, WHERE rownum = 1;
WS_ACT_POST_LOAD,FUNCTION,160,
WS_ACT_POST_LOAD,FUNCTION,161, IF v_satellite_ind = 'A' THEN
WS_ACT_POST_LOAD,FUNCTION,162, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_POST_LOAD,FUNCTION,163, v_schema_flag := 1;
WS_ACT_POST_LOAD,FUNCTION,164, v_table_schema := v_dss_schema;
WS_ACT_POST_LOAD,FUNCTION,165, END IF;
WS_ACT_POST_LOAD,FUNCTION,166, END IF;
WS_ACT_POST_LOAD,FUNCTION,167,
WS_ACT_POST_LOAD,FUNCTION,168, v_step := 140;
WS_ACT_POST_LOAD,FUNCTION,169, -- If still not set then defaults to the current user
WS_ACT_POST_LOAD,FUNCTION,170, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_POST_LOAD,FUNCTION,171, SELECT user
WS_ACT_POST_LOAD,FUNCTION,172, INTO v_table_schema
WS_ACT_POST_LOAD,FUNCTION,173, FROM dual;
WS_ACT_POST_LOAD,FUNCTION,174, END IF;
WS_ACT_POST_LOAD,FUNCTION,175,
WS_ACT_POST_LOAD,FUNCTION,176, End If;
WS_ACT_POST_LOAD,FUNCTION,177,
WS_ACT_POST_LOAD,FUNCTION,178, v_step := 150;
WS_ACT_POST_LOAD,FUNCTION,179,
WS_ACT_POST_LOAD,FUNCTION,180, v_table_schema := TRIM(v_table_schema);
WS_ACT_POST_LOAD,FUNCTION,181,
WS_ACT_POST_LOAD,FUNCTION,182, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_POST_LOAD,FUNCTION,183, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_POST_LOAD,FUNCTION,184, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_POST_LOAD,FUNCTION,185, END IF;
WS_ACT_POST_LOAD,FUNCTION,186,
WS_ACT_POST_LOAD,FUNCTION,187, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_POST_LOAD,FUNCTION,188,
WS_ACT_POST_LOAD,FUNCTION,189, v_step := 200;
WS_ACT_POST_LOAD,FUNCTION,190, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,191, -- First get the load table information
WS_ACT_POST_LOAD,FUNCTION,192, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,193, select * into v_LoadRec
WS_ACT_POST_LOAD,FUNCTION,194, from ws_load_tab
WS_ACT_POST_LOAD,FUNCTION,195, where lt_obj_key = p_obj_key;
WS_ACT_POST_LOAD,FUNCTION,196,
WS_ACT_POST_LOAD,FUNCTION,197, v_step := 250;
WS_ACT_POST_LOAD,FUNCTION,198,
WS_ACT_POST_LOAD,FUNCTION,199, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,200, -- Perform any after load transformations
WS_ACT_POST_LOAD,FUNCTION,201, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,202, If nvl(v_LoadRec.lt_transform_ind,'N') = 'Y' Or
WS_ACT_POST_LOAD,FUNCTION,203, nvl(v_LoadRec.lt_type,'D') in ('F','S','E') Then
WS_ACT_POST_LOAD,FUNCTION,204, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,205, -- Transformation
WS_ACT_POST_LOAD,FUNCTION,206, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,207, v_stmt2 := '';
WS_ACT_POST_LOAD,FUNCTION,208, v_stmt3 := '';
WS_ACT_POST_LOAD,FUNCTION,209, v_stmt4 := '';
WS_ACT_POST_LOAD,FUNCTION,210, v_stmt5 := '';
WS_ACT_POST_LOAD,FUNCTION,211, v_step := 300;
WS_ACT_POST_LOAD,FUNCTION,212,
WS_ACT_POST_LOAD,FUNCTION,213, For v_ColRec in c_Load LOOP
WS_ACT_POST_LOAD,FUNCTION,214, v_row := v_row + 1;
WS_ACT_POST_LOAD,FUNCTION,215, If v_row > 1 Then
WS_ACT_POST_LOAD,FUNCTION,216, v_stmt2 := v_stmt2||',';
WS_ACT_POST_LOAD,FUNCTION,217, End If;
WS_ACT_POST_LOAD,FUNCTION,218, -- If we have nearly filled this statement then use another
WS_ACT_POST_LOAD,FUNCTION,219,
WS_ACT_POST_LOAD,FUNCTION,220, If length(v_stmt2) + length(v_ColRec.lc_col_name) + length(' = ') + length(v_ColRec.lc_transform_code) > 4000 Then
WS_ACT_POST_LOAD,FUNCTION,221, If v_stmt3 is null OR v_stmt3 = '' Then
WS_ACT_POST_LOAD,FUNCTION,222, v_stmt3 := v_stmt2;
WS_ACT_POST_LOAD,FUNCTION,223, v_stmt2 := '';
WS_ACT_POST_LOAD,FUNCTION,224, ElsIf v_stmt4 is null OR v_stmt4 = '' Then
WS_ACT_POST_LOAD,FUNCTION,225, v_stmt4 := v_stmt2;
WS_ACT_POST_LOAD,FUNCTION,226, v_stmt2 := '';
WS_ACT_POST_LOAD,FUNCTION,227, ElsIf v_stmt5 is null OR v_stmt5 = '' Then
WS_ACT_POST_LOAD,FUNCTION,228, v_stmt5 := v_stmt2;
WS_ACT_POST_LOAD,FUNCTION,229, v_stmt2 := '';
WS_ACT_POST_LOAD,FUNCTION,230, Else
WS_ACT_POST_LOAD,FUNCTION,231, p_return_msg := 'Maximum length (20000 chars) of transformation expressions exceeded for ' + p_task_name;
WS_ACT_POST_LOAD,FUNCTION,232,
WS_ACT_POST_LOAD,FUNCTION,233, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,234, p_status_code := -2;
WS_ACT_POST_LOAD,FUNCTION,235, v_result := -2;
WS_ACT_POST_LOAD,FUNCTION,236,
WS_ACT_POST_LOAD,FUNCTION,237, RETURN -2;
WS_ACT_POST_LOAD,FUNCTION,238, End If;
WS_ACT_POST_LOAD,FUNCTION,239, End If;
WS_ACT_POST_LOAD,FUNCTION,240, v_stmt2 := v_stmt2||v_ColRec.lc_col_name||' = ';
WS_ACT_POST_LOAD,FUNCTION,241, v_stmt2 := v_stmt2||v_ColRec.lc_transform_code;
WS_ACT_POST_LOAD,FUNCTION,242,
WS_ACT_POST_LOAD,FUNCTION,243, IF v_ColRec.lc_col_name = v_dss_load_date_name THEN
WS_ACT_POST_LOAD,FUNCTION,244, v_rn_a_ld_trans_on_nw_rcs_only := 1;
WS_ACT_POST_LOAD,FUNCTION,245, END IF;
WS_ACT_POST_LOAD,FUNCTION,246, END LOOP;
WS_ACT_POST_LOAD,FUNCTION,247,
WS_ACT_POST_LOAD,FUNCTION,248, v_step := 400;
WS_ACT_POST_LOAD,FUNCTION,249,
WS_ACT_POST_LOAD,FUNCTION,250, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,251, -- See if any columns needed an after transformation
WS_ACT_POST_LOAD,FUNCTION,252, -- If we have any then do the update
WS_ACT_POST_LOAD,FUNCTION,253, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,254, If length(v_stmt2) > 0 Then
WS_ACT_POST_LOAD,FUNCTION,255,
WS_ACT_POST_LOAD,FUNCTION,256, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,257, -- Perform the after transformation update
WS_ACT_POST_LOAD,FUNCTION,258, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,259, BEGIN
WS_ACT_POST_LOAD,FUNCTION,260, v_step := 500;
WS_ACT_POST_LOAD,FUNCTION,261, v_stmt := 'UPDATE '||v_table_with_schema||' SET ';
WS_ACT_POST_LOAD,FUNCTION,262, v_len := length(v_stmt);
WS_ACT_POST_LOAD,FUNCTION,263, v_step := 600;
WS_ACT_POST_LOAD,FUNCTION,264, v_len2 := length(v_stmt2||v_stmt3||v_stmt4||v_stmt5);
WS_ACT_POST_LOAD,FUNCTION,265,
WS_ACT_POST_LOAD,FUNCTION,266, IF v_rn_a_ld_trans_on_nw_rcs_only = 1 THEN
WS_ACT_POST_LOAD,FUNCTION,267, v_update_where := ' WHERE ' || v_dss_load_date_name || ' IS NULL';
WS_ACT_POST_LOAD,FUNCTION,268, v_len3 := length(v_update_where);
WS_ACT_POST_LOAD,FUNCTION,269, END IF;
WS_ACT_POST_LOAD,FUNCTION,270,
WS_ACT_POST_LOAD,FUNCTION,271, v_len4 := v_len + v_len2 + v_len3;
WS_ACT_POST_LOAD,FUNCTION,272,
WS_ACT_POST_LOAD,FUNCTION,273, If v_len4 < 4000 Then
WS_ACT_POST_LOAD,FUNCTION,274, v_step := 700;
WS_ACT_POST_LOAD,FUNCTION,275, v_stmt := v_stmt||v_stmt3||v_stmt2||v_update_where;
WS_ACT_POST_LOAD,FUNCTION,276, v_step := 800;
WS_ACT_POST_LOAD,FUNCTION,277, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_POST_LOAD,FUNCTION,278, v_step := 900;
WS_ACT_POST_LOAD,FUNCTION,279, DBMS_SQL.PARSE(v_cursor, v_stmt, 1);
WS_ACT_POST_LOAD,FUNCTION,280, v_step := 1000;
WS_ACT_POST_LOAD,FUNCTION,281, v_row_count := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_POST_LOAD,FUNCTION,282, v_step := 1100;
WS_ACT_POST_LOAD,FUNCTION,283, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_POST_LOAD,FUNCTION,284, Else
WS_ACT_POST_LOAD,FUNCTION,285, v_step := 1200;
WS_ACT_POST_LOAD,FUNCTION,286, Execute Immediate v_stmt||v_stmt3||v_stmt4||v_stmt5||v_stmt2||v_update_where;
WS_ACT_POST_LOAD,FUNCTION,287, v_row_count := SQL%ROWCOUNT;
WS_ACT_POST_LOAD,FUNCTION,288, End If;
WS_ACT_POST_LOAD,FUNCTION,289,
WS_ACT_POST_LOAD,FUNCTION,290, COMMIT;
WS_ACT_POST_LOAD,FUNCTION,291,
WS_ACT_POST_LOAD,FUNCTION,292, EXCEPTION WHEN OTHERS THEN
WS_ACT_POST_LOAD,FUNCTION,293, v_MsgText := 'Unhandled exception in after transformation';
WS_ACT_POST_LOAD,FUNCTION,294, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,295, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,296, v_MsgText := substr(v_stmt||v_stmt2,1,1023);
WS_ACT_POST_LOAD,FUNCTION,297, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,298, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,299, If length(v_stmt) > 256 Then
WS_ACT_POST_LOAD,FUNCTION,300, v_MsgText := substr(v_stmt||v_stmt2,-1023,1023);
WS_ACT_POST_LOAD,FUNCTION,301, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,302, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,303, End If;
WS_ACT_POST_LOAD,FUNCTION,304, If SQLCODE = -6550 Then
WS_ACT_POST_LOAD,FUNCTION,305, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_POST_LOAD,FUNCTION,306, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,307, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,308, End If;
WS_ACT_POST_LOAD,FUNCTION,309, p_return_msg := 'Unhandled exception in after transformation stage of Ws_Act_Post_Load';
WS_ACT_POST_LOAD,FUNCTION,310, p_status_code := -2;
WS_ACT_POST_LOAD,FUNCTION,311, v_result := -2;
WS_ACT_POST_LOAD,FUNCTION,312, RETURN v_result;
WS_ACT_POST_LOAD,FUNCTION,313, END;
WS_ACT_POST_LOAD,FUNCTION,314, p_return_msg := v_row_count||' rows updated for '||v_table_with_schema||' ';
WS_ACT_POST_LOAD,FUNCTION,315, v_after_msg := p_return_msg;
WS_ACT_POST_LOAD,FUNCTION,316, End If; -- End of we have a transformation to perform
WS_ACT_POST_LOAD,FUNCTION,317, End If; -- End of If setup for transformations
WS_ACT_POST_LOAD,FUNCTION,318,
WS_ACT_POST_LOAD,FUNCTION,319, v_step := 1300;
WS_ACT_POST_LOAD,FUNCTION,320,
WS_ACT_POST_LOAD,FUNCTION,321, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,322, -- Get the post load procedure if it exists
WS_ACT_POST_LOAD,FUNCTION,323, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,324, BEGIN
WS_ACT_POST_LOAD,FUNCTION,325, v_step := 1400;
WS_ACT_POST_LOAD,FUNCTION,326, v_procedure_key := 0;
WS_ACT_POST_LOAD,FUNCTION,327, Select lt_procedure_key into v_procedure_key
WS_ACT_POST_LOAD,FUNCTION,328, From ws_load_tab
WS_ACT_POST_LOAD,FUNCTION,329, Where lt_obj_key = p_obj_key;
WS_ACT_POST_LOAD,FUNCTION,330, EXCEPTION WHEN OTHERS THEN
WS_ACT_POST_LOAD,FUNCTION,331, v_step := 1500;
WS_ACT_POST_LOAD,FUNCTION,332, If SQLCODE = 100 Then
WS_ACT_POST_LOAD,FUNCTION,333, p_return_msg := p_return_msg||'No post load procedure defined';
WS_ACT_POST_LOAD,FUNCTION,334, p_status_code := 1;
WS_ACT_POST_LOAD,FUNCTION,335, RETURN 1;
WS_ACT_POST_LOAD,FUNCTION,336, Else
WS_ACT_POST_LOAD,FUNCTION,337, p_return_msg := 'Unable to acquire update procedure for ' ||p_task_name;
WS_ACT_POST_LOAD,FUNCTION,338, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,339, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,340, p_status_code := -3;
WS_ACT_POST_LOAD,FUNCTION,341, End If;
WS_ACT_POST_LOAD,FUNCTION,342, END;
WS_ACT_POST_LOAD,FUNCTION,343,
WS_ACT_POST_LOAD,FUNCTION,344, v_step := 1600;
WS_ACT_POST_LOAD,FUNCTION,345,
WS_ACT_POST_LOAD,FUNCTION,346, If v_procedure_key <= 0
WS_ACT_POST_LOAD,FUNCTION,347, Or v_procedure_key is NULL Then
WS_ACT_POST_LOAD,FUNCTION,348, p_return_msg := p_return_msg||'No post load procedure defined';
WS_ACT_POST_LOAD,FUNCTION,349, p_status_code := 1;
WS_ACT_POST_LOAD,FUNCTION,350, RETURN 1;
WS_ACT_POST_LOAD,FUNCTION,351, End If;
WS_ACT_POST_LOAD,FUNCTION,352,
WS_ACT_POST_LOAD,FUNCTION,353,
WS_ACT_POST_LOAD,FUNCTION,354, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,355, -- Get the procedure name
WS_ACT_POST_LOAD,FUNCTION,356, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,357,
WS_ACT_POST_LOAD,FUNCTION,358, SELECT ph_name, NVL(ph_type,'P')
WS_ACT_POST_LOAD,FUNCTION,359, INTO v_procedure, v_procedure_type
WS_ACT_POST_LOAD,FUNCTION,360, FROM ws_pro_header
WS_ACT_POST_LOAD,FUNCTION,361, WHERE ph_obj_key = v_procedure_key;
WS_ACT_POST_LOAD,FUNCTION,362,
WS_ACT_POST_LOAD,FUNCTION,363, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,364, -- IF SQLBLOCK then return for calling
WS_ACT_POST_LOAD,FUNCTION,365, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,366,
WS_ACT_POST_LOAD,FUNCTION,367, v_step := 1700;
WS_ACT_POST_LOAD,FUNCTION,368,
WS_ACT_POST_LOAD,FUNCTION,369, IF v_procedure_type = 'B'
WS_ACT_POST_LOAD,FUNCTION,370, THEN
WS_ACT_POST_LOAD,FUNCTION,371, -- run a POST SQLBLOCK by returning a result of 17
WS_ACT_POST_LOAD,FUNCTION,372, p_status_code := 17;
WS_ACT_POST_LOAD,FUNCTION,373, v_result := 2;
WS_ACT_POST_LOAD,FUNCTION,374, RETURN v_result;
WS_ACT_POST_LOAD,FUNCTION,375, END IF;
WS_ACT_POST_LOAD,FUNCTION,376,
WS_ACT_POST_LOAD,FUNCTION,377, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,378, -- Bind the columns and execute
WS_ACT_POST_LOAD,FUNCTION,379, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,380, v_step := 1800;
WS_ACT_POST_LOAD,FUNCTION,381, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_POST_LOAD,FUNCTION,382, v_step := 1900;
WS_ACT_POST_LOAD,FUNCTION,383, -- Build up our execute statement for the procedure
WS_ACT_POST_LOAD,FUNCTION,384, v_stmt := 'BEGIN '|| v_procedure
WS_ACT_POST_LOAD,FUNCTION,385, || '(:p1, :p2, :p3, :p4, :p5, :p6, :p7); END;';
WS_ACT_POST_LOAD,FUNCTION,386, v_step := 2000;
WS_ACT_POST_LOAD,FUNCTION,387, DBMS_SQL.PARSE(v_cursor, v_stmt, 1);
WS_ACT_POST_LOAD,FUNCTION,388, v_step := 2100;
WS_ACT_POST_LOAD,FUNCTION,389,
WS_ACT_POST_LOAD,FUNCTION,390, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p1', p_sequence);
WS_ACT_POST_LOAD,FUNCTION,391, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p2', p_job_name,64);
WS_ACT_POST_LOAD,FUNCTION,392, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p3', p_task_name,64);
WS_ACT_POST_LOAD,FUNCTION,393, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p4', p_job_id);
WS_ACT_POST_LOAD,FUNCTION,394, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p5', p_task_id);
WS_ACT_POST_LOAD,FUNCTION,395, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p6', p_return_msg,1024);
WS_ACT_POST_LOAD,FUNCTION,396, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p7', p_status_code);
WS_ACT_POST_LOAD,FUNCTION,397, v_step := 2200;
WS_ACT_POST_LOAD,FUNCTION,398,
WS_ACT_POST_LOAD,FUNCTION,399, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,400, -- Call the procedure
WS_ACT_POST_LOAD,FUNCTION,401, --=====================================================
WS_ACT_POST_LOAD,FUNCTION,402, BEGIN
WS_ACT_POST_LOAD,FUNCTION,403, v_step := 2300;
WS_ACT_POST_LOAD,FUNCTION,404, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_POST_LOAD,FUNCTION,405, v_step := 2400;
WS_ACT_POST_LOAD,FUNCTION,406, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p6', p_return_msg);
WS_ACT_POST_LOAD,FUNCTION,407, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p7', p_status_code);
WS_ACT_POST_LOAD,FUNCTION,408, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_POST_LOAD,FUNCTION,409, EXCEPTION WHEN OTHERS THEN
WS_ACT_POST_LOAD,FUNCTION,410, p_return_msg := 'Unhandled Exception in call from ws_act_post_load to ' ||v_procedure;
WS_ACT_POST_LOAD,FUNCTION,411, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,412, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,413, p_status_code := -3;
WS_ACT_POST_LOAD,FUNCTION,414, END;
WS_ACT_POST_LOAD,FUNCTION,415,
WS_ACT_POST_LOAD,FUNCTION,416, COMMIT;
WS_ACT_POST_LOAD,FUNCTION,417, p_return_msg := substr(v_after_msg||p_return_msg,1,1023);
WS_ACT_POST_LOAD,FUNCTION,418, RETURN v_result;
WS_ACT_POST_LOAD,FUNCTION,419,
WS_ACT_POST_LOAD,FUNCTION,420,EXCEPTION
WS_ACT_POST_LOAD,FUNCTION,421, WHEN OTHERS THEN
WS_ACT_POST_LOAD,FUNCTION,422, v_MsgText := 'Unhandled Exception in ws_act_post_load '||
WS_ACT_POST_LOAD,FUNCTION,423, ' Step ' ||v_step;
WS_ACT_POST_LOAD,FUNCTION,424, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_POST_LOAD,FUNCTION,425, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_POST_LOAD,FUNCTION,426, p_return_msg := 'Unhandled Exception in ws_act_post_load step ' ||v_step;
WS_ACT_POST_LOAD,FUNCTION,427, p_status_code := -3;
WS_ACT_POST_LOAD,FUNCTION,428, RETURN -3;
WS_ACT_POST_LOAD,FUNCTION,429,
WS_ACT_POST_LOAD,FUNCTION,430,END ws_act_post_load;
WS_ACT_POST_LOAD,FUNCTION,431,
WS_ACT_PRE_DROP,FUNCTION,1,function ws_act_pre_drop
WS_ACT_PRE_DROP,FUNCTION,2, (
WS_ACT_PRE_DROP,FUNCTION,3, p_sequence IN number,
WS_ACT_PRE_DROP,FUNCTION,4, p_obj_type IN number,
WS_ACT_PRE_DROP,FUNCTION,5, p_action IN number,
WS_ACT_PRE_DROP,FUNCTION,6, p_obj_key IN number,
WS_ACT_PRE_DROP,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_PRE_DROP,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_PRE_DROP,FUNCTION,9, p_job_id IN number,
WS_ACT_PRE_DROP,FUNCTION,10, p_task_id IN number,
WS_ACT_PRE_DROP,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_PRE_DROP,FUNCTION,12, p_status_code OUT number
WS_ACT_PRE_DROP,FUNCTION,13, )
WS_ACT_PRE_DROP,FUNCTION,14, Return integer
WS_ACT_PRE_DROP,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_PRE_DROP,FUNCTION,16, IS
WS_ACT_PRE_DROP,FUNCTION,17,
WS_ACT_PRE_DROP,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_PRE_DROP,FUNCTION,19,
WS_ACT_PRE_DROP,FUNCTION,20, -- =============================================================================
WS_ACT_PRE_DROP,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_PRE_DROP,FUNCTION,22, -- Script Name : ws_act_pre_drop
WS_ACT_PRE_DROP,FUNCTION,23, -- Description : Drop any indexes specified as being dropped before an update occurs
WS_ACT_PRE_DROP,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_PRE_DROP,FUNCTION,25, -- =============================================================================
WS_ACT_PRE_DROP,FUNCTION,26,
WS_ACT_PRE_DROP,FUNCTION,27, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,28, -- Constants
WS_ACT_PRE_DROP,FUNCTION,29, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,30, v_ws_pro_version constant varchar(15) := '(8.4.1.0)';
WS_ACT_PRE_DROP,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_PRE_DROP,FUNCTION,32, v_ws_obj_directive constant number := 2;
WS_ACT_PRE_DROP,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_PRE_DROP,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_PRE_DROP,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_PRE_DROP,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_PRE_DROP,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_PRE_DROP,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_PRE_DROP,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_PRE_DROP,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_PRE_DROP,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_PRE_DROP,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_PRE_DROP,FUNCTION,43,
WS_ACT_PRE_DROP,FUNCTION,44, v_ws_obj_source_mapping constant number := 69;
WS_ACT_PRE_DROP,FUNCTION,45,
WS_ACT_PRE_DROP,FUNCTION,46, v_ws_act_drop constant number := 0;
WS_ACT_PRE_DROP,FUNCTION,47, v_ws_act_create constant number := 1;
WS_ACT_PRE_DROP,FUNCTION,48, v_ws_act_compile constant number := 2;
WS_ACT_PRE_DROP,FUNCTION,49, v_ws_act_drop_all constant number := 3;
WS_ACT_PRE_DROP,FUNCTION,50, v_ws_act_pre_drop constant number := 4;
WS_ACT_PRE_DROP,FUNCTION,51, v_ws_act_load constant number := 5;
WS_ACT_PRE_DROP,FUNCTION,52, v_ws_act_update constant number := 6;
WS_ACT_PRE_DROP,FUNCTION,53, v_ws_act_execute constant number := 7;
WS_ACT_PRE_DROP,FUNCTION,54, v_ws_act_process constant number := 8;
WS_ACT_PRE_DROP,FUNCTION,55, v_ws_act_build constant number := 9;
WS_ACT_PRE_DROP,FUNCTION,56, v_ws_act_build_all constant number := 10;
WS_ACT_PRE_DROP,FUNCTION,57, v_ws_act_analyze constant number := 11;
WS_ACT_PRE_DROP,FUNCTION,58, v_ws_act_quick_analyze constant number := 12;
WS_ACT_PRE_DROP,FUNCTION,59, v_ws_act_statistics constant number := 13;
WS_ACT_PRE_DROP,FUNCTION,60, v_ws_act_quick_statistics constant number := 14;
WS_ACT_PRE_DROP,FUNCTION,61,
WS_ACT_PRE_DROP,FUNCTION,62, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,63, -- Variables
WS_ACT_PRE_DROP,FUNCTION,64, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,65, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_PRE_DROP,FUNCTION,66, v_step integer := 0; -- return code
WS_ACT_PRE_DROP,FUNCTION,67, v_result integer := 0; -- return code
WS_ACT_PRE_DROP,FUNCTION,68, v_stmt varchar2(1024);
WS_ACT_PRE_DROP,FUNCTION,69, v_count integer := 0;
WS_ACT_PRE_DROP,FUNCTION,70, v_part_count integer := 0;
WS_ACT_PRE_DROP,FUNCTION,71, v_schema_flag integer := 0;
WS_ACT_PRE_DROP,FUNCTION,72, v_satellite_ind varchar2(1);
WS_ACT_PRE_DROP,FUNCTION,73, v_dss_schema varchar2(64);
WS_ACT_PRE_DROP,FUNCTION,74, v_index_done integer; -- used to flag successful drop
WS_ACT_PRE_DROP,FUNCTION,75, v_msg_result integer := 0; -- return code
WS_ACT_PRE_DROP,FUNCTION,76, v_table_schema varchar2(64);
WS_ACT_PRE_DROP,FUNCTION,77, v_table_name varchar2(64);
WS_ACT_PRE_DROP,FUNCTION,78, v_table_with_schema varchar2(150);
WS_ACT_PRE_DROP,FUNCTION,79, v_index_name varchar2(64);
WS_ACT_PRE_DROP,FUNCTION,80, v_index_with_schema varchar2(150);
WS_ACT_PRE_DROP,FUNCTION,81,
WS_ACT_PRE_DROP,FUNCTION,82, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,83, -- Cursor for all pre_drop indexes
WS_ACT_PRE_DROP,FUNCTION,84, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,85, Cursor c_Index is
WS_ACT_PRE_DROP,FUNCTION,86, Select * from ws_index_header
WS_ACT_PRE_DROP,FUNCTION,87, Where ih_obj_key = p_obj_key
WS_ACT_PRE_DROP,FUNCTION,88, And ih_pre_drop_flag = 'Y';
WS_ACT_PRE_DROP,FUNCTION,89,
WS_ACT_PRE_DROP,FUNCTION,90,BEGIN
WS_ACT_PRE_DROP,FUNCTION,91,
WS_ACT_PRE_DROP,FUNCTION,92, v_step := 100;
WS_ACT_PRE_DROP,FUNCTION,93, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,94, -- See if we have the flag set for including schema
WS_ACT_PRE_DROP,FUNCTION,95, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,96,
WS_ACT_PRE_DROP,FUNCTION,97, v_satellite_ind := '';
WS_ACT_PRE_DROP,FUNCTION,98, v_table_schema := '';
WS_ACT_PRE_DROP,FUNCTION,99, v_index_name := '';
WS_ACT_PRE_DROP,FUNCTION,100,
WS_ACT_PRE_DROP,FUNCTION,101, -- needs to look up the schema from ws_dbc_target
WS_ACT_PRE_DROP,FUNCTION,102, BEGIN
WS_ACT_PRE_DROP,FUNCTION,103, v_step := 120;
WS_ACT_PRE_DROP,FUNCTION,104,
WS_ACT_PRE_DROP,FUNCTION,105, IF p_obj_type = v_ws_obj_source_mapping THEN
WS_ACT_PRE_DROP,FUNCTION,106, SELECT NVL(dt_schema, '')
WS_ACT_PRE_DROP,FUNCTION,107, ,oo_name
WS_ACT_PRE_DROP,FUNCTION,108, INTO v_table_schema
WS_ACT_PRE_DROP,FUNCTION,109, ,v_table_name
WS_ACT_PRE_DROP,FUNCTION,110, FROM ws_obj_object
WS_ACT_PRE_DROP,FUNCTION,111, LEFT JOIN ws_dbc_target
WS_ACT_PRE_DROP,FUNCTION,112, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_PRE_DROP,FUNCTION,113, LEFT JOIN ws_source_mapping_tab
WS_ACT_PRE_DROP,FUNCTION,114, ON ws_source_mapping_tab.smt_parent_obj_key = ws_obj_object.oo_obj_key
WS_ACT_PRE_DROP,FUNCTION,115, WHERE ws_source_mapping_tab.smt_source_mapping_key = p_obj_key
WS_ACT_PRE_DROP,FUNCTION,116, ;
WS_ACT_PRE_DROP,FUNCTION,117, ELSE
WS_ACT_PRE_DROP,FUNCTION,118, SELECT NVL(dt_schema, '')
WS_ACT_PRE_DROP,FUNCTION,119, ,oo_name
WS_ACT_PRE_DROP,FUNCTION,120, INTO v_table_schema
WS_ACT_PRE_DROP,FUNCTION,121, ,v_table_name
WS_ACT_PRE_DROP,FUNCTION,122, FROM ws_obj_object
WS_ACT_PRE_DROP,FUNCTION,123, LEFT JOIN ws_dbc_target
WS_ACT_PRE_DROP,FUNCTION,124, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_PRE_DROP,FUNCTION,125, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_PRE_DROP,FUNCTION,126, ;
WS_ACT_PRE_DROP,FUNCTION,127, END IF;
WS_ACT_PRE_DROP,FUNCTION,128,
WS_ACT_PRE_DROP,FUNCTION,129, v_table_schema := TRIM(v_table_schema);
WS_ACT_PRE_DROP,FUNCTION,130,
WS_ACT_PRE_DROP,FUNCTION,131, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_PRE_DROP,FUNCTION,132, v_MsgText := 'Object could not be found key:' || p_obj_key;
WS_ACT_PRE_DROP,FUNCTION,133, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_PRE_DROP,FUNCTION,134, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_PRE_DROP,FUNCTION,135, p_return_msg := 'Object could not be found';
WS_ACT_PRE_DROP,FUNCTION,136, p_status_code := -2;
WS_ACT_PRE_DROP,FUNCTION,137, RETURN -2;
WS_ACT_PRE_DROP,FUNCTION,138, END;
WS_ACT_PRE_DROP,FUNCTION,139,
WS_ACT_PRE_DROP,FUNCTION,140, v_step := 130;
WS_ACT_PRE_DROP,FUNCTION,141, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_PRE_DROP,FUNCTION,142, -- meta_satellite_ind = A
WS_ACT_PRE_DROP,FUNCTION,143, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_PRE_DROP,FUNCTION,144,
WS_ACT_PRE_DROP,FUNCTION,145, SELECT meta_satellite_ind,
WS_ACT_PRE_DROP,FUNCTION,146, TRIM(meta_dss_schema)
WS_ACT_PRE_DROP,FUNCTION,147, INTO v_satellite_ind,
WS_ACT_PRE_DROP,FUNCTION,148, v_dss_schema
WS_ACT_PRE_DROP,FUNCTION,149, FROM ws_meta
WS_ACT_PRE_DROP,FUNCTION,150, WHERE rownum = 1;
WS_ACT_PRE_DROP,FUNCTION,151,
WS_ACT_PRE_DROP,FUNCTION,152, IF v_satellite_ind = 'A' THEN
WS_ACT_PRE_DROP,FUNCTION,153, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_PRE_DROP,FUNCTION,154, v_schema_flag := 1;
WS_ACT_PRE_DROP,FUNCTION,155, v_table_schema := v_dss_schema;
WS_ACT_PRE_DROP,FUNCTION,156, END IF;
WS_ACT_PRE_DROP,FUNCTION,157, END IF;
WS_ACT_PRE_DROP,FUNCTION,158,
WS_ACT_PRE_DROP,FUNCTION,159, v_step := 140;
WS_ACT_PRE_DROP,FUNCTION,160, -- If still not set then defaults to the current user
WS_ACT_PRE_DROP,FUNCTION,161, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_PRE_DROP,FUNCTION,162, SELECT user
WS_ACT_PRE_DROP,FUNCTION,163, INTO v_table_schema
WS_ACT_PRE_DROP,FUNCTION,164, FROM dual;
WS_ACT_PRE_DROP,FUNCTION,165, END IF;
WS_ACT_PRE_DROP,FUNCTION,166,
WS_ACT_PRE_DROP,FUNCTION,167, End If;
WS_ACT_PRE_DROP,FUNCTION,168,
WS_ACT_PRE_DROP,FUNCTION,169, v_step := 150;
WS_ACT_PRE_DROP,FUNCTION,170,
WS_ACT_PRE_DROP,FUNCTION,171, v_table_schema := TRIM(v_table_schema);
WS_ACT_PRE_DROP,FUNCTION,172,
WS_ACT_PRE_DROP,FUNCTION,173, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_PRE_DROP,FUNCTION,174, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_PRE_DROP,FUNCTION,175, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_PRE_DROP,FUNCTION,176, END IF;
WS_ACT_PRE_DROP,FUNCTION,177,
WS_ACT_PRE_DROP,FUNCTION,178, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_PRE_DROP,FUNCTION,179,
WS_ACT_PRE_DROP,FUNCTION,180, v_step := 200;
WS_ACT_PRE_DROP,FUNCTION,181, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,182, -- Loop through all the indexes to drop
WS_ACT_PRE_DROP,FUNCTION,183, -- More than likely there will not be any
WS_ACT_PRE_DROP,FUNCTION,184, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,185, p_status_code := 1;
WS_ACT_PRE_DROP,FUNCTION,186, p_return_msg := '';
WS_ACT_PRE_DROP,FUNCTION,187, FOR v_IndRec in c_Index LOOP
WS_ACT_PRE_DROP,FUNCTION,188, v_step := 300;
WS_ACT_PRE_DROP,FUNCTION,189, v_index_name := v_IndRec.ih_index_name;
WS_ACT_PRE_DROP,FUNCTION,190,
WS_ACT_PRE_DROP,FUNCTION,191, v_index_with_schema := TRIM(v_table_schema);
WS_ACT_PRE_DROP,FUNCTION,192, IF TRIM(v_index_with_schema ) IS NOT NULL THEN
WS_ACT_PRE_DROP,FUNCTION,193, v_index_with_schema := v_index_with_schema ||'.';
WS_ACT_PRE_DROP,FUNCTION,194, END IF;
WS_ACT_PRE_DROP,FUNCTION,195,
WS_ACT_PRE_DROP,FUNCTION,196, v_index_with_schema := v_index_with_schema || v_index_name;
WS_ACT_PRE_DROP,FUNCTION,197,
WS_ACT_PRE_DROP,FUNCTION,198, Select count(1) into v_part_count
WS_ACT_PRE_DROP,FUNCTION,199, from all_tab_partitions
WS_ACT_PRE_DROP,FUNCTION,200, Where table_owner = upper(v_table_name)
WS_ACT_PRE_DROP,FUNCTION,201, and table_name = upper(v_table_schema);
WS_ACT_PRE_DROP,FUNCTION,202,
WS_ACT_PRE_DROP,FUNCTION,203, v_step := 400;
WS_ACT_PRE_DROP,FUNCTION,204, If v_IndRec.ih_unique = 'Y' And v_IndRec.ih_key_type = 'A'
WS_ACT_PRE_DROP,FUNCTION,205, And v_part_count = 0 Then
WS_ACT_PRE_DROP,FUNCTION,206, v_stmt := 'alter table '|| v_table_with_schema ||
WS_ACT_PRE_DROP,FUNCTION,207, ' drop constraint '||v_index_name;
WS_ACT_PRE_DROP,FUNCTION,208, Else
WS_ACT_PRE_DROP,FUNCTION,209, v_stmt := 'drop index '|| v_index_with_schema;
WS_ACT_PRE_DROP,FUNCTION,210, End If;
WS_ACT_PRE_DROP,FUNCTION,211,
WS_ACT_PRE_DROP,FUNCTION,212, v_index_done := 1;
WS_ACT_PRE_DROP,FUNCTION,213, -- Execute the drop
WS_ACT_PRE_DROP,FUNCTION,214, v_step := 500;
WS_ACT_PRE_DROP,FUNCTION,215, BEGIN
WS_ACT_PRE_DROP,FUNCTION,216, Execute Immediate v_stmt;
WS_ACT_PRE_DROP,FUNCTION,217, EXCEPTION
WS_ACT_PRE_DROP,FUNCTION,218, WHEN OTHERS THEN
WS_ACT_PRE_DROP,FUNCTION,219, If SQLCODE = -2443 Then
WS_ACT_PRE_DROP,FUNCTION,220, v_stmt := 'drop index ' || v_index_with_schema;
WS_ACT_PRE_DROP,FUNCTION,221, BEGIN
WS_ACT_PRE_DROP,FUNCTION,222, Execute Immediate v_stmt;
WS_ACT_PRE_DROP,FUNCTION,223, EXCEPTION
WS_ACT_PRE_DROP,FUNCTION,224, WHEN OTHERS THEN
WS_ACT_PRE_DROP,FUNCTION,225, v_index_done := 0;
WS_ACT_PRE_DROP,FUNCTION,226, v_MsgText := 'Index '||v_IndRec.ih_index_name||' does not exist';
WS_ACT_PRE_DROP,FUNCTION,227, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_PRE_DROP,FUNCTION,228, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_PRE_DROP,FUNCTION,229, END;
WS_ACT_PRE_DROP,FUNCTION,230, ElsIf SQLCODE = -1418 Then
WS_ACT_PRE_DROP,FUNCTION,231, v_index_done := 0;
WS_ACT_PRE_DROP,FUNCTION,232, p_return_msg := ' Index '||v_index_with_schema||' does not exist';
WS_ACT_PRE_DROP,FUNCTION,233, p_status_code := -1;
WS_ACT_PRE_DROP,FUNCTION,234, v_result := -1;
WS_ACT_PRE_DROP,FUNCTION,235, Else
WS_ACT_PRE_DROP,FUNCTION,236, v_index_done := 0;
WS_ACT_PRE_DROP,FUNCTION,237, v_MsgText := 'Unhandled Exception in ws_act_pre_drop '|| v_ws_pro_version ||
WS_ACT_PRE_DROP,FUNCTION,238, ' Step ' ||v_step;
WS_ACT_PRE_DROP,FUNCTION,239, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_PRE_DROP,FUNCTION,240, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_PRE_DROP,FUNCTION,241, p_return_msg := 'Unhandled Exception in ws_act_pre_drop '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_PRE_DROP,FUNCTION,242, p_status_code := -3;
WS_ACT_PRE_DROP,FUNCTION,243, v_result := -3;
WS_ACT_PRE_DROP,FUNCTION,244, End If;
WS_ACT_PRE_DROP,FUNCTION,245, END;
WS_ACT_PRE_DROP,FUNCTION,246,
WS_ACT_PRE_DROP,FUNCTION,247, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,248, -- Put detail message
WS_ACT_PRE_DROP,FUNCTION,249, --=====================================================
WS_ACT_PRE_DROP,FUNCTION,250, v_step := 600;
WS_ACT_PRE_DROP,FUNCTION,251, IF v_index_done = 1 THEN
WS_ACT_PRE_DROP,FUNCTION,252,
WS_ACT_PRE_DROP,FUNCTION,253, v_step := 700;
WS_ACT_PRE_DROP,FUNCTION,254,
WS_ACT_PRE_DROP,FUNCTION,255, v_MsgText := 'Index ' || v_index_with_schema || ' dropped';
WS_ACT_PRE_DROP,FUNCTION,256,
WS_ACT_PRE_DROP,FUNCTION,257, v_msg_result := WsWrkError(
WS_ACT_PRE_DROP,FUNCTION,258, 'I'
WS_ACT_PRE_DROP,FUNCTION,259, , p_job_name
WS_ACT_PRE_DROP,FUNCTION,260, , p_task_name
WS_ACT_PRE_DROP,FUNCTION,261, , p_sequence
WS_ACT_PRE_DROP,FUNCTION,262, , v_MsgText
WS_ACT_PRE_DROP,FUNCTION,263, , NULL
WS_ACT_PRE_DROP,FUNCTION,264, , NULL
WS_ACT_PRE_DROP,FUNCTION,265, , p_task_id
WS_ACT_PRE_DROP,FUNCTION,266, , p_job_id
WS_ACT_PRE_DROP,FUNCTION,267, , NULL);
WS_ACT_PRE_DROP,FUNCTION,268,
WS_ACT_PRE_DROP,FUNCTION,269, v_count := v_count + 1;
WS_ACT_PRE_DROP,FUNCTION,270, END IF;
WS_ACT_PRE_DROP,FUNCTION,271,
WS_ACT_PRE_DROP,FUNCTION,272, v_step := 800;
WS_ACT_PRE_DROP,FUNCTION,273, END LOOP;
WS_ACT_PRE_DROP,FUNCTION,274,
WS_ACT_PRE_DROP,FUNCTION,275, v_step := 900;
WS_ACT_PRE_DROP,FUNCTION,276, -- tell them how many indexes we dropped
WS_ACT_PRE_DROP,FUNCTION,277, If v_count = 0 Then
WS_ACT_PRE_DROP,FUNCTION,278, p_return_msg := 'No indexes to drop'||p_return_msg;
WS_ACT_PRE_DROP,FUNCTION,279, ElsIf v_count = 1 Then
WS_ACT_PRE_DROP,FUNCTION,280, p_return_msg := v_count||' index dropped'||p_return_msg;
WS_ACT_PRE_DROP,FUNCTION,281, Else
WS_ACT_PRE_DROP,FUNCTION,282, p_return_msg := v_count||' indexes dropped'||p_return_msg;
WS_ACT_PRE_DROP,FUNCTION,283, End If;
WS_ACT_PRE_DROP,FUNCTION,284,
WS_ACT_PRE_DROP,FUNCTION,285, COMMIT;
WS_ACT_PRE_DROP,FUNCTION,286, RETURN v_result;
WS_ACT_PRE_DROP,FUNCTION,287,
WS_ACT_PRE_DROP,FUNCTION,288,EXCEPTION
WS_ACT_PRE_DROP,FUNCTION,289, WHEN OTHERS THEN
WS_ACT_PRE_DROP,FUNCTION,290, v_MsgText := 'Unhandled Exception in ws_act_pre_drop '|| v_ws_pro_version ||
WS_ACT_PRE_DROP,FUNCTION,291, ' Step ' ||v_step;
WS_ACT_PRE_DROP,FUNCTION,292, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_PRE_DROP,FUNCTION,293, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_PRE_DROP,FUNCTION,294, p_return_msg := 'Unhandled Exception in ws_act_pre_drop '|| v_ws_pro_version || ' step ' ||v_step;
WS_ACT_PRE_DROP,FUNCTION,295, p_status_code := -3;
WS_ACT_PRE_DROP,FUNCTION,296, RETURN -3;
WS_ACT_PRE_DROP,FUNCTION,297,
WS_ACT_PRE_DROP,FUNCTION,298,END ws_act_pre_drop;
WS_ACT_PRE_DROP,FUNCTION,299,
WS_ACT_TRUNCATE,FUNCTION,1,function ws_act_truncate
WS_ACT_TRUNCATE,FUNCTION,2, (
WS_ACT_TRUNCATE,FUNCTION,3, p_sequence IN number,
WS_ACT_TRUNCATE,FUNCTION,4, p_obj_type IN number,
WS_ACT_TRUNCATE,FUNCTION,5, p_action IN number,
WS_ACT_TRUNCATE,FUNCTION,6, p_obj_key IN number,
WS_ACT_TRUNCATE,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_TRUNCATE,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_TRUNCATE,FUNCTION,9, p_job_id IN number,
WS_ACT_TRUNCATE,FUNCTION,10, p_task_id IN number,
WS_ACT_TRUNCATE,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_TRUNCATE,FUNCTION,12, p_status_code OUT number
WS_ACT_TRUNCATE,FUNCTION,13, )
WS_ACT_TRUNCATE,FUNCTION,14, Return integer
WS_ACT_TRUNCATE,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_TRUNCATE,FUNCTION,16, IS
WS_ACT_TRUNCATE,FUNCTION,17,
WS_ACT_TRUNCATE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_TRUNCATE,FUNCTION,19,
WS_ACT_TRUNCATE,FUNCTION,20, -- =============================================================================
WS_ACT_TRUNCATE,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_TRUNCATE,FUNCTION,22, -- Script Name : ws_act_truncate
WS_ACT_TRUNCATE,FUNCTION,23, -- Description : Truncate a table
WS_ACT_TRUNCATE,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_TRUNCATE,FUNCTION,25, -- =============================================================================
WS_ACT_TRUNCATE,FUNCTION,26,
WS_ACT_TRUNCATE,FUNCTION,27, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,28, -- Constants
WS_ACT_TRUNCATE,FUNCTION,29, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,30, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_TRUNCATE,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_ACT_TRUNCATE,FUNCTION,32, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_TRUNCATE,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_ACT_TRUNCATE,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_ACT_TRUNCATE,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_ACT_TRUNCATE,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_ACT_TRUNCATE,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_ACT_TRUNCATE,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_ACT_TRUNCATE,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_ACT_TRUNCATE,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_ACT_TRUNCATE,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_ACT_TRUNCATE,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_ACT_TRUNCATE,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_ACT_TRUNCATE,FUNCTION,44, v_ws_obj_cube constant number := 15;
WS_ACT_TRUNCATE,FUNCTION,45, v_ws_obj_cube_virtual constant number := 16;
WS_ACT_TRUNCATE,FUNCTION,46, v_ws_obj_report constant number := 17;
WS_ACT_TRUNCATE,FUNCTION,47, v_ws_obj_view constant number := 18;
WS_ACT_TRUNCATE,FUNCTION,48, v_ws_obj_file constant number := 19;
WS_ACT_TRUNCATE,FUNCTION,49, v_ws_obj_join constant number := 20;
WS_ACT_TRUNCATE,FUNCTION,50, v_ws_obj_retro constant number := 21;
WS_ACT_TRUNCATE,FUNCTION,51, v_ws_obj_retro_copy constant number := 22;
WS_ACT_TRUNCATE,FUNCTION,52, v_ws_obj_olap_cube constant number := 23;
WS_ACT_TRUNCATE,FUNCTION,53, v_ws_obj_olap_dim constant number := 24;
WS_ACT_TRUNCATE,FUNCTION,54, v_ws_obj_olap_role constant number := 25;
WS_ACT_TRUNCATE,FUNCTION,55, v_ws_obj_ods constant number := 26;
WS_ACT_TRUNCATE,FUNCTION,56, v_ws_obj_normal constant number := 27;
WS_ACT_TRUNCATE,FUNCTION,57, v_ws_obj_hub constant number := 28;
WS_ACT_TRUNCATE,FUNCTION,58, v_ws_obj_satellite constant number := 29;
WS_ACT_TRUNCATE,FUNCTION,59, v_ws_obj_link constant number := 30;
WS_ACT_TRUNCATE,FUNCTION,60, v_ws_obj_custom1 constant number := 31;
WS_ACT_TRUNCATE,FUNCTION,61, v_ws_obj_custom2 constant number := 32;
WS_ACT_TRUNCATE,FUNCTION,62, v_ws_obj_max constant number := 32;
WS_ACT_TRUNCATE,FUNCTION,63,
WS_ACT_TRUNCATE,FUNCTION,64, v_ws_obj_job constant number := 50;
WS_ACT_TRUNCATE,FUNCTION,65,
WS_ACT_TRUNCATE,FUNCTION,66, v_ws_act_drop constant number := 1;
WS_ACT_TRUNCATE,FUNCTION,67, v_ws_act_create constant number := 2;
WS_ACT_TRUNCATE,FUNCTION,68, v_ws_act_drop_all constant number := 3;
WS_ACT_TRUNCATE,FUNCTION,69, v_ws_act_pre_drop constant number := 4;
WS_ACT_TRUNCATE,FUNCTION,70, v_ws_act_load constant number := 5;
WS_ACT_TRUNCATE,FUNCTION,71, v_ws_act_update constant number := 6;
WS_ACT_TRUNCATE,FUNCTION,72, v_ws_act_execute constant number := 7;
WS_ACT_TRUNCATE,FUNCTION,73, v_ws_act_process constant number := 8;
WS_ACT_TRUNCATE,FUNCTION,74, v_ws_act_build constant number := 9;
WS_ACT_TRUNCATE,FUNCTION,75, v_ws_act_build_all constant number := 10;
WS_ACT_TRUNCATE,FUNCTION,76, v_ws_act_analyze constant number := 11;
WS_ACT_TRUNCATE,FUNCTION,77, v_ws_act_quick_analyze constant number := 12;
WS_ACT_TRUNCATE,FUNCTION,78, v_ws_act_statistics constant number := 13;
WS_ACT_TRUNCATE,FUNCTION,79, v_ws_act_quick_statistics constant number := 14;
WS_ACT_TRUNCATE,FUNCTION,80, v_ws_act_initial constant number := 15;
WS_ACT_TRUNCATE,FUNCTION,81, v_ws_act_cube_dim constant number := 16;
WS_ACT_TRUNCATE,FUNCTION,82, v_ws_act_db_dim constant number := 17;
WS_ACT_TRUNCATE,FUNCTION,83, v_ws_act_custom constant number := 18;
WS_ACT_TRUNCATE,FUNCTION,84, v_ws_act_truncate constant number := 19;
WS_ACT_TRUNCATE,FUNCTION,85,
WS_ACT_TRUNCATE,FUNCTION,86, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,87, -- Variables
WS_ACT_TRUNCATE,FUNCTION,88, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,89, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_TRUNCATE,FUNCTION,90, v_step integer := 0; -- return code
WS_ACT_TRUNCATE,FUNCTION,91, v_result integer := 0; -- return code
WS_ACT_TRUNCATE,FUNCTION,92, v_cursor number;
WS_ACT_TRUNCATE,FUNCTION,93, v_truncate varchar2(4000);
WS_ACT_TRUNCATE,FUNCTION,94, v_as varchar2(2000);
WS_ACT_TRUNCATE,FUNCTION,95, v_row integer := 0;
WS_ACT_TRUNCATE,FUNCTION,96, v_user_view integer := 0;
WS_ACT_TRUNCATE,FUNCTION,97, v_schema_flag integer := 0;
WS_ACT_TRUNCATE,FUNCTION,98, v_satellite_ind varchar2(1);
WS_ACT_TRUNCATE,FUNCTION,99, v_dss_schema varchar2(64);
WS_ACT_TRUNCATE,FUNCTION,100, v_table_schema varchar2(64);
WS_ACT_TRUNCATE,FUNCTION,101, v_table_name varchar2(64);
WS_ACT_TRUNCATE,FUNCTION,102, v_table_with_schema varchar2(150);
WS_ACT_TRUNCATE,FUNCTION,103,
WS_ACT_TRUNCATE,FUNCTION,104,BEGIN
WS_ACT_TRUNCATE,FUNCTION,105, v_step := 10;
WS_ACT_TRUNCATE,FUNCTION,106,
WS_ACT_TRUNCATE,FUNCTION,107, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,108, -- Handle all the table types
WS_ACT_TRUNCATE,FUNCTION,109, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,110, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,111, -- L O A D
WS_ACT_TRUNCATE,FUNCTION,112, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,113, If p_obj_type = v_ws_obj_load
WS_ACT_TRUNCATE,FUNCTION,114, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,115, -- D I M E N S I O N
WS_ACT_TRUNCATE,FUNCTION,116, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,117, OR p_obj_type = v_ws_obj_dim
WS_ACT_TRUNCATE,FUNCTION,118, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,119, -- F A C T
WS_ACT_TRUNCATE,FUNCTION,120, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,121, OR p_obj_type = v_ws_obj_fact
WS_ACT_TRUNCATE,FUNCTION,122, OR p_obj_type = v_ws_obj_fact_kpi
WS_ACT_TRUNCATE,FUNCTION,123, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,124, -- S T A G E
WS_ACT_TRUNCATE,FUNCTION,125, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,126, OR p_obj_type = v_ws_obj_stage
WS_ACT_TRUNCATE,FUNCTION,127, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,128, -- A G G R E G A T E
WS_ACT_TRUNCATE,FUNCTION,129, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,130, OR p_obj_type = v_ws_obj_agg
WS_ACT_TRUNCATE,FUNCTION,131, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,132, -- R E T R O C O P Y
WS_ACT_TRUNCATE,FUNCTION,133, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,134, OR p_obj_type = v_ws_obj_retro_copy
WS_ACT_TRUNCATE,FUNCTION,135, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,136, -- O D S
WS_ACT_TRUNCATE,FUNCTION,137, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,138, OR p_obj_type = v_ws_obj_ods
WS_ACT_TRUNCATE,FUNCTION,139, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,140, -- N O R M A L
WS_ACT_TRUNCATE,FUNCTION,141, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,142, OR p_obj_type = v_ws_obj_normal
WS_ACT_TRUNCATE,FUNCTION,143, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,144, -- H U B
WS_ACT_TRUNCATE,FUNCTION,145, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,146, OR p_obj_type = v_ws_obj_hub
WS_ACT_TRUNCATE,FUNCTION,147, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,148, --S A T E L L I T E
WS_ACT_TRUNCATE,FUNCTION,149, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,150, OR p_obj_type = v_ws_obj_satellite
WS_ACT_TRUNCATE,FUNCTION,151, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,152, -- L I N K
WS_ACT_TRUNCATE,FUNCTION,153, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,154, OR p_obj_type = v_ws_obj_link
WS_ACT_TRUNCATE,FUNCTION,155, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,156, -- C U S T O M 1
WS_ACT_TRUNCATE,FUNCTION,157, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,158, OR p_obj_type = v_ws_obj_custom1
WS_ACT_TRUNCATE,FUNCTION,159, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,160, -- C U S T O M 2
WS_ACT_TRUNCATE,FUNCTION,161, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,162, OR p_obj_type = v_ws_obj_custom2 Then
WS_ACT_TRUNCATE,FUNCTION,163, v_step := 20;
WS_ACT_TRUNCATE,FUNCTION,164, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,165, -- U N S U P P O R T E D
WS_ACT_TRUNCATE,FUNCTION,166, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,167, Else
WS_ACT_TRUNCATE,FUNCTION,168, v_MsgText := 'Unsupported object type '||p_obj_type;
WS_ACT_TRUNCATE,FUNCTION,169, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_TRUNCATE,FUNCTION,170, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_TRUNCATE,FUNCTION,171, p_return_msg := 'Unsupported object type '||p_obj_type||' in Ws_Act_Truncate';
WS_ACT_TRUNCATE,FUNCTION,172, p_status_code := -2;
WS_ACT_TRUNCATE,FUNCTION,173, RETURN -2;
WS_ACT_TRUNCATE,FUNCTION,174, End If;
WS_ACT_TRUNCATE,FUNCTION,175,
WS_ACT_TRUNCATE,FUNCTION,176, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,177, -- See if we have the flag set for including schema
WS_ACT_TRUNCATE,FUNCTION,178, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,179,
WS_ACT_TRUNCATE,FUNCTION,180, v_satellite_ind := '';
WS_ACT_TRUNCATE,FUNCTION,181, v_table_schema := '';
WS_ACT_TRUNCATE,FUNCTION,182,
WS_ACT_TRUNCATE,FUNCTION,183, -- needs to look up the schema from ws_dbc_target
WS_ACT_TRUNCATE,FUNCTION,184, BEGIN
WS_ACT_TRUNCATE,FUNCTION,185, SELECT NVL(dt_schema, '')
WS_ACT_TRUNCATE,FUNCTION,186, ,oo_name
WS_ACT_TRUNCATE,FUNCTION,187, INTO v_table_schema
WS_ACT_TRUNCATE,FUNCTION,188, ,v_table_name
WS_ACT_TRUNCATE,FUNCTION,189, FROM ws_obj_object
WS_ACT_TRUNCATE,FUNCTION,190, LEFT JOIN ws_dbc_target
WS_ACT_TRUNCATE,FUNCTION,191, ON ws_dbc_target.dt_target_key = ws_obj_object.oo_target_key
WS_ACT_TRUNCATE,FUNCTION,192, WHERE ws_obj_object.oo_obj_key = p_obj_key
WS_ACT_TRUNCATE,FUNCTION,193, ;
WS_ACT_TRUNCATE,FUNCTION,194, v_table_schema := TRIM(v_table_schema);
WS_ACT_TRUNCATE,FUNCTION,195,
WS_ACT_TRUNCATE,FUNCTION,196, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_ACT_TRUNCATE,FUNCTION,197, v_MsgText := 'Object could not be found- key:' || p_obj_key;
WS_ACT_TRUNCATE,FUNCTION,198, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_TRUNCATE,FUNCTION,199, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_TRUNCATE,FUNCTION,200, p_return_msg := 'Object could not be found';
WS_ACT_TRUNCATE,FUNCTION,201, p_status_code := -2;
WS_ACT_TRUNCATE,FUNCTION,202, RETURN -2;
WS_ACT_TRUNCATE,FUNCTION,203, END;
WS_ACT_TRUNCATE,FUNCTION,204,
WS_ACT_TRUNCATE,FUNCTION,205, v_step := 110;
WS_ACT_TRUNCATE,FUNCTION,206, -- if its not present.. then look to see if use the meta_dss_schema from ws_meta where
WS_ACT_TRUNCATE,FUNCTION,207, -- meta_satellite_ind = A
WS_ACT_TRUNCATE,FUNCTION,208, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_TRUNCATE,FUNCTION,209,
WS_ACT_TRUNCATE,FUNCTION,210, SELECT meta_satellite_ind,
WS_ACT_TRUNCATE,FUNCTION,211, TRIM(meta_dss_schema)
WS_ACT_TRUNCATE,FUNCTION,212, INTO v_satellite_ind,
WS_ACT_TRUNCATE,FUNCTION,213, v_dss_schema
WS_ACT_TRUNCATE,FUNCTION,214, FROM ws_meta
WS_ACT_TRUNCATE,FUNCTION,215, WHERE rownum = 1;
WS_ACT_TRUNCATE,FUNCTION,216,
WS_ACT_TRUNCATE,FUNCTION,217, IF v_satellite_ind = 'A' THEN
WS_ACT_TRUNCATE,FUNCTION,218, IF TRIM(v_dss_schema) IS NOT NULL THEN
WS_ACT_TRUNCATE,FUNCTION,219, v_schema_flag := 1;
WS_ACT_TRUNCATE,FUNCTION,220, v_table_schema := v_dss_schema;
WS_ACT_TRUNCATE,FUNCTION,221, END IF;
WS_ACT_TRUNCATE,FUNCTION,222, END IF;
WS_ACT_TRUNCATE,FUNCTION,223,
WS_ACT_TRUNCATE,FUNCTION,224, v_step := 120;
WS_ACT_TRUNCATE,FUNCTION,225, -- If still not set then defaults to the current user
WS_ACT_TRUNCATE,FUNCTION,226, IF TRIM(v_table_schema) IS NULL THEN
WS_ACT_TRUNCATE,FUNCTION,227, SELECT user
WS_ACT_TRUNCATE,FUNCTION,228, INTO v_table_schema
WS_ACT_TRUNCATE,FUNCTION,229, FROM dual;
WS_ACT_TRUNCATE,FUNCTION,230, END IF;
WS_ACT_TRUNCATE,FUNCTION,231,
WS_ACT_TRUNCATE,FUNCTION,232, End If;
WS_ACT_TRUNCATE,FUNCTION,233,
WS_ACT_TRUNCATE,FUNCTION,234, v_step := 130;
WS_ACT_TRUNCATE,FUNCTION,235,
WS_ACT_TRUNCATE,FUNCTION,236, v_table_schema := TRIM(v_table_schema);
WS_ACT_TRUNCATE,FUNCTION,237, v_table_with_schema := TRIM(v_table_schema);
WS_ACT_TRUNCATE,FUNCTION,238, IF TRIM(v_table_with_schema) IS NOT NULL THEN
WS_ACT_TRUNCATE,FUNCTION,239, v_table_with_schema := v_table_with_schema ||'.';
WS_ACT_TRUNCATE,FUNCTION,240, END IF;
WS_ACT_TRUNCATE,FUNCTION,241,
WS_ACT_TRUNCATE,FUNCTION,242, v_table_with_schema := v_table_with_schema || v_table_name;
WS_ACT_TRUNCATE,FUNCTION,243, v_step := 140;
WS_ACT_TRUNCATE,FUNCTION,244,
WS_ACT_TRUNCATE,FUNCTION,245,
WS_ACT_TRUNCATE,FUNCTION,246, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,247, -- Build the truncate string
WS_ACT_TRUNCATE,FUNCTION,248, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,249, v_truncate := 'Truncate table '||v_table_with_schema;
WS_ACT_TRUNCATE,FUNCTION,250,
WS_ACT_TRUNCATE,FUNCTION,251, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,252, -- Execute the truncate statement
WS_ACT_TRUNCATE,FUNCTION,253, --=====================================================
WS_ACT_TRUNCATE,FUNCTION,254, BEGIN
WS_ACT_TRUNCATE,FUNCTION,255, v_step := 150;
WS_ACT_TRUNCATE,FUNCTION,256, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_TRUNCATE,FUNCTION,257, v_step := 160;
WS_ACT_TRUNCATE,FUNCTION,258, DBMS_SQL.PARSE(v_cursor, v_truncate, 1);
WS_ACT_TRUNCATE,FUNCTION,259, v_step := 170;
WS_ACT_TRUNCATE,FUNCTION,260, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_TRUNCATE,FUNCTION,261, v_step := 180;
WS_ACT_TRUNCATE,FUNCTION,262, COMMIT;
WS_ACT_TRUNCATE,FUNCTION,263, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_TRUNCATE,FUNCTION,264, EXCEPTION WHEN OTHERS THEN
WS_ACT_TRUNCATE,FUNCTION,265, v_MsgText := substr(v_truncate,1,1023);
WS_ACT_TRUNCATE,FUNCTION,266, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_TRUNCATE,FUNCTION,267, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_TRUNCATE,FUNCTION,268, If SQLCODE = -1031 Then
WS_ACT_TRUNCATE,FUNCTION,269, v_MsgText := 'Jobs run under the DBMS package, so need specific privileges';
WS_ACT_TRUNCATE,FUNCTION,270, v_result := WsWrkAudit('I', p_job_name, p_task_name, p_sequence,
WS_ACT_TRUNCATE,FUNCTION,271, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_TRUNCATE,FUNCTION,272, Else
WS_ACT_TRUNCATE,FUNCTION,273, v_MsgText := 'Unhandled exception in truncate ';
WS_ACT_TRUNCATE,FUNCTION,274, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_TRUNCATE,FUNCTION,275, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_TRUNCATE,FUNCTION,276, End If;
WS_ACT_TRUNCATE,FUNCTION,277,
WS_ACT_TRUNCATE,FUNCTION,278, p_return_msg := 'Unhandled exception in ws_act_truncate cursor step '||v_step;
WS_ACT_TRUNCATE,FUNCTION,279, p_status_code := -2;
WS_ACT_TRUNCATE,FUNCTION,280, v_result := -2;
WS_ACT_TRUNCATE,FUNCTION,281, RETURN v_result;
WS_ACT_TRUNCATE,FUNCTION,282, END;
WS_ACT_TRUNCATE,FUNCTION,283,
WS_ACT_TRUNCATE,FUNCTION,284, COMMIT;
WS_ACT_TRUNCATE,FUNCTION,285,
WS_ACT_TRUNCATE,FUNCTION,286, p_status_code := 1;
WS_ACT_TRUNCATE,FUNCTION,287, p_return_msg := 'Table truncated '||v_table_with_schema;
WS_ACT_TRUNCATE,FUNCTION,288, v_result := 1;
WS_ACT_TRUNCATE,FUNCTION,289,
WS_ACT_TRUNCATE,FUNCTION,290, COMMIT;
WS_ACT_TRUNCATE,FUNCTION,291, RETURN v_result;
WS_ACT_TRUNCATE,FUNCTION,292,
WS_ACT_TRUNCATE,FUNCTION,293,EXCEPTION
WS_ACT_TRUNCATE,FUNCTION,294, WHEN OTHERS THEN
WS_ACT_TRUNCATE,FUNCTION,295, v_MsgText := 'Unhandled Exception in ws_act_truncate. '||
WS_ACT_TRUNCATE,FUNCTION,296, ' Step ' ||v_step;
WS_ACT_TRUNCATE,FUNCTION,297, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_TRUNCATE,FUNCTION,298, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_TRUNCATE,FUNCTION,299, p_return_msg := 'Unhandled Exception in ws_act_truncate ' || v_ws_pro_version || ' step ' ||v_step;
WS_ACT_TRUNCATE,FUNCTION,300, p_status_code := -3;
WS_ACT_TRUNCATE,FUNCTION,301, RETURN -3;
WS_ACT_TRUNCATE,FUNCTION,302,
WS_ACT_TRUNCATE,FUNCTION,303,END ws_act_truncate;
WS_ACT_TRUNCATE,FUNCTION,304,
WS_ACT_UPDATE,FUNCTION,1,function ws_act_update
WS_ACT_UPDATE,FUNCTION,2, (
WS_ACT_UPDATE,FUNCTION,3, p_sequence IN number,
WS_ACT_UPDATE,FUNCTION,4, p_obj_type IN number,
WS_ACT_UPDATE,FUNCTION,5, p_action IN number,
WS_ACT_UPDATE,FUNCTION,6, p_obj_key IN number,
WS_ACT_UPDATE,FUNCTION,7, p_job_name IN varchar2,
WS_ACT_UPDATE,FUNCTION,8, p_task_name IN varchar2,
WS_ACT_UPDATE,FUNCTION,9, p_job_id IN number,
WS_ACT_UPDATE,FUNCTION,10, p_task_id IN number,
WS_ACT_UPDATE,FUNCTION,11, p_return_msg OUT varchar2,
WS_ACT_UPDATE,FUNCTION,12, p_status_code OUT number
WS_ACT_UPDATE,FUNCTION,13, )
WS_ACT_UPDATE,FUNCTION,14, Return integer
WS_ACT_UPDATE,FUNCTION,15, AUTHID CURRENT_USER
WS_ACT_UPDATE,FUNCTION,16, IS
WS_ACT_UPDATE,FUNCTION,17,
WS_ACT_UPDATE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_ACT_UPDATE,FUNCTION,19,
WS_ACT_UPDATE,FUNCTION,20, -- =============================================================================
WS_ACT_UPDATE,FUNCTION,21, -- DBMS Name : Oracle
WS_ACT_UPDATE,FUNCTION,22, -- Script Name : ws_act_update
WS_ACT_UPDATE,FUNCTION,23, -- Description : Execute the update procedure associated with
WS_ACT_UPDATE,FUNCTION,24, -- a table
WS_ACT_UPDATE,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_UPDATE,FUNCTION,26, -- =============================================================================
WS_ACT_UPDATE,FUNCTION,27,
WS_ACT_UPDATE,FUNCTION,28, --=====================================================
WS_ACT_UPDATE,FUNCTION,29, -- Constants
WS_ACT_UPDATE,FUNCTION,30, --=====================================================
WS_ACT_UPDATE,FUNCTION,31, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_ACT_UPDATE,FUNCTION,32, v_ws_obj_procedure constant number := 1;
WS_ACT_UPDATE,FUNCTION,33, v_ws_obj_fact_kpi constant number := 2;
WS_ACT_UPDATE,FUNCTION,34, v_ws_obj_script constant number := 3;
WS_ACT_UPDATE,FUNCTION,35, v_ws_obj_template constant number := 4;
WS_ACT_UPDATE,FUNCTION,36, v_ws_obj_fact constant number := 5;
WS_ACT_UPDATE,FUNCTION,37, v_ws_obj_dim constant number := 6;
WS_ACT_UPDATE,FUNCTION,38, v_ws_obj_stage constant number := 7;
WS_ACT_UPDATE,FUNCTION,39, v_ws_obj_load constant number := 8;
WS_ACT_UPDATE,FUNCTION,40, v_ws_obj_agg constant number := 9;
WS_ACT_UPDATE,FUNCTION,41, v_ws_obj_index constant number := 10;
WS_ACT_UPDATE,FUNCTION,42, v_ws_obj_connect constant number := 11;
WS_ACT_UPDATE,FUNCTION,43, v_ws_obj_dim_view constant number := 12;
WS_ACT_UPDATE,FUNCTION,44, v_ws_obj_export constant number := 13;
WS_ACT_UPDATE,FUNCTION,45, v_ws_obj_cube constant number := 15;
WS_ACT_UPDATE,FUNCTION,46, v_ws_obj_cube_virtual constant number := 16;
WS_ACT_UPDATE,FUNCTION,47, v_ws_obj_report constant number := 17;
WS_ACT_UPDATE,FUNCTION,48, v_ws_obj_view constant number := 18;
WS_ACT_UPDATE,FUNCTION,49, v_ws_obj_file constant number := 19;
WS_ACT_UPDATE,FUNCTION,50, v_ws_obj_join constant number := 20;
WS_ACT_UPDATE,FUNCTION,51, v_ws_obj_retro constant number := 21;
WS_ACT_UPDATE,FUNCTION,52, v_ws_obj_retro_copy constant number := 22;
WS_ACT_UPDATE,FUNCTION,53, v_ws_obj_olap_cube constant number := 23;
WS_ACT_UPDATE,FUNCTION,54, v_ws_obj_olap_dim constant number := 24;
WS_ACT_UPDATE,FUNCTION,55, v_ws_obj_olap_role constant number := 25;
WS_ACT_UPDATE,FUNCTION,56, v_ws_obj_ods constant number := 26;
WS_ACT_UPDATE,FUNCTION,57, v_ws_obj_normal constant number := 27;
WS_ACT_UPDATE,FUNCTION,58, v_ws_obj_hub constant number := 28;
WS_ACT_UPDATE,FUNCTION,59, v_ws_obj_satellite constant number := 29;
WS_ACT_UPDATE,FUNCTION,60, v_ws_obj_link constant number := 30;
WS_ACT_UPDATE,FUNCTION,61, v_ws_obj_custom1 constant number := 31;
WS_ACT_UPDATE,FUNCTION,62, v_ws_obj_custom2 constant number := 32;
WS_ACT_UPDATE,FUNCTION,63, v_ws_obj_max constant number := 32;
WS_ACT_UPDATE,FUNCTION,64,
WS_ACT_UPDATE,FUNCTION,65, v_ws_obj_job constant number := 50;
WS_ACT_UPDATE,FUNCTION,66, v_ws_obj_source_mapping constant number := 69;
WS_ACT_UPDATE,FUNCTION,67,
WS_ACT_UPDATE,FUNCTION,68, v_ws_act_drop constant number := 1;
WS_ACT_UPDATE,FUNCTION,69, v_ws_act_create constant number := 2;
WS_ACT_UPDATE,FUNCTION,70, v_ws_act_drop_all constant number := 3;
WS_ACT_UPDATE,FUNCTION,71, v_ws_act_pre_drop constant number := 4;
WS_ACT_UPDATE,FUNCTION,72, v_ws_act_load constant number := 5;
WS_ACT_UPDATE,FUNCTION,73, v_ws_act_update constant number := 6;
WS_ACT_UPDATE,FUNCTION,74, v_ws_act_execute constant number := 7;
WS_ACT_UPDATE,FUNCTION,75, v_ws_act_process constant number := 8;
WS_ACT_UPDATE,FUNCTION,76, v_ws_act_build constant number := 9;
WS_ACT_UPDATE,FUNCTION,77, v_ws_act_build_all constant number := 10;
WS_ACT_UPDATE,FUNCTION,78, v_ws_act_analyze constant number := 11;
WS_ACT_UPDATE,FUNCTION,79, v_ws_act_quick_analyze constant number := 12;
WS_ACT_UPDATE,FUNCTION,80, v_ws_act_statistics constant number := 13;
WS_ACT_UPDATE,FUNCTION,81, v_ws_act_quick_statistics constant number := 14;
WS_ACT_UPDATE,FUNCTION,82, v_ws_act_initial constant number := 15;
WS_ACT_UPDATE,FUNCTION,83, v_ws_act_cube_dim constant number := 16;
WS_ACT_UPDATE,FUNCTION,84, v_ws_act_db_dim constant number := 17;
WS_ACT_UPDATE,FUNCTION,85, v_ws_act_custom constant number := 18;
WS_ACT_UPDATE,FUNCTION,86, v_ws_act_truncate constant number := 19;
WS_ACT_UPDATE,FUNCTION,87,
WS_ACT_UPDATE,FUNCTION,88, --=====================================================
WS_ACT_UPDATE,FUNCTION,89, -- Variables
WS_ACT_UPDATE,FUNCTION,90, --=====================================================
WS_ACT_UPDATE,FUNCTION,91, v_MsgText varchar2(1024); -- Text in audit_trail
WS_ACT_UPDATE,FUNCTION,92, v_step integer := 0; -- return code
WS_ACT_UPDATE,FUNCTION,93, v_result integer := 0; -- return code
WS_ACT_UPDATE,FUNCTION,94, v_stmt varchar2(1024);
WS_ACT_UPDATE,FUNCTION,95, v_cursor number;
WS_ACT_UPDATE,FUNCTION,96, v_procedure_key number;
WS_ACT_UPDATE,FUNCTION,97, v_procedure varchar2(64);
WS_ACT_UPDATE,FUNCTION,98, v_procedure_type varchar2(1);
WS_ACT_UPDATE,FUNCTION,99,
WS_ACT_UPDATE,FUNCTION,100,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_ACT_UPDATE,FUNCTION,101,BEGIN
WS_ACT_UPDATE,FUNCTION,102,
WS_ACT_UPDATE,FUNCTION,103, --=====================================================
WS_ACT_UPDATE,FUNCTION,104, -- See what table we have and get the update procedure
WS_ACT_UPDATE,FUNCTION,105, --=====================================================
WS_ACT_UPDATE,FUNCTION,106, BEGIN
WS_ACT_UPDATE,FUNCTION,107, v_step := 100;
WS_ACT_UPDATE,FUNCTION,108, v_procedure_key := 0;
WS_ACT_UPDATE,FUNCTION,109, If p_obj_type = v_ws_obj_dim Then
WS_ACT_UPDATE,FUNCTION,110, Select dt_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,111, From ws_dim_tab
WS_ACT_UPDATE,FUNCTION,112, Where dt_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,113, ElsIf p_obj_type = v_ws_obj_dim_view Then
WS_ACT_UPDATE,FUNCTION,114, Select dt_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,115, From ws_dim_tab
WS_ACT_UPDATE,FUNCTION,116, Where dt_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,117, ElsIf p_obj_type = v_ws_obj_view Then
WS_ACT_UPDATE,FUNCTION,118, Select vt_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,119, From ws_view_tab
WS_ACT_UPDATE,FUNCTION,120, Where vt_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,121, ElsIf p_obj_type = v_ws_obj_fact Then
WS_ACT_UPDATE,FUNCTION,122, Select ft_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,123, From ws_fact_tab
WS_ACT_UPDATE,FUNCTION,124, Where ft_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,125, ElsIf p_obj_type = v_ws_obj_fact_kpi Then
WS_ACT_UPDATE,FUNCTION,126, Select ft_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,127, From ws_fact_tab
WS_ACT_UPDATE,FUNCTION,128, Where ft_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,129, ElsIf p_obj_type = v_ws_obj_stage Then
WS_ACT_UPDATE,FUNCTION,130, Select st_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,131, From ws_stage_tab
WS_ACT_UPDATE,FUNCTION,132, Where st_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,133, ElsIf p_obj_type = v_ws_obj_agg Then
WS_ACT_UPDATE,FUNCTION,134, Select at_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,135, From ws_agg_tab
WS_ACT_UPDATE,FUNCTION,136, Where at_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,137, ElsIf p_obj_type = v_ws_obj_retro_copy Then
WS_ACT_UPDATE,FUNCTION,138, Select rt_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,139, From ws_retro_tab
WS_ACT_UPDATE,FUNCTION,140, Where rt_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,141, ElsIf p_obj_type = v_ws_obj_ods Then
WS_ACT_UPDATE,FUNCTION,142, Select ot_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,143, From ws_ods_tab
WS_ACT_UPDATE,FUNCTION,144, Where ot_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,145, ElsIf p_obj_type = v_ws_obj_normal
WS_ACT_UPDATE,FUNCTION,146, OR p_obj_type = v_ws_obj_hub
WS_ACT_UPDATE,FUNCTION,147, OR p_obj_type = v_ws_obj_satellite
WS_ACT_UPDATE,FUNCTION,148, OR p_obj_type = v_ws_obj_link
WS_ACT_UPDATE,FUNCTION,149, OR p_obj_type = v_ws_obj_custom1
WS_ACT_UPDATE,FUNCTION,150, OR p_obj_type = v_ws_obj_custom2
WS_ACT_UPDATE,FUNCTION,151, Then
WS_ACT_UPDATE,FUNCTION,152, Select nt_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,153, From ws_normal_tab
WS_ACT_UPDATE,FUNCTION,154, Where nt_obj_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,155, ElsIf p_obj_type = v_ws_obj_source_mapping Then
WS_ACT_UPDATE,FUNCTION,156, Select smt_update_key into v_procedure_key
WS_ACT_UPDATE,FUNCTION,157, From ws_source_mapping_tab
WS_ACT_UPDATE,FUNCTION,158, Where smt_source_mapping_key = p_obj_key;
WS_ACT_UPDATE,FUNCTION,159, End If;
WS_ACT_UPDATE,FUNCTION,160, EXCEPTION WHEN OTHERS THEN
WS_ACT_UPDATE,FUNCTION,161, v_step := 200;
WS_ACT_UPDATE,FUNCTION,162, If SQLCODE = 100 Then
WS_ACT_UPDATE,FUNCTION,163, p_return_msg := 'Unable to acquire update procedure for ' ||p_task_name;
WS_ACT_UPDATE,FUNCTION,164, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,165, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,166, p_return_msg := 'Please check that an update procedure has been defined';
WS_ACT_UPDATE,FUNCTION,167, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,168, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,169, p_status_code := -3;
WS_ACT_UPDATE,FUNCTION,170, Else
WS_ACT_UPDATE,FUNCTION,171, p_return_msg := 'Unable to acquire update procedure for ' ||p_task_name;
WS_ACT_UPDATE,FUNCTION,172, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,173, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,174, p_status_code := -3;
WS_ACT_UPDATE,FUNCTION,175, End If;
WS_ACT_UPDATE,FUNCTION,176, END;
WS_ACT_UPDATE,FUNCTION,177,
WS_ACT_UPDATE,FUNCTION,178, v_step := 300;
WS_ACT_UPDATE,FUNCTION,179,
WS_ACT_UPDATE,FUNCTION,180, If v_procedure_key <= 0
WS_ACT_UPDATE,FUNCTION,181, Or v_procedure_key is NULL Then
WS_ACT_UPDATE,FUNCTION,182, v_MsgText := 'Update procedure not found for table '||p_task_name;
WS_ACT_UPDATE,FUNCTION,183, v_result := WsWrkAudit('E', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,184, v_MsgText,NULL,NULL, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,185, p_return_msg := 'Please check that an update procedure has been defined';
WS_ACT_UPDATE,FUNCTION,186, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,187, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,188, p_return_msg := 'Update procedure not found for table '||p_task_name;
WS_ACT_UPDATE,FUNCTION,189, p_status_code := -2;
WS_ACT_UPDATE,FUNCTION,190, v_result := -2;
WS_ACT_UPDATE,FUNCTION,191, RETURN v_result;
WS_ACT_UPDATE,FUNCTION,192, End If;
WS_ACT_UPDATE,FUNCTION,193,
WS_ACT_UPDATE,FUNCTION,194, --=====================================================
WS_ACT_UPDATE,FUNCTION,195, -- Get the procedure name
WS_ACT_UPDATE,FUNCTION,196, --=====================================================
WS_ACT_UPDATE,FUNCTION,197,
WS_ACT_UPDATE,FUNCTION,198, v_step := 400;
WS_ACT_UPDATE,FUNCTION,199,
WS_ACT_UPDATE,FUNCTION,200, SELECT ph_name, NVL(ph_type,'P')
WS_ACT_UPDATE,FUNCTION,201, INTO v_procedure, v_procedure_type
WS_ACT_UPDATE,FUNCTION,202, FROM ws_pro_header
WS_ACT_UPDATE,FUNCTION,203, WHERE ph_obj_key = v_procedure_key;
WS_ACT_UPDATE,FUNCTION,204,
WS_ACT_UPDATE,FUNCTION,205, --=====================================================
WS_ACT_UPDATE,FUNCTION,206, -- IF SQLBLOCK then return for calling
WS_ACT_UPDATE,FUNCTION,207, --=====================================================
WS_ACT_UPDATE,FUNCTION,208,
WS_ACT_UPDATE,FUNCTION,209, v_step := 500;
WS_ACT_UPDATE,FUNCTION,210, IF v_procedure_type = 'B'
WS_ACT_UPDATE,FUNCTION,211, THEN
WS_ACT_UPDATE,FUNCTION,212, -- run a UPDATE SQLBLOCK by returning a result of 16
WS_ACT_UPDATE,FUNCTION,213, p_status_code := 16;
WS_ACT_UPDATE,FUNCTION,214, v_result := 2;
WS_ACT_UPDATE,FUNCTION,215, RETURN v_result;
WS_ACT_UPDATE,FUNCTION,216, END IF;
WS_ACT_UPDATE,FUNCTION,217,
WS_ACT_UPDATE,FUNCTION,218, --=====================================================
WS_ACT_UPDATE,FUNCTION,219, -- Bind the columns and execute
WS_ACT_UPDATE,FUNCTION,220, --=====================================================
WS_ACT_UPDATE,FUNCTION,221, v_step := 600;
WS_ACT_UPDATE,FUNCTION,222, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_ACT_UPDATE,FUNCTION,223, v_step := 700;
WS_ACT_UPDATE,FUNCTION,224, -- Build up our execute statement for the procedure
WS_ACT_UPDATE,FUNCTION,225, v_stmt := 'BEGIN '|| v_procedure
WS_ACT_UPDATE,FUNCTION,226, || '(:p1, :p2, :p3, :p4, :p5, :p6, :p7); END;';
WS_ACT_UPDATE,FUNCTION,227, v_step := 800;
WS_ACT_UPDATE,FUNCTION,228, DBMS_SQL.PARSE(v_cursor, v_stmt, 1);
WS_ACT_UPDATE,FUNCTION,229, v_step := 900;
WS_ACT_UPDATE,FUNCTION,230,
WS_ACT_UPDATE,FUNCTION,231, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p1', p_sequence);
WS_ACT_UPDATE,FUNCTION,232, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p2', p_job_name,64);
WS_ACT_UPDATE,FUNCTION,233, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p3', p_task_name,64);
WS_ACT_UPDATE,FUNCTION,234, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p4', p_job_id);
WS_ACT_UPDATE,FUNCTION,235, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p5', p_task_id);
WS_ACT_UPDATE,FUNCTION,236, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p6', p_return_msg,1024);
WS_ACT_UPDATE,FUNCTION,237, DBMS_SQL.BIND_VARIABLE(v_cursor, ':p7', p_status_code);
WS_ACT_UPDATE,FUNCTION,238, v_step := 1000;
WS_ACT_UPDATE,FUNCTION,239,
WS_ACT_UPDATE,FUNCTION,240, --=====================================================
WS_ACT_UPDATE,FUNCTION,241, -- Call the procedure
WS_ACT_UPDATE,FUNCTION,242, --=====================================================
WS_ACT_UPDATE,FUNCTION,243, BEGIN
WS_ACT_UPDATE,FUNCTION,244, v_step := 1100;
WS_ACT_UPDATE,FUNCTION,245, v_result := DBMS_SQL.EXECUTE(v_cursor);
WS_ACT_UPDATE,FUNCTION,246, v_step := 1200;
WS_ACT_UPDATE,FUNCTION,247, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p6', p_return_msg);
WS_ACT_UPDATE,FUNCTION,248, DBMS_SQL.VARIABLE_VALUE(v_cursor, ':p7', p_status_code);
WS_ACT_UPDATE,FUNCTION,249, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_ACT_UPDATE,FUNCTION,250, EXCEPTION WHEN OTHERS THEN
WS_ACT_UPDATE,FUNCTION,251, p_return_msg := 'Unhandled Exception in call to ' ||v_procedure;
WS_ACT_UPDATE,FUNCTION,252, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,253, p_return_msg,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,254, p_status_code := -3;
WS_ACT_UPDATE,FUNCTION,255, END;
WS_ACT_UPDATE,FUNCTION,256,
WS_ACT_UPDATE,FUNCTION,257, COMMIT;
WS_ACT_UPDATE,FUNCTION,258, RETURN v_result;
WS_ACT_UPDATE,FUNCTION,259,
WS_ACT_UPDATE,FUNCTION,260,EXCEPTION
WS_ACT_UPDATE,FUNCTION,261, WHEN OTHERS THEN
WS_ACT_UPDATE,FUNCTION,262, v_MsgText := 'Unhandled Exception in ws_act_update. '||
WS_ACT_UPDATE,FUNCTION,263, ' Step ' ||v_step;
WS_ACT_UPDATE,FUNCTION,264, v_result := WsWrkAudit('F', p_job_name, p_task_name, p_sequence,
WS_ACT_UPDATE,FUNCTION,265, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_ACT_UPDATE,FUNCTION,266, p_return_msg := 'Unhandled Exception in ws_act_update step ' ||v_step;
WS_ACT_UPDATE,FUNCTION,267, p_status_code := -3;
WS_ACT_UPDATE,FUNCTION,268, RETURN -3;
WS_ACT_UPDATE,FUNCTION,269,
WS_ACT_UPDATE,FUNCTION,270,END ws_act_update;
WS_ACT_UPDATE,FUNCTION,271,
WS_API_GLOSSARY,FUNCTION,1,FUNCTION Ws_Api_Glossary (
WS_API_GLOSSARY,FUNCTION,2, v_object_name IN varchar2,
WS_API_GLOSSARY,FUNCTION,3, v_term IN varchar2,
WS_API_GLOSSARY,FUNCTION,4, v_comments IN varchar2,
WS_API_GLOSSARY,FUNCTION,5, v_option IN varchar2
WS_API_GLOSSARY,FUNCTION,6, )
WS_API_GLOSSARY,FUNCTION,7, RETURN varchar2
WS_API_GLOSSARY,FUNCTION,8, AUTHID CURRENT_USER
WS_API_GLOSSARY,FUNCTION,9, IS
WS_API_GLOSSARY,FUNCTION,10,
WS_API_GLOSSARY,FUNCTION,11, v_result varchar2(1024);
WS_API_GLOSSARY,FUNCTION,12,
WS_API_GLOSSARY,FUNCTION,13, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_API_GLOSSARY,FUNCTION,14,
WS_API_GLOSSARY,FUNCTION,15, -- ============================================================================
WS_API_GLOSSARY,FUNCTION,16, -- DBMS Name : Oracle
WS_API_GLOSSARY,FUNCTION,17, -- Script Name : Ws_Api_Glossary.sql
WS_API_GLOSSARY,FUNCTION,18, -- Description : Add elements to the ws_doc_glossary table
WS_API_GLOSSARY,FUNCTION,19, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_API_GLOSSARY,FUNCTION,20, -- =============================================================================
WS_API_GLOSSARY,FUNCTION,21,
WS_API_GLOSSARY,FUNCTION,22,BEGIN
WS_API_GLOSSARY,FUNCTION,23, -- =========================================================================
WS_API_GLOSSARY,FUNCTION,24, -- Options are to insert or delete
WS_API_GLOSSARY,FUNCTION,25, -- =========================================================================
WS_API_GLOSSARY,FUNCTION,26, If upper(v_option) = 'ADD' Then
WS_API_GLOSSARY,FUNCTION,27, Insert into ws_doc_glossary ( dg_object_name, dg_term, dg_comments )
WS_API_GLOSSARY,FUNCTION,28, Values ( substr(v_object_name,1,64), substr(v_term,1,256),
WS_API_GLOSSARY,FUNCTION,29, substr(v_comments,1,4000));
WS_API_GLOSSARY,FUNCTION,30, v_result := v_object_name||' element inserted';
WS_API_GLOSSARY,FUNCTION,31, ElsIf upper(v_option) = 'DELETE' Then
WS_API_GLOSSARY,FUNCTION,32, Delete from ws_doc_glossary
WS_API_GLOSSARY,FUNCTION,33, Where dg_object_name = substr(v_object_name,1,64)
WS_API_GLOSSARY,FUNCTION,34, And dg_term = substr(v_term,1,256);
WS_API_GLOSSARY,FUNCTION,35, v_result := v_object_name||' element deleted';
WS_API_GLOSSARY,FUNCTION,36, Else
WS_API_GLOSSARY,FUNCTION,37, v_result := 'Invalid option '||v_option||'. Valid options are ADD or DELETE';
WS_API_GLOSSARY,FUNCTION,38, End If;
WS_API_GLOSSARY,FUNCTION,39,
WS_API_GLOSSARY,FUNCTION,40, Commit;
WS_API_GLOSSARY,FUNCTION,41,
WS_API_GLOSSARY,FUNCTION,42, Return v_result;
WS_API_GLOSSARY,FUNCTION,43,
WS_API_GLOSSARY,FUNCTION,44,EXCEPTION
WS_API_GLOSSARY,FUNCTION,45, WHEN OTHERS Then
WS_API_GLOSSARY,FUNCTION,46, v_result := 'Unexpected error '||SQLERRM;
WS_API_GLOSSARY,FUNCTION,47, Return v_result;
WS_API_GLOSSARY,FUNCTION,48,END Ws_Api_Glossary;
WS_API_GLOSSARY,FUNCTION,49,
WS_CONNECT_REPLACE,FUNCTION,1,function ws_connect_replace
WS_CONNECT_REPLACE,FUNCTION,2, (
WS_CONNECT_REPLACE,FUNCTION,3, p_sequence IN number,
WS_CONNECT_REPLACE,FUNCTION,4, p_job_name IN varchar2,
WS_CONNECT_REPLACE,FUNCTION,5, p_task_name IN varchar2,
WS_CONNECT_REPLACE,FUNCTION,6, p_job_id IN number,
WS_CONNECT_REPLACE,FUNCTION,7, p_task_id IN number,
WS_CONNECT_REPLACE,FUNCTION,8, p_action IN varchar2,
WS_CONNECT_REPLACE,FUNCTION,9, p_source IN varchar2,
WS_CONNECT_REPLACE,FUNCTION,10, p_target IN varchar2,
WS_CONNECT_REPLACE,FUNCTION,11, p_return_code OUT varchar2,
WS_CONNECT_REPLACE,FUNCTION,12, p_return_msg OUT varchar2
WS_CONNECT_REPLACE,FUNCTION,13, )
WS_CONNECT_REPLACE,FUNCTION,14, Return integer
WS_CONNECT_REPLACE,FUNCTION,15, AUTHID CURRENT_USER
WS_CONNECT_REPLACE,FUNCTION,16, IS
WS_CONNECT_REPLACE,FUNCTION,17,
WS_CONNECT_REPLACE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_CONNECT_REPLACE,FUNCTION,19,
WS_CONNECT_REPLACE,FUNCTION,20, -- =============================================================================
WS_CONNECT_REPLACE,FUNCTION,21, -- DBMS Name : Oracle
WS_CONNECT_REPLACE,FUNCTION,22, -- Script Name : ws_connect_replace
WS_CONNECT_REPLACE,FUNCTION,23, -- Description : Copies the contents of one connection to another
WS_CONNECT_REPLACE,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_CONNECT_REPLACE,FUNCTION,25, -- =============================================================================
WS_CONNECT_REPLACE,FUNCTION,26,
WS_CONNECT_REPLACE,FUNCTION,27, --=====================================================
WS_CONNECT_REPLACE,FUNCTION,28, -- Variables
WS_CONNECT_REPLACE,FUNCTION,29, --=====================================================
WS_CONNECT_REPLACE,FUNCTION,30, v_MsgText varchar2(1024); -- Text in audit_trail
WS_CONNECT_REPLACE,FUNCTION,31, v_step integer := 0; -- return code
WS_CONNECT_REPLACE,FUNCTION,32, v_result integer := 0; -- return code
WS_CONNECT_REPLACE,FUNCTION,33, v_ConRec ws_dbc_connect%ROWTYPE;
WS_CONNECT_REPLACE,FUNCTION,34,
WS_CONNECT_REPLACE,FUNCTION,35,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_CONNECT_REPLACE,FUNCTION,36,BEGIN
WS_CONNECT_REPLACE,FUNCTION,37,
WS_CONNECT_REPLACE,FUNCTION,38, --***********************************************************************
WS_CONNECT_REPLACE,FUNCTION,39, -- Ensure a valid action entered
WS_CONNECT_REPLACE,FUNCTION,40, --***********************************************************************
WS_CONNECT_REPLACE,FUNCTION,41, v_step := 100;
WS_CONNECT_REPLACE,FUNCTION,42, IF UPPER(p_action) = 'REPLACE' THEN
WS_CONNECT_REPLACE,FUNCTION,43, v_step := 101;
WS_CONNECT_REPLACE,FUNCTION,44, ELSE
WS_CONNECT_REPLACE,FUNCTION,45, p_return_code := 'E';
WS_CONNECT_REPLACE,FUNCTION,46, p_return_msg := 'Invalid action code in Ws_Connect_Replace. Valid actions are Replace.';
WS_CONNECT_REPLACE,FUNCTION,47, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_CONNECT_REPLACE,FUNCTION,48, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_CONNECT_REPLACE,FUNCTION,49, RETURN -2;
WS_CONNECT_REPLACE,FUNCTION,50, END IF;
WS_CONNECT_REPLACE,FUNCTION,51,
WS_CONNECT_REPLACE,FUNCTION,52, --***********************************************************************
WS_CONNECT_REPLACE,FUNCTION,53, -- Get the info for the source connection
WS_CONNECT_REPLACE,FUNCTION,54, --***********************************************************************
WS_CONNECT_REPLACE,FUNCTION,55, v_step := 200;
WS_CONNECT_REPLACE,FUNCTION,56, BEGIN
WS_CONNECT_REPLACE,FUNCTION,57, SELECT *
WS_CONNECT_REPLACE,FUNCTION,58, INTO v_ConRec
WS_CONNECT_REPLACE,FUNCTION,59, FROM ws_dbc_connect
WS_CONNECT_REPLACE,FUNCTION,60, WHERE UPPER(dc_name) = UPPER(p_source);
WS_CONNECT_REPLACE,FUNCTION,61,
WS_CONNECT_REPLACE,FUNCTION,62, EXCEPTION WHEN OTHERS THEN
WS_CONNECT_REPLACE,FUNCTION,63, p_return_code := 'E';
WS_CONNECT_REPLACE,FUNCTION,64, v_MsgText := 'Failed to get info for source connection '||p_source||' '||SQLERRM;
WS_CONNECT_REPLACE,FUNCTION,65, p_return_msg := substr(v_MsgText,1,1023);
WS_CONNECT_REPLACE,FUNCTION,66, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_CONNECT_REPLACE,FUNCTION,67, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_CONNECT_REPLACE,FUNCTION,68, RETURN -2;
WS_CONNECT_REPLACE,FUNCTION,69, END;
WS_CONNECT_REPLACE,FUNCTION,70,
WS_CONNECT_REPLACE,FUNCTION,71,
WS_CONNECT_REPLACE,FUNCTION,72, IF v_ConRec.dc_obj_key <= 0 THEN
WS_CONNECT_REPLACE,FUNCTION,73, p_return_code := 'E';
WS_CONNECT_REPLACE,FUNCTION,74, p_return_msg := 'Failed to find source connection '||p_source;
WS_CONNECT_REPLACE,FUNCTION,75, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_CONNECT_REPLACE,FUNCTION,76, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_CONNECT_REPLACE,FUNCTION,77, RETURN -2;
WS_CONNECT_REPLACE,FUNCTION,78, END IF;
WS_CONNECT_REPLACE,FUNCTION,79,
WS_CONNECT_REPLACE,FUNCTION,80, --***********************************************************************
WS_CONNECT_REPLACE,FUNCTION,81, -- Update the target connection
WS_CONNECT_REPLACE,FUNCTION,82, --***********************************************************************
WS_CONNECT_REPLACE,FUNCTION,83, v_step := 300;
WS_CONNECT_REPLACE,FUNCTION,84, BEGIN
WS_CONNECT_REPLACE,FUNCTION,85,
WS_CONNECT_REPLACE,FUNCTION,86, UPDATE ws_dbc_connect
WS_CONNECT_REPLACE,FUNCTION,87, SET
WS_CONNECT_REPLACE,FUNCTION,88, dc_type = v_ConRec.dc_type
WS_CONNECT_REPLACE,FUNCTION,89, , dc_method = v_ConRec.dc_method
WS_CONNECT_REPLACE,FUNCTION,90, , dc_host_id = v_ConRec.dc_host_id
WS_CONNECT_REPLACE,FUNCTION,91, , dc_dblink_id = v_ConRec.dc_dblink_id
WS_CONNECT_REPLACE,FUNCTION,92, , dc_database_id = v_ConRec.dc_database_id
WS_CONNECT_REPLACE,FUNCTION,93, , dc_odbc_source = v_ConRec.dc_odbc_source
WS_CONNECT_REPLACE,FUNCTION,94, , dc_extract_userid = v_ConRec.dc_extract_userid
WS_CONNECT_REPLACE,FUNCTION,95, , dc_extract_pwd = v_ConRec.dc_extract_pwd
WS_CONNECT_REPLACE,FUNCTION,96, , dc_admin_userid = v_ConRec.dc_admin_userid
WS_CONNECT_REPLACE,FUNCTION,97, , dc_admin_pwd = v_ConRec.dc_admin_pwd
WS_CONNECT_REPLACE,FUNCTION,98, , dc_work_dir = v_ConRec.dc_work_dir
WS_CONNECT_REPLACE,FUNCTION,99, , dc_database_home = v_ConRec.dc_database_home
WS_CONNECT_REPLACE,FUNCTION,100, , dc_pre_login_act = v_ConRec.dc_pre_login_act
WS_CONNECT_REPLACE,FUNCTION,101, , dc_login_prompt = v_ConRec.dc_login_prompt
WS_CONNECT_REPLACE,FUNCTION,102, , dc_password_prompt = v_ConRec.dc_password_prompt
WS_CONNECT_REPLACE,FUNCTION,103, , dc_post_login_act = v_ConRec.dc_post_login_act
WS_CONNECT_REPLACE,FUNCTION,104, , dc_command_prompt = v_ConRec.dc_command_prompt
WS_CONNECT_REPLACE,FUNCTION,105, , dc_telnet_attributes = v_ConRec.dc_telnet_attributes
WS_CONNECT_REPLACE,FUNCTION,106, , dc_attributes = v_ConRec.dc_attributes
WS_CONNECT_REPLACE,FUNCTION,107, , dc_connect_string = v_ConRec.dc_connect_string
WS_CONNECT_REPLACE,FUNCTION,108, , dc_server = v_ConRec.dc_server
WS_CONNECT_REPLACE,FUNCTION,109, , dc_doc_1 = v_ConRec.dc_doc_1
WS_CONNECT_REPLACE,FUNCTION,110, , dc_doc_2 = v_ConRec.dc_doc_2
WS_CONNECT_REPLACE,FUNCTION,111, , dc_doc_3 = v_ConRec.dc_doc_3
WS_CONNECT_REPLACE,FUNCTION,112, , dc_doc_4 = v_ConRec.dc_doc_4
WS_CONNECT_REPLACE,FUNCTION,113, , dc_doc_5 = v_ConRec.dc_doc_5
WS_CONNECT_REPLACE,FUNCTION,114, , dc_doc_6 = v_ConRec.dc_doc_6
WS_CONNECT_REPLACE,FUNCTION,115, , dc_doc_7 = v_ConRec.dc_doc_7
WS_CONNECT_REPLACE,FUNCTION,116, , dc_doc_8 = v_ConRec.dc_doc_8
WS_CONNECT_REPLACE,FUNCTION,117, , dc_doc_9 = v_ConRec.dc_doc_9
WS_CONNECT_REPLACE,FUNCTION,118, , dc_doc_10 = v_ConRec.dc_doc_10
WS_CONNECT_REPLACE,FUNCTION,119, , dc_doc_11 = v_ConRec.dc_doc_11
WS_CONNECT_REPLACE,FUNCTION,120, , dc_doc_12 = v_ConRec.dc_doc_12
WS_CONNECT_REPLACE,FUNCTION,121, , dc_doc_13 = v_ConRec.dc_doc_13
WS_CONNECT_REPLACE,FUNCTION,122, , dc_doc_14 = v_ConRec.dc_doc_14
WS_CONNECT_REPLACE,FUNCTION,123, , dc_doc_15 = v_ConRec.dc_doc_15
WS_CONNECT_REPLACE,FUNCTION,124, , dc_doc_16 = v_ConRec.dc_doc_16
WS_CONNECT_REPLACE,FUNCTION,125, , dc_wizard_set_key = v_ConRec.dc_wizard_set_key
WS_CONNECT_REPLACE,FUNCTION,126, , dc_db_type_ind = v_ConRec.dc_db_type_ind
WS_CONNECT_REPLACE,FUNCTION,127, , dc_authentication = v_ConRec.dc_authentication
WS_CONNECT_REPLACE,FUNCTION,128, WHERE UPPER(dc_name) = UPPER(p_target);
WS_CONNECT_REPLACE,FUNCTION,129, EXCEPTION WHEN OTHERS THEN
WS_CONNECT_REPLACE,FUNCTION,130, p_return_code := 'E';
WS_CONNECT_REPLACE,FUNCTION,131, v_MsgText := 'Failed to update connection '||p_target||' '||SQLERRM;
WS_CONNECT_REPLACE,FUNCTION,132, p_return_msg := substr(v_MsgText ,1,1023);
WS_CONNECT_REPLACE,FUNCTION,133, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_CONNECT_REPLACE,FUNCTION,134, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_CONNECT_REPLACE,FUNCTION,135, RETURN -2;
WS_CONNECT_REPLACE,FUNCTION,136, END;
WS_CONNECT_REPLACE,FUNCTION,137,
WS_CONNECT_REPLACE,FUNCTION,138, COMMIT;
WS_CONNECT_REPLACE,FUNCTION,139,
WS_CONNECT_REPLACE,FUNCTION,140, p_return_code := 'S';
WS_CONNECT_REPLACE,FUNCTION,141, p_return_msg := 'Connection information for '||p_target|| ' replaced from '||p_source;
WS_CONNECT_REPLACE,FUNCTION,142, v_result := WsWrkAudit('I', p_job_name, p_job_name, p_sequence,
WS_CONNECT_REPLACE,FUNCTION,143, p_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_CONNECT_REPLACE,FUNCTION,144,
WS_CONNECT_REPLACE,FUNCTION,145, RETURN 1;
WS_CONNECT_REPLACE,FUNCTION,146,
WS_CONNECT_REPLACE,FUNCTION,147,EXCEPTION
WS_CONNECT_REPLACE,FUNCTION,148, WHEN OTHERS THEN
WS_CONNECT_REPLACE,FUNCTION,149, p_return_code := 'F';
WS_CONNECT_REPLACE,FUNCTION,150, v_MsgText := 'Unhandled Exception in Ws_Connect_Replace. '||
WS_CONNECT_REPLACE,FUNCTION,151, ' Step ' ||v_step;
WS_CONNECT_REPLACE,FUNCTION,152, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_CONNECT_REPLACE,FUNCTION,153, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_CONNECT_REPLACE,FUNCTION,154, p_return_msg := substr(v_MsgText,1,1023);
WS_CONNECT_REPLACE,FUNCTION,155, RETURN -3;
WS_CONNECT_REPLACE,FUNCTION,156,
WS_CONNECT_REPLACE,FUNCTION,157,END ws_connect_replace;
WS_CONNECT_REPLACE,FUNCTION,158,
WS_EXEC_IMMEDIATE,PROCEDURE,1,procedure Ws_Exec_Immediate
WS_EXEC_IMMEDIATE,PROCEDURE,2, (
WS_EXEC_IMMEDIATE,PROCEDURE,3, p_stmt IN varchar2,
WS_EXEC_IMMEDIATE,PROCEDURE,4, p_ret_msg OUT varchar2,
WS_EXEC_IMMEDIATE,PROCEDURE,5, p_result OUT number
WS_EXEC_IMMEDIATE,PROCEDURE,6, )
WS_EXEC_IMMEDIATE,PROCEDURE,7, AUTHID CURRENT_USER
WS_EXEC_IMMEDIATE,PROCEDURE,8, AS
WS_EXEC_IMMEDIATE,PROCEDURE,9,
WS_EXEC_IMMEDIATE,PROCEDURE,10, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_EXEC_IMMEDIATE,PROCEDURE,11,
WS_EXEC_IMMEDIATE,PROCEDURE,12, -- =============================================================================
WS_EXEC_IMMEDIATE,PROCEDURE,13, -- DBMS Name : Oracle
WS_EXEC_IMMEDIATE,PROCEDURE,14, -- Script Name : ws_exec_immediate
WS_EXEC_IMMEDIATE,PROCEDURE,15, -- Description : Execute a chunk of SQL.
WS_EXEC_IMMEDIATE,PROCEDURE,16, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_EXEC_IMMEDIATE,PROCEDURE,17, -- =============================================================================
WS_EXEC_IMMEDIATE,PROCEDURE,18,
WS_EXEC_IMMEDIATE,PROCEDURE,19, v_step integer;
WS_EXEC_IMMEDIATE,PROCEDURE,20,
WS_EXEC_IMMEDIATE,PROCEDURE,21,BEGIN
WS_EXEC_IMMEDIATE,PROCEDURE,22,
WS_EXEC_IMMEDIATE,PROCEDURE,23, v_step := 10;
WS_EXEC_IMMEDIATE,PROCEDURE,24, execute immediate p_stmt;
WS_EXEC_IMMEDIATE,PROCEDURE,25,
WS_EXEC_IMMEDIATE,PROCEDURE,26, v_step := 900;
WS_EXEC_IMMEDIATE,PROCEDURE,27, p_result := 1;
WS_EXEC_IMMEDIATE,PROCEDURE,28, p_ret_msg := 'executed';
WS_EXEC_IMMEDIATE,PROCEDURE,29, COMMIT;
WS_EXEC_IMMEDIATE,PROCEDURE,30, RETURN;
WS_EXEC_IMMEDIATE,PROCEDURE,31,
WS_EXEC_IMMEDIATE,PROCEDURE,32,EXCEPTION
WS_EXEC_IMMEDIATE,PROCEDURE,33, WHEN OTHERS THEN
WS_EXEC_IMMEDIATE,PROCEDURE,34, p_ret_msg := SUBSTR('Unexpected Error in Ws_Exec_Immediate, step '||
WS_EXEC_IMMEDIATE,PROCEDURE,35, v_step||' '||SQLERRM, 1, 1023);
WS_EXEC_IMMEDIATE,PROCEDURE,36, p_result := -1;
WS_EXEC_IMMEDIATE,PROCEDURE,37, ROLLBACK;
WS_EXEC_IMMEDIATE,PROCEDURE,38, RETURN;
WS_EXEC_IMMEDIATE,PROCEDURE,39,
WS_EXEC_IMMEDIATE,PROCEDURE,40,END ws_exec_immediate;
WS_EXEC_IMMEDIATE,PROCEDURE,41,
WS_JOB_ABORT,FUNCTION,1,function ws_job_abort
WS_JOB_ABORT,FUNCTION,2, (
WS_JOB_ABORT,FUNCTION,3, v_job_name IN varchar2,
WS_JOB_ABORT,FUNCTION,4, v_job_sequence IN number,
WS_JOB_ABORT,FUNCTION,5, v_job_msg IN varchar2
WS_JOB_ABORT,FUNCTION,6, )
WS_JOB_ABORT,FUNCTION,7, Return integer
WS_JOB_ABORT,FUNCTION,8, AUTHID CURRENT_USER
WS_JOB_ABORT,FUNCTION,9, IS
WS_JOB_ABORT,FUNCTION,10,
WS_JOB_ABORT,FUNCTION,11, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_ABORT,FUNCTION,12,
WS_JOB_ABORT,FUNCTION,13, -- =============================================================================
WS_JOB_ABORT,FUNCTION,14, -- DBMS Name : Oracle
WS_JOB_ABORT,FUNCTION,15, -- Script Name : ws_job_abort
WS_JOB_ABORT,FUNCTION,16, -- Description : Abort a job in a running state. Scheduler
WS_JOB_ABORT,FUNCTION,17, -- cant find the job
WS_JOB_ABORT,FUNCTION,18, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_ABORT,FUNCTION,19, -- =============================================================================
WS_JOB_ABORT,FUNCTION,20,
WS_JOB_ABORT,FUNCTION,21, --=====================================================
WS_JOB_ABORT,FUNCTION,22, -- Variables
WS_JOB_ABORT,FUNCTION,23, --=====================================================
WS_JOB_ABORT,FUNCTION,24, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_ABORT,FUNCTION,25, v_stmt varchar2(1024);
WS_JOB_ABORT,FUNCTION,26, v_step integer := 0; -- return code
WS_JOB_ABORT,FUNCTION,27, v_result integer := 0; -- return code
WS_JOB_ABORT,FUNCTION,28, v_thread_count integer := 0; -- return code
WS_JOB_ABORT,FUNCTION,29,
WS_JOB_ABORT,FUNCTION,30, v_job_id number := 0;
WS_JOB_ABORT,FUNCTION,31, v_row_count number := 0;
WS_JOB_ABORT,FUNCTION,32, v_rec_count number := 0;
WS_JOB_ABORT,FUNCTION,33,
WS_JOB_ABORT,FUNCTION,34,
WS_JOB_ABORT,FUNCTION,35, --=====================================================
WS_JOB_ABORT,FUNCTION,36, -- Cursor to find all active tasks
WS_JOB_ABORT,FUNCTION,37, --=====================================================
WS_JOB_ABORT,FUNCTION,38, Cursor c_Sid is
WS_JOB_ABORT,FUNCTION,39, Select wjt_sid, wjt_serial
WS_JOB_ABORT,FUNCTION,40, From ws_wrk_job_thread
WS_JOB_ABORT,FUNCTION,41,-- Where wjt_job_key = v_job_id
WS_JOB_ABORT,FUNCTION,42, Where wjt_sequence = v_job_sequence;
WS_JOB_ABORT,FUNCTION,43,
WS_JOB_ABORT,FUNCTION,44,
WS_JOB_ABORT,FUNCTION,45,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_ABORT,FUNCTION,46,BEGIN
WS_JOB_ABORT,FUNCTION,47, -- Get the job key for the job name. There should be one and
WS_JOB_ABORT,FUNCTION,48, -- only one key. Otherwise a fatal problem.
WS_JOB_ABORT,FUNCTION,49, BEGIN
WS_JOB_ABORT,FUNCTION,50, select wjr_job_key into v_job_id
WS_JOB_ABORT,FUNCTION,51, from ws_wrk_job_run
WS_JOB_ABORT,FUNCTION,52, where rtrim(upper(wjr_name)) = rtrim(upper(v_job_name));
WS_JOB_ABORT,FUNCTION,53, v_rec_count := 1;
WS_JOB_ABORT,FUNCTION,54, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,55, v_rec_count := 0;
WS_JOB_ABORT,FUNCTION,56, END;
WS_JOB_ABORT,FUNCTION,57, If v_rec_count <> 1 Then
WS_JOB_ABORT,FUNCTION,58, v_MsgText := 'Job '||v_job_name||' passed invalid job name to Ws_Job_Abort. '||
WS_JOB_ABORT,FUNCTION,59, v_rec_count||' such records exist. No Action !!!';
WS_JOB_ABORT,FUNCTION,60, v_result := WsWrkAudit('F',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,61, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,62, RETURN -2;
WS_JOB_ABORT,FUNCTION,63, End If;
WS_JOB_ABORT,FUNCTION,64, -- Make sure we are already running (i.e. have a job_run record)
WS_JOB_ABORT,FUNCTION,65, -- Otherwise a fatal problem.
WS_JOB_ABORT,FUNCTION,66, BEGIN
WS_JOB_ABORT,FUNCTION,67, select count(1) into v_rec_count
WS_JOB_ABORT,FUNCTION,68, from ws_wrk_job_run
WS_JOB_ABORT,FUNCTION,69, where wjr_job_key = v_job_id
WS_JOB_ABORT,FUNCTION,70, and wjr_sequence = v_job_sequence;
WS_JOB_ABORT,FUNCTION,71, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,72, v_rec_count := 0;
WS_JOB_ABORT,FUNCTION,73, END;
WS_JOB_ABORT,FUNCTION,74, If v_rec_count <> 1 Then
WS_JOB_ABORT,FUNCTION,75, v_MsgText := 'Job '||v_job_name||' sequence '||v_job_sequence||' not running. '||
WS_JOB_ABORT,FUNCTION,76, 'Cannot abort. No Action !!!';
WS_JOB_ABORT,FUNCTION,77, v_result := WsWrkAudit('F',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,78, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,79, RETURN -2;
WS_JOB_ABORT,FUNCTION,80, End If;
WS_JOB_ABORT,FUNCTION,81,
WS_JOB_ABORT,FUNCTION,82, -- Hold any sub job tasks
WS_JOB_ABORT,FUNCTION,83, --
WS_JOB_ABORT,FUNCTION,84, BEGIN
WS_JOB_ABORT,FUNCTION,85, update ws_wrk_task_run
WS_JOB_ABORT,FUNCTION,86, set wtr_run_status = 'H'
WS_JOB_ABORT,FUNCTION,87, where wtr_job_key in
WS_JOB_ABORT,FUNCTION,88, ( select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = v_job_id
WS_JOB_ABORT,FUNCTION,89, and wjr_sequence = v_job_sequence )
WS_JOB_ABORT,FUNCTION,90, and wtr_sequence = v_job_sequence
WS_JOB_ABORT,FUNCTION,91, and wtr_run_status = 'W';
WS_JOB_ABORT,FUNCTION,92, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,93, v_rec_count := 1;
WS_JOB_ABORT,FUNCTION,94, END;
WS_JOB_ABORT,FUNCTION,95,
WS_JOB_ABORT,FUNCTION,96, -- Have the job id now hold any tasks not started
WS_JOB_ABORT,FUNCTION,97, --
WS_JOB_ABORT,FUNCTION,98, BEGIN
WS_JOB_ABORT,FUNCTION,99, update ws_wrk_task_run
WS_JOB_ABORT,FUNCTION,100, set wtr_run_status = 'H'
WS_JOB_ABORT,FUNCTION,101, where wtr_job_key = v_job_id
WS_JOB_ABORT,FUNCTION,102, and wtr_sequence = v_job_sequence
WS_JOB_ABORT,FUNCTION,103, and wtr_run_status = 'W';
WS_JOB_ABORT,FUNCTION,104, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,105, v_rec_count := 0;
WS_JOB_ABORT,FUNCTION,106, END;
WS_JOB_ABORT,FUNCTION,107, If v_rec_count <> 1 Then
WS_JOB_ABORT,FUNCTION,108, v_MsgText := 'Job '||v_job_name||' sequence '||v_job_sequence||' not running. '||
WS_JOB_ABORT,FUNCTION,109, 'Cannot abort. No Action !!!';
WS_JOB_ABORT,FUNCTION,110, v_result := WsWrkAudit('F',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,111, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,112, RETURN -2;
WS_JOB_ABORT,FUNCTION,113, End If;
WS_JOB_ABORT,FUNCTION,114,
WS_JOB_ABORT,FUNCTION,115, -- Flag any sub jobs as failed
WS_JOB_ABORT,FUNCTION,116, --
WS_JOB_ABORT,FUNCTION,117, BEGIN
WS_JOB_ABORT,FUNCTION,118, update ws_wrk_job_run
WS_JOB_ABORT,FUNCTION,119, set wjr_status = 'F'
WS_JOB_ABORT,FUNCTION,120, where wjr_job_key in
WS_JOB_ABORT,FUNCTION,121, ( select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = v_job_id
WS_JOB_ABORT,FUNCTION,122, and wjr_sequence = v_job_sequence)
WS_JOB_ABORT,FUNCTION,123, and wjr_sequence = v_job_sequence;
WS_JOB_ABORT,FUNCTION,124, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,125, v_rec_count := 1;
WS_JOB_ABORT,FUNCTION,126, END;
WS_JOB_ABORT,FUNCTION,127,
WS_JOB_ABORT,FUNCTION,128, -- Flag the job as failed
WS_JOB_ABORT,FUNCTION,129, --
WS_JOB_ABORT,FUNCTION,130, BEGIN
WS_JOB_ABORT,FUNCTION,131, update ws_wrk_job_run
WS_JOB_ABORT,FUNCTION,132, set wjr_status = 'F'
WS_JOB_ABORT,FUNCTION,133, where wjr_job_key = v_job_id
WS_JOB_ABORT,FUNCTION,134, and wjr_sequence = v_job_sequence;
WS_JOB_ABORT,FUNCTION,135, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,136, v_rec_count := 0;
WS_JOB_ABORT,FUNCTION,137, END;
WS_JOB_ABORT,FUNCTION,138, If v_rec_count <> 1 Then
WS_JOB_ABORT,FUNCTION,139, v_MsgText := 'Job '||v_job_name||' sequence '||v_job_sequence||' not running. '||
WS_JOB_ABORT,FUNCTION,140, 'Cannot abort. No Action !!!';
WS_JOB_ABORT,FUNCTION,141, v_result := WsWrkAudit('F',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,142, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,143, RETURN -2;
WS_JOB_ABORT,FUNCTION,144, End If;
WS_JOB_ABORT,FUNCTION,145,
WS_JOB_ABORT,FUNCTION,146, -- Fail any running sub job tasks
WS_JOB_ABORT,FUNCTION,147, --
WS_JOB_ABORT,FUNCTION,148, BEGIN
WS_JOB_ABORT,FUNCTION,149, update ws_wrk_task_run
WS_JOB_ABORT,FUNCTION,150, set wtr_run_status = 'F'
WS_JOB_ABORT,FUNCTION,151, where wtr_job_key in
WS_JOB_ABORT,FUNCTION,152, ( select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = v_job_id
WS_JOB_ABORT,FUNCTION,153, and wjr_sequence = v_job_sequence )
WS_JOB_ABORT,FUNCTION,154, and wtr_sequence = v_job_sequence
WS_JOB_ABORT,FUNCTION,155, and wtr_run_status = 'R';
WS_JOB_ABORT,FUNCTION,156, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,157, v_rec_count := 1;
WS_JOB_ABORT,FUNCTION,158, END;
WS_JOB_ABORT,FUNCTION,159,
WS_JOB_ABORT,FUNCTION,160, -- Fail any running tasks
WS_JOB_ABORT,FUNCTION,161, --
WS_JOB_ABORT,FUNCTION,162, BEGIN
WS_JOB_ABORT,FUNCTION,163, update ws_wrk_task_run
WS_JOB_ABORT,FUNCTION,164, set wtr_run_status = 'F'
WS_JOB_ABORT,FUNCTION,165, where wtr_job_key = v_job_id
WS_JOB_ABORT,FUNCTION,166, and wtr_sequence = v_job_sequence
WS_JOB_ABORT,FUNCTION,167, and wtr_run_status = 'R';
WS_JOB_ABORT,FUNCTION,168, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,169, v_rec_count := 0;
WS_JOB_ABORT,FUNCTION,170, END;
WS_JOB_ABORT,FUNCTION,171, If v_rec_count <> 1 Then
WS_JOB_ABORT,FUNCTION,172, v_MsgText := 'Job '||v_job_name||' sequence '||v_job_sequence||' not running. '||
WS_JOB_ABORT,FUNCTION,173, 'Cannot abort. No Action !!!';
WS_JOB_ABORT,FUNCTION,174, v_result := WsWrkAudit('F',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,175, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,176, RETURN -2;
WS_JOB_ABORT,FUNCTION,177, End If;
WS_JOB_ABORT,FUNCTION,178,
WS_JOB_ABORT,FUNCTION,179, -- Kill any running processes
WS_JOB_ABORT,FUNCTION,180, --
WS_JOB_ABORT,FUNCTION,181, For v_SidRec in c_Sid LOOP
WS_JOB_ABORT,FUNCTION,182, If v_SidRec.wjt_sid <> 0 And v_SidRec.wjt_serial <> 0 Then
WS_JOB_ABORT,FUNCTION,183, BEGIN
WS_JOB_ABORT,FUNCTION,184, v_stmt := 'alter system kill session '''||
WS_JOB_ABORT,FUNCTION,185, v_SidRec.wjt_sid||','||v_SidRec.wjt_serial||'''';
WS_JOB_ABORT,FUNCTION,186, execute immediate v_stmt;
WS_JOB_ABORT,FUNCTION,187, EXCEPTION WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,188, v_stmt := '';
WS_JOB_ABORT,FUNCTION,189, END;
WS_JOB_ABORT,FUNCTION,190, End If;
WS_JOB_ABORT,FUNCTION,191, END LOOP;
WS_JOB_ABORT,FUNCTION,192,
WS_JOB_ABORT,FUNCTION,193, COMMIT;
WS_JOB_ABORT,FUNCTION,194, If v_job_msg is not NULL Then
WS_JOB_ABORT,FUNCTION,195, v_result := WsWrkAudit('E',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,196, v_job_msg,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,197, End If;
WS_JOB_ABORT,FUNCTION,198, v_MsgText := 'Job '||v_job_name||' sequence '||v_job_sequence||
WS_JOB_ABORT,FUNCTION,199, ' Aborted. ';
WS_JOB_ABORT,FUNCTION,200, v_result := WsWrkAudit('F',v_job_name, v_job_name, v_job_sequence,
WS_JOB_ABORT,FUNCTION,201, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_ABORT,FUNCTION,202, COMMIT;
WS_JOB_ABORT,FUNCTION,203, RETURN 1;
WS_JOB_ABORT,FUNCTION,204,
WS_JOB_ABORT,FUNCTION,205,EXCEPTION
WS_JOB_ABORT,FUNCTION,206, WHEN OTHERS THEN
WS_JOB_ABORT,FUNCTION,207, v_MsgText := 'Unhandled Exception in ws_job_abort (8.4.1.0). '||
WS_JOB_ABORT,FUNCTION,208, ' Step ' ||v_step;
WS_JOB_ABORT,FUNCTION,209, v_result := WsWrkAudit('F', 'Ws Job Abort', 'Ws Job Abort', 0,
WS_JOB_ABORT,FUNCTION,210, v_MsgText,SQLCODE, SQLERRM, 0,0);
WS_JOB_ABORT,FUNCTION,211, RETURN -3;
WS_JOB_ABORT,FUNCTION,212,
WS_JOB_ABORT,FUNCTION,213,END ws_job_abort;
WS_JOB_ABORT,FUNCTION,214,
WS_JOB_CHECK,FUNCTION,1,function ws_job_check
WS_JOB_CHECK,FUNCTION,2, (
WS_JOB_CHECK,FUNCTION,3, v_job_count OUT number,
WS_JOB_CHECK,FUNCTION,4, v_pending_count OUT number,
WS_JOB_CHECK,FUNCTION,5, v_job_list OUT varchar2,
WS_JOB_CHECK,FUNCTION,6, v_name_list OUT varchar2,
WS_JOB_CHECK,FUNCTION,7, v_seq_list OUT varchar2
WS_JOB_CHECK,FUNCTION,8, )
WS_JOB_CHECK,FUNCTION,9, Return integer
WS_JOB_CHECK,FUNCTION,10, AUTHID CURRENT_USER
WS_JOB_CHECK,FUNCTION,11, IS
WS_JOB_CHECK,FUNCTION,12,
WS_JOB_CHECK,FUNCTION,13, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_CHECK,FUNCTION,14,
WS_JOB_CHECK,FUNCTION,15, -- =============================================================================
WS_JOB_CHECK,FUNCTION,16, -- DBMS Name : Oracle
WS_JOB_CHECK,FUNCTION,17, -- Script Name : ws_job_check
WS_JOB_CHECK,FUNCTION,18, -- Description : Check that jobs are running okay
WS_JOB_CHECK,FUNCTION,19, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CHECK,FUNCTION,20, -- =============================================================================
WS_JOB_CHECK,FUNCTION,21,
WS_JOB_CHECK,FUNCTION,22, --=====================================================
WS_JOB_CHECK,FUNCTION,23, -- Variables
WS_JOB_CHECK,FUNCTION,24, --=====================================================
WS_JOB_CHECK,FUNCTION,25, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_CHECK,FUNCTION,26, v_step integer := 0; -- return code
WS_JOB_CHECK,FUNCTION,27, v_result integer := 0; -- return code
WS_JOB_CHECK,FUNCTION,28, v_thread_count integer := 0; -- return code
WS_JOB_CHECK,FUNCTION,29,
WS_JOB_CHECK,FUNCTION,30, --===============================================================
WS_JOB_CHECK,FUNCTION,31, -- Cursor for all running jobs
WS_JOB_CHECK,FUNCTION,32, -- Note: wjr_chkp_count contains a parent job key if a child job
WS_JOB_CHECK,FUNCTION,33, --===============================================================
WS_JOB_CHECK,FUNCTION,34, Cursor c_Running is
WS_JOB_CHECK,FUNCTION,35, Select wjr_name, wjr_max_threads, wjr_sequence, wjr_job_key
WS_JOB_CHECK,FUNCTION,36, from ws_wrk_job_run
WS_JOB_CHECK,FUNCTION,37, where wjr_status in ('P','R')
WS_JOB_CHECK,FUNCTION,38, and NVL(wjr_chkp_count,0) = 0
WS_JOB_CHECK,FUNCTION,39, and upper(wjr_scheduler) like 'U%';
WS_JOB_CHECK,FUNCTION,40,
WS_JOB_CHECK,FUNCTION,41,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CHECK,FUNCTION,42,BEGIN
WS_JOB_CHECK,FUNCTION,43, --=====================================================
WS_JOB_CHECK,FUNCTION,44, -- Loop through the running jobs
WS_JOB_CHECK,FUNCTION,45, --=====================================================
WS_JOB_CHECK,FUNCTION,46, v_result := 2;
WS_JOB_CHECK,FUNCTION,47, v_job_count := 0;
WS_JOB_CHECK,FUNCTION,48, v_pending_count := 0;
WS_JOB_CHECK,FUNCTION,49, v_name_list := '';
WS_JOB_CHECK,FUNCTION,50, v_seq_list := '';
WS_JOB_CHECK,FUNCTION,51, v_job_list := '';
WS_JOB_CHECK,FUNCTION,52,
WS_JOB_CHECK,FUNCTION,53, FOR v_RunRec in c_Running LOOP
WS_JOB_CHECK,FUNCTION,54, v_job_count := v_job_count + 1;
WS_JOB_CHECK,FUNCTION,55, If v_job_count > 1 Then
WS_JOB_CHECK,FUNCTION,56, v_name_list := v_name_list||',';
WS_JOB_CHECK,FUNCTION,57, v_job_list := v_job_list||',';
WS_JOB_CHECK,FUNCTION,58, v_seq_list := v_seq_list||',';
WS_JOB_CHECK,FUNCTION,59, End If;
WS_JOB_CHECK,FUNCTION,60,
WS_JOB_CHECK,FUNCTION,61, v_name_list := v_name_list||v_RunRec.wjr_name;
WS_JOB_CHECK,FUNCTION,62, v_seq_list := v_seq_list||v_RunRec.wjr_sequence;
WS_JOB_CHECK,FUNCTION,63, v_job_list := v_job_list||v_RunRec.wjr_name||'_'||v_RunRec.wjr_sequence;
WS_JOB_CHECK,FUNCTION,64,
WS_JOB_CHECK,FUNCTION,65, END LOOP;
WS_JOB_CHECK,FUNCTION,66,
WS_JOB_CHECK,FUNCTION,67,
WS_JOB_CHECK,FUNCTION,68, COMMIT;
WS_JOB_CHECK,FUNCTION,69, RETURN 1;
WS_JOB_CHECK,FUNCTION,70,
WS_JOB_CHECK,FUNCTION,71,EXCEPTION
WS_JOB_CHECK,FUNCTION,72, WHEN OTHERS THEN
WS_JOB_CHECK,FUNCTION,73, v_MsgText := 'Unhandled Exception in ws_job_check. '||
WS_JOB_CHECK,FUNCTION,74, ' Step ' ||v_step;
WS_JOB_CHECK,FUNCTION,75, v_result := WsWrkAudit('F', 'Ws Job Check', 'Ws Job Check', 0,
WS_JOB_CHECK,FUNCTION,76, v_MsgText,SQLCODE, SQLERRM, 0,0);
WS_JOB_CHECK,FUNCTION,77, v_job_count := 0;
WS_JOB_CHECK,FUNCTION,78, RETURN -3;
WS_JOB_CHECK,FUNCTION,79,
WS_JOB_CHECK,FUNCTION,80,END ws_job_check;
WS_JOB_CHECK,FUNCTION,81,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,1,function Ws_Job_Clear_Archive
WS_JOB_CLEAR_ARCHIVE,FUNCTION,2, (
WS_JOB_CLEAR_ARCHIVE,FUNCTION,3, p_sequence IN number,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,6, p_job_id IN number,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,7, p_task_id IN number,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,8, p_day_count IN number,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,9, p_job IN varchar2,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,10, p_options IN varchar2,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,11, p_return_code OUT varchar2,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,12, p_return_msg OUT varchar2
WS_JOB_CLEAR_ARCHIVE,FUNCTION,13, )
WS_JOB_CLEAR_ARCHIVE,FUNCTION,14, Return integer
WS_JOB_CLEAR_ARCHIVE,FUNCTION,15, AUTHID CURRENT_USER
WS_JOB_CLEAR_ARCHIVE,FUNCTION,16, IS PRAGMA AUTONOMOUS_TRANSACTION;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,17,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_CLEAR_ARCHIVE,FUNCTION,19,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,20, -- =============================================================================
WS_JOB_CLEAR_ARCHIVE,FUNCTION,21, -- DBMS Name : ORACLE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,22, -- Script Name : Ws_Job_Clear_Archive
WS_JOB_CLEAR_ARCHIVE,FUNCTION,23, -- Description : Deletes from archives old job logs
WS_JOB_CLEAR_ARCHIVE,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CLEAR_ARCHIVE,FUNCTION,25, -- =============================================================================
WS_JOB_CLEAR_ARCHIVE,FUNCTION,26,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,27, --=====================================================
WS_JOB_CLEAR_ARCHIVE,FUNCTION,28, -- Control variables used in most programs
WS_JOB_CLEAR_ARCHIVE,FUNCTION,29, --=====================================================
WS_JOB_CLEAR_ARCHIVE,FUNCTION,30, v_msgtext varchar2(1024); -- Text for audit_trail
WS_JOB_CLEAR_ARCHIVE,FUNCTION,31, v_result integer := 0; -- return code
WS_JOB_CLEAR_ARCHIVE,FUNCTION,32, v_sql varchar2(4000); -- Text for sql statements
WS_JOB_CLEAR_ARCHIVE,FUNCTION,33, v_set integer := 0; -- commit set
WS_JOB_CLEAR_ARCHIVE,FUNCTION,34, v_analyze_flag integer := 0; -- analyze flag
WS_JOB_CLEAR_ARCHIVE,FUNCTION,35, v_step integer := 0; --
WS_JOB_CLEAR_ARCHIVE,FUNCTION,36, v_update_count integer := 0; -- no of records updated
WS_JOB_CLEAR_ARCHIVE,FUNCTION,37, v_insert_count integer := 0; -- no of records inserted
WS_JOB_CLEAR_ARCHIVE,FUNCTION,38, v_count integer := 0; -- General counter;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,39, v_delete_date date; -- delete date
WS_JOB_CLEAR_ARCHIVE,FUNCTION,40,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,41, v_row_count integer;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,42, v_count integer;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,43, v_job_sequence integer;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,44, v_job_key integer;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,45, v_audit_del_count integer;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,46, v_detail_del_count integer;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,47, v_job_status varchar2(1);
WS_JOB_CLEAR_ARCHIVE,FUNCTION,48,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,49,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,50,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,51, v_trunc_flag integer := 0;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,52, v_job varchar2(64);
WS_JOB_CLEAR_ARCHIVE,FUNCTION,53,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,54,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CLEAR_ARCHIVE,FUNCTION,55,BEGIN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,56, v_step := 10;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,57, v_audit_del_count := 0;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,58, v_detail_del_count := 0;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,59,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,60, -- If zero specified in logs to keep then return
WS_JOB_CLEAR_ARCHIVE,FUNCTION,61, IF p_day_count < 0
WS_JOB_CLEAR_ARCHIVE,FUNCTION,62, THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,63, p_return_code := 'W';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,64, p_return_msg := ' negative value passed in days to keep count. No action.';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,65, RETURN 1;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,66, END IF;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,67,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,68, -- set delete date
WS_JOB_CLEAR_ARCHIVE,FUNCTION,69, v_delete_date := sysdate - NVL(p_day_count,0);
WS_JOB_CLEAR_ARCHIVE,FUNCTION,70,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,71, v_job := NVL(p_job, '');
WS_JOB_CLEAR_ARCHIVE,FUNCTION,72,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,73, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,74, -- Process options
WS_JOB_CLEAR_ARCHIVE,FUNCTION,75, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,76,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,77, v_step := 100;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,78, IF p_options is not null
WS_JOB_CLEAR_ARCHIVE,FUNCTION,79, THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,80, IF UPPER(p_options) = 'TRUNCATE'
WS_JOB_CLEAR_ARCHIVE,FUNCTION,81, THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,82, v_trunc_flag := 1;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,83, END IF;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,84, END IF;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,85,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,86,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,87, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,88, -- Delete relevant archive records
WS_JOB_CLEAR_ARCHIVE,FUNCTION,89, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,90, v_step := 500;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,91,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,92, IF v_trunc_flag = 1
WS_JOB_CLEAR_ARCHIVE,FUNCTION,93, THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,94, v_step := 600;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,95, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,96, -- truncate audit and detail archive info
WS_JOB_CLEAR_ARCHIVE,FUNCTION,97, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,98, EXECUTE IMMEDIATE 'truncate table wx_wrk_audit_archive';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,99,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,100, EXECUTE IMMEDIATE 'truncate table wx_wrk_error_archive';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,101, ELSE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,102, v_step := 700;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,103, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,104, -- construct and process DELETE statements
WS_JOB_CLEAR_ARCHIVE,FUNCTION,105, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,106, IF LENGTH(v_job) > 0
WS_JOB_CLEAR_ARCHIVE,FUNCTION,107, THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,108, v_step := 710;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,109,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,110, -- set delete date
WS_JOB_CLEAR_ARCHIVE,FUNCTION,111, --v_delete_date := sysdate - p_day_count;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,112,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,113, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,114, -- delete includes job name (possibly with wildcard)
WS_JOB_CLEAR_ARCHIVE,FUNCTION,115, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,116, DELETE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,117, FROM wx_wrk_audit_archive
WS_JOB_CLEAR_ARCHIVE,FUNCTION,118, WHERE wa_time_stamp < v_delete_date
WS_JOB_CLEAR_ARCHIVE,FUNCTION,119, AND wa_job like p_job;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,120,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,121, v_audit_del_count := SQL%ROWCOUNT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,122, COMMIT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,123,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,124, DELETE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,125, FROM wx_wrk_error_archive
WS_JOB_CLEAR_ARCHIVE,FUNCTION,126, WHERE wd_time_stamp < v_delete_date
WS_JOB_CLEAR_ARCHIVE,FUNCTION,127, AND wd_job like p_job;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,128,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,129,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,130, v_detail_del_count := SQL%ROWCOUNT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,131, COMMIT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,132,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,133, ELSE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,134, v_step := 720;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,135, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,136, -- Delete based on just the day count
WS_JOB_CLEAR_ARCHIVE,FUNCTION,137, --***********************************************************************
WS_JOB_CLEAR_ARCHIVE,FUNCTION,138, DELETE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,139, FROM wx_wrk_audit_archive
WS_JOB_CLEAR_ARCHIVE,FUNCTION,140, WHERE wa_time_stamp < v_delete_date;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,141,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,142, v_audit_del_count := SQL%ROWCOUNT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,143, COMMIT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,144,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,145, DELETE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,146, FROM wx_wrk_error_archive
WS_JOB_CLEAR_ARCHIVE,FUNCTION,147, WHERE wd_time_stamp < v_delete_date;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,148,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,149, v_detail_del_count := SQL%ROWCOUNT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,150, COMMIT;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,151, END IF; -- end if length(v_job)
WS_JOB_CLEAR_ARCHIVE,FUNCTION,152,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,153, END IF; -- end if v_trunc_flag
WS_JOB_CLEAR_ARCHIVE,FUNCTION,154,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,155, v_step := 800;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,156,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,157, p_return_code := 'S';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,158,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,159, IF v_trunc_flag = 1
WS_JOB_CLEAR_ARCHIVE,FUNCTION,160, THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,161, p_return_msg := 'audit archive logs and detail archive logs tables truncated.';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,162, ELSE
WS_JOB_CLEAR_ARCHIVE,FUNCTION,163, p_return_msg := TO_CHAR(NVL(v_audit_del_count,0)) || ' audit archive logs removed and '
WS_JOB_CLEAR_ARCHIVE,FUNCTION,164, || TO_CHAR(NVL(v_detail_del_count,0)) || ' detail archive logs removed. ';
WS_JOB_CLEAR_ARCHIVE,FUNCTION,165, END IF;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,166,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,167, RETURN 1;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,168,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,169,EXCEPTION
WS_JOB_CLEAR_ARCHIVE,FUNCTION,170,WHEN OTHERS THEN
WS_JOB_CLEAR_ARCHIVE,FUNCTION,171, v_MsgText:= 'Unhandled Exception in Ws_Job_Clear_Archive. '||
WS_JOB_CLEAR_ARCHIVE,FUNCTION,172, ' Step ' ||v_step || ' '||SQLERRM;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,173, v_result := WsWrkAudit('F',p_job_name, p_task_name, p_sequence,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,174, v_MsgText,SQLCODE,SQLERRM,p_task_id, p_job_id);
WS_JOB_CLEAR_ARCHIVE,FUNCTION,175, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_CLEAR_ARCHIVE,FUNCTION,176,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,177,
WS_JOB_CLEAR_ARCHIVE,FUNCTION,178, RETURN -3;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,179,END Ws_Job_Clear_Archive;
WS_JOB_CLEAR_ARCHIVE,FUNCTION,180,
WS_JOB_CLEAR_LOGS,FUNCTION,1,function ws_job_clear_logs
WS_JOB_CLEAR_LOGS,FUNCTION,2, (
WS_JOB_CLEAR_LOGS,FUNCTION,3, p_sequence IN number,
WS_JOB_CLEAR_LOGS,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_CLEAR_LOGS,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_CLEAR_LOGS,FUNCTION,6, p_job_id IN number,
WS_JOB_CLEAR_LOGS,FUNCTION,7, p_task_id IN number,
WS_JOB_CLEAR_LOGS,FUNCTION,8, p_job_to_clean IN varchar2,
WS_JOB_CLEAR_LOGS,FUNCTION,9, p_log_keep IN number,
WS_JOB_CLEAR_LOGS,FUNCTION,10, p_return_code OUT varchar2,
WS_JOB_CLEAR_LOGS,FUNCTION,11, p_return_msg OUT varchar2
WS_JOB_CLEAR_LOGS,FUNCTION,12, )
WS_JOB_CLEAR_LOGS,FUNCTION,13, Return integer
WS_JOB_CLEAR_LOGS,FUNCTION,14, AUTHID CURRENT_USER
WS_JOB_CLEAR_LOGS,FUNCTION,15, IS
WS_JOB_CLEAR_LOGS,FUNCTION,16,
WS_JOB_CLEAR_LOGS,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_CLEAR_LOGS,FUNCTION,18,
WS_JOB_CLEAR_LOGS,FUNCTION,19, -- =============================================================================
WS_JOB_CLEAR_LOGS,FUNCTION,20, -- DBMS Name : Oracle
WS_JOB_CLEAR_LOGS,FUNCTION,21, -- Script Name : ws_job_clear_logs
WS_JOB_CLEAR_LOGS,FUNCTION,22, -- Description : Removes a set number of log files for a job
WS_JOB_CLEAR_LOGS,FUNCTION,23, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CLEAR_LOGS,FUNCTION,24, -- =============================================================================
WS_JOB_CLEAR_LOGS,FUNCTION,25,
WS_JOB_CLEAR_LOGS,FUNCTION,26, --=====================================================
WS_JOB_CLEAR_LOGS,FUNCTION,27, -- Variables
WS_JOB_CLEAR_LOGS,FUNCTION,28, --=====================================================
WS_JOB_CLEAR_LOGS,FUNCTION,29, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_CLEAR_LOGS,FUNCTION,30, v_step integer := 0; -- return code
WS_JOB_CLEAR_LOGS,FUNCTION,31, v_result integer := 0; -- return code
WS_JOB_CLEAR_LOGS,FUNCTION,32, v_count integer := 0;
WS_JOB_CLEAR_LOGS,FUNCTION,33, v_job_sequence integer;
WS_JOB_CLEAR_LOGS,FUNCTION,34, v_job_key integer;
WS_JOB_CLEAR_LOGS,FUNCTION,35, v_job_status varchar2(1);
WS_JOB_CLEAR_LOGS,FUNCTION,36, v_job_count integer := 0;
WS_JOB_CLEAR_LOGS,FUNCTION,37, v_del_count integer := 0;
WS_JOB_CLEAR_LOGS,FUNCTION,38, v_job_status varchar2(1);
WS_JOB_CLEAR_LOGS,FUNCTION,39,
WS_JOB_CLEAR_LOGS,FUNCTION,40, --=====================================================
WS_JOB_CLEAR_LOGS,FUNCTION,41, -- Cursor for all job logs
WS_JOB_CLEAR_LOGS,FUNCTION,42, --=====================================================
WS_JOB_CLEAR_LOGS,FUNCTION,43, Cursor c_Logs is
WS_JOB_CLEAR_LOGS,FUNCTION,44, Select wjl_job_key, wjl_sequence
WS_JOB_CLEAR_LOGS,FUNCTION,45, from ws_wrk_job_log
WS_JOB_CLEAR_LOGS,FUNCTION,46, Where wjl_name = p_job_to_clean
WS_JOB_CLEAR_LOGS,FUNCTION,47, Order by wjl_sequence desc;
WS_JOB_CLEAR_LOGS,FUNCTION,48,
WS_JOB_CLEAR_LOGS,FUNCTION,49,
WS_JOB_CLEAR_LOGS,FUNCTION,50,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CLEAR_LOGS,FUNCTION,51,BEGIN
WS_JOB_CLEAR_LOGS,FUNCTION,52,
WS_JOB_CLEAR_LOGS,FUNCTION,53, v_step := 10;
WS_JOB_CLEAR_LOGS,FUNCTION,54, -- If zero specified in logs to keep then return
WS_JOB_CLEAR_LOGS,FUNCTION,55, If p_log_keep < 0 Then
WS_JOB_CLEAR_LOGS,FUNCTION,56, p_return_code := 'W';
WS_JOB_CLEAR_LOGS,FUNCTION,57, p_return_msg := 'Job '|| p_job_to_clean ||' negative value passed in log keep count. No action.';
WS_JOB_CLEAR_LOGS,FUNCTION,58, RETURN 1;
WS_JOB_CLEAR_LOGS,FUNCTION,59, End If;
WS_JOB_CLEAR_LOGS,FUNCTION,60,
WS_JOB_CLEAR_LOGS,FUNCTION,61, --***********************************************************************
WS_JOB_CLEAR_LOGS,FUNCTION,62, -- Loop through all the logs in descending order skip over the first
WS_JOB_CLEAR_LOGS,FUNCTION,63, -- n that are to be kept
WS_JOB_CLEAR_LOGS,FUNCTION,64, --***********************************************************************
WS_JOB_CLEAR_LOGS,FUNCTION,65, FOR v_LogRec in c_Logs LOOP
WS_JOB_CLEAR_LOGS,FUNCTION,66,
WS_JOB_CLEAR_LOGS,FUNCTION,67, v_job_count := v_job_count + 1;
WS_JOB_CLEAR_LOGS,FUNCTION,68,
WS_JOB_CLEAR_LOGS,FUNCTION,69, If v_job_count > p_log_keep Then
WS_JOB_CLEAR_LOGS,FUNCTION,70,
WS_JOB_CLEAR_LOGS,FUNCTION,71, -- Have a log to delete so move the tasks, job, audit and error info
WS_JOB_CLEAR_LOGS,FUNCTION,72,
WS_JOB_CLEAR_LOGS,FUNCTION,73, -- Copy the audit info to archive
WS_JOB_CLEAR_LOGS,FUNCTION,74, INSERT INTO wx_wrk_audit_archive (
WS_JOB_CLEAR_LOGS,FUNCTION,75, wa_time_stamp, wa_sequence, wa_job, wa_task, wa_status, wa_message,
WS_JOB_CLEAR_LOGS,FUNCTION,76, wa_db_msg_code, wa_db_msg_desc, wa_task_key, wa_job_key, wa_row_number )
WS_JOB_CLEAR_LOGS,FUNCTION,77, SELECT
WS_JOB_CLEAR_LOGS,FUNCTION,78, wa_time_stamp, wa_sequence, wa_job, wa_task, wa_status, wa_message,
WS_JOB_CLEAR_LOGS,FUNCTION,79, wa_db_msg_code, wa_db_msg_desc, wa_task_key, wa_job_key, wa_row_number
WS_JOB_CLEAR_LOGS,FUNCTION,80, FROM
WS_JOB_CLEAR_LOGS,FUNCTION,81, ws_wrk_audit_log
WS_JOB_CLEAR_LOGS,FUNCTION,82, WHERE wa_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS,FUNCTION,83, AND wa_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS,FUNCTION,84,
WS_JOB_CLEAR_LOGS,FUNCTION,85, v_del_count := v_del_count + 1;
WS_JOB_CLEAR_LOGS,FUNCTION,86,
WS_JOB_CLEAR_LOGS,FUNCTION,87, -- Delete the audit info
WS_JOB_CLEAR_LOGS,FUNCTION,88, DELETE FROM ws_wrk_audit_log
WS_JOB_CLEAR_LOGS,FUNCTION,89, WHERE wa_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS,FUNCTION,90, AND wa_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS,FUNCTION,91,
WS_JOB_CLEAR_LOGS,FUNCTION,92, -- Copy the detail info to archive
WS_JOB_CLEAR_LOGS,FUNCTION,93, INSERT INTO wx_wrk_error_archive (
WS_JOB_CLEAR_LOGS,FUNCTION,94, wd_time_stamp, wd_sequence, wd_job, wd_task, wd_status, wd_message,
WS_JOB_CLEAR_LOGS,FUNCTION,95, wd_db_msg_code, wd_db_msg_desc, wd_task_key, wd_job_key, wd_row_number,
WS_JOB_CLEAR_LOGS,FUNCTION,96, wd_severity, wd_action )
WS_JOB_CLEAR_LOGS,FUNCTION,97, SELECT
WS_JOB_CLEAR_LOGS,FUNCTION,98, wd_time_stamp, wd_sequence, wd_job, wd_task, wd_status, wd_message,
WS_JOB_CLEAR_LOGS,FUNCTION,99, wd_db_msg_code, wd_db_msg_desc, wd_task_key, wd_job_key, wd_row_number,
WS_JOB_CLEAR_LOGS,FUNCTION,100, wd_severity, wd_action
WS_JOB_CLEAR_LOGS,FUNCTION,101, FROM
WS_JOB_CLEAR_LOGS,FUNCTION,102, ws_wrk_error_log
WS_JOB_CLEAR_LOGS,FUNCTION,103, WHERE wd_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS,FUNCTION,104, AND wd_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS,FUNCTION,105,
WS_JOB_CLEAR_LOGS,FUNCTION,106, v_del_count := v_del_count + 1;
WS_JOB_CLEAR_LOGS,FUNCTION,107,
WS_JOB_CLEAR_LOGS,FUNCTION,108, -- Delete the detail info
WS_JOB_CLEAR_LOGS,FUNCTION,109, DELETE FROM ws_wrk_error_log
WS_JOB_CLEAR_LOGS,FUNCTION,110, WHERE wd_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS,FUNCTION,111, AND wd_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS,FUNCTION,112,
WS_JOB_CLEAR_LOGS,FUNCTION,113, -- Delete the task log
WS_JOB_CLEAR_LOGS,FUNCTION,114, DELETE FROM ws_wrk_task_log
WS_JOB_CLEAR_LOGS,FUNCTION,115, WHERE wtl_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS,FUNCTION,116, AND wtl_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS,FUNCTION,117,
WS_JOB_CLEAR_LOGS,FUNCTION,118, -- Delete the job log
WS_JOB_CLEAR_LOGS,FUNCTION,119, DELETE FROM ws_wrk_job_log
WS_JOB_CLEAR_LOGS,FUNCTION,120, WHERE wjl_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS,FUNCTION,121, AND wjl_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS,FUNCTION,122,
WS_JOB_CLEAR_LOGS,FUNCTION,123, End If;
WS_JOB_CLEAR_LOGS,FUNCTION,124,
WS_JOB_CLEAR_LOGS,FUNCTION,125, END LOOP;
WS_JOB_CLEAR_LOGS,FUNCTION,126,
WS_JOB_CLEAR_LOGS,FUNCTION,127, COMMIT;
WS_JOB_CLEAR_LOGS,FUNCTION,128,
WS_JOB_CLEAR_LOGS,FUNCTION,129, p_return_code := 'S';
WS_JOB_CLEAR_LOGS,FUNCTION,130, p_return_msg := 'Job ' || p_job_to_clean || ' had ' ||
WS_JOB_CLEAR_LOGS,FUNCTION,131, v_del_count || ' logs removed. ';
WS_JOB_CLEAR_LOGS,FUNCTION,132,
WS_JOB_CLEAR_LOGS,FUNCTION,133, RETURN 1;
WS_JOB_CLEAR_LOGS,FUNCTION,134,
WS_JOB_CLEAR_LOGS,FUNCTION,135,EXCEPTION
WS_JOB_CLEAR_LOGS,FUNCTION,136, WHEN OTHERS THEN
WS_JOB_CLEAR_LOGS,FUNCTION,137, p_return_code := 'W';
WS_JOB_CLEAR_LOGS,FUNCTION,138, v_MsgText := 'Unhandled Exception in ws_job_clear_logs. '||
WS_JOB_CLEAR_LOGS,FUNCTION,139, ' Step ' ||v_step;
WS_JOB_CLEAR_LOGS,FUNCTION,140, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_JOB_CLEAR_LOGS,FUNCTION,141, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_CLEAR_LOGS,FUNCTION,142, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_CLEAR_LOGS,FUNCTION,143, RETURN -3;
WS_JOB_CLEAR_LOGS,FUNCTION,144,
WS_JOB_CLEAR_LOGS,FUNCTION,145,END ws_job_clear_logs;
WS_JOB_CLEAR_LOGS,FUNCTION,146,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,1,function ws_job_clear_logs_by_date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,2, (
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,3, p_sequence IN number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,6, p_job_id IN number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,7, p_task_id IN number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,8, p_job_to_clean IN varchar2,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,9, p_day_count IN number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,10, p_return_code OUT varchar2,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,11, p_return_msg OUT varchar2
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,12, )
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,13, Return integer
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,14, AUTHID CURRENT_USER
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,15, IS
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,16,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,18,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,19, -- =============================================================================
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,20, -- DBMS Name : Oracle
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,21, -- Script Name : ws_job_clear_logs_by_date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,22, -- Description : Removes a set number of days logs
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,23, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,24, -- =============================================================================
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,25,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,26, --=====================================================
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,27, -- Variables
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,28, --=====================================================
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,29, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,30, v_step integer := 0; -- return code
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,31, v_result integer := 0; -- return code
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,32, v_count integer := 0;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,33, v_job_sequence integer;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,34, v_job_key integer;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,35, v_job_status varchar2(1);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,36, v_job_count integer := 0;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,37, v_del_count integer := 0;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,38, v_job_status varchar2(1);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,39, v_delete_date date; -- delete date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,40,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,41, --=====================================================
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,42, -- Cursor for all job logs
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,43, --=====================================================
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,44, Cursor c_Logs is
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,45, Select wjl_job_key, wjl_sequence
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,46, from ws_wrk_job_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,47, Where wjl_name like p_job_to_clean
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,48, And wjl_completed < v_delete_date;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,49,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,50,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,51,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,52,BEGIN
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,53,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,54, v_step := 10;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,55, -- If zero days specified in logs to keep then return
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,56, If p_day_count < 0 Then
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,57, p_return_code := 'W';
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,58, p_return_msg := 'Job '|| p_job_to_clean ||' negative value passed in retain days value. No action.';
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,59, RETURN 1;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,60, End If;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,61,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,62, -- set delete date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,63, v_delete_date := sysdate - p_day_count;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,64,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,65, --***********************************************************************
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,66, -- Loop through all the logs in descending order skip over the first
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,67, -- n that are to be kept
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,68, --***********************************************************************
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,69, FOR v_LogRec in c_Logs LOOP
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,70,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,71, v_job_count := v_job_count + 1;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,72,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,73, -- Have a log to delete so move the tasks, job, audit and error info
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,74,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,75, -- Copy the audit info to archive
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,76, INSERT INTO wx_wrk_audit_archive (
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,77, wa_time_stamp, wa_sequence, wa_job, wa_task, wa_status, wa_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,78, wa_db_msg_code, wa_db_msg_desc, wa_task_key, wa_job_key, wa_row_number )
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,79, SELECT
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,80, wa_time_stamp, wa_sequence, wa_job, wa_task, wa_status, wa_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,81, wa_db_msg_code, wa_db_msg_desc, wa_task_key, wa_job_key, wa_row_number
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,82, FROM
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,83, ws_wrk_audit_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,84, WHERE wa_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,85, AND wa_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,86,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,87,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,88, -- Delete the audit info
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,89, DELETE FROM ws_wrk_audit_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,90, WHERE wa_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,91, AND wa_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,92,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,93, -- Copy the detail info to archive
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,94, INSERT INTO wx_wrk_error_archive (
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,95, wd_time_stamp, wd_sequence, wd_job, wd_task, wd_status, wd_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,96, wd_db_msg_code, wd_db_msg_desc, wd_task_key, wd_job_key, wd_row_number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,97, wd_severity, wd_action )
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,98, SELECT
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,99, wd_time_stamp, wd_sequence, wd_job, wd_task, wd_status, wd_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,100, wd_db_msg_code, wd_db_msg_desc, wd_task_key, wd_job_key, wd_row_number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,101, wd_severity, wd_action
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,102, FROM
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,103, ws_wrk_error_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,104, WHERE wd_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,105, AND wd_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,106,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,107, v_del_count := v_del_count + 1;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,108,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,109, -- Delete the detail info
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,110, DELETE FROM ws_wrk_error_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,111, WHERE wd_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,112, AND wd_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,113,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,114, -- Delete the task log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,115, DELETE FROM ws_wrk_task_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,116, WHERE wtl_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,117, AND wtl_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,118,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,119, -- Delete the job log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,120, DELETE FROM ws_wrk_job_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,121, WHERE wjl_job_key = v_LogRec.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,122, AND wjl_sequence = v_LogRec.wjl_sequence;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,123,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,124,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,125, END LOOP;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,126,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,127, COMMIT;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,128,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,129, --***********************************************************************
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,130, -- Archive Detail and audit info for records with no parent in job log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,131, --***********************************************************************
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,132, -- Copy the audit info to archive
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,133, INSERT INTO wx_wrk_audit_archive (
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,134, wa_time_stamp, wa_sequence, wa_job, wa_task, wa_status, wa_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,135, wa_db_msg_code, wa_db_msg_desc, wa_task_key, wa_job_key, wa_row_number )
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,136, SELECT
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,137, wa_time_stamp, wa_sequence, wa_job, wa_task, wa_status, wa_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,138, wa_db_msg_code, wa_db_msg_desc, wa_task_key, wa_job_key, wa_row_number
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,139, FROM
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,140, ws_wrk_audit_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,141, WHERE wa_time_stamp < v_delete_date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,142, AND NOT EXISTS (SELECT 1
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,143, FROM ws_wrk_job_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,144, WHERE ws_wrk_audit_log.wa_job_key = ws_wrk_job_log.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,145, AND ws_wrk_audit_log.wa_sequence = ws_wrk_job_log.wjl_sequence);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,146,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,147,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,148, -- Delete the audit info
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,149, DELETE FROM ws_wrk_audit_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,150, WHERE wa_time_stamp < v_delete_date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,151, AND NOT EXISTS (SELECT 1
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,152, FROM ws_wrk_job_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,153, WHERE ws_wrk_audit_log.wa_job_key = ws_wrk_job_log.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,154, AND ws_wrk_audit_log.wa_sequence = ws_wrk_job_log.wjl_sequence);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,155,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,156, -- Copy the detail info to archive
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,157, INSERT INTO wx_wrk_error_archive (
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,158, wd_time_stamp, wd_sequence, wd_job, wd_task, wd_status, wd_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,159, wd_db_msg_code, wd_db_msg_desc, wd_task_key, wd_job_key, wd_row_number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,160, wd_severity, wd_action )
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,161, SELECT
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,162, wd_time_stamp, wd_sequence, wd_job, wd_task, wd_status, wd_message,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,163, wd_db_msg_code, wd_db_msg_desc, wd_task_key, wd_job_key, wd_row_number,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,164, wd_severity, wd_action
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,165, FROM
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,166, ws_wrk_error_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,167, WHERE wd_time_stamp < v_delete_date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,168, AND NOT EXISTS (SELECT 1
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,169, FROM ws_wrk_job_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,170, WHERE ws_wrk_error_log.wd_job_key = ws_wrk_job_log.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,171, AND ws_wrk_error_log.wd_sequence = ws_wrk_job_log.wjl_sequence);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,172,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,173, -- Delete the detail info
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,174, DELETE FROM ws_wrk_error_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,175, WHERE wd_time_stamp < v_delete_date
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,176, AND NOT EXISTS (SELECT 1
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,177, FROM ws_wrk_job_log
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,178, WHERE ws_wrk_error_log.wd_job_key = ws_wrk_job_log.wjl_job_key
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,179, AND ws_wrk_error_log.wd_sequence = ws_wrk_job_log.wjl_sequence);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,180,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,181,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,182, p_return_code := 'S';
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,183, p_return_msg := 'Job ' || p_job_to_clean || ' had ' ||
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,184, v_del_count || ' logs removed. ';
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,185,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,186, RETURN 1;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,187,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,188,EXCEPTION
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,189, WHEN OTHERS THEN
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,190, p_return_code := 'W';
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,191, v_MsgText := 'Unhandled Exception in ws_job_clear_logs_by_date. '||
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,192, ' Step ' ||v_step;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,193, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,194, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,195, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,196, RETURN -3;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,197,
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,198,END ws_job_clear_logs_by_date;
WS_JOB_CLEAR_LOGS_BY_DATE,FUNCTION,199,
WS_JOB_CREATE,FUNCTION,1,function ws_job_create
WS_JOB_CREATE,FUNCTION,2, (
WS_JOB_CREATE,FUNCTION,3, p_sequence IN number,
WS_JOB_CREATE,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_CREATE,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_CREATE,FUNCTION,6, p_job_id IN number,
WS_JOB_CREATE,FUNCTION,7, p_task_id IN number,
WS_JOB_CREATE,FUNCTION,8, p_template_job IN varchar2,
WS_JOB_CREATE,FUNCTION,9, p_new_job IN varchar2,
WS_JOB_CREATE,FUNCTION,10, p_description IN varchar2,
WS_JOB_CREATE,FUNCTION,11, p_state IN varchar2,
WS_JOB_CREATE,FUNCTION,12, p_threads IN number,
WS_JOB_CREATE,FUNCTION,13, p_scheduler IN varchar2,
WS_JOB_CREATE,FUNCTION,14, p_logs IN number,
WS_JOB_CREATE,FUNCTION,15, p_okay IN varchar2,
WS_JOB_CREATE,FUNCTION,16, p_fail IN varchar2,
WS_JOB_CREATE,FUNCTION,17, p_att1 IN varchar2,
WS_JOB_CREATE,FUNCTION,18, p_att2 IN varchar2,
WS_JOB_CREATE,FUNCTION,19, p_att3 IN varchar2,
WS_JOB_CREATE,FUNCTION,20, p_att4 IN varchar2,
WS_JOB_CREATE,FUNCTION,21, p_att5 IN varchar2,
WS_JOB_CREATE,FUNCTION,22, p_att6 IN varchar2,
WS_JOB_CREATE,FUNCTION,23, p_att7 IN varchar2,
WS_JOB_CREATE,FUNCTION,24, p_att8 IN varchar2,
WS_JOB_CREATE,FUNCTION,25, p_return_code OUT varchar2,
WS_JOB_CREATE,FUNCTION,26, p_return_msg OUT varchar2
WS_JOB_CREATE,FUNCTION,27, )
WS_JOB_CREATE,FUNCTION,28, Return integer
WS_JOB_CREATE,FUNCTION,29, AUTHID CURRENT_USER
WS_JOB_CREATE,FUNCTION,30, IS
WS_JOB_CREATE,FUNCTION,31,
WS_JOB_CREATE,FUNCTION,32, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_CREATE,FUNCTION,33,
WS_JOB_CREATE,FUNCTION,34, -- =============================================================================
WS_JOB_CREATE,FUNCTION,35, -- DBMS Name : Oracle
WS_JOB_CREATE,FUNCTION,36, -- Script Name : ws_job_create
WS_JOB_CREATE,FUNCTION,37, -- Description : Releases a held or waiting job
WS_JOB_CREATE,FUNCTION,38, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CREATE,FUNCTION,39, -- =============================================================================
WS_JOB_CREATE,FUNCTION,40,
WS_JOB_CREATE,FUNCTION,41, --=====================================================
WS_JOB_CREATE,FUNCTION,42, -- Variables
WS_JOB_CREATE,FUNCTION,43, --=====================================================
WS_JOB_CREATE,FUNCTION,44, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_CREATE,FUNCTION,45, v_step integer := 0; -- return code
WS_JOB_CREATE,FUNCTION,46, v_result integer := 0; -- return code
WS_JOB_CREATE,FUNCTION,47, v_count integer := 0;
WS_JOB_CREATE,FUNCTION,48, v_part_count integer := 0;
WS_JOB_CREATE,FUNCTION,49, v_specific_index integer := 0;
WS_JOB_CREATE,FUNCTION,50, v_specific_part integer := 0;
WS_JOB_CREATE,FUNCTION,51, v_status number := 0;
WS_JOB_CREATE,FUNCTION,52, v_status_code number := 0;
WS_JOB_CREATE,FUNCTION,53, v_msg varchar2(4000);
WS_JOB_CREATE,FUNCTION,54, v_old_key integer;
WS_JOB_CREATE,FUNCTION,55, v_old_sequence integer;
WS_JOB_CREATE,FUNCTION,56, v_old_status varchar2(1);
WS_JOB_CREATE,FUNCTION,57, v_new_key integer;
WS_JOB_CREATE,FUNCTION,58, v_new_sequence integer;
WS_JOB_CREATE,FUNCTION,59, v_wjc_status varchar2(1);
WS_JOB_CREATE,FUNCTION,60, v_wjc_type varchar2(1);
WS_JOB_CREATE,FUNCTION,61,
WS_JOB_CREATE,FUNCTION,62,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CREATE,FUNCTION,63,BEGIN
WS_JOB_CREATE,FUNCTION,64,
WS_JOB_CREATE,FUNCTION,65, v_step := 10;
WS_JOB_CREATE,FUNCTION,66, --***********************************************************************
WS_JOB_CREATE,FUNCTION,67, -- First see if the job name specified is in a held or waiting state
WS_JOB_CREATE,FUNCTION,68, -- If not in a held or waiting state report and exit
WS_JOB_CREATE,FUNCTION,69, --***********************************************************************
WS_JOB_CREATE,FUNCTION,70, BEGIN
WS_JOB_CREATE,FUNCTION,71, Select wjc_job_key, wjc_sequence, wjc_status
WS_JOB_CREATE,FUNCTION,72, Into v_old_key, v_old_sequence, v_old_status
WS_JOB_CREATE,FUNCTION,73, From ws_wrk_job_ctrl
WS_JOB_CREATE,FUNCTION,74, Where rtrim(upper(wjc_name)) = rtrim(upper(p_template_job));
WS_JOB_CREATE,FUNCTION,75, EXCEPTION WHEN OTHERS THEN
WS_JOB_CREATE,FUNCTION,76, v_old_key := 0;
WS_JOB_CREATE,FUNCTION,77, END;
WS_JOB_CREATE,FUNCTION,78,
WS_JOB_CREATE,FUNCTION,79, v_step := 20;
WS_JOB_CREATE,FUNCTION,80, --***********************************************************************
WS_JOB_CREATE,FUNCTION,81, -- If not scheduled exit with that information
WS_JOB_CREATE,FUNCTION,82, --***********************************************************************
WS_JOB_CREATE,FUNCTION,83, If nvl(v_old_key,0) = 0 Then
WS_JOB_CREATE,FUNCTION,84, p_return_msg := 'Job '||p_template_job||' is not in a holding or waiting state. Cannot create new job';
WS_JOB_CREATE,FUNCTION,85, p_return_code := 'N';
WS_JOB_CREATE,FUNCTION,86, return -1;
WS_JOB_CREATE,FUNCTION,87, End If;
WS_JOB_CREATE,FUNCTION,88,
WS_JOB_CREATE,FUNCTION,89, v_step := 30;
WS_JOB_CREATE,FUNCTION,90, --***********************************************************************
WS_JOB_CREATE,FUNCTION,91, -- Make sure we have no job that matches our new job name
WS_JOB_CREATE,FUNCTION,92, --***********************************************************************
WS_JOB_CREATE,FUNCTION,93, BEGIN
WS_JOB_CREATE,FUNCTION,94, Select count(*)
WS_JOB_CREATE,FUNCTION,95, Into v_count
WS_JOB_CREATE,FUNCTION,96, From ws_wrk_job_ctrl
WS_JOB_CREATE,FUNCTION,97, Where rtrim(upper(wjc_name)) = rtrim(upper(p_new_job));
WS_JOB_CREATE,FUNCTION,98, EXCEPTION WHEN OTHERS THEN
WS_JOB_CREATE,FUNCTION,99, v_count := 1;
WS_JOB_CREATE,FUNCTION,100, END;
WS_JOB_CREATE,FUNCTION,101,
WS_JOB_CREATE,FUNCTION,102, IF v_count > 0 THEN
WS_JOB_CREATE,FUNCTION,103, p_return_msg := 'Job '||p_new_job||' already exists. Cannot create a new job of the same name';
WS_JOB_CREATE,FUNCTION,104, p_return_code := 'P';
WS_JOB_CREATE,FUNCTION,105, return -1;
WS_JOB_CREATE,FUNCTION,106, END IF;
WS_JOB_CREATE,FUNCTION,107,
WS_JOB_CREATE,FUNCTION,108, v_step := 60;
WS_JOB_CREATE,FUNCTION,109, --***********************************************************************
WS_JOB_CREATE,FUNCTION,110, -- Get the right state for the new job and the sequence
WS_JOB_CREATE,FUNCTION,111, --***********************************************************************
WS_JOB_CREATE,FUNCTION,112, IF rtrim(upper(p_state)) = 'ONCE' THEN
WS_JOB_CREATE,FUNCTION,113, v_wjc_status := 'W';
WS_JOB_CREATE,FUNCTION,114, v_wjc_type := 'O';
WS_JOB_CREATE,FUNCTION,115, ELSIF rtrim(upper(p_state)) = 'ONCE+HOLD' THEN
WS_JOB_CREATE,FUNCTION,116, v_wjc_status := 'W';
WS_JOB_CREATE,FUNCTION,117, v_wjc_type := 'S';
WS_JOB_CREATE,FUNCTION,118, ELSE
WS_JOB_CREATE,FUNCTION,119, v_wjc_status := 'H';
WS_JOB_CREATE,FUNCTION,120, v_wjc_type := 'H';
WS_JOB_CREATE,FUNCTION,121, END IF;
WS_JOB_CREATE,FUNCTION,122,
WS_JOB_CREATE,FUNCTION,123, SELECT ws_job_seq.nextval INTO v_new_sequence FROM dual;
WS_JOB_CREATE,FUNCTION,124,
WS_JOB_CREATE,FUNCTION,125,
WS_JOB_CREATE,FUNCTION,126, v_step := 70;
WS_JOB_CREATE,FUNCTION,127, --***********************************************************************
WS_JOB_CREATE,FUNCTION,128, -- Add the new job in a held state, so that we can add the tasks/dependencies
WS_JOB_CREATE,FUNCTION,129, --***********************************************************************
WS_JOB_CREATE,FUNCTION,130, BEGIN
WS_JOB_CREATE,FUNCTION,131, INSERT into ws_wrk_job_ctrl
WS_JOB_CREATE,FUNCTION,132, (
WS_JOB_CREATE,FUNCTION,133, wjc_job_key
WS_JOB_CREATE,FUNCTION,134, , wjc_name
WS_JOB_CREATE,FUNCTION,135, , wjc_description
WS_JOB_CREATE,FUNCTION,136, , wjc_sequence
WS_JOB_CREATE,FUNCTION,137, , wjc_group_key
WS_JOB_CREATE,FUNCTION,138, , wjc_project_key
WS_JOB_CREATE,FUNCTION,139, , wjc_status
WS_JOB_CREATE,FUNCTION,140, , wjc_last_status
WS_JOB_CREATE,FUNCTION,141, , wjc_type
WS_JOB_CREATE,FUNCTION,142, , wjc_submitted
WS_JOB_CREATE,FUNCTION,143, , wjc_first_schedule
WS_JOB_CREATE,FUNCTION,144, , wjc_start_hour
WS_JOB_CREATE,FUNCTION,145, , wjc_start_minute
WS_JOB_CREATE,FUNCTION,146, , wjc_start_day
WS_JOB_CREATE,FUNCTION,147, , wjc_user_key
WS_JOB_CREATE,FUNCTION,148, , wjc_start_after
WS_JOB_CREATE,FUNCTION,149, , wjc_started
WS_JOB_CREATE,FUNCTION,150, , wjc_completed
WS_JOB_CREATE,FUNCTION,151, , wjc_max_elapsed
WS_JOB_CREATE,FUNCTION,152, , wjc_task_elapsed
WS_JOB_CREATE,FUNCTION,153, , wjc_avg_elapsed
WS_JOB_CREATE,FUNCTION,154, , wjc_avg_count
WS_JOB_CREATE,FUNCTION,155, , wjc_publish_okay
WS_JOB_CREATE,FUNCTION,156, , wjc_publish_fail
WS_JOB_CREATE,FUNCTION,157, , wjc_task_fatal
WS_JOB_CREATE,FUNCTION,158, , wjc_task_error
WS_JOB_CREATE,FUNCTION,159, , wjc_task_warning
WS_JOB_CREATE,FUNCTION,160, , wjc_task_info
WS_JOB_CREATE,FUNCTION,161, , wjc_task_okay
WS_JOB_CREATE,FUNCTION,162, , wjc_chkp_count
WS_JOB_CREATE,FUNCTION,163, , wjc_max_threads
WS_JOB_CREATE,FUNCTION,164, , wjc_priority
WS_JOB_CREATE,FUNCTION,165, , wjc_publish_flag
WS_JOB_CREATE,FUNCTION,166, , wjc_scheduler
WS_JOB_CREATE,FUNCTION,167, , wjc_cust_sa_hh
WS_JOB_CREATE,FUNCTION,168, , wjc_cust_sa_mm
WS_JOB_CREATE,FUNCTION,169, , wjc_cust_sb_hh
WS_JOB_CREATE,FUNCTION,170, , wjc_cust_sb_mm
WS_JOB_CREATE,FUNCTION,171, , wjc_cust_min
WS_JOB_CREATE,FUNCTION,172, , wjc_cust_days
WS_JOB_CREATE,FUNCTION,173, )
WS_JOB_CREATE,FUNCTION,174, SELECT
WS_JOB_CREATE,FUNCTION,175, v_new_sequence
WS_JOB_CREATE,FUNCTION,176, , p_new_job
WS_JOB_CREATE,FUNCTION,177, , NVL(p_description,wjc_description)
WS_JOB_CREATE,FUNCTION,178, , v_new_sequence
WS_JOB_CREATE,FUNCTION,179, , wjc_group_key
WS_JOB_CREATE,FUNCTION,180, , wjc_project_key
WS_JOB_CREATE,FUNCTION,181, , 'H'
WS_JOB_CREATE,FUNCTION,182, , wjc_last_status
WS_JOB_CREATE,FUNCTION,183, , v_wjc_type
WS_JOB_CREATE,FUNCTION,184, , wjc_submitted
WS_JOB_CREATE,FUNCTION,185, , wjc_first_schedule
WS_JOB_CREATE,FUNCTION,186, , wjc_start_hour
WS_JOB_CREATE,FUNCTION,187, , wjc_start_minute
WS_JOB_CREATE,FUNCTION,188, , wjc_start_day
WS_JOB_CREATE,FUNCTION,189, , wjc_user_key
WS_JOB_CREATE,FUNCTION,190, , SYSDATE
WS_JOB_CREATE,FUNCTION,191, , wjc_started
WS_JOB_CREATE,FUNCTION,192, , wjc_completed
WS_JOB_CREATE,FUNCTION,193, , wjc_max_elapsed
WS_JOB_CREATE,FUNCTION,194, , wjc_task_elapsed
WS_JOB_CREATE,FUNCTION,195, , wjc_avg_elapsed
WS_JOB_CREATE,FUNCTION,196, , NVL(p_logs,wjc_avg_count)
WS_JOB_CREATE,FUNCTION,197, , NVL(p_okay,wjc_publish_okay)
WS_JOB_CREATE,FUNCTION,198, , NVL(p_fail,wjc_publish_fail)
WS_JOB_CREATE,FUNCTION,199, , wjc_task_fatal
WS_JOB_CREATE,FUNCTION,200, , wjc_task_error
WS_JOB_CREATE,FUNCTION,201, , wjc_task_warning
WS_JOB_CREATE,FUNCTION,202, , wjc_task_info
WS_JOB_CREATE,FUNCTION,203, , wjc_task_okay
WS_JOB_CREATE,FUNCTION,204, , wjc_chkp_count
WS_JOB_CREATE,FUNCTION,205, , NVL(p_threads,wjc_max_threads)
WS_JOB_CREATE,FUNCTION,206, , wjc_priority
WS_JOB_CREATE,FUNCTION,207, , wjc_publish_flag
WS_JOB_CREATE,FUNCTION,208, , NVL(p_scheduler,wjc_scheduler)
WS_JOB_CREATE,FUNCTION,209, , wjc_cust_sa_hh
WS_JOB_CREATE,FUNCTION,210, , wjc_cust_sa_mm
WS_JOB_CREATE,FUNCTION,211, , wjc_cust_sb_hh
WS_JOB_CREATE,FUNCTION,212, , wjc_cust_sb_mm
WS_JOB_CREATE,FUNCTION,213, , wjc_cust_min
WS_JOB_CREATE,FUNCTION,214, , wjc_cust_days
WS_JOB_CREATE,FUNCTION,215, FROM ws_wrk_job_ctrl
WS_JOB_CREATE,FUNCTION,216, Where wjc_job_key = v_old_key
WS_JOB_CREATE,FUNCTION,217, And wjc_status in ('H','W');
WS_JOB_CREATE,FUNCTION,218,
WS_JOB_CREATE,FUNCTION,219, --***********************************************************************
WS_JOB_CREATE,FUNCTION,220, -- Add all the tasks
WS_JOB_CREATE,FUNCTION,221, --***********************************************************************
WS_JOB_CREATE,FUNCTION,222, INSERT into ws_wrk_task_ctrl
WS_JOB_CREATE,FUNCTION,223, (
WS_JOB_CREATE,FUNCTION,224, wtc_task_key
WS_JOB_CREATE,FUNCTION,225, , wtc_job_key
WS_JOB_CREATE,FUNCTION,226, , wtc_obj_key
WS_JOB_CREATE,FUNCTION,227, , wtc_name
WS_JOB_CREATE,FUNCTION,228, , wtc_type
WS_JOB_CREATE,FUNCTION,229, , wtc_sequence
WS_JOB_CREATE,FUNCTION,230, , wtc_obj_type
WS_JOB_CREATE,FUNCTION,231, , wtc_action_type
WS_JOB_CREATE,FUNCTION,232, , wtc_order
WS_JOB_CREATE,FUNCTION,233, , wtc_order_a
WS_JOB_CREATE,FUNCTION,234, , wtc_order_b
WS_JOB_CREATE,FUNCTION,235, , wtc_order_c
WS_JOB_CREATE,FUNCTION,236, , wtc_run_status
WS_JOB_CREATE,FUNCTION,237, , wtc_audit_status
WS_JOB_CREATE,FUNCTION,238, , wtc_started
WS_JOB_CREATE,FUNCTION,239, , wtc_completed
WS_JOB_CREATE,FUNCTION,240, , wtc_avg_elapsed
WS_JOB_CREATE,FUNCTION,241, , wtc_avg_count
WS_JOB_CREATE,FUNCTION,242, , wtc_task_fatal
WS_JOB_CREATE,FUNCTION,243, , wtc_task_error
WS_JOB_CREATE,FUNCTION,244, , wtc_task_warning
WS_JOB_CREATE,FUNCTION,245, , wtc_task_info
WS_JOB_CREATE,FUNCTION,246, , wtc_task_okay
WS_JOB_CREATE,FUNCTION,247, , wtc_chkp_number
WS_JOB_CREATE,FUNCTION,248, , wtc_abort_level
WS_JOB_CREATE,FUNCTION,249, , wtc_action_ind
WS_JOB_CREATE,FUNCTION,250, )
WS_JOB_CREATE,FUNCTION,251, SELECT
WS_JOB_CREATE,FUNCTION,252, ws_task_seq.nextval
WS_JOB_CREATE,FUNCTION,253, , v_new_sequence
WS_JOB_CREATE,FUNCTION,254, , wtc_obj_key
WS_JOB_CREATE,FUNCTION,255, , wtc_name
WS_JOB_CREATE,FUNCTION,256, , wtc_type
WS_JOB_CREATE,FUNCTION,257, , v_new_sequence
WS_JOB_CREATE,FUNCTION,258, , wtc_obj_type
WS_JOB_CREATE,FUNCTION,259, , wtc_action_type
WS_JOB_CREATE,FUNCTION,260, , wtc_order
WS_JOB_CREATE,FUNCTION,261, , wtc_order_a
WS_JOB_CREATE,FUNCTION,262, , wtc_order_b
WS_JOB_CREATE,FUNCTION,263, , wtc_order_c
WS_JOB_CREATE,FUNCTION,264, , wtc_run_status
WS_JOB_CREATE,FUNCTION,265, , wtc_audit_status
WS_JOB_CREATE,FUNCTION,266, , wtc_started
WS_JOB_CREATE,FUNCTION,267, , wtc_completed
WS_JOB_CREATE,FUNCTION,268, , wtc_avg_elapsed
WS_JOB_CREATE,FUNCTION,269, , wtc_avg_count
WS_JOB_CREATE,FUNCTION,270, , wtc_task_fatal
WS_JOB_CREATE,FUNCTION,271, , wtc_task_error
WS_JOB_CREATE,FUNCTION,272, , wtc_task_warning
WS_JOB_CREATE,FUNCTION,273, , wtc_task_info
WS_JOB_CREATE,FUNCTION,274, , wtc_task_okay
WS_JOB_CREATE,FUNCTION,275, , wtc_chkp_number
WS_JOB_CREATE,FUNCTION,276, , wtc_abort_level
WS_JOB_CREATE,FUNCTION,277, , NVL(wtc_action_ind,'')
WS_JOB_CREATE,FUNCTION,278, FROM ws_wrk_task_ctrl
WS_JOB_CREATE,FUNCTION,279, Where wtc_job_key = v_old_key;
WS_JOB_CREATE,FUNCTION,280,
WS_JOB_CREATE,FUNCTION,281, --***********************************************************************
WS_JOB_CREATE,FUNCTION,282, -- Add all the dependencies
WS_JOB_CREATE,FUNCTION,283, --***********************************************************************
WS_JOB_CREATE,FUNCTION,284, INSERT into ws_wrk_dependency
WS_JOB_CREATE,FUNCTION,285, (
WS_JOB_CREATE,FUNCTION,286, wdp_job_key
WS_JOB_CREATE,FUNCTION,287, , wdp_parent_task_key
WS_JOB_CREATE,FUNCTION,288, , wdp_child_task_key
WS_JOB_CREATE,FUNCTION,289, )
WS_JOB_CREATE,FUNCTION,290, SELECT
WS_JOB_CREATE,FUNCTION,291, v_new_sequence,
WS_JOB_CREATE,FUNCTION,292, b_new.wtc_task_key,
WS_JOB_CREATE,FUNCTION,293, c_new.wtc_task_key
WS_JOB_CREATE,FUNCTION,294, FROM
WS_JOB_CREATE,FUNCTION,295, ws_wrk_dependency a,
WS_JOB_CREATE,FUNCTION,296, ws_wrk_task_ctrl b_old,
WS_JOB_CREATE,FUNCTION,297, ws_wrk_task_ctrl c_old,
WS_JOB_CREATE,FUNCTION,298, ws_wrk_task_ctrl b_new,
WS_JOB_CREATE,FUNCTION,299, ws_wrk_task_ctrl c_new
WS_JOB_CREATE,FUNCTION,300, WHERE a.wdp_job_key = v_old_key
WS_JOB_CREATE,FUNCTION,301, AND b_new.wtc_job_key = v_new_sequence
WS_JOB_CREATE,FUNCTION,302, AND c_new.wtc_job_key = v_new_sequence
WS_JOB_CREATE,FUNCTION,303, AND a.wdp_parent_task_key = b_old.wtc_task_key
WS_JOB_CREATE,FUNCTION,304, AND a.wdp_child_task_key = c_old.wtc_task_key
WS_JOB_CREATE,FUNCTION,305, AND b_old.wtc_order = b_new.wtc_order
WS_JOB_CREATE,FUNCTION,306, AND c_old.wtc_order = c_new.wtc_order;
WS_JOB_CREATE,FUNCTION,307,
WS_JOB_CREATE,FUNCTION,308,
WS_JOB_CREATE,FUNCTION,309, --***********************************************************************
WS_JOB_CREATE,FUNCTION,310, -- Set the job to the request state
WS_JOB_CREATE,FUNCTION,311, --***********************************************************************
WS_JOB_CREATE,FUNCTION,312, UPDATE ws_wrk_job_ctrl
WS_JOB_CREATE,FUNCTION,313, SET wjc_status = v_wjc_status
WS_JOB_CREATE,FUNCTION,314, WHERE wjc_job_key = v_new_sequence
WS_JOB_CREATE,FUNCTION,315, AND wjc_sequence = v_new_sequence;
WS_JOB_CREATE,FUNCTION,316,
WS_JOB_CREATE,FUNCTION,317, Commit;
WS_JOB_CREATE,FUNCTION,318,
WS_JOB_CREATE,FUNCTION,319, p_return_code := 'S';
WS_JOB_CREATE,FUNCTION,320, p_return_msg := 'Job '||p_new_job||' created.';
WS_JOB_CREATE,FUNCTION,321, RETURN 1;
WS_JOB_CREATE,FUNCTION,322,
WS_JOB_CREATE,FUNCTION,323, EXCEPTION WHEN OTHERS THEN
WS_JOB_CREATE,FUNCTION,324, p_return_code := 'E';
WS_JOB_CREATE,FUNCTION,325, v_msg := 'Failed to create Job '||p_new_job||' '||SQLERRM;
WS_JOB_CREATE,FUNCTION,326, p_return_msg := substr(v_msg,1,1023);
WS_JOB_CREATE,FUNCTION,327, RETURN -2;
WS_JOB_CREATE,FUNCTION,328, END;
WS_JOB_CREATE,FUNCTION,329,
WS_JOB_CREATE,FUNCTION,330, COMMIT;
WS_JOB_CREATE,FUNCTION,331, RETURN -3;
WS_JOB_CREATE,FUNCTION,332,
WS_JOB_CREATE,FUNCTION,333,EXCEPTION
WS_JOB_CREATE,FUNCTION,334, WHEN OTHERS THEN
WS_JOB_CREATE,FUNCTION,335, p_return_code := 'F';
WS_JOB_CREATE,FUNCTION,336, v_MsgText := 'Unhandled Exception in ws_job_create. '||
WS_JOB_CREATE,FUNCTION,337, ' Step ' ||v_step;
WS_JOB_CREATE,FUNCTION,338, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_JOB_CREATE,FUNCTION,339, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_CREATE,FUNCTION,340, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_CREATE,FUNCTION,341, RETURN -3;
WS_JOB_CREATE,FUNCTION,342,
WS_JOB_CREATE,FUNCTION,343,END ws_job_create;
WS_JOB_CREATE,FUNCTION,344,
WS_JOB_CREATEWAIT,FUNCTION,1,function ws_job_createwait
WS_JOB_CREATEWAIT,FUNCTION,2, (
WS_JOB_CREATEWAIT,FUNCTION,3, p_sequence IN number,
WS_JOB_CREATEWAIT,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,6, p_job_id IN number,
WS_JOB_CREATEWAIT,FUNCTION,7, p_task_id IN number,
WS_JOB_CREATEWAIT,FUNCTION,8, p_template_job IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,9, p_new_job IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,10, p_description IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,11, p_state IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,12, p_release_time IN date,
WS_JOB_CREATEWAIT,FUNCTION,13, p_threads IN number,
WS_JOB_CREATEWAIT,FUNCTION,14, p_scheduler IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,15, p_logs IN number,
WS_JOB_CREATEWAIT,FUNCTION,16, p_okay IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,17, p_fail IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,18, p_att1 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,19, p_att2 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,20, p_att3 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,21, p_att4 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,22, p_att5 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,23, p_att6 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,24, p_att7 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,25, p_att8 IN varchar2,
WS_JOB_CREATEWAIT,FUNCTION,26, p_return_code OUT varchar2,
WS_JOB_CREATEWAIT,FUNCTION,27, p_return_msg OUT varchar2
WS_JOB_CREATEWAIT,FUNCTION,28, )
WS_JOB_CREATEWAIT,FUNCTION,29, Return integer
WS_JOB_CREATEWAIT,FUNCTION,30, AUTHID CURRENT_USER
WS_JOB_CREATEWAIT,FUNCTION,31, IS
WS_JOB_CREATEWAIT,FUNCTION,32,
WS_JOB_CREATEWAIT,FUNCTION,33, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_CREATEWAIT,FUNCTION,34,
WS_JOB_CREATEWAIT,FUNCTION,35, -- =============================================================================
WS_JOB_CREATEWAIT,FUNCTION,36, -- DBMS Name : Oracle
WS_JOB_CREATEWAIT,FUNCTION,37, -- Script Name : ws_job_createwait
WS_JOB_CREATEWAIT,FUNCTION,38, -- Description : Creates a new job at a scheduled time
WS_JOB_CREATEWAIT,FUNCTION,39, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CREATEWAIT,FUNCTION,40, -- =============================================================================
WS_JOB_CREATEWAIT,FUNCTION,41,
WS_JOB_CREATEWAIT,FUNCTION,42, --=====================================================
WS_JOB_CREATEWAIT,FUNCTION,43, -- Variables
WS_JOB_CREATEWAIT,FUNCTION,44, --=====================================================
WS_JOB_CREATEWAIT,FUNCTION,45, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_CREATEWAIT,FUNCTION,46, v_step integer := 0; -- return code
WS_JOB_CREATEWAIT,FUNCTION,47, v_result integer := 0; -- return code
WS_JOB_CREATEWAIT,FUNCTION,48, v_count integer := 0;
WS_JOB_CREATEWAIT,FUNCTION,49, v_part_count integer := 0;
WS_JOB_CREATEWAIT,FUNCTION,50, v_specific_index integer := 0;
WS_JOB_CREATEWAIT,FUNCTION,51, v_specific_part integer := 0;
WS_JOB_CREATEWAIT,FUNCTION,52, v_status number := 0;
WS_JOB_CREATEWAIT,FUNCTION,53, v_status_code number := 0;
WS_JOB_CREATEWAIT,FUNCTION,54, v_msg varchar2(4000);
WS_JOB_CREATEWAIT,FUNCTION,55, v_old_key integer;
WS_JOB_CREATEWAIT,FUNCTION,56, v_old_sequence integer;
WS_JOB_CREATEWAIT,FUNCTION,57, v_old_status varchar2(1);
WS_JOB_CREATEWAIT,FUNCTION,58, v_new_key integer;
WS_JOB_CREATEWAIT,FUNCTION,59, v_new_sequence integer;
WS_JOB_CREATEWAIT,FUNCTION,60, v_wjc_status varchar2(1);
WS_JOB_CREATEWAIT,FUNCTION,61, v_wjc_type varchar2(1);
WS_JOB_CREATEWAIT,FUNCTION,62,
WS_JOB_CREATEWAIT,FUNCTION,63,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_CREATEWAIT,FUNCTION,64,BEGIN
WS_JOB_CREATEWAIT,FUNCTION,65,
WS_JOB_CREATEWAIT,FUNCTION,66, v_step := 10;
WS_JOB_CREATEWAIT,FUNCTION,67, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,68, -- First see if the job name specified is in a held or waiting state
WS_JOB_CREATEWAIT,FUNCTION,69, -- If not in a held or waiting state report and exit
WS_JOB_CREATEWAIT,FUNCTION,70, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,71, BEGIN
WS_JOB_CREATEWAIT,FUNCTION,72, Select wjc_job_key, wjc_sequence, wjc_status
WS_JOB_CREATEWAIT,FUNCTION,73, Into v_old_key, v_old_sequence, v_old_status
WS_JOB_CREATEWAIT,FUNCTION,74, From ws_wrk_job_ctrl
WS_JOB_CREATEWAIT,FUNCTION,75, Where rtrim(upper(wjc_name)) = rtrim(upper(p_template_job));
WS_JOB_CREATEWAIT,FUNCTION,76, EXCEPTION WHEN OTHERS THEN
WS_JOB_CREATEWAIT,FUNCTION,77, v_old_key := 0;
WS_JOB_CREATEWAIT,FUNCTION,78, END;
WS_JOB_CREATEWAIT,FUNCTION,79,
WS_JOB_CREATEWAIT,FUNCTION,80, v_step := 20;
WS_JOB_CREATEWAIT,FUNCTION,81, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,82, -- If not scheduled exit with that information
WS_JOB_CREATEWAIT,FUNCTION,83, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,84, If nvl(v_old_key,0) = 0 Then
WS_JOB_CREATEWAIT,FUNCTION,85, p_return_msg := 'Job '||p_template_job||' is not in a holding or waiting state. Cannot create new job';
WS_JOB_CREATEWAIT,FUNCTION,86, p_return_code := 'N';
WS_JOB_CREATEWAIT,FUNCTION,87, return -1;
WS_JOB_CREATEWAIT,FUNCTION,88, End If;
WS_JOB_CREATEWAIT,FUNCTION,89,
WS_JOB_CREATEWAIT,FUNCTION,90, v_step := 30;
WS_JOB_CREATEWAIT,FUNCTION,91, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,92, -- Make sure we have no job that matches our new job name
WS_JOB_CREATEWAIT,FUNCTION,93, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,94, BEGIN
WS_JOB_CREATEWAIT,FUNCTION,95, Select count(*)
WS_JOB_CREATEWAIT,FUNCTION,96, Into v_count
WS_JOB_CREATEWAIT,FUNCTION,97, From ws_wrk_job_ctrl
WS_JOB_CREATEWAIT,FUNCTION,98, Where rtrim(upper(wjc_name)) = rtrim(upper(p_new_job));
WS_JOB_CREATEWAIT,FUNCTION,99, EXCEPTION WHEN OTHERS THEN
WS_JOB_CREATEWAIT,FUNCTION,100, v_count := 1;
WS_JOB_CREATEWAIT,FUNCTION,101, END;
WS_JOB_CREATEWAIT,FUNCTION,102,
WS_JOB_CREATEWAIT,FUNCTION,103, IF v_count > 0 THEN
WS_JOB_CREATEWAIT,FUNCTION,104, p_return_msg := 'Job '||p_new_job||' already exists. Cannot create a new job of the same name';
WS_JOB_CREATEWAIT,FUNCTION,105, p_return_code := 'P';
WS_JOB_CREATEWAIT,FUNCTION,106, return -1;
WS_JOB_CREATEWAIT,FUNCTION,107, END IF;
WS_JOB_CREATEWAIT,FUNCTION,108,
WS_JOB_CREATEWAIT,FUNCTION,109, v_step := 60;
WS_JOB_CREATEWAIT,FUNCTION,110, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,111, -- Get the right state for the new job and the sequence
WS_JOB_CREATEWAIT,FUNCTION,112, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,113, IF rtrim(upper(p_state)) = 'ONCE' THEN
WS_JOB_CREATEWAIT,FUNCTION,114, v_wjc_status := 'W';
WS_JOB_CREATEWAIT,FUNCTION,115, v_wjc_type := 'O';
WS_JOB_CREATEWAIT,FUNCTION,116, ELSIF rtrim(upper(p_state)) = 'ONCE+HOLD' THEN
WS_JOB_CREATEWAIT,FUNCTION,117, v_wjc_status := 'W';
WS_JOB_CREATEWAIT,FUNCTION,118, v_wjc_type := 'S';
WS_JOB_CREATEWAIT,FUNCTION,119, ELSE
WS_JOB_CREATEWAIT,FUNCTION,120, v_wjc_status := 'H';
WS_JOB_CREATEWAIT,FUNCTION,121, v_wjc_type := 'H';
WS_JOB_CREATEWAIT,FUNCTION,122, END IF;
WS_JOB_CREATEWAIT,FUNCTION,123,
WS_JOB_CREATEWAIT,FUNCTION,124,
WS_JOB_CREATEWAIT,FUNCTION,125, v_step := 62;
WS_JOB_CREATEWAIT,FUNCTION,126, SELECT ws_job_seq.nextval INTO v_new_sequence FROM dual;
WS_JOB_CREATEWAIT,FUNCTION,127,
WS_JOB_CREATEWAIT,FUNCTION,128,
WS_JOB_CREATEWAIT,FUNCTION,129, v_step := 70;
WS_JOB_CREATEWAIT,FUNCTION,130, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,131, -- Add the new job in a held state, so that we can add the tasks/dependencies
WS_JOB_CREATEWAIT,FUNCTION,132, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,133, BEGIN
WS_JOB_CREATEWAIT,FUNCTION,134, INSERT into ws_wrk_job_ctrl
WS_JOB_CREATEWAIT,FUNCTION,135, (
WS_JOB_CREATEWAIT,FUNCTION,136, wjc_job_key
WS_JOB_CREATEWAIT,FUNCTION,137, , wjc_name
WS_JOB_CREATEWAIT,FUNCTION,138, , wjc_description
WS_JOB_CREATEWAIT,FUNCTION,139, , wjc_sequence
WS_JOB_CREATEWAIT,FUNCTION,140, , wjc_group_key
WS_JOB_CREATEWAIT,FUNCTION,141, , wjc_project_key
WS_JOB_CREATEWAIT,FUNCTION,142, , wjc_status
WS_JOB_CREATEWAIT,FUNCTION,143, , wjc_last_status
WS_JOB_CREATEWAIT,FUNCTION,144, , wjc_type
WS_JOB_CREATEWAIT,FUNCTION,145, , wjc_submitted
WS_JOB_CREATEWAIT,FUNCTION,146, , wjc_first_schedule
WS_JOB_CREATEWAIT,FUNCTION,147, , wjc_start_hour
WS_JOB_CREATEWAIT,FUNCTION,148, , wjc_start_minute
WS_JOB_CREATEWAIT,FUNCTION,149, , wjc_start_day
WS_JOB_CREATEWAIT,FUNCTION,150, , wjc_user_key
WS_JOB_CREATEWAIT,FUNCTION,151, , wjc_start_after
WS_JOB_CREATEWAIT,FUNCTION,152, , wjc_started
WS_JOB_CREATEWAIT,FUNCTION,153, , wjc_completed
WS_JOB_CREATEWAIT,FUNCTION,154, , wjc_max_elapsed
WS_JOB_CREATEWAIT,FUNCTION,155, , wjc_task_elapsed
WS_JOB_CREATEWAIT,FUNCTION,156, , wjc_avg_elapsed
WS_JOB_CREATEWAIT,FUNCTION,157, , wjc_avg_count
WS_JOB_CREATEWAIT,FUNCTION,158, , wjc_publish_okay
WS_JOB_CREATEWAIT,FUNCTION,159, , wjc_publish_fail
WS_JOB_CREATEWAIT,FUNCTION,160, , wjc_task_fatal
WS_JOB_CREATEWAIT,FUNCTION,161, , wjc_task_error
WS_JOB_CREATEWAIT,FUNCTION,162, , wjc_task_warning
WS_JOB_CREATEWAIT,FUNCTION,163, , wjc_task_info
WS_JOB_CREATEWAIT,FUNCTION,164, , wjc_task_okay
WS_JOB_CREATEWAIT,FUNCTION,165, , wjc_chkp_count
WS_JOB_CREATEWAIT,FUNCTION,166, , wjc_max_threads
WS_JOB_CREATEWAIT,FUNCTION,167, , wjc_priority
WS_JOB_CREATEWAIT,FUNCTION,168, , wjc_publish_flag
WS_JOB_CREATEWAIT,FUNCTION,169, , wjc_scheduler
WS_JOB_CREATEWAIT,FUNCTION,170, , wjc_cust_sa_hh
WS_JOB_CREATEWAIT,FUNCTION,171, , wjc_cust_sa_mm
WS_JOB_CREATEWAIT,FUNCTION,172, , wjc_cust_sb_hh
WS_JOB_CREATEWAIT,FUNCTION,173, , wjc_cust_sb_mm
WS_JOB_CREATEWAIT,FUNCTION,174, , wjc_cust_min
WS_JOB_CREATEWAIT,FUNCTION,175, , wjc_cust_days
WS_JOB_CREATEWAIT,FUNCTION,176, )
WS_JOB_CREATEWAIT,FUNCTION,177, SELECT
WS_JOB_CREATEWAIT,FUNCTION,178, v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,179, , p_new_job
WS_JOB_CREATEWAIT,FUNCTION,180, , NVL(p_description,wjc_description)
WS_JOB_CREATEWAIT,FUNCTION,181, , v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,182, , wjc_group_key
WS_JOB_CREATEWAIT,FUNCTION,183, , wjc_project_key
WS_JOB_CREATEWAIT,FUNCTION,184, , 'H'
WS_JOB_CREATEWAIT,FUNCTION,185, , wjc_last_status
WS_JOB_CREATEWAIT,FUNCTION,186, , v_wjc_type
WS_JOB_CREATEWAIT,FUNCTION,187, , wjc_submitted
WS_JOB_CREATEWAIT,FUNCTION,188, , wjc_first_schedule
WS_JOB_CREATEWAIT,FUNCTION,189, , wjc_start_hour
WS_JOB_CREATEWAIT,FUNCTION,190, , wjc_start_minute
WS_JOB_CREATEWAIT,FUNCTION,191, , wjc_start_day
WS_JOB_CREATEWAIT,FUNCTION,192, , wjc_user_key
WS_JOB_CREATEWAIT,FUNCTION,193, , p_release_time
WS_JOB_CREATEWAIT,FUNCTION,194, , wjc_started
WS_JOB_CREATEWAIT,FUNCTION,195, , wjc_completed
WS_JOB_CREATEWAIT,FUNCTION,196, , wjc_max_elapsed
WS_JOB_CREATEWAIT,FUNCTION,197, , wjc_task_elapsed
WS_JOB_CREATEWAIT,FUNCTION,198, , wjc_avg_elapsed
WS_JOB_CREATEWAIT,FUNCTION,199, , NVL(p_logs,wjc_avg_count)
WS_JOB_CREATEWAIT,FUNCTION,200, , NVL(p_okay,wjc_publish_okay)
WS_JOB_CREATEWAIT,FUNCTION,201, , NVL(p_fail,wjc_publish_fail)
WS_JOB_CREATEWAIT,FUNCTION,202, , wjc_task_fatal
WS_JOB_CREATEWAIT,FUNCTION,203, , wjc_task_error
WS_JOB_CREATEWAIT,FUNCTION,204, , wjc_task_warning
WS_JOB_CREATEWAIT,FUNCTION,205, , wjc_task_info
WS_JOB_CREATEWAIT,FUNCTION,206, , wjc_task_okay
WS_JOB_CREATEWAIT,FUNCTION,207, , wjc_chkp_count
WS_JOB_CREATEWAIT,FUNCTION,208, , NVL(p_threads,wjc_max_threads)
WS_JOB_CREATEWAIT,FUNCTION,209, , wjc_priority
WS_JOB_CREATEWAIT,FUNCTION,210, , wjc_publish_flag
WS_JOB_CREATEWAIT,FUNCTION,211, , NVL(p_scheduler,wjc_scheduler)
WS_JOB_CREATEWAIT,FUNCTION,212, , wjc_cust_sa_hh
WS_JOB_CREATEWAIT,FUNCTION,213, , wjc_cust_sa_mm
WS_JOB_CREATEWAIT,FUNCTION,214, , wjc_cust_sb_hh
WS_JOB_CREATEWAIT,FUNCTION,215, , wjc_cust_sb_mm
WS_JOB_CREATEWAIT,FUNCTION,216, , wjc_cust_min
WS_JOB_CREATEWAIT,FUNCTION,217, , wjc_cust_days
WS_JOB_CREATEWAIT,FUNCTION,218, FROM ws_wrk_job_ctrl
WS_JOB_CREATEWAIT,FUNCTION,219, Where wjc_job_key = v_old_key
WS_JOB_CREATEWAIT,FUNCTION,220, And wjc_status in ('H','W');
WS_JOB_CREATEWAIT,FUNCTION,221,
WS_JOB_CREATEWAIT,FUNCTION,222, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,223, -- Add all the tasks
WS_JOB_CREATEWAIT,FUNCTION,224, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,225, INSERT into ws_wrk_task_ctrl
WS_JOB_CREATEWAIT,FUNCTION,226, (
WS_JOB_CREATEWAIT,FUNCTION,227, wtc_task_key
WS_JOB_CREATEWAIT,FUNCTION,228, , wtc_job_key
WS_JOB_CREATEWAIT,FUNCTION,229, , wtc_obj_key
WS_JOB_CREATEWAIT,FUNCTION,230, , wtc_name
WS_JOB_CREATEWAIT,FUNCTION,231, , wtc_type
WS_JOB_CREATEWAIT,FUNCTION,232, , wtc_sequence
WS_JOB_CREATEWAIT,FUNCTION,233, , wtc_obj_type
WS_JOB_CREATEWAIT,FUNCTION,234, , wtc_action_type
WS_JOB_CREATEWAIT,FUNCTION,235, , wtc_order
WS_JOB_CREATEWAIT,FUNCTION,236, , wtc_order_a
WS_JOB_CREATEWAIT,FUNCTION,237, , wtc_order_b
WS_JOB_CREATEWAIT,FUNCTION,238, , wtc_order_c
WS_JOB_CREATEWAIT,FUNCTION,239, , wtc_run_status
WS_JOB_CREATEWAIT,FUNCTION,240, , wtc_audit_status
WS_JOB_CREATEWAIT,FUNCTION,241, , wtc_started
WS_JOB_CREATEWAIT,FUNCTION,242, , wtc_completed
WS_JOB_CREATEWAIT,FUNCTION,243, , wtc_avg_elapsed
WS_JOB_CREATEWAIT,FUNCTION,244, , wtc_avg_count
WS_JOB_CREATEWAIT,FUNCTION,245, , wtc_task_fatal
WS_JOB_CREATEWAIT,FUNCTION,246, , wtc_task_error
WS_JOB_CREATEWAIT,FUNCTION,247, , wtc_task_warning
WS_JOB_CREATEWAIT,FUNCTION,248, , wtc_task_info
WS_JOB_CREATEWAIT,FUNCTION,249, , wtc_task_okay
WS_JOB_CREATEWAIT,FUNCTION,250, , wtc_chkp_number
WS_JOB_CREATEWAIT,FUNCTION,251, , wtc_abort_level
WS_JOB_CREATEWAIT,FUNCTION,252, , wtc_action_ind
WS_JOB_CREATEWAIT,FUNCTION,253, )
WS_JOB_CREATEWAIT,FUNCTION,254, SELECT
WS_JOB_CREATEWAIT,FUNCTION,255, ws_task_seq.nextval
WS_JOB_CREATEWAIT,FUNCTION,256, , v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,257, , wtc_obj_key
WS_JOB_CREATEWAIT,FUNCTION,258, , wtc_name
WS_JOB_CREATEWAIT,FUNCTION,259, , wtc_type
WS_JOB_CREATEWAIT,FUNCTION,260, , v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,261, , wtc_obj_type
WS_JOB_CREATEWAIT,FUNCTION,262, , wtc_action_type
WS_JOB_CREATEWAIT,FUNCTION,263, , wtc_order
WS_JOB_CREATEWAIT,FUNCTION,264, , wtc_order_a
WS_JOB_CREATEWAIT,FUNCTION,265, , wtc_order_b
WS_JOB_CREATEWAIT,FUNCTION,266, , wtc_order_c
WS_JOB_CREATEWAIT,FUNCTION,267, , wtc_run_status
WS_JOB_CREATEWAIT,FUNCTION,268, , wtc_audit_status
WS_JOB_CREATEWAIT,FUNCTION,269, , wtc_started
WS_JOB_CREATEWAIT,FUNCTION,270, , wtc_completed
WS_JOB_CREATEWAIT,FUNCTION,271, , wtc_avg_elapsed
WS_JOB_CREATEWAIT,FUNCTION,272, , wtc_avg_count
WS_JOB_CREATEWAIT,FUNCTION,273, , wtc_task_fatal
WS_JOB_CREATEWAIT,FUNCTION,274, , wtc_task_error
WS_JOB_CREATEWAIT,FUNCTION,275, , wtc_task_warning
WS_JOB_CREATEWAIT,FUNCTION,276, , wtc_task_info
WS_JOB_CREATEWAIT,FUNCTION,277, , wtc_task_okay
WS_JOB_CREATEWAIT,FUNCTION,278, , wtc_chkp_number
WS_JOB_CREATEWAIT,FUNCTION,279, , wtc_abort_level
WS_JOB_CREATEWAIT,FUNCTION,280, , NVL(wtc_action_ind,'')
WS_JOB_CREATEWAIT,FUNCTION,281, FROM ws_wrk_task_ctrl
WS_JOB_CREATEWAIT,FUNCTION,282, Where wtc_job_key = v_old_key;
WS_JOB_CREATEWAIT,FUNCTION,283,
WS_JOB_CREATEWAIT,FUNCTION,284, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,285, -- Add all the dependencies
WS_JOB_CREATEWAIT,FUNCTION,286, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,287, INSERT into ws_wrk_dependency
WS_JOB_CREATEWAIT,FUNCTION,288, (
WS_JOB_CREATEWAIT,FUNCTION,289, wdp_job_key
WS_JOB_CREATEWAIT,FUNCTION,290, , wdp_parent_task_key
WS_JOB_CREATEWAIT,FUNCTION,291, , wdp_child_task_key
WS_JOB_CREATEWAIT,FUNCTION,292, )
WS_JOB_CREATEWAIT,FUNCTION,293, SELECT
WS_JOB_CREATEWAIT,FUNCTION,294, v_new_sequence,
WS_JOB_CREATEWAIT,FUNCTION,295, b_new.wtc_task_key,
WS_JOB_CREATEWAIT,FUNCTION,296, c_new.wtc_task_key
WS_JOB_CREATEWAIT,FUNCTION,297, FROM
WS_JOB_CREATEWAIT,FUNCTION,298, ws_wrk_dependency a,
WS_JOB_CREATEWAIT,FUNCTION,299, ws_wrk_task_ctrl b_old,
WS_JOB_CREATEWAIT,FUNCTION,300, ws_wrk_task_ctrl c_old,
WS_JOB_CREATEWAIT,FUNCTION,301, ws_wrk_task_ctrl b_new,
WS_JOB_CREATEWAIT,FUNCTION,302, ws_wrk_task_ctrl c_new
WS_JOB_CREATEWAIT,FUNCTION,303, WHERE a.wdp_job_key = v_old_key
WS_JOB_CREATEWAIT,FUNCTION,304, AND b_new.wtc_job_key = v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,305, AND c_new.wtc_job_key = v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,306, AND a.wdp_parent_task_key = b_old.wtc_task_key
WS_JOB_CREATEWAIT,FUNCTION,307, AND a.wdp_child_task_key = c_old.wtc_task_key
WS_JOB_CREATEWAIT,FUNCTION,308, AND b_old.wtc_order = b_new.wtc_order
WS_JOB_CREATEWAIT,FUNCTION,309, AND c_old.wtc_order = c_new.wtc_order;
WS_JOB_CREATEWAIT,FUNCTION,310,
WS_JOB_CREATEWAIT,FUNCTION,311,
WS_JOB_CREATEWAIT,FUNCTION,312, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,313, -- Set the job to the request state
WS_JOB_CREATEWAIT,FUNCTION,314, --***********************************************************************
WS_JOB_CREATEWAIT,FUNCTION,315, UPDATE ws_wrk_job_ctrl
WS_JOB_CREATEWAIT,FUNCTION,316, SET wjc_status = v_wjc_status
WS_JOB_CREATEWAIT,FUNCTION,317, WHERE wjc_job_key = v_new_sequence
WS_JOB_CREATEWAIT,FUNCTION,318, AND wjc_sequence = v_new_sequence;
WS_JOB_CREATEWAIT,FUNCTION,319,
WS_JOB_CREATEWAIT,FUNCTION,320, Commit;
WS_JOB_CREATEWAIT,FUNCTION,321,
WS_JOB_CREATEWAIT,FUNCTION,322, p_return_code := 'S';
WS_JOB_CREATEWAIT,FUNCTION,323, p_return_msg := 'Job '||p_new_job||' created.';
WS_JOB_CREATEWAIT,FUNCTION,324, RETURN 1;
WS_JOB_CREATEWAIT,FUNCTION,325,
WS_JOB_CREATEWAIT,FUNCTION,326, EXCEPTION WHEN OTHERS THEN
WS_JOB_CREATEWAIT,FUNCTION,327, p_return_code := 'E';
WS_JOB_CREATEWAIT,FUNCTION,328, v_msg := 'Failed to create Job '||p_new_job||' '||SQLERRM;
WS_JOB_CREATEWAIT,FUNCTION,329, p_return_msg := substr(v_msg,1,1023);
WS_JOB_CREATEWAIT,FUNCTION,330, RETURN -2;
WS_JOB_CREATEWAIT,FUNCTION,331, END;
WS_JOB_CREATEWAIT,FUNCTION,332,
WS_JOB_CREATEWAIT,FUNCTION,333, COMMIT;
WS_JOB_CREATEWAIT,FUNCTION,334, RETURN -3;
WS_JOB_CREATEWAIT,FUNCTION,335,
WS_JOB_CREATEWAIT,FUNCTION,336,EXCEPTION
WS_JOB_CREATEWAIT,FUNCTION,337, WHEN OTHERS THEN
WS_JOB_CREATEWAIT,FUNCTION,338, p_return_code := 'F';
WS_JOB_CREATEWAIT,FUNCTION,339, v_MsgText := 'Unhandled Exception in ws_job_createwait. '||
WS_JOB_CREATEWAIT,FUNCTION,340, ' Step ' ||v_step;
WS_JOB_CREATEWAIT,FUNCTION,341, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_JOB_CREATEWAIT,FUNCTION,342, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_CREATEWAIT,FUNCTION,343, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_CREATEWAIT,FUNCTION,344, RETURN -3;
WS_JOB_CREATEWAIT,FUNCTION,345,
WS_JOB_CREATEWAIT,FUNCTION,346,END ws_job_createwait;
WS_JOB_CREATEWAIT,FUNCTION,347,
WS_JOB_DEPENDENCY,FUNCTION,1,function ws_job_dependency
WS_JOB_DEPENDENCY,FUNCTION,2, (
WS_JOB_DEPENDENCY,FUNCTION,3, p_sequence IN number,
WS_JOB_DEPENDENCY,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_DEPENDENCY,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_DEPENDENCY,FUNCTION,6, p_job_id IN number,
WS_JOB_DEPENDENCY,FUNCTION,7, p_task_id IN number,
WS_JOB_DEPENDENCY,FUNCTION,8, p_action IN varchar2,
WS_JOB_DEPENDENCY,FUNCTION,9, p_parent IN varchar2,
WS_JOB_DEPENDENCY,FUNCTION,10, p_child IN varchar2,
WS_JOB_DEPENDENCY,FUNCTION,11, p_required IN varchar2,
WS_JOB_DEPENDENCY,FUNCTION,12, p_look_back IN integer,
WS_JOB_DEPENDENCY,FUNCTION,13, p_max_wait IN integer,
WS_JOB_DEPENDENCY,FUNCTION,14, p_return_code OUT varchar2,
WS_JOB_DEPENDENCY,FUNCTION,15, p_return_msg OUT varchar2
WS_JOB_DEPENDENCY,FUNCTION,16, )
WS_JOB_DEPENDENCY,FUNCTION,17, Return integer
WS_JOB_DEPENDENCY,FUNCTION,18, AUTHID CURRENT_USER
WS_JOB_DEPENDENCY,FUNCTION,19, IS
WS_JOB_DEPENDENCY,FUNCTION,20,
WS_JOB_DEPENDENCY,FUNCTION,21, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_DEPENDENCY,FUNCTION,22,
WS_JOB_DEPENDENCY,FUNCTION,23, -- =============================================================================
WS_JOB_DEPENDENCY,FUNCTION,24, -- DBMS Name : Oracle
WS_JOB_DEPENDENCY,FUNCTION,25, -- Script Name : ws_job_dependency
WS_JOB_DEPENDENCY,FUNCTION,26, -- Description : Maintain job dependencies
WS_JOB_DEPENDENCY,FUNCTION,27, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_DEPENDENCY,FUNCTION,28, -- =============================================================================
WS_JOB_DEPENDENCY,FUNCTION,29,
WS_JOB_DEPENDENCY,FUNCTION,30, --=====================================================
WS_JOB_DEPENDENCY,FUNCTION,31, -- Variables
WS_JOB_DEPENDENCY,FUNCTION,32, --=====================================================
WS_JOB_DEPENDENCY,FUNCTION,33, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_DEPENDENCY,FUNCTION,34, v_step integer := 0; -- return code
WS_JOB_DEPENDENCY,FUNCTION,35, v_result integer := 0; -- return code
WS_JOB_DEPENDENCY,FUNCTION,36, v_msg varchar2(4000);
WS_JOB_DEPENDENCY,FUNCTION,37, v_action integer := 0;
WS_JOB_DEPENDENCY,FUNCTION,38, v_existing integer := 0;
WS_JOB_DEPENDENCY,FUNCTION,39,
WS_JOB_DEPENDENCY,FUNCTION,40,BEGIN
WS_JOB_DEPENDENCY,FUNCTION,41,
WS_JOB_DEPENDENCY,FUNCTION,42, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,43, -- Ensure a valid action entered
WS_JOB_DEPENDENCY,FUNCTION,44, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,45, v_step := 100;
WS_JOB_DEPENDENCY,FUNCTION,46, IF UPPER(p_action) = 'ADD' THEN
WS_JOB_DEPENDENCY,FUNCTION,47, v_action := 1;
WS_JOB_DEPENDENCY,FUNCTION,48, ELSIF UPPER(p_action) = 'DELETE' THEN
WS_JOB_DEPENDENCY,FUNCTION,49, v_action := 2;
WS_JOB_DEPENDENCY,FUNCTION,50, ELSE
WS_JOB_DEPENDENCY,FUNCTION,51, p_return_code := 'E';
WS_JOB_DEPENDENCY,FUNCTION,52, p_return_msg := 'Invalid action code. Valid actions are ADD and DELETE.';
WS_JOB_DEPENDENCY,FUNCTION,53, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,54, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,55, RETURN -2;
WS_JOB_DEPENDENCY,FUNCTION,56, END IF;
WS_JOB_DEPENDENCY,FUNCTION,57,
WS_JOB_DEPENDENCY,FUNCTION,58, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,59, -- Check to see if the entry is present
WS_JOB_DEPENDENCY,FUNCTION,60, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,61, v_step := 200;
WS_JOB_DEPENDENCY,FUNCTION,62, BEGIN
WS_JOB_DEPENDENCY,FUNCTION,63, v_existing := 0;
WS_JOB_DEPENDENCY,FUNCTION,64, SELECT
WS_JOB_DEPENDENCY,FUNCTION,65, COUNT(*)
WS_JOB_DEPENDENCY,FUNCTION,66, INTO
WS_JOB_DEPENDENCY,FUNCTION,67, v_existing
WS_JOB_DEPENDENCY,FUNCTION,68, FROM
WS_JOB_DEPENDENCY,FUNCTION,69, ws_wrk_job_dependency
WS_JOB_DEPENDENCY,FUNCTION,70, WHERE
WS_JOB_DEPENDENCY,FUNCTION,71, wjd_parent_job_name = p_parent
WS_JOB_DEPENDENCY,FUNCTION,72, AND
WS_JOB_DEPENDENCY,FUNCTION,73, wjd_child_job_name = p_child;
WS_JOB_DEPENDENCY,FUNCTION,74, EXCEPTION WHEN OTHERS THEN
WS_JOB_DEPENDENCY,FUNCTION,75, v_existing := 0;
WS_JOB_DEPENDENCY,FUNCTION,76, END;
WS_JOB_DEPENDENCY,FUNCTION,77,
WS_JOB_DEPENDENCY,FUNCTION,78, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,79, -- If an Add then add a new record if not already present
WS_JOB_DEPENDENCY,FUNCTION,80, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,81, v_step := 300;
WS_JOB_DEPENDENCY,FUNCTION,82, IF v_action = 1 THEN
WS_JOB_DEPENDENCY,FUNCTION,83, BEGIN
WS_JOB_DEPENDENCY,FUNCTION,84, IF v_existing = 1 THEN
WS_JOB_DEPENDENCY,FUNCTION,85, p_return_code := 'W';
WS_JOB_DEPENDENCY,FUNCTION,86, p_return_msg := 'Job Dependency already exists. Can not add.';
WS_JOB_DEPENDENCY,FUNCTION,87, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,88, p_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,89, RETURN -1;
WS_JOB_DEPENDENCY,FUNCTION,90, END IF;
WS_JOB_DEPENDENCY,FUNCTION,91,
WS_JOB_DEPENDENCY,FUNCTION,92, INSERT INTO ws_wrk_job_dependency(
WS_JOB_DEPENDENCY,FUNCTION,93, wjd_sequence
WS_JOB_DEPENDENCY,FUNCTION,94, , wjd_parent_job_name
WS_JOB_DEPENDENCY,FUNCTION,95, , wjd_child_job_name
WS_JOB_DEPENDENCY,FUNCTION,96, , wjd_first_check_lag
WS_JOB_DEPENDENCY,FUNCTION,97, , wjd_wait_interval
WS_JOB_DEPENDENCY,FUNCTION,98, , wjd_require_parent
WS_JOB_DEPENDENCY,FUNCTION,99, ) VALUES (
WS_JOB_DEPENDENCY,FUNCTION,100, ws_wrk_job_dependency_seq.NEXTVAL
WS_JOB_DEPENDENCY,FUNCTION,101, , p_parent
WS_JOB_DEPENDENCY,FUNCTION,102, , p_child
WS_JOB_DEPENDENCY,FUNCTION,103, , p_look_back
WS_JOB_DEPENDENCY,FUNCTION,104, , p_max_wait
WS_JOB_DEPENDENCY,FUNCTION,105, , p_required
WS_JOB_DEPENDENCY,FUNCTION,106, );
WS_JOB_DEPENDENCY,FUNCTION,107, EXCEPTION WHEN OTHERS THEN
WS_JOB_DEPENDENCY,FUNCTION,108, p_return_code := 'E';
WS_JOB_DEPENDENCY,FUNCTION,109, v_msg := 'Failed to insert entry into job dependency table. '||SQLERRM;
WS_JOB_DEPENDENCY,FUNCTION,110, p_return_msg := substr(v_msg,1,1023);
WS_JOB_DEPENDENCY,FUNCTION,111, v_result := WsWrkAudit('E', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,112, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,113, RETURN -2;
WS_JOB_DEPENDENCY,FUNCTION,114, END;
WS_JOB_DEPENDENCY,FUNCTION,115, END IF;
WS_JOB_DEPENDENCY,FUNCTION,116,
WS_JOB_DEPENDENCY,FUNCTION,117, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,118, -- If a Delete then delete the record if present
WS_JOB_DEPENDENCY,FUNCTION,119, --***********************************************************************
WS_JOB_DEPENDENCY,FUNCTION,120, v_step := 400;
WS_JOB_DEPENDENCY,FUNCTION,121, IF v_action = 2 THEN
WS_JOB_DEPENDENCY,FUNCTION,122, BEGIN
WS_JOB_DEPENDENCY,FUNCTION,123, IF v_existing = 0 THEN
WS_JOB_DEPENDENCY,FUNCTION,124, p_return_code := 'W';
WS_JOB_DEPENDENCY,FUNCTION,125, p_return_msg := 'Job Dependency does not exist. Can not delete.';
WS_JOB_DEPENDENCY,FUNCTION,126, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,127, p_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,128, RETURN -1;
WS_JOB_DEPENDENCY,FUNCTION,129, END IF;
WS_JOB_DEPENDENCY,FUNCTION,130,
WS_JOB_DEPENDENCY,FUNCTION,131, DELETE FROM ws_wrk_job_dependency
WS_JOB_DEPENDENCY,FUNCTION,132, WHERE wjd_parent_job_name = p_parent
WS_JOB_DEPENDENCY,FUNCTION,133, AND wjd_child_job_name = p_child;
WS_JOB_DEPENDENCY,FUNCTION,134, EXCEPTION WHEN OTHERS THEN
WS_JOB_DEPENDENCY,FUNCTION,135, p_return_code := 'E';
WS_JOB_DEPENDENCY,FUNCTION,136, v_msg := 'Failed to delete entry from job dependency table. '||SQLERRM;
WS_JOB_DEPENDENCY,FUNCTION,137, p_return_msg := substr(v_msg,1,1023);
WS_JOB_DEPENDENCY,FUNCTION,138, v_result := WsWrkAudit('E', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,139, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,140, RETURN -2;
WS_JOB_DEPENDENCY,FUNCTION,141, END;
WS_JOB_DEPENDENCY,FUNCTION,142, END IF;
WS_JOB_DEPENDENCY,FUNCTION,143,
WS_JOB_DEPENDENCY,FUNCTION,144, COMMIT;
WS_JOB_DEPENDENCY,FUNCTION,145,
WS_JOB_DEPENDENCY,FUNCTION,146, p_return_code := 'S';
WS_JOB_DEPENDENCY,FUNCTION,147, p_return_msg := 'Job '||p_child||' dependent on Job '||p_parent||' '||p_action||'ed';
WS_JOB_DEPENDENCY,FUNCTION,148, v_result := WsWrkAudit('I', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,149, p_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,150,
WS_JOB_DEPENDENCY,FUNCTION,151, RETURN 1;
WS_JOB_DEPENDENCY,FUNCTION,152,
WS_JOB_DEPENDENCY,FUNCTION,153,EXCEPTION
WS_JOB_DEPENDENCY,FUNCTION,154, WHEN OTHERS THEN
WS_JOB_DEPENDENCY,FUNCTION,155, p_return_code := 'F';
WS_JOB_DEPENDENCY,FUNCTION,156, v_MsgText := 'Unhandled Exception in ws_job_dependency. '||
WS_JOB_DEPENDENCY,FUNCTION,157, ' Step ' ||v_step;
WS_JOB_DEPENDENCY,FUNCTION,158, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_JOB_DEPENDENCY,FUNCTION,159, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_DEPENDENCY,FUNCTION,160, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_DEPENDENCY,FUNCTION,161, RETURN -3;
WS_JOB_DEPENDENCY,FUNCTION,162,
WS_JOB_DEPENDENCY,FUNCTION,163,END ws_job_dependency;
WS_JOB_DEPENDENCY,FUNCTION,164,
WS_JOB_DEPENDENCY,FUNCTION,165,
WS_JOB_EXEC_010,PROCEDURE,1,procedure ws_job_exec_010
WS_JOB_EXEC_010,PROCEDURE,2, (
WS_JOB_EXEC_010,PROCEDURE,3, pi_job_name IN varchar2,
WS_JOB_EXEC_010,PROCEDURE,4, pi_task_name IN varchar2,
WS_JOB_EXEC_010,PROCEDURE,5, pi_action IN varchar2,
WS_JOB_EXEC_010,PROCEDURE,6, pi_thread IN number,
WS_JOB_EXEC_010,PROCEDURE,7, pi_sequence IN number,
WS_JOB_EXEC_010,PROCEDURE,8, pi_job_key IN number,
WS_JOB_EXEC_010,PROCEDURE,9, pi_task_key IN number,
WS_JOB_EXEC_010,PROCEDURE,10, pi_task_status IN number,
WS_JOB_EXEC_010,PROCEDURE,11, pi_task_msg IN varchar2,
WS_JOB_EXEC_010,PROCEDURE,12, po_result_code OUT number,
WS_JOB_EXEC_010,PROCEDURE,13, po_result_msg OUT varchar2,
WS_JOB_EXEC_010,PROCEDURE,14, po_job_key OUT number,
WS_JOB_EXEC_010,PROCEDURE,15, po_task_key OUT number,
WS_JOB_EXEC_010,PROCEDURE,16, po_task_name OUT varchar2,
WS_JOB_EXEC_010,PROCEDURE,17, po_action_key OUT number,
WS_JOB_EXEC_010,PROCEDURE,18, po_action_msg OUT varchar2
WS_JOB_EXEC_010,PROCEDURE,19, )
WS_JOB_EXEC_010,PROCEDURE,20, AUTHID CURRENT_USER
WS_JOB_EXEC_010,PROCEDURE,21, As
WS_JOB_EXEC_010,PROCEDURE,22,
WS_JOB_EXEC_010,PROCEDURE,23, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_EXEC_010,PROCEDURE,24,
WS_JOB_EXEC_010,PROCEDURE,25, -- =============================================================================
WS_JOB_EXEC_010,PROCEDURE,26, -- DBMS Name : Oracle
WS_JOB_EXEC_010,PROCEDURE,27, -- Script Name : ws_job_exec_010
WS_JOB_EXEC_010,PROCEDURE,28, -- Description : Executes a Wherescape Job
WS_JOB_EXEC_010,PROCEDURE,29, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_EXEC_010,PROCEDURE,30, -- =============================================================================
WS_JOB_EXEC_010,PROCEDURE,31,
WS_JOB_EXEC_010,PROCEDURE,32, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,33, -- Constants
WS_JOB_EXEC_010,PROCEDURE,34, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,35, v_ws_obj_procedure constant number := 1;
WS_JOB_EXEC_010,PROCEDURE,36, v_ws_obj_fact_kpi constant number := 2;
WS_JOB_EXEC_010,PROCEDURE,37, v_ws_obj_script constant number := 3;
WS_JOB_EXEC_010,PROCEDURE,38, v_ws_obj_template constant number := 4;
WS_JOB_EXEC_010,PROCEDURE,39, v_ws_obj_fact constant number := 5;
WS_JOB_EXEC_010,PROCEDURE,40, v_ws_obj_dim constant number := 6;
WS_JOB_EXEC_010,PROCEDURE,41, v_ws_obj_stage constant number := 7;
WS_JOB_EXEC_010,PROCEDURE,42, v_ws_obj_load constant number := 8;
WS_JOB_EXEC_010,PROCEDURE,43, v_ws_obj_agg constant number := 9;
WS_JOB_EXEC_010,PROCEDURE,44, v_ws_obj_index constant number := 10;
WS_JOB_EXEC_010,PROCEDURE,45, v_ws_obj_connect constant number := 11;
WS_JOB_EXEC_010,PROCEDURE,46, v_ws_obj_dim_view constant number := 12;
WS_JOB_EXEC_010,PROCEDURE,47, v_ws_obj_document constant number := 13;
WS_JOB_EXEC_010,PROCEDURE,48, v_ws_obj_cube constant number := 15;
WS_JOB_EXEC_010,PROCEDURE,49, v_ws_obj_cube_virtual constant number := 16;
WS_JOB_EXEC_010,PROCEDURE,50, v_ws_obj_report constant number := 17;
WS_JOB_EXEC_010,PROCEDURE,51, v_ws_obj_user1 constant number := 18;
WS_JOB_EXEC_010,PROCEDURE,52, v_ws_obj_user2 constant number := 19;
WS_JOB_EXEC_010,PROCEDURE,53, v_ws_obj_user3 constant number := 20;
WS_JOB_EXEC_010,PROCEDURE,54, v_ws_obj_user4 constant number := 21;
WS_JOB_EXEC_010,PROCEDURE,55,
WS_JOB_EXEC_010,PROCEDURE,56, v_ws_act_drop constant number := 1;
WS_JOB_EXEC_010,PROCEDURE,57, v_ws_act_create constant number := 2;
WS_JOB_EXEC_010,PROCEDURE,58, v_ws_act_drop_all constant number := 3;
WS_JOB_EXEC_010,PROCEDURE,59, v_ws_act_pre_drop constant number := 4;
WS_JOB_EXEC_010,PROCEDURE,60, v_ws_act_load constant number := 5;
WS_JOB_EXEC_010,PROCEDURE,61, v_ws_act_update constant number := 6;
WS_JOB_EXEC_010,PROCEDURE,62, v_ws_act_execute constant number := 7;
WS_JOB_EXEC_010,PROCEDURE,63, v_ws_act_process constant number := 8;
WS_JOB_EXEC_010,PROCEDURE,64, v_ws_act_build constant number := 9;
WS_JOB_EXEC_010,PROCEDURE,65, v_ws_act_build_all constant number := 10;
WS_JOB_EXEC_010,PROCEDURE,66, v_ws_act_analyze constant number := 11;
WS_JOB_EXEC_010,PROCEDURE,67, v_ws_act_quick_analyze constant number := 12;
WS_JOB_EXEC_010,PROCEDURE,68, v_ws_act_statistics constant number := 13;
WS_JOB_EXEC_010,PROCEDURE,69, v_ws_act_quick_statistics constant number := 14;
WS_JOB_EXEC_010,PROCEDURE,70, v_ws_act_initial constant number := 15;
WS_JOB_EXEC_010,PROCEDURE,71, v_ws_act_cube_dim constant number := 16;
WS_JOB_EXEC_010,PROCEDURE,72, v_ws_act_db_dim constant number := 17;
WS_JOB_EXEC_010,PROCEDURE,73, v_ws_act_custom constant number := 18;
WS_JOB_EXEC_010,PROCEDURE,74,
WS_JOB_EXEC_010,PROCEDURE,75,
WS_JOB_EXEC_010,PROCEDURE,76, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,77, -- Parameters to the called procedures
WS_JOB_EXEC_010,PROCEDURE,78, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,79, p_sequence number;
WS_JOB_EXEC_010,PROCEDURE,80, p_job_name varchar2(64);
WS_JOB_EXEC_010,PROCEDURE,81, p_task_name varchar2(64);
WS_JOB_EXEC_010,PROCEDURE,82, p_task_id number;
WS_JOB_EXEC_010,PROCEDURE,83, p_job_id number;
WS_JOB_EXEC_010,PROCEDURE,84, p_return_msg varchar2(1024);
WS_JOB_EXEC_010,PROCEDURE,85, p_status_code number;
WS_JOB_EXEC_010,PROCEDURE,86, p_return_msg_2 varchar2(1024);
WS_JOB_EXEC_010,PROCEDURE,87, p_status_code_2 number;
WS_JOB_EXEC_010,PROCEDURE,88, p_return_msg_3 varchar2(1024);
WS_JOB_EXEC_010,PROCEDURE,89, p_status_code_3 number;
WS_JOB_EXEC_010,PROCEDURE,90,
WS_JOB_EXEC_010,PROCEDURE,91, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,92, -- Variables
WS_JOB_EXEC_010,PROCEDURE,93, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,94, v_rec_count number;
WS_JOB_EXEC_010,PROCEDURE,95, v_job_count number;
WS_JOB_EXEC_010,PROCEDURE,96, v_task_count number;
WS_JOB_EXEC_010,PROCEDURE,97, v_child_key number;
WS_JOB_EXEC_010,PROCEDURE,98, v_run_status varchar2(1);
WS_JOB_EXEC_010,PROCEDURE,99, v_audit_status varchar2(1);
WS_JOB_EXEC_010,PROCEDURE,100, v_abort_level number;
WS_JOB_EXEC_010,PROCEDURE,101, v_halted number;
WS_JOB_EXEC_010,PROCEDURE,102, v_okay number;
WS_JOB_EXEC_010,PROCEDURE,103, v_checked number;
WS_JOB_EXEC_010,PROCEDURE,104, v_running_count number;
WS_JOB_EXEC_010,PROCEDURE,105, v_failed_count number;
WS_JOB_EXEC_010,PROCEDURE,106, v_halted_count number;
WS_JOB_EXEC_010,PROCEDURE,107, v_job_status varchar2(1);
WS_JOB_EXEC_010,PROCEDURE,108, v_loop_count number;
WS_JOB_EXEC_010,PROCEDURE,109, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_EXEC_010,PROCEDURE,110, v_OkayMsg varchar2(256); -- Okay result command
WS_JOB_EXEC_010,PROCEDURE,111, v_FailMsg varchar2(256); -- Failure result command
WS_JOB_EXEC_010,PROCEDURE,112, v_result number;
WS_JOB_EXEC_010,PROCEDURE,113, v_status_code varchar2(1);
WS_JOB_EXEC_010,PROCEDURE,114, v_step integer := 0; -- return code
WS_JOB_EXEC_010,PROCEDURE,115, v_Cursor number;
WS_JOB_EXEC_010,PROCEDURE,116, v_Just_done integer := 0;
WS_JOB_EXEC_010,PROCEDURE,117, v_idle_thread integer := 0;
WS_JOB_EXEC_010,PROCEDURE,118, v_start_hh integer;
WS_JOB_EXEC_010,PROCEDURE,119, v_start_mi integer;
WS_JOB_EXEC_010,PROCEDURE,120, v_start_day integer;
WS_JOB_EXEC_010,PROCEDURE,121, v_job_type varchar2(1);
WS_JOB_EXEC_010,PROCEDURE,122, v_sid integer;
WS_JOB_EXEC_010,PROCEDURE,123, v_serial integer;
WS_JOB_EXEC_010,PROCEDURE,124, v_process integer;
WS_JOB_EXEC_010,PROCEDURE,125, v_action_type integer;
WS_JOB_EXEC_010,PROCEDURE,126, v_obj_type integer;
WS_JOB_EXEC_010,PROCEDURE,127, v_obj_key integer;
WS_JOB_EXEC_010,PROCEDURE,128, v_task_key integer;
WS_JOB_EXEC_010,PROCEDURE,129, v_ctrl_sequence integer;
WS_JOB_EXEC_010,PROCEDURE,130, v_start_after date;
WS_JOB_EXEC_010,PROCEDURE,131, v_cust_sa_hh integer;
WS_JOB_EXEC_010,PROCEDURE,132, v_cust_sa_mm integer;
WS_JOB_EXEC_010,PROCEDURE,133, v_cust_sb_hh integer;
WS_JOB_EXEC_010,PROCEDURE,134, v_cust_sb_mm integer;
WS_JOB_EXEC_010,PROCEDURE,135, v_cust_min integer;
WS_JOB_EXEC_010,PROCEDURE,136, v_cust_days integer;
WS_JOB_EXEC_010,PROCEDURE,137, v_cust_sb integer;
WS_JOB_EXEC_010,PROCEDURE,138, v_cust_sa integer;
WS_JOB_EXEC_010,PROCEDURE,139, v_more integer;
WS_JOB_EXEC_010,PROCEDURE,140, v_AddDays integer;
WS_JOB_EXEC_010,PROCEDURE,141, v_wait_HH integer;
WS_JOB_EXEC_010,PROCEDURE,142, v_wait_MM integer;
WS_JOB_EXEC_010,PROCEDURE,143, v_cur_HH integer;
WS_JOB_EXEC_010,PROCEDURE,144, v_cur_MM integer;
WS_JOB_EXEC_010,PROCEDURE,145, v_cur_HHMM integer;
WS_JOB_EXEC_010,PROCEDURE,146, v_cur_day_name varchar(3);
WS_JOB_EXEC_010,PROCEDURE,147, v_Monday integer;
WS_JOB_EXEC_010,PROCEDURE,148, v_Tuesday integer;
WS_JOB_EXEC_010,PROCEDURE,149, v_Wednesday integer;
WS_JOB_EXEC_010,PROCEDURE,150, v_Thursday integer;
WS_JOB_EXEC_010,PROCEDURE,151, v_Friday integer;
WS_JOB_EXEC_010,PROCEDURE,152, v_Saturday integer;
WS_JOB_EXEC_010,PROCEDURE,153, v_Sunday integer;
WS_JOB_EXEC_010,PROCEDURE,154, v_log_keep integer;
WS_JOB_EXEC_010,PROCEDURE,155,
WS_JOB_EXEC_010,PROCEDURE,156, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,157, -- Cursor for all the task control records to be added to task run
WS_JOB_EXEC_010,PROCEDURE,158, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,159, Cursor c_TaskCtrl is
WS_JOB_EXEC_010,PROCEDURE,160, Select * from ws_wrk_task_ctrl
WS_JOB_EXEC_010,PROCEDURE,161, Where wtc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,162,
WS_JOB_EXEC_010,PROCEDURE,163, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,164, -- Cursor for all the task run records waiting to be run
WS_JOB_EXEC_010,PROCEDURE,165, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,166, Cursor c_TaskRun is
WS_JOB_EXEC_010,PROCEDURE,167, Select * from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,168, Where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,169, And wtr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,170,
WS_JOB_EXEC_010,PROCEDURE,171, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,172, -- Cursor for all the parent dependencies of a particular task
WS_JOB_EXEC_010,PROCEDURE,173, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,174, Cursor c_Dependency is
WS_JOB_EXEC_010,PROCEDURE,175, Select * from ws_wrk_dependency
WS_JOB_EXEC_010,PROCEDURE,176, Where wdp_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,177, And wdp_child_task_key = v_child_key;
WS_JOB_EXEC_010,PROCEDURE,178,
WS_JOB_EXEC_010,PROCEDURE,179,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_EXEC_010,PROCEDURE,180,BEGIN
WS_JOB_EXEC_010,PROCEDURE,181,
WS_JOB_EXEC_010,PROCEDURE,182, p_job_name := pi_job_name;
WS_JOB_EXEC_010,PROCEDURE,183, p_task_name := pi_task_name;
WS_JOB_EXEC_010,PROCEDURE,184, p_sequence := pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,185, p_job_id := 0;
WS_JOB_EXEC_010,PROCEDURE,186, p_task_id := 0;
WS_JOB_EXEC_010,PROCEDURE,187, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,188, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,189, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,190, po_result_msg := 'no result';
WS_JOB_EXEC_010,PROCEDURE,191,
WS_JOB_EXEC_010,PROCEDURE,192,
WS_JOB_EXEC_010,PROCEDURE,193, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,194, -- N E W J O B
WS_JOB_EXEC_010,PROCEDURE,195, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,196, -- If we are a New job then check we are not already running, under
WS_JOB_EXEC_010,PROCEDURE,197, -- this or some other sequence number.
WS_JOB_EXEC_010,PROCEDURE,198, -- Create the job_run and task_run records
WS_JOB_EXEC_010,PROCEDURE,199, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,200, If upper(pi_action) = 'NEW' Then
WS_JOB_EXEC_010,PROCEDURE,201, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,202, -- If we are thread 0 then do some checks and create the records
WS_JOB_EXEC_010,PROCEDURE,203, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,204, If pi_thread = 0 Then
WS_JOB_EXEC_010,PROCEDURE,205,
WS_JOB_EXEC_010,PROCEDURE,206, -- Get the job key for the job name. There should be one and
WS_JOB_EXEC_010,PROCEDURE,207, -- only one key. Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,208, BEGIN
WS_JOB_EXEC_010,PROCEDURE,209, select wjc_job_key, wjc_type, wjc_start_hour, wjc_start_minute, wjc_start_day,
WS_JOB_EXEC_010,PROCEDURE,210, wjc_sequence, wjc_publish_fail,
WS_JOB_EXEC_010,PROCEDURE,211, nvl(wjc_cust_sa_hh,0), nvl(wjc_cust_sa_mm,0),
WS_JOB_EXEC_010,PROCEDURE,212, nvl(wjc_cust_sb_hh,0), nvl(wjc_cust_sb_mm,0),
WS_JOB_EXEC_010,PROCEDURE,213, nvl(wjc_cust_min,0), nvl(wjc_cust_days,0),
WS_JOB_EXEC_010,PROCEDURE,214, nvl(wjc_avg_count,0)
WS_JOB_EXEC_010,PROCEDURE,215, into p_job_id, v_job_type, v_start_hh, v_start_mi, v_start_day,
WS_JOB_EXEC_010,PROCEDURE,216, v_ctrl_sequence, v_FailMsg,
WS_JOB_EXEC_010,PROCEDURE,217, v_cust_sa_hh, v_cust_sa_mm, v_cust_sb_hh, v_cust_sb_mm,
WS_JOB_EXEC_010,PROCEDURE,218, v_cust_min, v_cust_days, v_log_keep
WS_JOB_EXEC_010,PROCEDURE,219, from ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,220, where rtrim(upper(wjc_name)) = rtrim(upper(pi_job_name));
WS_JOB_EXEC_010,PROCEDURE,221, v_rec_count := 1;
WS_JOB_EXEC_010,PROCEDURE,222, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,223, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,224, END;
WS_JOB_EXEC_010,PROCEDURE,225, If v_rec_count <> 1 Then
WS_JOB_EXEC_010,PROCEDURE,226, v_MsgText := 'Job '||pi_job_name||' passed invalid job name in New Job. '||
WS_JOB_EXEC_010,PROCEDURE,227, v_rec_count||' such records exist. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,228, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, v_ctrl_sequence,
WS_JOB_EXEC_010,PROCEDURE,229, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,230, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,231, RETURN;
WS_JOB_EXEC_010,PROCEDURE,232, End If;
WS_JOB_EXEC_010,PROCEDURE,233,
WS_JOB_EXEC_010,PROCEDURE,234, -- Setup to default for a failure if a Fail command has been provided
WS_JOB_EXEC_010,PROCEDURE,235, If v_FailMsg is not Null Then
WS_JOB_EXEC_010,PROCEDURE,236, po_action_key := 2;
WS_JOB_EXEC_010,PROCEDURE,237, po_action_msg := v_FailMsg;
WS_JOB_EXEC_010,PROCEDURE,238, Else
WS_JOB_EXEC_010,PROCEDURE,239, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,240, End If;
WS_JOB_EXEC_010,PROCEDURE,241,
WS_JOB_EXEC_010,PROCEDURE,242, -- Make sure we are not already running (i.e. have a job_run record)
WS_JOB_EXEC_010,PROCEDURE,243, -- Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,244, BEGIN
WS_JOB_EXEC_010,PROCEDURE,245, select count(1) into v_rec_count
WS_JOB_EXEC_010,PROCEDURE,246, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,247, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,248, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,249, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,250, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,251, END;
WS_JOB_EXEC_010,PROCEDURE,252, If v_rec_count <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,253, v_MsgText := 'Job '||pi_job_name||' already running. '||
WS_JOB_EXEC_010,PROCEDURE,254, 'Cannot start a new itteration. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,255, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, v_ctrl_sequence,
WS_JOB_EXEC_010,PROCEDURE,256, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,257, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,258, RETURN;
WS_JOB_EXEC_010,PROCEDURE,259, End If;
WS_JOB_EXEC_010,PROCEDURE,260,
WS_JOB_EXEC_010,PROCEDURE,261, -- Make sure there is no other sequence of this job running
WS_JOB_EXEC_010,PROCEDURE,262, -- Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,263, -- WMR 24/08/2001. Put the job on hold, if there are running sequences.
WS_JOB_EXEC_010,PROCEDURE,264, -- WMR 24/08/2001. If failed sequences then put out a warning and proceed.
WS_JOB_EXEC_010,PROCEDURE,265, BEGIN
WS_JOB_EXEC_010,PROCEDURE,266, select count(1) into v_rec_count
WS_JOB_EXEC_010,PROCEDURE,267, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,268, where wjr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,269, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,270, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,271, END;
WS_JOB_EXEC_010,PROCEDURE,272, If v_rec_count <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,273, BEGIN
WS_JOB_EXEC_010,PROCEDURE,274, select count(1) into v_job_count
WS_JOB_EXEC_010,PROCEDURE,275, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,276, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,277, and wjr_status = 'F';
WS_JOB_EXEC_010,PROCEDURE,278, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,279, v_job_count := 0;
WS_JOB_EXEC_010,PROCEDURE,280, END;
WS_JOB_EXEC_010,PROCEDURE,281, If v_job_count <> v_rec_count Then
WS_JOB_EXEC_010,PROCEDURE,282, v_MsgText := 'Job '||pi_job_name||' already has a running sequence. '||
WS_JOB_EXEC_010,PROCEDURE,283, ' Job Blocked, until current job completes.';
WS_JOB_EXEC_010,PROCEDURE,284, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, v_ctrl_sequence,
WS_JOB_EXEC_010,PROCEDURE,285, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,286, BEGIN
WS_JOB_EXEC_010,PROCEDURE,287, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,288, set wjc_status = 'B'
WS_JOB_EXEC_010,PROCEDURE,289, where wjc_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,290, and wjc_sequence = v_ctrl_sequence;
WS_JOB_EXEC_010,PROCEDURE,291, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,292, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,293, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,294, ' failed to change state to blocked '||
WS_JOB_EXEC_010,PROCEDURE,295, 'in ws_wrk_job_ctrl. No Action!!!';
WS_JOB_EXEC_010,PROCEDURE,296, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, v_ctrl_sequence,
WS_JOB_EXEC_010,PROCEDURE,297, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,298, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,299, RETURN;
WS_JOB_EXEC_010,PROCEDURE,300, END;
WS_JOB_EXEC_010,PROCEDURE,301, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,302, RETURN;
WS_JOB_EXEC_010,PROCEDURE,303, Else
WS_JOB_EXEC_010,PROCEDURE,304, v_MsgText := 'Job '||pi_job_name||' has a previously Failed (incomplete) sequence. Now Aborted';
WS_JOB_EXEC_010,PROCEDURE,305, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,306, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,307,
WS_JOB_EXEC_010,PROCEDURE,308, -- Update the job run record to be completed (Failed-Aborted)
WS_JOB_EXEC_010,PROCEDURE,309, -- and set the completion date if it is null
WS_JOB_EXEC_010,PROCEDURE,310, -- Move the job run record to the log record
WS_JOB_EXEC_010,PROCEDURE,311, BEGIN
WS_JOB_EXEC_010,PROCEDURE,312, update ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,313, set wjr_status = 'G'
WS_JOB_EXEC_010,PROCEDURE,314, where wjr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,315, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,316, update ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,317, set wjr_completed = sysdate
WS_JOB_EXEC_010,PROCEDURE,318, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,319, and wjr_completed is NULL;
WS_JOB_EXEC_010,PROCEDURE,320, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,321, insert into ws_wrk_job_log
WS_JOB_EXEC_010,PROCEDURE,322, select * from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,323, where wjr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,324, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,325, delete from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,326, where wjr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,327, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,328, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,329, v_MsgText := 'Job '||pi_job_name||' failed in xfer to aborted job to ws_wrk_job_log. '||
WS_JOB_EXEC_010,PROCEDURE,330, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,331, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, v_ctrl_sequence,
WS_JOB_EXEC_010,PROCEDURE,332, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,333, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,334, RETURN;
WS_JOB_EXEC_010,PROCEDURE,335, END;
WS_JOB_EXEC_010,PROCEDURE,336,
WS_JOB_EXEC_010,PROCEDURE,337, -- Move the task run records to the log record
WS_JOB_EXEC_010,PROCEDURE,338, BEGIN
WS_JOB_EXEC_010,PROCEDURE,339, insert into ws_wrk_task_log
WS_JOB_EXEC_010,PROCEDURE,340, select * from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,341, where wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,342, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,343, delete from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,344, where wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,345, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,346, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,347, v_MsgText := 'Job '||pi_job_name||
WS_JOB_EXEC_010,PROCEDURE,348, ' failed in xfer of aborted jobs tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_010,PROCEDURE,349, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,350, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, v_ctrl_sequence,
WS_JOB_EXEC_010,PROCEDURE,351, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,352, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,353, RETURN;
WS_JOB_EXEC_010,PROCEDURE,354, END;
WS_JOB_EXEC_010,PROCEDURE,355,
WS_JOB_EXEC_010,PROCEDURE,356, End If;
WS_JOB_EXEC_010,PROCEDURE,357, End If;
WS_JOB_EXEC_010,PROCEDURE,358,
WS_JOB_EXEC_010,PROCEDURE,359, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,360, -- Record this thread as being active
WS_JOB_EXEC_010,PROCEDURE,361, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,362, BEGIN
WS_JOB_EXEC_010,PROCEDURE,363, select sid,serial#
WS_JOB_EXEC_010,PROCEDURE,364, into v_sid, v_serial
WS_JOB_EXEC_010,PROCEDURE,365, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_010,PROCEDURE,366, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,367, v_sid := 0;
WS_JOB_EXEC_010,PROCEDURE,368, v_serial := 0;
WS_JOB_EXEC_010,PROCEDURE,369, END;
WS_JOB_EXEC_010,PROCEDURE,370,
WS_JOB_EXEC_010,PROCEDURE,371, BEGIN
WS_JOB_EXEC_010,PROCEDURE,372, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_010,PROCEDURE,373, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_010,PROCEDURE,374, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_010,PROCEDURE,375, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,376, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,377, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,378, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,379, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,380, END;
WS_JOB_EXEC_010,PROCEDURE,381,
WS_JOB_EXEC_010,PROCEDURE,382, -- Create the Job run record
WS_JOB_EXEC_010,PROCEDURE,383, -- Set its initial state to P for pending until we have the task_run records built
WS_JOB_EXEC_010,PROCEDURE,384, BEGIN
WS_JOB_EXEC_010,PROCEDURE,385, Insert into ws_wrk_job_run (
WS_JOB_EXEC_010,PROCEDURE,386, wjr_job_key, wjr_sequence, wjr_restart, wjr_status, wjr_scheduled,
WS_JOB_EXEC_010,PROCEDURE,387, wjr_started, wjr_completed, wjr_elapsed_hh, wjr_elapsed_mi,
WS_JOB_EXEC_010,PROCEDURE,388, wjr_okay_count, wjr_info_count, wjr_warning_count, wjr_error_count,
WS_JOB_EXEC_010,PROCEDURE,389, wjr_detail_count, wjr_chkp_count, wjr_chkp_number, wjr_name, wjr_user_key,
WS_JOB_EXEC_010,PROCEDURE,390, wjr_max_threads, wjr_publish_okay, wjr_publish_fail, wjr_scheduler)
WS_JOB_EXEC_010,PROCEDURE,391, Select
WS_JOB_EXEC_010,PROCEDURE,392, wjc_job_key, pi_sequence, 0, 'P', sysdate, sysdate, NULL, 0,0,
WS_JOB_EXEC_010,PROCEDURE,393, 0,0,0,0,0,wjc_chkp_count,0, wjc_name, wjc_user_key, wjc_max_threads,
WS_JOB_EXEC_010,PROCEDURE,394, wjc_publish_okay, wjc_publish_fail, wjc_scheduler
WS_JOB_EXEC_010,PROCEDURE,395, from ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,396, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,397, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,398, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,399, v_MsgText := 'Job '||pi_job_name||' unable to create record in ws_wrk_job_run table. '||
WS_JOB_EXEC_010,PROCEDURE,400, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,401, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,402, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,403, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,404, RETURN;
WS_JOB_EXEC_010,PROCEDURE,405, END;
WS_JOB_EXEC_010,PROCEDURE,406,
WS_JOB_EXEC_010,PROCEDURE,407, -- Create All the Task records.
WS_JOB_EXEC_010,PROCEDURE,408, -- Loop through all the tasks and add them. Initial state is Waiting.
WS_JOB_EXEC_010,PROCEDURE,409, FOR v_TaskCtrlRec in c_TaskCtrl LOOP
WS_JOB_EXEC_010,PROCEDURE,410,
WS_JOB_EXEC_010,PROCEDURE,411, BEGIN
WS_JOB_EXEC_010,PROCEDURE,412, Insert into ws_wrk_task_run (
WS_JOB_EXEC_010,PROCEDURE,413, wtr_task_key, wtr_job_key, wtr_sequence, wtr_restart, wtr_run_status,
WS_JOB_EXEC_010,PROCEDURE,414, wtr_audit_status, wtr_started, wtr_completed, wtr_elapsed_hh, wtr_elapsed_mi,
WS_JOB_EXEC_010,PROCEDURE,415, wtr_info_count, wtr_warning_count, wtr_detail_count, wtr_return_msg, wtr_type,
WS_JOB_EXEC_010,PROCEDURE,416, wtr_abort_level, wtr_chkp_number, wtr_name, wtr_obj_type, wtr_action_type,
WS_JOB_EXEC_010,PROCEDURE,417, wtr_obj_key)
WS_JOB_EXEC_010,PROCEDURE,418, Values (
WS_JOB_EXEC_010,PROCEDURE,419, v_TaskCtrlRec.wtc_task_key,
WS_JOB_EXEC_010,PROCEDURE,420, v_TaskCtrlRec.wtc_job_key,
WS_JOB_EXEC_010,PROCEDURE,421, pi_sequence,0,'W',NULL,NULL,NULL,0,0,
WS_JOB_EXEC_010,PROCEDURE,422, 0,0,0,NULL,
WS_JOB_EXEC_010,PROCEDURE,423, v_TaskCtrlRec.wtc_type,
WS_JOB_EXEC_010,PROCEDURE,424, v_TaskCtrlRec.wtc_abort_level,
WS_JOB_EXEC_010,PROCEDURE,425, v_TaskCtrlRec.wtc_chkp_number, v_TaskCtrlRec.wtc_name,
WS_JOB_EXEC_010,PROCEDURE,426, v_TaskCtrlRec.wtc_obj_type, v_TaskCtrlRec.wtc_action_type,
WS_JOB_EXEC_010,PROCEDURE,427, v_TaskCtrlRec.wtc_obj_key
WS_JOB_EXEC_010,PROCEDURE,428, );
WS_JOB_EXEC_010,PROCEDURE,429, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,430, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,431, v_MsgText := 'Job '||pi_job_name||' failed creating records in ws_wrk_task_run table. '||
WS_JOB_EXEC_010,PROCEDURE,432, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,433, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,434, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,435, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,436, RETURN;
WS_JOB_EXEC_010,PROCEDURE,437, END;
WS_JOB_EXEC_010,PROCEDURE,438,
WS_JOB_EXEC_010,PROCEDURE,439, END LOOP;
WS_JOB_EXEC_010,PROCEDURE,440,
WS_JOB_EXEC_010,PROCEDURE,441,
WS_JOB_EXEC_010,PROCEDURE,442, -- All tasks added
WS_JOB_EXEC_010,PROCEDURE,443, -- Set the job status to running so our threads can start running the tasks
WS_JOB_EXEC_010,PROCEDURE,444, BEGIN
WS_JOB_EXEC_010,PROCEDURE,445, update ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,446, set wjr_status = 'R',
WS_JOB_EXEC_010,PROCEDURE,447, wjr_started = sysdate
WS_JOB_EXEC_010,PROCEDURE,448, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,449, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,450, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,451, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,452, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,453, ' failed to change state to running '||
WS_JOB_EXEC_010,PROCEDURE,454, 'in ws_wrk_job_run. No Action!!!';
WS_JOB_EXEC_010,PROCEDURE,455, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,456, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,457, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,458, RETURN;
WS_JOB_EXEC_010,PROCEDURE,459, END;
WS_JOB_EXEC_010,PROCEDURE,460,
WS_JOB_EXEC_010,PROCEDURE,461, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,462,
WS_JOB_EXEC_010,PROCEDURE,463, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,464, ' Started. ';
WS_JOB_EXEC_010,PROCEDURE,465, v_result := WsWrkAudit('B',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,466, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,467,
WS_JOB_EXEC_010,PROCEDURE,468, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,469, -- Clear out any old logs for this job
WS_JOB_EXEC_010,PROCEDURE,470, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,471, If v_log_keep > 0 Then
WS_JOB_EXEC_010,PROCEDURE,472,
WS_JOB_EXEC_010,PROCEDURE,473, -- we will create a log as part of this log, so keep 1 less
WS_JOB_EXEC_010,PROCEDURE,474, v_log_keep := v_log_keep - 1;
WS_JOB_EXEC_010,PROCEDURE,475, v_result := Ws_Job_Clear_Logs(p_sequence,
WS_JOB_EXEC_010,PROCEDURE,476, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,477, p_job_name, v_log_keep,
WS_JOB_EXEC_010,PROCEDURE,478, v_status_code, p_return_msg);
WS_JOB_EXEC_010,PROCEDURE,479, End If;
WS_JOB_EXEC_010,PROCEDURE,480,
WS_JOB_EXEC_010,PROCEDURE,481,
WS_JOB_EXEC_010,PROCEDURE,482, -- Now either modify or delete the control record
WS_JOB_EXEC_010,PROCEDURE,483, -- and if required delete the task records
WS_JOB_EXEC_010,PROCEDURE,484, -- If it is a once only job then delete it from job control
WS_JOB_EXEC_010,PROCEDURE,485, -- If a once and hold then set its status to Hold
WS_JOB_EXEC_010,PROCEDURE,486, -- In all other cases work out when it will next run
WS_JOB_EXEC_010,PROCEDURE,487, -- and put it in a wait state.
WS_JOB_EXEC_010,PROCEDURE,488, BEGIN
WS_JOB_EXEC_010,PROCEDURE,489, If v_job_type = 'O' Then
WS_JOB_EXEC_010,PROCEDURE,490, delete
WS_JOB_EXEC_010,PROCEDURE,491, from ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,492, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,493, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,494, delete
WS_JOB_EXEC_010,PROCEDURE,495, from ws_wrk_task_ctrl
WS_JOB_EXEC_010,PROCEDURE,496, where wtc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,497, ElsIf v_job_type = 'S' Then
WS_JOB_EXEC_010,PROCEDURE,498, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,499, set wjc_status = 'H',
WS_JOB_EXEC_010,PROCEDURE,500, wjc_start_after = sysdate
WS_JOB_EXEC_010,PROCEDURE,501, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,502, ElsIf v_job_type = 'D' Then
WS_JOB_EXEC_010,PROCEDURE,503, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,504, set wjc_status = 'W',
WS_JOB_EXEC_010,PROCEDURE,505, wjc_start_after = trunc(sysdate) + 1 + (v_start_hh/24) + ( v_start_mi/1440)
WS_JOB_EXEC_010,PROCEDURE,506, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,507, ElsIf v_job_type = 'W' Then
WS_JOB_EXEC_010,PROCEDURE,508, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,509, set wjc_status = 'W',
WS_JOB_EXEC_010,PROCEDURE,510, wjc_start_after = trunc(sysdate) + 7 + (v_start_hh/24) + ( v_start_mi/1440)
WS_JOB_EXEC_010,PROCEDURE,511, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,512, ElsIf v_job_type = 'M' Then
WS_JOB_EXEC_010,PROCEDURE,513, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,514, set wjc_status = 'W',
WS_JOB_EXEC_010,PROCEDURE,515, wjc_start_after = add_months((trunc(sysdate) + (v_start_hh/24) + ( v_start_mi/1440)),1)
WS_JOB_EXEC_010,PROCEDURE,516, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,517, ElsIf v_job_type = 'A' Then
WS_JOB_EXEC_010,PROCEDURE,518, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,519, set wjc_status = 'W',
WS_JOB_EXEC_010,PROCEDURE,520, wjc_start_after = add_months((trunc(sysdate) + (v_start_hh/24) + ( v_start_mi/1440)),12)
WS_JOB_EXEC_010,PROCEDURE,521, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,522, ElsIf v_job_type = 'C' Then
WS_JOB_EXEC_010,PROCEDURE,523, --
WS_JOB_EXEC_010,PROCEDURE,524, -- C U S T O M date/time scheduling
WS_JOB_EXEC_010,PROCEDURE,525, --
WS_JOB_EXEC_010,PROCEDURE,526, v_More := 1;
WS_JOB_EXEC_010,PROCEDURE,527, v_cur_day_name := lower(substr(to_char(sysdate,'DY'),1,3));
WS_JOB_EXEC_010,PROCEDURE,528, v_AddDays := 0;
WS_JOB_EXEC_010,PROCEDURE,529,
WS_JOB_EXEC_010,PROCEDURE,530, -- get the current time and add the interval to it to
WS_JOB_EXEC_010,PROCEDURE,531, -- get the next start time
WS_JOB_EXEC_010,PROCEDURE,532, v_cur_HH := to_number(to_char(sysdate,'HH24'));
WS_JOB_EXEC_010,PROCEDURE,533, v_cur_MM := to_number(to_char(sysdate,'MI'));
WS_JOB_EXEC_010,PROCEDURE,534, v_cur_MM := v_cur_MM + v_cust_min;
WS_JOB_EXEC_010,PROCEDURE,535, While v_cur_MM >= 60 LOOP
WS_JOB_EXEC_010,PROCEDURE,536, v_cur_HH := v_cur_HH + 1;
WS_JOB_EXEC_010,PROCEDURE,537, v_cur_MM := v_cur_MM - 60;
WS_JOB_EXEC_010,PROCEDURE,538, End Loop;
WS_JOB_EXEC_010,PROCEDURE,539, While v_cur_HH >= 24 LOOP
WS_JOB_EXEC_010,PROCEDURE,540, v_cur_day_name := lower(substr(to_char(sysdate+1,'DY'),1,3));
WS_JOB_EXEC_010,PROCEDURE,541, v_cur_HH := v_cur_HH - 24;
WS_JOB_EXEC_010,PROCEDURE,542, End Loop;
WS_JOB_EXEC_010,PROCEDURE,543,
WS_JOB_EXEC_010,PROCEDURE,544, v_cur_HHMM := ( v_cur_HH * 100 ) + v_cur_MM;
WS_JOB_EXEC_010,PROCEDURE,545,
WS_JOB_EXEC_010,PROCEDURE,546, -- init variable that will hold the minutes/hours to add
WS_JOB_EXEC_010,PROCEDURE,547, v_wait_HH := 0;
WS_JOB_EXEC_010,PROCEDURE,548, v_wait_MM := 0;
WS_JOB_EXEC_010,PROCEDURE,549,
WS_JOB_EXEC_010,PROCEDURE,550, -- Work out the stop by (sb) and start after (sa) times
WS_JOB_EXEC_010,PROCEDURE,551, v_cust_sb := ( v_cust_sb_HH * 100 ) + v_cust_sb_MM;
WS_JOB_EXEC_010,PROCEDURE,552, v_cust_sa := ( v_cust_sa_HH * 100 ) + v_cust_sa_MM;
WS_JOB_EXEC_010,PROCEDURE,553,
WS_JOB_EXEC_010,PROCEDURE,554, -- If a stop by time of 0 then set to 2400
WS_JOB_EXEC_010,PROCEDURE,555, If v_cust_sb = 0 Then
WS_JOB_EXEC_010,PROCEDURE,556, v_cust_sb := 2400;
WS_JOB_EXEC_010,PROCEDURE,557, End If;
WS_JOB_EXEC_010,PROCEDURE,558,
WS_JOB_EXEC_010,PROCEDURE,559, -- Work out which days the job is active on
WS_JOB_EXEC_010,PROCEDURE,560, If v_cust_days >= 64 Then
WS_JOB_EXEC_010,PROCEDURE,561, v_cust_days := v_cust_days - 64;
WS_JOB_EXEC_010,PROCEDURE,562, v_Sunday := 1;
WS_JOB_EXEC_010,PROCEDURE,563, Else
WS_JOB_EXEC_010,PROCEDURE,564, v_Sunday := 0;
WS_JOB_EXEC_010,PROCEDURE,565, End If;
WS_JOB_EXEC_010,PROCEDURE,566,
WS_JOB_EXEC_010,PROCEDURE,567, If v_cust_days >= 32 Then
WS_JOB_EXEC_010,PROCEDURE,568, v_cust_days := v_cust_days - 32;
WS_JOB_EXEC_010,PROCEDURE,569, v_Saturday := 1;
WS_JOB_EXEC_010,PROCEDURE,570, Else
WS_JOB_EXEC_010,PROCEDURE,571, v_Saturday := 0;
WS_JOB_EXEC_010,PROCEDURE,572, End If;
WS_JOB_EXEC_010,PROCEDURE,573,
WS_JOB_EXEC_010,PROCEDURE,574, If v_cust_days >= 16 Then
WS_JOB_EXEC_010,PROCEDURE,575, v_cust_days := v_cust_days - 16;
WS_JOB_EXEC_010,PROCEDURE,576, v_Friday := 1;
WS_JOB_EXEC_010,PROCEDURE,577, Else
WS_JOB_EXEC_010,PROCEDURE,578, v_Friday := 0;
WS_JOB_EXEC_010,PROCEDURE,579, End If;
WS_JOB_EXEC_010,PROCEDURE,580,
WS_JOB_EXEC_010,PROCEDURE,581, If v_cust_days >= 8 Then
WS_JOB_EXEC_010,PROCEDURE,582, v_cust_days := v_cust_days - 8;
WS_JOB_EXEC_010,PROCEDURE,583, v_Thursday := 1;
WS_JOB_EXEC_010,PROCEDURE,584, Else
WS_JOB_EXEC_010,PROCEDURE,585, v_Thursday := 0;
WS_JOB_EXEC_010,PROCEDURE,586, End If;
WS_JOB_EXEC_010,PROCEDURE,587,
WS_JOB_EXEC_010,PROCEDURE,588, If v_cust_days >= 4 Then
WS_JOB_EXEC_010,PROCEDURE,589, v_cust_days := v_cust_days - 4;
WS_JOB_EXEC_010,PROCEDURE,590, v_Wednesday := 1;
WS_JOB_EXEC_010,PROCEDURE,591, Else
WS_JOB_EXEC_010,PROCEDURE,592, v_Wednesday := 0;
WS_JOB_EXEC_010,PROCEDURE,593, End If;
WS_JOB_EXEC_010,PROCEDURE,594,
WS_JOB_EXEC_010,PROCEDURE,595, If v_cust_days >= 2 Then
WS_JOB_EXEC_010,PROCEDURE,596, v_cust_days := v_cust_days - 2;
WS_JOB_EXEC_010,PROCEDURE,597, v_Tuesday := 1;
WS_JOB_EXEC_010,PROCEDURE,598, Else
WS_JOB_EXEC_010,PROCEDURE,599, v_Tuesday := 0;
WS_JOB_EXEC_010,PROCEDURE,600, End If;
WS_JOB_EXEC_010,PROCEDURE,601,
WS_JOB_EXEC_010,PROCEDURE,602, If v_cust_days >= 1 Then
WS_JOB_EXEC_010,PROCEDURE,603, v_cust_days := v_cust_days - 1;
WS_JOB_EXEC_010,PROCEDURE,604, v_Monday := 1;
WS_JOB_EXEC_010,PROCEDURE,605, Else
WS_JOB_EXEC_010,PROCEDURE,606, v_Monday := 0;
WS_JOB_EXEC_010,PROCEDURE,607, End If;
WS_JOB_EXEC_010,PROCEDURE,608,
WS_JOB_EXEC_010,PROCEDURE,609, -- Loop until we have a day match that we can execute on
WS_JOB_EXEC_010,PROCEDURE,610, While v_More = 1 LOOP
WS_JOB_EXEC_010,PROCEDURE,611, If v_cur_day_name = 'sun' Then
WS_JOB_EXEC_010,PROCEDURE,612, If v_Sunday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,613, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,614, End If;
WS_JOB_EXEC_010,PROCEDURE,615, ElsIf v_cur_day_name = 'mon' Then
WS_JOB_EXEC_010,PROCEDURE,616, If v_Monday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,617, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,618, End If;
WS_JOB_EXEC_010,PROCEDURE,619, ElsIf v_cur_day_name = 'tue' Then
WS_JOB_EXEC_010,PROCEDURE,620, If v_Tuesday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,621, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,622, End If;
WS_JOB_EXEC_010,PROCEDURE,623, ElsIf v_cur_day_name = 'wed' Then
WS_JOB_EXEC_010,PROCEDURE,624, If v_Wednesday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,625, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,626, End If;
WS_JOB_EXEC_010,PROCEDURE,627, ElsIf v_cur_day_name = 'thu' Then
WS_JOB_EXEC_010,PROCEDURE,628, If v_Thursday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,629, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,630, End If;
WS_JOB_EXEC_010,PROCEDURE,631, ElsIf v_cur_day_name = 'fri' Then
WS_JOB_EXEC_010,PROCEDURE,632, If v_Friday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,633, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,634, End If;
WS_JOB_EXEC_010,PROCEDURE,635, ElsIf v_cur_day_name = 'sat' Then
WS_JOB_EXEC_010,PROCEDURE,636, If v_Saturday = 1 Then
WS_JOB_EXEC_010,PROCEDURE,637, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,638, End If;
WS_JOB_EXEC_010,PROCEDURE,639, End If;
WS_JOB_EXEC_010,PROCEDURE,640,
WS_JOB_EXEC_010,PROCEDURE,641, -- If we found a day and it is today and past the stop by
WS_JOB_EXEC_010,PROCEDURE,642, -- time then keep looking
WS_JOB_EXEC_010,PROCEDURE,643, If v_More = 0 And v_AddDays = 0 And v_cur_HHMM >= v_cust_sb Then
WS_JOB_EXEC_010,PROCEDURE,644, v_More := 1;
WS_JOB_EXEC_010,PROCEDURE,645, v_cur_HHMM := 0;
WS_JOB_EXEC_010,PROCEDURE,646, End If;
WS_JOB_EXEC_010,PROCEDURE,647,
WS_JOB_EXEC_010,PROCEDURE,648, -- If no match add another day
WS_JOB_EXEC_010,PROCEDURE,649, If v_More = 1 Then
WS_JOB_EXEC_010,PROCEDURE,650, v_AddDays := v_AddDays + 1;
WS_JOB_EXEC_010,PROCEDURE,651, v_cur_day_name := lower(substr(to_char(sysdate+v_AddDays,'DY'),1,3));
WS_JOB_EXEC_010,PROCEDURE,652, End If;
WS_JOB_EXEC_010,PROCEDURE,653,
WS_JOB_EXEC_010,PROCEDURE,654, -- If we are looping then a problem so get out of here
WS_JOB_EXEC_010,PROCEDURE,655, If v_AddDays > 7 Then
WS_JOB_EXEC_010,PROCEDURE,656, v_More := 0;
WS_JOB_EXEC_010,PROCEDURE,657, v_AddDays := 5000;
WS_JOB_EXEC_010,PROCEDURE,658, End If;
WS_JOB_EXEC_010,PROCEDURE,659,
WS_JOB_EXEC_010,PROCEDURE,660, End Loop;
WS_JOB_EXEC_010,PROCEDURE,661, -- End of more days to search through
WS_JOB_EXEC_010,PROCEDURE,662,
WS_JOB_EXEC_010,PROCEDURE,663, -- reset the current time in case it got cleared.
WS_JOB_EXEC_010,PROCEDURE,664, v_cur_HHMM := ( v_cur_HH * 100 ) + v_cur_MM;
WS_JOB_EXEC_010,PROCEDURE,665,
WS_JOB_EXEC_010,PROCEDURE,666, -- See if we are past our stop by time
WS_JOB_EXEC_010,PROCEDURE,667, -- If past then work out the wait to the next start time
WS_JOB_EXEC_010,PROCEDURE,668, -- And subtract a day
WS_JOB_EXEC_010,PROCEDURE,669, -- If not past then If today and after the start after time then we can run
WS_JOB_EXEC_010,PROCEDURE,670, -- else work out any offset to the start after time.
WS_JOB_EXEC_010,PROCEDURE,671, If v_cur_HHMM >= v_cust_sb Then
WS_JOB_EXEC_010,PROCEDURE,672, v_wait_HH := 23 - v_cur_HH;
WS_JOB_EXEC_010,PROCEDURE,673, v_wait_MM := 60 - v_cur_MM;
WS_JOB_EXEC_010,PROCEDURE,674, v_wait_HH := v_wait_HH + v_cust_sa_HH;
WS_JOB_EXEC_010,PROCEDURE,675, v_wait_MM := v_wait_MM + v_cust_sa_MM;
WS_JOB_EXEC_010,PROCEDURE,676, If v_AddDays > 0 Then
WS_JOB_EXEC_010,PROCEDURE,677, v_AddDays := v_AddDays - 1;
WS_JOB_EXEC_010,PROCEDURE,678, End If;
WS_JOB_EXEC_010,PROCEDURE,679, Else
WS_JOB_EXEC_010,PROCEDURE,680, If v_cur_HHMM >= v_cust_sa And v_AddDays = 0 Then
WS_JOB_EXEC_010,PROCEDURE,681, v_wait_HH := 0;
WS_JOB_EXEC_010,PROCEDURE,682, v_wait_MM := 0;
WS_JOB_EXEC_010,PROCEDURE,683, Else
WS_JOB_EXEC_010,PROCEDURE,684, v_wait_HH := v_cust_sa_HH - v_cur_HH;
WS_JOB_EXEC_010,PROCEDURE,685, v_wait_MM := v_cust_sa_MM - v_cur_MM;
WS_JOB_EXEC_010,PROCEDURE,686, End If;
WS_JOB_EXEC_010,PROCEDURE,687, End If;
WS_JOB_EXEC_010,PROCEDURE,688,
WS_JOB_EXEC_010,PROCEDURE,689, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,690, set wjc_status = 'W',
WS_JOB_EXEC_010,PROCEDURE,691, wjc_start_after = sysdate + v_AddDays + (v_wait_HH/24) + (v_wait_MM/1440) + (v_cust_min/1440)
WS_JOB_EXEC_010,PROCEDURE,692, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,693, Else
WS_JOB_EXEC_010,PROCEDURE,694, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,695, set wjc_status = 'H',
WS_JOB_EXEC_010,PROCEDURE,696, wjc_start_after = sysdate
WS_JOB_EXEC_010,PROCEDURE,697, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,698, End If;
WS_JOB_EXEC_010,PROCEDURE,699, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,700, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,701, v_MsgText := 'Failure to re-appoint scheduled job ' || pi_job_name;
WS_JOB_EXEC_010,PROCEDURE,702, v_result := WsWrkAudit('E',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,703, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,704, END;
WS_JOB_EXEC_010,PROCEDURE,705,
WS_JOB_EXEC_010,PROCEDURE,706, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,707, -- If we are any other thread then we can start processing once
WS_JOB_EXEC_010,PROCEDURE,708, -- the job_run and task_run tables have been updated.
WS_JOB_EXEC_010,PROCEDURE,709, -- We will sleep for 2 minutes just in case, to give thread 0
WS_JOB_EXEC_010,PROCEDURE,710, -- time to compete its work
WS_JOB_EXEC_010,PROCEDURE,711, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,712, Else
WS_JOB_EXEC_010,PROCEDURE,713, DBMS_LOCK.SLEEP(2);
WS_JOB_EXEC_010,PROCEDURE,714,
WS_JOB_EXEC_010,PROCEDURE,715, v_loop_count := 0;
WS_JOB_EXEC_010,PROCEDURE,716,
WS_JOB_EXEC_010,PROCEDURE,717,
WS_JOB_EXEC_010,PROCEDURE,718, LOOP
WS_JOB_EXEC_010,PROCEDURE,719, -- Make sure we are running
WS_JOB_EXEC_010,PROCEDURE,720, -- Otherwise wait some more then go. Wait maximum of 2 minutes
WS_JOB_EXEC_010,PROCEDURE,721, BEGIN
WS_JOB_EXEC_010,PROCEDURE,722, select wjr_status, wjr_job_key into v_run_status, p_job_id
WS_JOB_EXEC_010,PROCEDURE,723, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,724, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_010,PROCEDURE,725, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,726, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,727, v_run_status := 'P';
WS_JOB_EXEC_010,PROCEDURE,728, END;
WS_JOB_EXEC_010,PROCEDURE,729,
WS_JOB_EXEC_010,PROCEDURE,730, If v_run_status = 'R' Then
WS_JOB_EXEC_010,PROCEDURE,731, EXIT;
WS_JOB_EXEC_010,PROCEDURE,732, End If;
WS_JOB_EXEC_010,PROCEDURE,733,
WS_JOB_EXEC_010,PROCEDURE,734, v_loop_count := v_loop_count + 1;
WS_JOB_EXEC_010,PROCEDURE,735, If v_loop_count < 13 Then
WS_JOB_EXEC_010,PROCEDURE,736, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_010,PROCEDURE,737, Else
WS_JOB_EXEC_010,PROCEDURE,738, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,739, ' Thread '||pi_thread||' failed to locate job. Terminating ...';
WS_JOB_EXEC_010,PROCEDURE,740, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,741, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,742, po_result_code := 0;
WS_JOB_EXEC_010,PROCEDURE,743, RETURN;
WS_JOB_EXEC_010,PROCEDURE,744, End If;
WS_JOB_EXEC_010,PROCEDURE,745, END LOOP;
WS_JOB_EXEC_010,PROCEDURE,746,
WS_JOB_EXEC_010,PROCEDURE,747, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,748, -- Record this thread as being active
WS_JOB_EXEC_010,PROCEDURE,749, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,750, BEGIN
WS_JOB_EXEC_010,PROCEDURE,751, select sid,serial#
WS_JOB_EXEC_010,PROCEDURE,752, into v_sid, v_serial
WS_JOB_EXEC_010,PROCEDURE,753, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_010,PROCEDURE,754, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,755, v_sid := 0;
WS_JOB_EXEC_010,PROCEDURE,756, v_serial := 0;
WS_JOB_EXEC_010,PROCEDURE,757, END;
WS_JOB_EXEC_010,PROCEDURE,758,
WS_JOB_EXEC_010,PROCEDURE,759, BEGIN
WS_JOB_EXEC_010,PROCEDURE,760, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_010,PROCEDURE,761, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_010,PROCEDURE,762, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_010,PROCEDURE,763, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,764, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,765, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,766, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,767, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,768, END;
WS_JOB_EXEC_010,PROCEDURE,769,
WS_JOB_EXEC_010,PROCEDURE,770, End If;
WS_JOB_EXEC_010,PROCEDURE,771,
WS_JOB_EXEC_010,PROCEDURE,772, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,773, -- R E S T A R T J O B
WS_JOB_EXEC_010,PROCEDURE,774, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,775, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,776, -- If we are a Restart job then check we are in a waiting
WS_JOB_EXEC_010,PROCEDURE,777, -- state.
WS_JOB_EXEC_010,PROCEDURE,778, -- Archive the _run table to the log table
WS_JOB_EXEC_010,PROCEDURE,779, -- Reset any failed jobs, change the restart counter and proceed
WS_JOB_EXEC_010,PROCEDURE,780, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,781, ElsIf upper(pi_action) = 'RESTART' Then
WS_JOB_EXEC_010,PROCEDURE,782, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,783, -- If we are thread 0 then do some checks and reset any halted or
WS_JOB_EXEC_010,PROCEDURE,784, -- failed tasks so that they will run
WS_JOB_EXEC_010,PROCEDURE,785, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,786, If pi_thread = 0 Then
WS_JOB_EXEC_010,PROCEDURE,787,
WS_JOB_EXEC_010,PROCEDURE,788, -- Make sure we are in run tables (i.e. have a job_run record)
WS_JOB_EXEC_010,PROCEDURE,789, -- And have a waiting state
WS_JOB_EXEC_010,PROCEDURE,790, -- Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,791, BEGIN
WS_JOB_EXEC_010,PROCEDURE,792, select wjr_status, wjr_job_key, wjr_publish_fail
WS_JOB_EXEC_010,PROCEDURE,793, into v_run_status, p_job_id, v_FailMsg
WS_JOB_EXEC_010,PROCEDURE,794, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,795, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_010,PROCEDURE,796, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,797,
WS_JOB_EXEC_010,PROCEDURE,798, select count(1)
WS_JOB_EXEC_010,PROCEDURE,799, into v_rec_count
WS_JOB_EXEC_010,PROCEDURE,800, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,801, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,802, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,803,
WS_JOB_EXEC_010,PROCEDURE,804, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,805, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,806, END;
WS_JOB_EXEC_010,PROCEDURE,807, If v_rec_count <> 1 Then
WS_JOB_EXEC_010,PROCEDURE,808, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not running. '||
WS_JOB_EXEC_010,PROCEDURE,809, 'Cannot restart. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,810, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,811, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,812, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,813, RETURN;
WS_JOB_EXEC_010,PROCEDURE,814, End If;
WS_JOB_EXEC_010,PROCEDURE,815, -- Setup to default for a failure if a Fail command has been provided
WS_JOB_EXEC_010,PROCEDURE,816, If v_FailMsg is not Null Then
WS_JOB_EXEC_010,PROCEDURE,817, po_action_key := 2;
WS_JOB_EXEC_010,PROCEDURE,818, po_action_msg := v_FailMsg;
WS_JOB_EXEC_010,PROCEDURE,819, Else
WS_JOB_EXEC_010,PROCEDURE,820, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,821, End If;
WS_JOB_EXEC_010,PROCEDURE,822, If v_run_status <> 'P' Then
WS_JOB_EXEC_010,PROCEDURE,823, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not prepared for re-run. '||
WS_JOB_EXEC_010,PROCEDURE,824, 'Cannot restart. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,825, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,826, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,827, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,828, RETURN;
WS_JOB_EXEC_010,PROCEDURE,829, End If;
WS_JOB_EXEC_010,PROCEDURE,830,
WS_JOB_EXEC_010,PROCEDURE,831, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,832, -- Record this thread as being active
WS_JOB_EXEC_010,PROCEDURE,833, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,834, BEGIN
WS_JOB_EXEC_010,PROCEDURE,835, select sid,serial#
WS_JOB_EXEC_010,PROCEDURE,836, into v_sid, v_serial
WS_JOB_EXEC_010,PROCEDURE,837, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_010,PROCEDURE,838, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,839, v_sid := 0;
WS_JOB_EXEC_010,PROCEDURE,840, v_serial := 0;
WS_JOB_EXEC_010,PROCEDURE,841, END;
WS_JOB_EXEC_010,PROCEDURE,842,
WS_JOB_EXEC_010,PROCEDURE,843, BEGIN
WS_JOB_EXEC_010,PROCEDURE,844, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_010,PROCEDURE,845, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_010,PROCEDURE,846, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_010,PROCEDURE,847, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,848, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,849, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,850, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,851, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,852, END;
WS_JOB_EXEC_010,PROCEDURE,853,
WS_JOB_EXEC_010,PROCEDURE,854,
WS_JOB_EXEC_010,PROCEDURE,855, -- Copy the job run record to the log record
WS_JOB_EXEC_010,PROCEDURE,856, --BEGIN
WS_JOB_EXEC_010,PROCEDURE,857, -- insert into ws_wrk_job_log
WS_JOB_EXEC_010,PROCEDURE,858, -- select * from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,859, -- where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,860, -- and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,861, --
WS_JOB_EXEC_010,PROCEDURE,862, -- update ws_wrk_job_log
WS_JOB_EXEC_010,PROCEDURE,863, -- set wjl_status = F
WS_JOB_EXEC_010,PROCEDURE,864, -- where wjl_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,865, -- and wjl_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,866, -- COMMIT;
WS_JOB_EXEC_010,PROCEDURE,867, --EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,868, -- v_MsgText := Job ||pi_job_name|| failed in copy to ws_wrk_job_log. ||
WS_JOB_EXEC_010,PROCEDURE,869, -- No Action !!!;
WS_JOB_EXEC_010,PROCEDURE,870, -- v_result := WsWrkAudit(F,pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,871, -- v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,872, -- RETURN -2;
WS_JOB_EXEC_010,PROCEDURE,873, --END;
WS_JOB_EXEC_010,PROCEDURE,874,
WS_JOB_EXEC_010,PROCEDURE,875, -- Copy the failed task run records to the log record
WS_JOB_EXEC_010,PROCEDURE,876, --BEGIN
WS_JOB_EXEC_010,PROCEDURE,877, -- insert into ws_wrk_task_log
WS_JOB_EXEC_010,PROCEDURE,878, -- select * from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,879, -- where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,880, -- and wtr_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,881, -- and wtr_run_status not in (W,C,H);
WS_JOB_EXEC_010,PROCEDURE,882, -- COMMIT;
WS_JOB_EXEC_010,PROCEDURE,883, --EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,884, -- v_MsgText := Job ||pi_job_name|| failed in copy of tasks to ws_wrk_task_log. ||
WS_JOB_EXEC_010,PROCEDURE,885, -- No Action !!!;
WS_JOB_EXEC_010,PROCEDURE,886, -- v_result := WsWrkAudit(F,pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,887, -- v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,888, -- RETURN -2;
WS_JOB_EXEC_010,PROCEDURE,889, --END;
WS_JOB_EXEC_010,PROCEDURE,890,
WS_JOB_EXEC_010,PROCEDURE,891, -- Set the job status to pending so our threads dont start
WS_JOB_EXEC_010,PROCEDURE,892, -- And increment the restart counter
WS_JOB_EXEC_010,PROCEDURE,893, BEGIN
WS_JOB_EXEC_010,PROCEDURE,894, update ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,895, set wjr_status = 'P',
WS_JOB_EXEC_010,PROCEDURE,896, -- wjr_okay_count = 0,
WS_JOB_EXEC_010,PROCEDURE,897, -- wjr_info_count = 0,
WS_JOB_EXEC_010,PROCEDURE,898, -- wjr_warning_count = 0,
WS_JOB_EXEC_010,PROCEDURE,899, -- wjr_error_count = 0,
WS_JOB_EXEC_010,PROCEDURE,900, -- wjr_detail_count = 0,
WS_JOB_EXEC_010,PROCEDURE,901, wjr_restart = wjr_restart + 1
WS_JOB_EXEC_010,PROCEDURE,902, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,903, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,904, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,905, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,906, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,907, ' failed to change state to pending restart '||
WS_JOB_EXEC_010,PROCEDURE,908, 'in ws_wrk_job_run. No Action!!!';
WS_JOB_EXEC_010,PROCEDURE,909, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,910, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,911, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,912, RETURN;
WS_JOB_EXEC_010,PROCEDURE,913, END;
WS_JOB_EXEC_010,PROCEDURE,914, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,915,
WS_JOB_EXEC_010,PROCEDURE,916, -- Loop through All the Task records.
WS_JOB_EXEC_010,PROCEDURE,917, -- Clearing any halted or failed status
WS_JOB_EXEC_010,PROCEDURE,918, FOR v_TaskRec in c_TaskRun LOOP
WS_JOB_EXEC_010,PROCEDURE,919,
WS_JOB_EXEC_010,PROCEDURE,920, If v_TaskRec.wtr_run_status = 'H' OR v_TaskRec.wtr_run_status = 'F'
WS_JOB_EXEC_010,PROCEDURE,921, OR v_TaskRec.wtr_run_status = 'U' Then
WS_JOB_EXEC_010,PROCEDURE,922, BEGIN
WS_JOB_EXEC_010,PROCEDURE,923, Update ws_wrk_task_run set
WS_JOB_EXEC_010,PROCEDURE,924, wtr_restart = wtr_restart + 1,
WS_JOB_EXEC_010,PROCEDURE,925, wtr_started = NULL,
WS_JOB_EXEC_010,PROCEDURE,926, wtr_completed = NULL,
WS_JOB_EXEC_010,PROCEDURE,927, wtr_elapsed_hh = 0,
WS_JOB_EXEC_010,PROCEDURE,928, wtr_elapsed_mi = 0,
WS_JOB_EXEC_010,PROCEDURE,929, wtr_run_status = 'W',
WS_JOB_EXEC_010,PROCEDURE,930, wtr_audit_status = NULL,
WS_JOB_EXEC_010,PROCEDURE,931, wtr_info_count = 0,
WS_JOB_EXEC_010,PROCEDURE,932, wtr_warning_count = 0,
WS_JOB_EXEC_010,PROCEDURE,933, wtr_detail_count = 0,
WS_JOB_EXEC_010,PROCEDURE,934, wtr_return_msg = NULL
WS_JOB_EXEC_010,PROCEDURE,935, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,936, and wtr_job_key = v_TaskRec.wtr_job_key
WS_JOB_EXEC_010,PROCEDURE,937, and wtr_sequence = v_TaskRec.wtr_sequence;
WS_JOB_EXEC_010,PROCEDURE,938, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,939, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,940, v_MsgText := 'Job '||pi_job_name||' failed resetting records in ws_wrk_task_run table. '||
WS_JOB_EXEC_010,PROCEDURE,941, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,942, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,943, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,944, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,945, RETURN;
WS_JOB_EXEC_010,PROCEDURE,946, END;
WS_JOB_EXEC_010,PROCEDURE,947, Else
WS_JOB_EXEC_010,PROCEDURE,948, BEGIN
WS_JOB_EXEC_010,PROCEDURE,949, Update ws_wrk_task_run set
WS_JOB_EXEC_010,PROCEDURE,950, wtr_restart = wtr_restart + 1
WS_JOB_EXEC_010,PROCEDURE,951, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,952, and wtr_job_key = v_TaskRec.wtr_job_key
WS_JOB_EXEC_010,PROCEDURE,953, and wtr_sequence = v_TaskRec.wtr_sequence;
WS_JOB_EXEC_010,PROCEDURE,954, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,955, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,956, v_MsgText := 'Job '||pi_job_name||' failed resetting records in ws_wrk_task_run table. '||
WS_JOB_EXEC_010,PROCEDURE,957, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,958, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,959, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,960, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,961, RETURN;
WS_JOB_EXEC_010,PROCEDURE,962, END;
WS_JOB_EXEC_010,PROCEDURE,963, End If;
WS_JOB_EXEC_010,PROCEDURE,964,
WS_JOB_EXEC_010,PROCEDURE,965, END LOOP;
WS_JOB_EXEC_010,PROCEDURE,966,
WS_JOB_EXEC_010,PROCEDURE,967, -- Set the job status to running
WS_JOB_EXEC_010,PROCEDURE,968, BEGIN
WS_JOB_EXEC_010,PROCEDURE,969, update ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,970, set wjr_status = 'R'
WS_JOB_EXEC_010,PROCEDURE,971, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,972, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,973, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,974, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,975, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,976, ' failed to change state to running '||
WS_JOB_EXEC_010,PROCEDURE,977, 'in ws_wrk_job_run. No Action!!!';
WS_JOB_EXEC_010,PROCEDURE,978, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,979, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,980, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,981, RETURN;
WS_JOB_EXEC_010,PROCEDURE,982, END;
WS_JOB_EXEC_010,PROCEDURE,983, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,984,
WS_JOB_EXEC_010,PROCEDURE,985, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,986, ' Restarted. ';
WS_JOB_EXEC_010,PROCEDURE,987, v_result := WsWrkAudit('B',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,988, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,989,
WS_JOB_EXEC_010,PROCEDURE,990, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,991, -- If we are not thread 0 then wait for two minutes for the okay
WS_JOB_EXEC_010,PROCEDURE,992, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,993, Else
WS_JOB_EXEC_010,PROCEDURE,994, -- Get the job key for the job name. There should be one and
WS_JOB_EXEC_010,PROCEDURE,995, -- only one key. Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,996, BEGIN
WS_JOB_EXEC_010,PROCEDURE,997, select wjr_job_key into p_job_id
WS_JOB_EXEC_010,PROCEDURE,998, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,999, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name));
WS_JOB_EXEC_010,PROCEDURE,1000, v_rec_count := 1;
WS_JOB_EXEC_010,PROCEDURE,1001, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1002, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1003, END;
WS_JOB_EXEC_010,PROCEDURE,1004, If v_rec_count <> 1 Then
WS_JOB_EXEC_010,PROCEDURE,1005, v_MsgText := 'Job '||pi_job_name||' passed invalid job name in Restart. '||
WS_JOB_EXEC_010,PROCEDURE,1006, v_rec_count||' such records exist. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1007, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1008, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1009, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1010, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1011, End If;
WS_JOB_EXEC_010,PROCEDURE,1012,
WS_JOB_EXEC_010,PROCEDURE,1013, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1014, -- Record this thread as being active
WS_JOB_EXEC_010,PROCEDURE,1015, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1016, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1017, select sid,serial#
WS_JOB_EXEC_010,PROCEDURE,1018, into v_sid, v_serial
WS_JOB_EXEC_010,PROCEDURE,1019, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_010,PROCEDURE,1020, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1021, v_sid := 0;
WS_JOB_EXEC_010,PROCEDURE,1022, v_serial := 0;
WS_JOB_EXEC_010,PROCEDURE,1023, END;
WS_JOB_EXEC_010,PROCEDURE,1024,
WS_JOB_EXEC_010,PROCEDURE,1025, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1026, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_010,PROCEDURE,1027, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_010,PROCEDURE,1028, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_010,PROCEDURE,1029, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1030, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1031, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,1032, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1033, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1034, END;
WS_JOB_EXEC_010,PROCEDURE,1035,
WS_JOB_EXEC_010,PROCEDURE,1036, v_loop_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1037,
WS_JOB_EXEC_010,PROCEDURE,1038, LOOP
WS_JOB_EXEC_010,PROCEDURE,1039, -- Make sure we are running
WS_JOB_EXEC_010,PROCEDURE,1040, -- Otherwise wait some more then go. Wait maximum of 2 minutes
WS_JOB_EXEC_010,PROCEDURE,1041, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1042, select wjr_status into v_run_status
WS_JOB_EXEC_010,PROCEDURE,1043, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,1044, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1045, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1046, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1047, v_run_status := 'P';
WS_JOB_EXEC_010,PROCEDURE,1048, END;
WS_JOB_EXEC_010,PROCEDURE,1049,
WS_JOB_EXEC_010,PROCEDURE,1050, If v_run_status = 'R' Then
WS_JOB_EXEC_010,PROCEDURE,1051, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1052, End If;
WS_JOB_EXEC_010,PROCEDURE,1053,
WS_JOB_EXEC_010,PROCEDURE,1054, v_loop_count := v_loop_count + 1;
WS_JOB_EXEC_010,PROCEDURE,1055, If v_loop_count < 13 Then
WS_JOB_EXEC_010,PROCEDURE,1056, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_010,PROCEDURE,1057, Else
WS_JOB_EXEC_010,PROCEDURE,1058, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1059, ' Thread '||pi_thread||' failed to locate job. Terminating ...';
WS_JOB_EXEC_010,PROCEDURE,1060, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1061, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1062, po_result_code := 0;
WS_JOB_EXEC_010,PROCEDURE,1063, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1064, End If;
WS_JOB_EXEC_010,PROCEDURE,1065, END LOOP;
WS_JOB_EXEC_010,PROCEDURE,1066, End If;
WS_JOB_EXEC_010,PROCEDURE,1067,
WS_JOB_EXEC_010,PROCEDURE,1068, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1069, -- R E J O I N J O B
WS_JOB_EXEC_010,PROCEDURE,1070, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1071, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1072, -- If we are a Rejoin job then we have completed a host
WS_JOB_EXEC_010,PROCEDURE,1073, -- subtask. So check we are in a running state.
WS_JOB_EXEC_010,PROCEDURE,1074, -- Set the result status for the task we have just actioned
WS_JOB_EXEC_010,PROCEDURE,1075, -- and proceed with other tasks
WS_JOB_EXEC_010,PROCEDURE,1076, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1077, ElsIf upper(pi_action) = 'REJOIN' Then
WS_JOB_EXEC_010,PROCEDURE,1078,
WS_JOB_EXEC_010,PROCEDURE,1079, -- Setup our return codes
WS_JOB_EXEC_010,PROCEDURE,1080, p_status_code := pi_task_status;
WS_JOB_EXEC_010,PROCEDURE,1081, p_return_msg := pi_task_msg;
WS_JOB_EXEC_010,PROCEDURE,1082, p_task_id := pi_task_key;
WS_JOB_EXEC_010,PROCEDURE,1083, p_job_id := pi_job_key;
WS_JOB_EXEC_010,PROCEDURE,1084,
WS_JOB_EXEC_010,PROCEDURE,1085, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1086, -- Make sure we have a valid return status
WS_JOB_EXEC_010,PROCEDURE,1087, -- Otherwise make this a failure
WS_JOB_EXEC_010,PROCEDURE,1088, -- Update the status of the task we have completed.
WS_JOB_EXEC_010,PROCEDURE,1089, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1090, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1091, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,1092, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1093, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_010,PROCEDURE,1094, v_audit_status := 'W';
WS_JOB_EXEC_010,PROCEDURE,1095, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1096, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_010,PROCEDURE,1097, v_audit_status := 'E';
WS_JOB_EXEC_010,PROCEDURE,1098, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1099, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_010,PROCEDURE,1100, v_audit_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1101, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1102, ELSE
WS_JOB_EXEC_010,PROCEDURE,1103, v_audit_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1104, v_run_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1105, p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,1106, p_return_msg := substr('Invalid return code '||pi_task_status||
WS_JOB_EXEC_010,PROCEDURE,1107, '. Msg was '||pi_task_msg,1,970)||
WS_JOB_EXEC_010,PROCEDURE,1108, '. Expecting return code of 1,-1,-2, or -3';
WS_JOB_EXEC_010,PROCEDURE,1109, End If;
WS_JOB_EXEC_010,PROCEDURE,1110,
WS_JOB_EXEC_010,PROCEDURE,1111, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1112, -- Record this thread as being active
WS_JOB_EXEC_010,PROCEDURE,1113, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1114, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1115, select sid,serial#
WS_JOB_EXEC_010,PROCEDURE,1116, into v_sid, v_serial
WS_JOB_EXEC_010,PROCEDURE,1117, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_010,PROCEDURE,1118, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1119, v_sid := 0;
WS_JOB_EXEC_010,PROCEDURE,1120, v_serial := 0;
WS_JOB_EXEC_010,PROCEDURE,1121, END;
WS_JOB_EXEC_010,PROCEDURE,1122, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1123, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_010,PROCEDURE,1124, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_010,PROCEDURE,1125, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_010,PROCEDURE,1126, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1127, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1128, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,1129, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1130, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1131, END;
WS_JOB_EXEC_010,PROCEDURE,1132,
WS_JOB_EXEC_010,PROCEDURE,1133, -- Delete the temporary script we have created for this
WS_JOB_EXEC_010,PROCEDURE,1134, -- task to use
WS_JOB_EXEC_010,PROCEDURE,1135, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1136, delete
WS_JOB_EXEC_010,PROCEDURE,1137, from ws_wrk_task_scr_line
WS_JOB_EXEC_010,PROCEDURE,1138, where wtsl_task_key = pi_task_key
WS_JOB_EXEC_010,PROCEDURE,1139, and wtsl_job_key = pi_job_key
WS_JOB_EXEC_010,PROCEDURE,1140, and wtsl_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1141,
WS_JOB_EXEC_010,PROCEDURE,1142, delete
WS_JOB_EXEC_010,PROCEDURE,1143, from ws_wrk_task_scr_hdr
WS_JOB_EXEC_010,PROCEDURE,1144, where wtsh_task_key = pi_task_key
WS_JOB_EXEC_010,PROCEDURE,1145, and wtsh_job_key = pi_job_key
WS_JOB_EXEC_010,PROCEDURE,1146, and wtsh_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1147, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1148, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1149, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1150, END;
WS_JOB_EXEC_010,PROCEDURE,1151,
WS_JOB_EXEC_010,PROCEDURE,1152, -- Make sure we are in run tables (i.e. have a job_run record)
WS_JOB_EXEC_010,PROCEDURE,1153, -- And have a waiting state
WS_JOB_EXEC_010,PROCEDURE,1154, -- Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,1155, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1156, select wjr_status, wjr_job_key, wjr_publish_fail
WS_JOB_EXEC_010,PROCEDURE,1157, into v_run_status, p_job_id, v_FailMsg
WS_JOB_EXEC_010,PROCEDURE,1158, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,1159, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_010,PROCEDURE,1160, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1161,
WS_JOB_EXEC_010,PROCEDURE,1162, select count(1)
WS_JOB_EXEC_010,PROCEDURE,1163, into v_rec_count
WS_JOB_EXEC_010,PROCEDURE,1164, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,1165, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1166, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1167, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1168, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1169, END;
WS_JOB_EXEC_010,PROCEDURE,1170, If v_rec_count <> 1 Then
WS_JOB_EXEC_010,PROCEDURE,1171, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not running. '||
WS_JOB_EXEC_010,PROCEDURE,1172, 'Cannot rejoin. '||v_rec_count||' jobs running. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1173, v_result := WsWrkAudit('E',pi_job_name, rtrim(p_task_name), pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1174, v_MsgText,SQLCODE,SQLERRM,pi_task_key,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1175,
WS_JOB_EXEC_010,PROCEDURE,1176, -- See if we can work out what has happened to the job
WS_JOB_EXEC_010,PROCEDURE,1177, -- and let them know
WS_JOB_EXEC_010,PROCEDURE,1178, If v_rec_count = 0 Then
WS_JOB_EXEC_010,PROCEDURE,1179, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1180, select wjl_status, wjl_publish_fail
WS_JOB_EXEC_010,PROCEDURE,1181, into v_run_status, v_FailMsg
WS_JOB_EXEC_010,PROCEDURE,1182, from ws_wrk_job_log
WS_JOB_EXEC_010,PROCEDURE,1183, where wjl_name = pi_job_name
WS_JOB_EXEC_010,PROCEDURE,1184, and wjl_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1185, v_MsgText := SUBSTR('Job '||pi_job_name||' sequence '||pi_sequence||' has a log entry with status '||
WS_JOB_EXEC_010,PROCEDURE,1186, v_run_status||' '||v_FailMsg, 1, 1023);
WS_JOB_EXEC_010,PROCEDURE,1187, v_result := WsWrkAudit('E',pi_job_name, rtrim(p_task_name), pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1188, v_MsgText,NULL,NULL,pi_task_key,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1189, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1190, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1191, END;
WS_JOB_EXEC_010,PROCEDURE,1192, End If;
WS_JOB_EXEC_010,PROCEDURE,1193,
WS_JOB_EXEC_010,PROCEDURE,1194, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1195, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,1196, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1197, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_010,PROCEDURE,1198, v_audit_status := 'W';
WS_JOB_EXEC_010,PROCEDURE,1199, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1200, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_010,PROCEDURE,1201, v_audit_status := 'E';
WS_JOB_EXEC_010,PROCEDURE,1202, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1203, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_010,PROCEDURE,1204, v_audit_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1205, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1206, ELSE
WS_JOB_EXEC_010,PROCEDURE,1207, v_audit_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1208, v_run_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1209, p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,1210, End If;
WS_JOB_EXEC_010,PROCEDURE,1211, v_result := WsWrkAudit(v_audit_status, p_job_name, rtrim(p_task_name), p_sequence,
WS_JOB_EXEC_010,PROCEDURE,1212, p_return_msg, NULL, NULL, pi_task_key, p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1213, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1214, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1215, End If;
WS_JOB_EXEC_010,PROCEDURE,1216,
WS_JOB_EXEC_010,PROCEDURE,1217,
WS_JOB_EXEC_010,PROCEDURE,1218, -- Setup to default for a failure if a Fail command has been provided
WS_JOB_EXEC_010,PROCEDURE,1219, If v_FailMsg is not Null Then
WS_JOB_EXEC_010,PROCEDURE,1220, po_action_key := 2;
WS_JOB_EXEC_010,PROCEDURE,1221, po_action_msg := v_FailMsg;
WS_JOB_EXEC_010,PROCEDURE,1222, Else
WS_JOB_EXEC_010,PROCEDURE,1223, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,1224, End If;
WS_JOB_EXEC_010,PROCEDURE,1225,
WS_JOB_EXEC_010,PROCEDURE,1226, -- Get some info about the task we have just completed
WS_JOB_EXEC_010,PROCEDURE,1227, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1228, select wtr_obj_key, wtr_obj_type, wtr_action_type
WS_JOB_EXEC_010,PROCEDURE,1229, into v_obj_key, v_obj_type, v_action_type
WS_JOB_EXEC_010,PROCEDURE,1230, from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1231, where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1232, and wtr_task_key = pi_task_key
WS_JOB_EXEC_010,PROCEDURE,1233, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1234, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1235, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1236, ' Task ' || pi_task_name || ' not running. '||
WS_JOB_EXEC_010,PROCEDURE,1237, 'Cannot rejoin. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1238, v_result := WsWrkAudit('E',pi_job_name, rtrim(p_task_name), pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1239, v_MsgText,NULL,NULL,pi_task_key,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1240, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1241, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,1242, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1243, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_010,PROCEDURE,1244, v_audit_status := 'W';
WS_JOB_EXEC_010,PROCEDURE,1245, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1246, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_010,PROCEDURE,1247, v_audit_status := 'E';
WS_JOB_EXEC_010,PROCEDURE,1248, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1249, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_010,PROCEDURE,1250, v_audit_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1251, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1252, ELSE
WS_JOB_EXEC_010,PROCEDURE,1253, v_audit_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1254, v_run_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1255, p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,1256, End If;
WS_JOB_EXEC_010,PROCEDURE,1257, v_result := WsWrkAudit(v_audit_status, p_job_name, rtrim(p_task_name), p_sequence,
WS_JOB_EXEC_010,PROCEDURE,1258, p_return_msg, NULL, NULL, pi_task_key, p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1259,
WS_JOB_EXEC_010,PROCEDURE,1260, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1261, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1262, END;
WS_JOB_EXEC_010,PROCEDURE,1263,
WS_JOB_EXEC_010,PROCEDURE,1264,
WS_JOB_EXEC_010,PROCEDURE,1265, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1266, -- If a Load then we have just completed the load phase
WS_JOB_EXEC_010,PROCEDURE,1267, -- And now need to run any post load procedure if the
WS_JOB_EXEC_010,PROCEDURE,1268, -- load was a success
WS_JOB_EXEC_010,PROCEDURE,1269, -- If a Load and the action is a process then we need
WS_JOB_EXEC_010,PROCEDURE,1270, -- to do any index builds as well
WS_JOB_EXEC_010,PROCEDURE,1271, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1272, v_step := 2301;
WS_JOB_EXEC_010,PROCEDURE,1273, If v_obj_type = v_ws_obj_load Then
WS_JOB_EXEC_010,PROCEDURE,1274, If p_status_code >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,1275, v_result := ws_act_post_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,1276, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,1277, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,1278, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_010,PROCEDURE,1279, If p_status_code_2 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1280, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1281, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1282, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_010,PROCEDURE,1283, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1284, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1285, End If;
WS_JOB_EXEC_010,PROCEDURE,1286, If v_result >= -1 And v_action_type = v_ws_act_process Then
WS_JOB_EXEC_010,PROCEDURE,1287,
WS_JOB_EXEC_010,PROCEDURE,1288, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,1289, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,1290, p_job_name, p_task_name, p_job_id, p_task_id,'',
WS_JOB_EXEC_010,PROCEDURE,1291, p_return_msg_3, p_status_code_3);
WS_JOB_EXEC_010,PROCEDURE,1292, If p_status_code_3 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1293, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1294, p_return_msg_3,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1295, ElsIf p_status_code_3 < 1 Then
WS_JOB_EXEC_010,PROCEDURE,1296, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1297, p_return_msg_3,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1298, End If;
WS_JOB_EXEC_010,PROCEDURE,1299, Else
WS_JOB_EXEC_010,PROCEDURE,1300, p_status_code_2 := 1;
WS_JOB_EXEC_010,PROCEDURE,1301, End If;
WS_JOB_EXEC_010,PROCEDURE,1302,
WS_JOB_EXEC_010,PROCEDURE,1303, -- If our post load procedure failed and the load worked then
WS_JOB_EXEC_010,PROCEDURE,1304, -- record the post load failure
WS_JOB_EXEC_010,PROCEDURE,1305, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,1306, p_status_code := p_status_code_2;
WS_JOB_EXEC_010,PROCEDURE,1307, End If;
WS_JOB_EXEC_010,PROCEDURE,1308, If p_status_code_3 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,1309, p_status_code := p_status_code_3;
WS_JOB_EXEC_010,PROCEDURE,1310, End If;
WS_JOB_EXEC_010,PROCEDURE,1311, End If;
WS_JOB_EXEC_010,PROCEDURE,1312, End If;
WS_JOB_EXEC_010,PROCEDURE,1313,
WS_JOB_EXEC_010,PROCEDURE,1314, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1315, -- Log the results in the audit trail
WS_JOB_EXEC_010,PROCEDURE,1316, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1317, v_step := 2302;
WS_JOB_EXEC_010,PROCEDURE,1318, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1319, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,1320, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1321, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_010,PROCEDURE,1322, v_audit_status := 'W';
WS_JOB_EXEC_010,PROCEDURE,1323, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1324, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_010,PROCEDURE,1325, v_audit_status := 'E';
WS_JOB_EXEC_010,PROCEDURE,1326, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1327, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_010,PROCEDURE,1328, v_audit_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1329, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,1330, ELSE
WS_JOB_EXEC_010,PROCEDURE,1331, v_audit_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1332, v_run_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,1333, p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,1334, End If;
WS_JOB_EXEC_010,PROCEDURE,1335, v_result := WsWrkAudit(v_audit_status, p_job_name, rtrim(p_task_name), p_sequence,
WS_JOB_EXEC_010,PROCEDURE,1336, p_return_msg, NULL, NULL, pi_task_key, p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1337,
WS_JOB_EXEC_010,PROCEDURE,1338, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1339, -- Update the run record to indicate our final status
WS_JOB_EXEC_010,PROCEDURE,1340, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1341, v_step := 2303;
WS_JOB_EXEC_010,PROCEDURE,1342, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1343, update ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1344, set wtr_run_status = v_run_status,
WS_JOB_EXEC_010,PROCEDURE,1345, wtr_audit_status = v_audit_status,
WS_JOB_EXEC_010,PROCEDURE,1346, wtr_return_msg = p_return_msg,
WS_JOB_EXEC_010,PROCEDURE,1347, wtr_elapsed_hh = trunc(to_number(sysdate-wtr_started)*24,0),
WS_JOB_EXEC_010,PROCEDURE,1348, wtr_elapsed_mi = round(to_number(sysdate-wtr_started)*24*60,0) - (
WS_JOB_EXEC_010,PROCEDURE,1349, trunc(to_number(sysdate-wtr_started)*24,0)*60),
WS_JOB_EXEC_010,PROCEDURE,1350, wtr_completed = sysdate
WS_JOB_EXEC_010,PROCEDURE,1351, where wtr_task_key = pi_task_key
WS_JOB_EXEC_010,PROCEDURE,1352, and wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1353, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1354, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1355, ' failed in final update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_010,PROCEDURE,1356, pi_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,1357, v_result := WsWrkAudit('F',pi_job_name, rtrim(pi_task_name), pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1358, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1359, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1360, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1361, END;
WS_JOB_EXEC_010,PROCEDURE,1362, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1363,
WS_JOB_EXEC_010,PROCEDURE,1364,
WS_JOB_EXEC_010,PROCEDURE,1365, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1366, -- C A N C E L J O B
WS_JOB_EXEC_010,PROCEDURE,1367, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1368, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1369, -- If we are a Cancel job then check we are in a halted or aborted
WS_JOB_EXEC_010,PROCEDURE,1370, -- state.
WS_JOB_EXEC_010,PROCEDURE,1371, -- Archive the _run table to the log table
WS_JOB_EXEC_010,PROCEDURE,1372, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1373, ElsIf upper(pi_action) = 'CANCEL' Then
WS_JOB_EXEC_010,PROCEDURE,1374, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1375, -- If we are thread 0 then do some checks and archive
WS_JOB_EXEC_010,PROCEDURE,1376, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1377, If pi_thread = 0 Then
WS_JOB_EXEC_010,PROCEDURE,1378,
WS_JOB_EXEC_010,PROCEDURE,1379, -- Get the job key for the job name. There should be one and
WS_JOB_EXEC_010,PROCEDURE,1380, -- only one key. Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,1381, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1382, select wjc_job_key into p_job_id
WS_JOB_EXEC_010,PROCEDURE,1383, from ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,1384, where rtrim(upper(wjc_name)) = rtrim(upper(pi_job_name));
WS_JOB_EXEC_010,PROCEDURE,1385, v_rec_count := 1;
WS_JOB_EXEC_010,PROCEDURE,1386, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1387, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1388, END;
WS_JOB_EXEC_010,PROCEDURE,1389, If v_rec_count <> 1 Then
WS_JOB_EXEC_010,PROCEDURE,1390, v_MsgText := 'Job '||pi_job_name||' passed invalid job name in Cancel. '||
WS_JOB_EXEC_010,PROCEDURE,1391, v_rec_count||' such records exist. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1392, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1393, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1394, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1395, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1396, End If;
WS_JOB_EXEC_010,PROCEDURE,1397,
WS_JOB_EXEC_010,PROCEDURE,1398, -- Make sure we are already running (i.e. have a job_run record)
WS_JOB_EXEC_010,PROCEDURE,1399, -- Otherwise a fatal problem.
WS_JOB_EXEC_010,PROCEDURE,1400, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1401, select count(1) into v_rec_count
WS_JOB_EXEC_010,PROCEDURE,1402, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,1403, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1404, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1405, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1406, v_rec_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1407, END;
WS_JOB_EXEC_010,PROCEDURE,1408, If v_rec_count <> 1 Then
WS_JOB_EXEC_010,PROCEDURE,1409, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not running. '||
WS_JOB_EXEC_010,PROCEDURE,1410, 'Cannot cancel. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1411, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1412, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1413, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1414, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1415, End If;
WS_JOB_EXEC_010,PROCEDURE,1416,
WS_JOB_EXEC_010,PROCEDURE,1417, -- Move the job run record to the log record
WS_JOB_EXEC_010,PROCEDURE,1418, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1419, insert into ws_wrk_job_log
WS_JOB_EXEC_010,PROCEDURE,1420, select * from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,1421, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1422, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1423, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1424, delete from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,1425, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1426, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1427, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1428, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1429, v_MsgText := 'Job '||pi_job_name||' failed in xfer to ws_wrk_job_log. '||
WS_JOB_EXEC_010,PROCEDURE,1430, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1431, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1432, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1433, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1434, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1435, END;
WS_JOB_EXEC_010,PROCEDURE,1436,
WS_JOB_EXEC_010,PROCEDURE,1437, -- Move the task run records to the log record
WS_JOB_EXEC_010,PROCEDURE,1438, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1439, insert into ws_wrk_task_log
WS_JOB_EXEC_010,PROCEDURE,1440, select * from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1441, where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1442, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1443, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1444, delete from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1445, where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1446, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,1447, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1448, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1449, v_MsgText := 'Job '||pi_job_name||' failed in xfer of tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_010,PROCEDURE,1450, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1451, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1452, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1453, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1454, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1455, END;
WS_JOB_EXEC_010,PROCEDURE,1456, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1457,
WS_JOB_EXEC_010,PROCEDURE,1458,
WS_JOB_EXEC_010,PROCEDURE,1459, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1460, ' Canceled. ';
WS_JOB_EXEC_010,PROCEDURE,1461, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1462, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1463,
WS_JOB_EXEC_010,PROCEDURE,1464, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1465, -- If we are not thread 0 then wait for ten seconds and proceed.
WS_JOB_EXEC_010,PROCEDURE,1466, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1467, Else
WS_JOB_EXEC_010,PROCEDURE,1468, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_010,PROCEDURE,1469, End If;
WS_JOB_EXEC_010,PROCEDURE,1470,
WS_JOB_EXEC_010,PROCEDURE,1471,
WS_JOB_EXEC_010,PROCEDURE,1472, -- not a New or a Restart so we have a problem
WS_JOB_EXEC_010,PROCEDURE,1473, Else
WS_JOB_EXEC_010,PROCEDURE,1474, v_MsgText := 'Job '||pi_job_name||' passed invalid option: '||
WS_JOB_EXEC_010,PROCEDURE,1475, pi_action||'. No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,1476, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1477, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1478, End If;
WS_JOB_EXEC_010,PROCEDURE,1479,
WS_JOB_EXEC_010,PROCEDURE,1480, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1481, -- E X E C U T E T A S K S
WS_JOB_EXEC_010,PROCEDURE,1482, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1483, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1484, --**********************************************************************
WS_JOB_EXEC_010,PROCEDURE,1485, -- Okay to start processing tasks. Three possible types of tasks
WS_JOB_EXEC_010,PROCEDURE,1486, -- will be handled. These Being (P)procedures, (F)functions and
WS_JOB_EXEC_010,PROCEDURE,1487, -- (C) checkpoints.
WS_JOB_EXEC_010,PROCEDURE,1488, -- Open the cursor we will use t run the tasks
WS_JOB_EXEC_010,PROCEDURE,1489, --**********************************************************************
WS_JOB_EXEC_010,PROCEDURE,1490, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1491, v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_JOB_EXEC_010,PROCEDURE,1492, v_task_count := 1;
WS_JOB_EXEC_010,PROCEDURE,1493, v_step := 100;
WS_JOB_EXEC_010,PROCEDURE,1494,
WS_JOB_EXEC_010,PROCEDURE,1495, -- While More tasks loop
WS_JOB_EXEC_010,PROCEDURE,1496, WHILE v_task_count > 0 LOOP
WS_JOB_EXEC_010,PROCEDURE,1497,
WS_JOB_EXEC_010,PROCEDURE,1498, v_step := 110;
WS_JOB_EXEC_010,PROCEDURE,1499, v_task_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1500, v_running_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1501, v_halted_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1502, v_failed_count := 0;
WS_JOB_EXEC_010,PROCEDURE,1503, v_just_done := 0;
WS_JOB_EXEC_010,PROCEDURE,1504, v_idle_thread := 0;
WS_JOB_EXEC_010,PROCEDURE,1505, FOR v_TaskRec in c_TaskRun LOOP
WS_JOB_EXEC_010,PROCEDURE,1506, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1507, -- Check the status of each task
WS_JOB_EXEC_010,PROCEDURE,1508, -- If it is waiting then we will check dependencies etc.
WS_JOB_EXEC_010,PROCEDURE,1509, -- and see if it needs to be executed.
WS_JOB_EXEC_010,PROCEDURE,1510, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1511, v_step := 120;
WS_JOB_EXEC_010,PROCEDURE,1512, v_process := 0;
WS_JOB_EXEC_010,PROCEDURE,1513, If v_TaskRec.wtr_run_status = 'W' Then
WS_JOB_EXEC_010,PROCEDURE,1514, v_step := 130;
WS_JOB_EXEC_010,PROCEDURE,1515, v_task_count := 1;
WS_JOB_EXEC_010,PROCEDURE,1516, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1517, -- Check the dependencies for the task
WS_JOB_EXEC_010,PROCEDURE,1518, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1519, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1520, select count(1) into v_rec_count from ws_wrk_dependency
WS_JOB_EXEC_010,PROCEDURE,1521, where wdp_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1522, and wdp_child_task_key = v_TaskRec.wtr_task_key;
WS_JOB_EXEC_010,PROCEDURE,1523, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1524, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1525, ' failed in read of ws_wrk_dependency. '||
WS_JOB_EXEC_010,PROCEDURE,1526, ' Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,1527, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1528, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1529, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1530, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1531, END;
WS_JOB_EXEC_010,PROCEDURE,1532, -- If parent dependencies then check each to see if it has completed.
WS_JOB_EXEC_010,PROCEDURE,1533, v_child_key := v_TaskRec.wtr_task_key;
WS_JOB_EXEC_010,PROCEDURE,1534, v_halted := 0;
WS_JOB_EXEC_010,PROCEDURE,1535, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,1536, v_checked := 0;
WS_JOB_EXEC_010,PROCEDURE,1537, v_step := 140;
WS_JOB_EXEC_010,PROCEDURE,1538, FOR v_DepRec in c_Dependency LOOP
WS_JOB_EXEC_010,PROCEDURE,1539, -- get the parent task record from the task_run table
WS_JOB_EXEC_010,PROCEDURE,1540, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1541, select wtr_run_status, wtr_audit_status, wtr_abort_level
WS_JOB_EXEC_010,PROCEDURE,1542, into v_run_status, v_audit_status, v_abort_level
WS_JOB_EXEC_010,PROCEDURE,1543, from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1544, where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1545, and wtr_task_key = v_DepRec.wdp_parent_task_key;
WS_JOB_EXEC_010,PROCEDURE,1546, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1547, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1548, ' failed in parent task read of ws_wrk_task_run. '||
WS_JOB_EXEC_010,PROCEDURE,1549, ' Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,1550, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1551, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1552, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1553, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1554, END;
WS_JOB_EXEC_010,PROCEDURE,1555, v_step := 150;
WS_JOB_EXEC_010,PROCEDURE,1556,
WS_JOB_EXEC_010,PROCEDURE,1557, -- Get the status for the parent task.
WS_JOB_EXEC_010,PROCEDURE,1558, -- If the parent is waiting or running then skip the rest of the tests as we cant go
WS_JOB_EXEC_010,PROCEDURE,1559, -- If the parent has been halted then set the flag to halt this task also.
WS_JOB_EXEC_010,PROCEDURE,1560, -- If the parent has failed or completed check the audit status
WS_JOB_EXEC_010,PROCEDURE,1561, -- The abort level will tell us if we should count this as a halt or an okay
WS_JOB_EXEC_010,PROCEDURE,1562, If v_run_status = 'W' Then
WS_JOB_EXEC_010,PROCEDURE,1563, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1564, ElsIf v_run_status = 'R' Then
WS_JOB_EXEC_010,PROCEDURE,1565, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1566, ElsIf v_run_status = 'H' Then
WS_JOB_EXEC_010,PROCEDURE,1567, v_halted := 1;
WS_JOB_EXEC_010,PROCEDURE,1568, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1569, ElsIf v_run_status = 'F' Then
WS_JOB_EXEC_010,PROCEDURE,1570, If v_abort_level = 5 Then
WS_JOB_EXEC_010,PROCEDURE,1571, v_checked := v_checked + 1;
WS_JOB_EXEC_010,PROCEDURE,1572, Else
WS_JOB_EXEC_010,PROCEDURE,1573, v_halted := 1;
WS_JOB_EXEC_010,PROCEDURE,1574, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1575, End If;
WS_JOB_EXEC_010,PROCEDURE,1576, ElsIf v_run_status = 'U' Then
WS_JOB_EXEC_010,PROCEDURE,1577, If v_abort_level = 5 Then
WS_JOB_EXEC_010,PROCEDURE,1578, v_checked := v_checked + 1;
WS_JOB_EXEC_010,PROCEDURE,1579, Else
WS_JOB_EXEC_010,PROCEDURE,1580, v_halted := 1;
WS_JOB_EXEC_010,PROCEDURE,1581, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1582, End If;
WS_JOB_EXEC_010,PROCEDURE,1583, ElsIf v_run_status = 'C' Then
WS_JOB_EXEC_010,PROCEDURE,1584, If v_abort_level <= 3 Then
WS_JOB_EXEC_010,PROCEDURE,1585, If v_audit_status = 'W' Then
WS_JOB_EXEC_010,PROCEDURE,1586, v_halted := 1;
WS_JOB_EXEC_010,PROCEDURE,1587, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1588, Else
WS_JOB_EXEC_010,PROCEDURE,1589, v_checked := v_checked + 1;
WS_JOB_EXEC_010,PROCEDURE,1590, End If;
WS_JOB_EXEC_010,PROCEDURE,1591, Else
WS_JOB_EXEC_010,PROCEDURE,1592, v_checked := v_checked + 1;
WS_JOB_EXEC_010,PROCEDURE,1593, End If;
WS_JOB_EXEC_010,PROCEDURE,1594, Else
WS_JOB_EXEC_010,PROCEDURE,1595, EXIT;
WS_JOB_EXEC_010,PROCEDURE,1596, End If;
WS_JOB_EXEC_010,PROCEDURE,1597,
WS_JOB_EXEC_010,PROCEDURE,1598, END LOOP; -- End of dependency Loop
WS_JOB_EXEC_010,PROCEDURE,1599,
WS_JOB_EXEC_010,PROCEDURE,1600, -- See if we passed our dependency check
WS_JOB_EXEC_010,PROCEDURE,1601, -- We either passed, need to halt the task or need to skip this task
WS_JOB_EXEC_010,PROCEDURE,1602, If v_checked = v_rec_count Then
WS_JOB_EXEC_010,PROCEDURE,1603, v_okay := 1;
WS_JOB_EXEC_010,PROCEDURE,1604, End If;
WS_JOB_EXEC_010,PROCEDURE,1605, v_step := 160;
WS_JOB_EXEC_010,PROCEDURE,1606, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1607, -- See if the task is okay to run and a procedure if so run it
WS_JOB_EXEC_010,PROCEDURE,1608, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1609, If v_okay = 1 And v_TaskRec.wtr_obj_type > 0 And v_TaskRec.wtr_obj_type < 20 Then
WS_JOB_EXEC_010,PROCEDURE,1610, v_step := 170;
WS_JOB_EXEC_010,PROCEDURE,1611, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1612, -- Update the run record to indicate we are running.
WS_JOB_EXEC_010,PROCEDURE,1613, -- Need to lock the record first to prevent another thread from
WS_JOB_EXEC_010,PROCEDURE,1614, -- grabbing it, or in case another thread has already got it,
WS_JOB_EXEC_010,PROCEDURE,1615, -- or updated it
WS_JOB_EXEC_010,PROCEDURE,1616, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1617, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1618, select wtr_run_status into v_run_status
WS_JOB_EXEC_010,PROCEDURE,1619, from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1620, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,1621, and wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1622, and wtr_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,1623, for update nowait;
WS_JOB_EXEC_010,PROCEDURE,1624, If v_run_status = 'W' Then
WS_JOB_EXEC_010,PROCEDURE,1625, update ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1626, set wtr_run_status = 'R',
WS_JOB_EXEC_010,PROCEDURE,1627, wtr_thread = pi_thread,
WS_JOB_EXEC_010,PROCEDURE,1628, wtr_started = sysdate
WS_JOB_EXEC_010,PROCEDURE,1629, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,1630, and wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1631, Else
WS_JOB_EXEC_010,PROCEDURE,1632, -- someone else got the record
WS_JOB_EXEC_010,PROCEDURE,1633, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,1634, End If;
WS_JOB_EXEC_010,PROCEDURE,1635, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1636, -- If a resource busy someone else has the record
WS_JOB_EXEC_010,PROCEDURE,1637, -- so skip it
WS_JOB_EXEC_010,PROCEDURE,1638, If SQLCODE = -54 Then
WS_JOB_EXEC_010,PROCEDURE,1639, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,1640, Else
WS_JOB_EXEC_010,PROCEDURE,1641, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1642, ' failed in update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_010,PROCEDURE,1643, v_taskRec.wtr_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,1644, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1645, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1646, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1647, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1648, End If;
WS_JOB_EXEC_010,PROCEDURE,1649, END;
WS_JOB_EXEC_010,PROCEDURE,1650, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1651, v_step := 180;
WS_JOB_EXEC_010,PROCEDURE,1652, -- If we still have a go, then run it
WS_JOB_EXEC_010,PROCEDURE,1653, -- Break out of this loop and run the task by setting the v_process flag
WS_JOB_EXEC_010,PROCEDURE,1654, If v_okay = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1655, v_process := 1;
WS_JOB_EXEC_010,PROCEDURE,1656, p_task_id := v_TaskRec.wtr_task_key;
WS_JOB_EXEC_010,PROCEDURE,1657, p_task_name := v_TaskRec.wtr_name;
WS_JOB_EXEC_010,PROCEDURE,1658, v_action_type := v_TaskRec.wtr_action_type;
WS_JOB_EXEC_010,PROCEDURE,1659, v_obj_type := v_TaskRec.wtr_obj_type;
WS_JOB_EXEC_010,PROCEDURE,1660, v_obj_key := v_TaskRec.wtr_obj_key;
WS_JOB_EXEC_010,PROCEDURE,1661, v_task_key := v_TaskRec.wtr_task_key;
WS_JOB_EXEC_010,PROCEDURE,1662, Exit;
WS_JOB_EXEC_010,PROCEDURE,1663, End if;
WS_JOB_EXEC_010,PROCEDURE,1664, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1665, -- See if OKay and A Checkpoint
WS_JOB_EXEC_010,PROCEDURE,1666, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1667, ElsIf v_okay = 1 And v_TaskRec.wtr_type = 'C' Then
WS_JOB_EXEC_010,PROCEDURE,1668, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1669, -- Update the run record to indicate we are running.
WS_JOB_EXEC_010,PROCEDURE,1670, -- Need to lock the record first to prevent another thread from
WS_JOB_EXEC_010,PROCEDURE,1671, -- grabbing it, or in case another thread has already go it,
WS_JOB_EXEC_010,PROCEDURE,1672, -- or updated it
WS_JOB_EXEC_010,PROCEDURE,1673, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1674, v_step := 200;
WS_JOB_EXEC_010,PROCEDURE,1675, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1676, select wtr_run_status into v_run_status
WS_JOB_EXEC_010,PROCEDURE,1677, from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1678, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,1679, and wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1680, for update nowait;
WS_JOB_EXEC_010,PROCEDURE,1681, If v_run_status = 'W' Then
WS_JOB_EXEC_010,PROCEDURE,1682, update ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1683, set wtr_run_status = 'R',
WS_JOB_EXEC_010,PROCEDURE,1684, wtr_started = sysdate
WS_JOB_EXEC_010,PROCEDURE,1685, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,1686, and wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1687, Else
WS_JOB_EXEC_010,PROCEDURE,1688, -- someone else got the record
WS_JOB_EXEC_010,PROCEDURE,1689, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,1690, End If;
WS_JOB_EXEC_010,PROCEDURE,1691, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1692, -- If a resource busy someone else has the record
WS_JOB_EXEC_010,PROCEDURE,1693, -- so skip it
WS_JOB_EXEC_010,PROCEDURE,1694, If SQLCODE = -54 Then
WS_JOB_EXEC_010,PROCEDURE,1695, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,1696, Else
WS_JOB_EXEC_010,PROCEDURE,1697, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1698, ' failed in update of ws_wrk_task_ctrl for task id '||
WS_JOB_EXEC_010,PROCEDURE,1699, v_taskRec.wtr_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,1700, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1701, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1702, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1703, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1704, End If;
WS_JOB_EXEC_010,PROCEDURE,1705, END;
WS_JOB_EXEC_010,PROCEDURE,1706, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1707, v_step := 210;
WS_JOB_EXEC_010,PROCEDURE,1708, -- If still okay (i.e we got the record then record the checkpoint
WS_JOB_EXEC_010,PROCEDURE,1709, If v_okay = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1710, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,1711, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,1712, p_task_name := 'Checkpoint';
WS_JOB_EXEC_010,PROCEDURE,1713, p_return_msg := 'Checkpoint completed';
WS_JOB_EXEC_010,PROCEDURE,1714, v_result := WsWrkAudit(v_audit_status, p_job_name, p_task_name, p_sequence,
WS_JOB_EXEC_010,PROCEDURE,1715, p_return_msg, NULL, NULL, p_task_id, p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1716, If v_TaskRec.wtr_chkp_number <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,1717, v_result := WsWrkChkPoint(p_job_id, pi_sequence, v_TaskRec.wtr_chkp_number);
WS_JOB_EXEC_010,PROCEDURE,1718, End If;
WS_JOB_EXEC_010,PROCEDURE,1719, v_just_done := 1;
WS_JOB_EXEC_010,PROCEDURE,1720, End If;
WS_JOB_EXEC_010,PROCEDURE,1721, End If; -- End of task
WS_JOB_EXEC_010,PROCEDURE,1722, v_step := 220;
WS_JOB_EXEC_010,PROCEDURE,1723, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1724, -- See if the task needs a status update.
WS_JOB_EXEC_010,PROCEDURE,1725, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1726, If v_okay = 1 OR v_halted = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1727, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1728, -- Update the run record to indicate our final status
WS_JOB_EXEC_010,PROCEDURE,1729, -- If we have a halt then generate a message
WS_JOB_EXEC_010,PROCEDURE,1730, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1731, v_step := 230;
WS_JOB_EXEC_010,PROCEDURE,1732, If v_halted = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1733, p_return_msg := 'Halted by dependency failure or halt';
WS_JOB_EXEC_010,PROCEDURE,1734, v_run_status := 'H';
WS_JOB_EXEC_010,PROCEDURE,1735, v_audit_status := NULL;
WS_JOB_EXEC_010,PROCEDURE,1736, End If;
WS_JOB_EXEC_010,PROCEDURE,1737, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1738, update ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,1739, set wtr_run_status = v_run_status,
WS_JOB_EXEC_010,PROCEDURE,1740, wtr_audit_status = v_audit_status,
WS_JOB_EXEC_010,PROCEDURE,1741, wtr_return_msg = p_return_msg,
WS_JOB_EXEC_010,PROCEDURE,1742, wtr_elapsed_hh = trunc(to_number(sysdate-wtr_started)*24,0),
WS_JOB_EXEC_010,PROCEDURE,1743, wtr_elapsed_mi = round(to_number(sysdate-wtr_started)*24*60,0) - (
WS_JOB_EXEC_010,PROCEDURE,1744, trunc(to_number(sysdate-wtr_started)*24,0)*60),
WS_JOB_EXEC_010,PROCEDURE,1745, wtr_completed = sysdate
WS_JOB_EXEC_010,PROCEDURE,1746, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_010,PROCEDURE,1747, and wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1748, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1749, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1750, ' failed in final update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_010,PROCEDURE,1751, v_taskRec.wtr_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,1752, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1753, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1754, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1755, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1756, END;
WS_JOB_EXEC_010,PROCEDURE,1757, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1758, End If; -- End of task record update
WS_JOB_EXEC_010,PROCEDURE,1759, ElsIf v_TaskRec.wtr_run_status = 'R' Then
WS_JOB_EXEC_010,PROCEDURE,1760, v_running_count := v_running_count + 1;
WS_JOB_EXEC_010,PROCEDURE,1761, ElsIf v_TaskRec.wtr_run_status = 'H' Then
WS_JOB_EXEC_010,PROCEDURE,1762, v_halted_count := v_halted_count + 1;
WS_JOB_EXEC_010,PROCEDURE,1763, ElsIf v_TaskRec.wtr_run_status = 'F' Then
WS_JOB_EXEC_010,PROCEDURE,1764, v_failed_count := v_failed_count + 1;
WS_JOB_EXEC_010,PROCEDURE,1765, ElsIf v_TaskRec.wtr_run_status = 'U' Then
WS_JOB_EXEC_010,PROCEDURE,1766, v_failed_count := v_failed_count + 1;
WS_JOB_EXEC_010,PROCEDURE,1767, End If; -- End of Waiting task if statement
WS_JOB_EXEC_010,PROCEDURE,1768, v_step := 240;
WS_JOB_EXEC_010,PROCEDURE,1769, END LOOP; -- End of task Loop
WS_JOB_EXEC_010,PROCEDURE,1770,
WS_JOB_EXEC_010,PROCEDURE,1771, -- A task that we are ready to run will break out of the Task loop
WS_JOB_EXEC_010,PROCEDURE,1772, -- with the v_Process flag set, so proceed to process it.
WS_JOB_EXEC_010,PROCEDURE,1773, If v_Process = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1774, v_step := 181;
WS_JOB_EXEC_010,PROCEDURE,1775, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1776, -- Work out the type of action and run the appropriate
WS_JOB_EXEC_010,PROCEDURE,1777, -- function.
WS_JOB_EXEC_010,PROCEDURE,1778, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1779, p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,1780, p_return_msg := 'Unhandled exception in action';
WS_JOB_EXEC_010,PROCEDURE,1781, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1782, -- E X E C U T E
WS_JOB_EXEC_010,PROCEDURE,1783, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1784, If v_action_type = v_ws_act_execute then
WS_JOB_EXEC_010,PROCEDURE,1785, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1786, -- E X E C U T E C U B E
WS_JOB_EXEC_010,PROCEDURE,1787, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1788, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,1789, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,1790, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,1791, -- return value of 8
WS_JOB_EXEC_010,PROCEDURE,1792, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,1793, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1794, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,1795, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,1796, po_result_msg := 'cube execute';
WS_JOB_EXEC_010,PROCEDURE,1797, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,1798, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,1799, po_result_code := 8;
WS_JOB_EXEC_010,PROCEDURE,1800, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1801, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,1802, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1803, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,1804, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1805, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,1806, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,1807, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1808, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,1809, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,1810, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,1811, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,1812, End If;
WS_JOB_EXEC_010,PROCEDURE,1813, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1814, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1815, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,1816, END;
WS_JOB_EXEC_010,PROCEDURE,1817, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1818, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1819, -- E X E C U T E P R O C E D U R E
WS_JOB_EXEC_010,PROCEDURE,1820, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1821, ElsIf v_obj_type = v_ws_obj_procedure Then
WS_JOB_EXEC_010,PROCEDURE,1822, v_result := ws_act_execute(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,1823, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,1824, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,1825, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1826, -- E X E C U T E S C R I P T
WS_JOB_EXEC_010,PROCEDURE,1827, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1828, ElsIf v_obj_type = v_ws_obj_script Then
WS_JOB_EXEC_010,PROCEDURE,1829, v_result := ws_act_host_script(p_sequence,v_obj_type,v_action_type,v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,1830, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,1831, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,1832, -- If script build worked then skip out to process it
WS_JOB_EXEC_010,PROCEDURE,1833, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_010,PROCEDURE,1834, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,1835, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1836, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,1837, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,1838, po_result_msg := 'execute script';
WS_JOB_EXEC_010,PROCEDURE,1839, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,1840, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,1841, po_result_code := 2;
WS_JOB_EXEC_010,PROCEDURE,1842, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1843, End If;
WS_JOB_EXEC_010,PROCEDURE,1844, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1845, -- E X E C U T E U N S U P P O R T E D
WS_JOB_EXEC_010,PROCEDURE,1846, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1847, Else
WS_JOB_EXEC_010,PROCEDURE,1848, v_MsgText := 'Job '||pi_task_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,1849, ' could not perform action. Unsupported action '||
WS_JOB_EXEC_010,PROCEDURE,1850, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_010,PROCEDURE,1851, v_result := WsWrkAudit('E',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1852, v_MsgText,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1853, p_status_code := -2;
WS_JOB_EXEC_010,PROCEDURE,1854, p_return_msg := 'Unsupported action '||
WS_JOB_EXEC_010,PROCEDURE,1855, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_010,PROCEDURE,1856, v_result := 1;
WS_JOB_EXEC_010,PROCEDURE,1857, End If;
WS_JOB_EXEC_010,PROCEDURE,1858, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1859, -- L O A D
WS_JOB_EXEC_010,PROCEDURE,1860, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1861, ElsIf v_action_type = v_ws_act_load then
WS_JOB_EXEC_010,PROCEDURE,1862, v_result := ws_act_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,1863, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,1864, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,1865, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,1866, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,1867, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1868, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1869, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1870, ElsIf p_status_code <> 2 Then
WS_JOB_EXEC_010,PROCEDURE,1871, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1872, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1873, End If;
WS_JOB_EXEC_010,PROCEDURE,1874, -- If this load requires a host script then we will have a
WS_JOB_EXEC_010,PROCEDURE,1875, -- return value of 2
WS_JOB_EXEC_010,PROCEDURE,1876, -- If script build worked then skip out to process it
WS_JOB_EXEC_010,PROCEDURE,1877, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_010,PROCEDURE,1878, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_010,PROCEDURE,1879, If v_result = 2 Then
WS_JOB_EXEC_010,PROCEDURE,1880, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1881, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,1882, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,1883, po_result_msg := 'load table';
WS_JOB_EXEC_010,PROCEDURE,1884, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,1885, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,1886, po_result_code := 2;
WS_JOB_EXEC_010,PROCEDURE,1887, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1888, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,1889, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1890, v_step := 330;
WS_JOB_EXEC_010,PROCEDURE,1891, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1892, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,1893, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,1894, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1895, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,1896, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,1897, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,1898, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,1899, End If;
WS_JOB_EXEC_010,PROCEDURE,1900, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1901, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1902, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,1903, END;
WS_JOB_EXEC_010,PROCEDURE,1904, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1905, -- If this load requires an ODBC based load then we will have a
WS_JOB_EXEC_010,PROCEDURE,1906, -- return value of 3
WS_JOB_EXEC_010,PROCEDURE,1907, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,1908, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_010,PROCEDURE,1909, ElsIf v_result = 3 Then
WS_JOB_EXEC_010,PROCEDURE,1910, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1911, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,1912, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,1913, po_result_msg := 'load table';
WS_JOB_EXEC_010,PROCEDURE,1914, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,1915, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,1916, po_result_code := 3;
WS_JOB_EXEC_010,PROCEDURE,1917, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1918, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,1919, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1920, v_step := 333;
WS_JOB_EXEC_010,PROCEDURE,1921, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1922, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,1923, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,1924, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1925, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,1926, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,1927, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,1928, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,1929, End If;
WS_JOB_EXEC_010,PROCEDURE,1930, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1931, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1932, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,1933, END;
WS_JOB_EXEC_010,PROCEDURE,1934, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1935, End If;
WS_JOB_EXEC_010,PROCEDURE,1936, v_result := ws_act_post_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,1937, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,1938, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,1939, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_010,PROCEDURE,1940, If p_status_code_2 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,1941, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1942, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1943, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_010,PROCEDURE,1944, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,1945, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,1946, End If;
WS_JOB_EXEC_010,PROCEDURE,1947,
WS_JOB_EXEC_010,PROCEDURE,1948, -- If our post load procedure failed and the load worked then
WS_JOB_EXEC_010,PROCEDURE,1949, -- record the post load failure
WS_JOB_EXEC_010,PROCEDURE,1950, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,1951, p_status_code := p_status_code_2;
WS_JOB_EXEC_010,PROCEDURE,1952, End If;
WS_JOB_EXEC_010,PROCEDURE,1953, End If;
WS_JOB_EXEC_010,PROCEDURE,1954, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1955, -- U P D A T E
WS_JOB_EXEC_010,PROCEDURE,1956, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1957, ElsIf v_action_type = v_ws_act_update then
WS_JOB_EXEC_010,PROCEDURE,1958, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1959, -- U P D A T E C U B E
WS_JOB_EXEC_010,PROCEDURE,1960, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1961, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,1962, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,1963, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,1964, -- return value of 9
WS_JOB_EXEC_010,PROCEDURE,1965, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,1966, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,1967, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,1968, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,1969, po_result_msg := 'cube update';
WS_JOB_EXEC_010,PROCEDURE,1970, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,1971, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,1972, po_result_code := 9;
WS_JOB_EXEC_010,PROCEDURE,1973, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1974, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,1975, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1976, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,1977, BEGIN
WS_JOB_EXEC_010,PROCEDURE,1978, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,1979, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,1980, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,1981, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,1982, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,1983, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,1984, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,1985, End If;
WS_JOB_EXEC_010,PROCEDURE,1986, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,1987, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,1988, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,1989, END;
WS_JOB_EXEC_010,PROCEDURE,1990, RETURN;
WS_JOB_EXEC_010,PROCEDURE,1991, Else
WS_JOB_EXEC_010,PROCEDURE,1992, v_result := ws_act_update(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,1993, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,1994, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,1995, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,1996, End If;
WS_JOB_EXEC_010,PROCEDURE,1997, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,1998, -- C R E A T E
WS_JOB_EXEC_010,PROCEDURE,1999, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2000, ElsIf v_action_type = v_ws_act_create then
WS_JOB_EXEC_010,PROCEDURE,2001, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,2002, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,2003, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2004, -- return value of 4
WS_JOB_EXEC_010,PROCEDURE,2005, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2006, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2007, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2008, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2009, po_result_msg := 'cube create';
WS_JOB_EXEC_010,PROCEDURE,2010, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2011, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2012, po_result_code := 4;
WS_JOB_EXEC_010,PROCEDURE,2013, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2014, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2015, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2016, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,2017, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2018, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2019, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2020, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2021, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2022, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2023, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2024, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2025, End If;
WS_JOB_EXEC_010,PROCEDURE,2026, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2027, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2028, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2029, END;
WS_JOB_EXEC_010,PROCEDURE,2030, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2031, Else
WS_JOB_EXEC_010,PROCEDURE,2032, v_result := ws_act_create(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2033, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2034, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2035, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2036, End If;
WS_JOB_EXEC_010,PROCEDURE,2037, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2038, -- D R O P
WS_JOB_EXEC_010,PROCEDURE,2039, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2040, ElsIf v_action_type = v_ws_act_drop then
WS_JOB_EXEC_010,PROCEDURE,2041, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2042, -- D R O P C U B E
WS_JOB_EXEC_010,PROCEDURE,2043, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2044, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,2045, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,2046, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2047, -- return value of 10
WS_JOB_EXEC_010,PROCEDURE,2048, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2049, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2050, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2051, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2052, po_result_msg := 'cube drop';
WS_JOB_EXEC_010,PROCEDURE,2053, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2054, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2055, po_result_code := 10;
WS_JOB_EXEC_010,PROCEDURE,2056, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2057, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2058, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2059, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,2060, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2061, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2062, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2063, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2064, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2065, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2066, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2067, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2068, End If;
WS_JOB_EXEC_010,PROCEDURE,2069, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2070, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2071, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2072, END;
WS_JOB_EXEC_010,PROCEDURE,2073, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2074, Else
WS_JOB_EXEC_010,PROCEDURE,2075, v_result := ws_act_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2076, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2077, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2078, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2079, End If;
WS_JOB_EXEC_010,PROCEDURE,2080, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2081, -- D R O P A L L
WS_JOB_EXEC_010,PROCEDURE,2082, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2083, ElsIf v_action_type = v_ws_act_drop_all then
WS_JOB_EXEC_010,PROCEDURE,2084, v_result := ws_act_drop_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2085, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2086, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2087, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2088, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2089, -- B U I L D
WS_JOB_EXEC_010,PROCEDURE,2090, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2091, ElsIf v_action_type = v_ws_act_build then
WS_JOB_EXEC_010,PROCEDURE,2092, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2093, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2094, p_job_name, p_task_name, p_job_id, p_task_id,'',
WS_JOB_EXEC_010,PROCEDURE,2095, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2096, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2097, -- B U I L D A L L
WS_JOB_EXEC_010,PROCEDURE,2098, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2099, ElsIf v_action_type = v_ws_act_build_all then
WS_JOB_EXEC_010,PROCEDURE,2100, v_result := ws_act_build_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2101, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2102, p_job_name, p_task_name, p_job_id, p_task_id,'',
WS_JOB_EXEC_010,PROCEDURE,2103, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2104, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2105, -- P R E D R O P
WS_JOB_EXEC_010,PROCEDURE,2106, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2107, ElsIf v_action_type = v_ws_act_pre_drop then
WS_JOB_EXEC_010,PROCEDURE,2108, v_result := ws_act_pre_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2109, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2110, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2111, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2112, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2113, -- A N A L Y Z E
WS_JOB_EXEC_010,PROCEDURE,2114, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2115, ElsIf v_action_type = v_ws_act_analyze then
WS_JOB_EXEC_010,PROCEDURE,2116, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2117, -- A N A L Y Z E C U B E
WS_JOB_EXEC_010,PROCEDURE,2118, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2119, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,2120, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,2121, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2122, -- return value of 8
WS_JOB_EXEC_010,PROCEDURE,2123, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2124, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2125, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2126, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2127, po_result_msg := 'cube analyze';
WS_JOB_EXEC_010,PROCEDURE,2128, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2129, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2130, po_result_code := 8;
WS_JOB_EXEC_010,PROCEDURE,2131, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2132, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2133, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2134, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,2135, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2136, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2137, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2138, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2139, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2140, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2141, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2142, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2143, End If;
WS_JOB_EXEC_010,PROCEDURE,2144, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2145, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2146, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2147, END;
WS_JOB_EXEC_010,PROCEDURE,2148, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2149, Else
WS_JOB_EXEC_010,PROCEDURE,2150, v_result := ws_act_analyze(p_sequence,v_obj_type,v_action_type, 100,
WS_JOB_EXEC_010,PROCEDURE,2151, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2152, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2153, End If;
WS_JOB_EXEC_010,PROCEDURE,2154, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2155, -- Q U I C K A N A L Y Z E
WS_JOB_EXEC_010,PROCEDURE,2156, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2157, ElsIf v_action_type = v_ws_act_quick_analyze then
WS_JOB_EXEC_010,PROCEDURE,2158, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2159, -- Q U I C K A N A L Y Z E C U B E
WS_JOB_EXEC_010,PROCEDURE,2160, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2161, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,2162, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,2163, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2164, -- return value of 9
WS_JOB_EXEC_010,PROCEDURE,2165, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2166, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2167, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2168, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2169, po_result_msg := 'cube quick analyze';
WS_JOB_EXEC_010,PROCEDURE,2170, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2171, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2172, po_result_code := 9;
WS_JOB_EXEC_010,PROCEDURE,2173, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2174, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2175, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2176, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,2177, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2178, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2179, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2180, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2181, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2182, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2183, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2184, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2185, End If;
WS_JOB_EXEC_010,PROCEDURE,2186, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2187, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2188, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2189, END;
WS_JOB_EXEC_010,PROCEDURE,2190, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2191, Else
WS_JOB_EXEC_010,PROCEDURE,2192, v_result := ws_act_analyze(p_sequence,v_obj_type,v_action_type, 3,
WS_JOB_EXEC_010,PROCEDURE,2193, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2194, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2195, End If;
WS_JOB_EXEC_010,PROCEDURE,2196, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2197, -- S T A T I S T I C S
WS_JOB_EXEC_010,PROCEDURE,2198, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2199, ElsIf v_action_type = v_ws_act_statistics then
WS_JOB_EXEC_010,PROCEDURE,2200, v_result := ws_act_dbms_stats(p_sequence,v_obj_type,v_action_type, 100,
WS_JOB_EXEC_010,PROCEDURE,2201, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2202, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2203, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2204, -- Q U I C K S T A T S
WS_JOB_EXEC_010,PROCEDURE,2205, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2206, ElsIf v_action_type = v_ws_act_quick_statistics then
WS_JOB_EXEC_010,PROCEDURE,2207, v_result := ws_act_dbms_stats(p_sequence,v_obj_type,v_action_type, 3,
WS_JOB_EXEC_010,PROCEDURE,2208, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2209, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2210, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2211, -- P R O C E S S
WS_JOB_EXEC_010,PROCEDURE,2212, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2213, ElsIf v_action_type = v_ws_act_process then
WS_JOB_EXEC_010,PROCEDURE,2214, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2215, -- P R O C E S S C U B E
WS_JOB_EXEC_010,PROCEDURE,2216, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2217, If v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_010,PROCEDURE,2218, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_010,PROCEDURE,2219, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2220, -- return value of 5
WS_JOB_EXEC_010,PROCEDURE,2221, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2222, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2223, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2224, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2225, po_result_msg := 'cube process';
WS_JOB_EXEC_010,PROCEDURE,2226, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2227, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2228, po_result_code := 5;
WS_JOB_EXEC_010,PROCEDURE,2229, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2230, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2231, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2232, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,2233, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2234, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2235, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2236, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2237, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2238, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2239, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2240, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2241, End If;
WS_JOB_EXEC_010,PROCEDURE,2242, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2243, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2244, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2245, END;
WS_JOB_EXEC_010,PROCEDURE,2246, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2247, End If;
WS_JOB_EXEC_010,PROCEDURE,2248, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2249, -- P R O C E S S L O A D
WS_JOB_EXEC_010,PROCEDURE,2250, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2251, If v_obj_type = v_ws_obj_load Then
WS_JOB_EXEC_010,PROCEDURE,2252, v_result := ws_act_pre_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2253, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2254, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2255, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2256, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2257, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2258, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2259, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2260, Else
WS_JOB_EXEC_010,PROCEDURE,2261, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2262, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2263, End If;
WS_JOB_EXEC_010,PROCEDURE,2264, v_result := ws_act_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2265, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2266, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2267, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2268, -- If this load requires a host script then we will have a
WS_JOB_EXEC_010,PROCEDURE,2269, -- return value of 2
WS_JOB_EXEC_010,PROCEDURE,2270, -- If script build worked then skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2271, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_010,PROCEDURE,2272, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_010,PROCEDURE,2273, If v_result = 2 Then
WS_JOB_EXEC_010,PROCEDURE,2274, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2275, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2276, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2277, po_result_msg := 'process table';
WS_JOB_EXEC_010,PROCEDURE,2278, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,2279, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2280, po_result_code := 2;
WS_JOB_EXEC_010,PROCEDURE,2281, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2282, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2283, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2284, v_step := 330;
WS_JOB_EXEC_010,PROCEDURE,2285, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2286, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2287, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2288, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2289, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2290, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2291, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2292, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2293, End If;
WS_JOB_EXEC_010,PROCEDURE,2294, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2295, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2296, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2297, END;
WS_JOB_EXEC_010,PROCEDURE,2298, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2299, -- If this load requires an ODBC load then we will have a
WS_JOB_EXEC_010,PROCEDURE,2300, -- return value of 3
WS_JOB_EXEC_010,PROCEDURE,2301, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2302, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_010,PROCEDURE,2303, ElsIf v_result = 3 Then
WS_JOB_EXEC_010,PROCEDURE,2304, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2305, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2306, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2307, po_result_msg := 'process table';
WS_JOB_EXEC_010,PROCEDURE,2308, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2309, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2310, po_result_code := 3;
WS_JOB_EXEC_010,PROCEDURE,2311, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2312, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2313, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2314, v_step := 336;
WS_JOB_EXEC_010,PROCEDURE,2315, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2316, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2317, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2318, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2319, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2320, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2321, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2322, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2323, End If;
WS_JOB_EXEC_010,PROCEDURE,2324, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2325, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2326, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2327, END;
WS_JOB_EXEC_010,PROCEDURE,2328, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2329, End If;
WS_JOB_EXEC_010,PROCEDURE,2330, End If;
WS_JOB_EXEC_010,PROCEDURE,2331, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2332, v_result := ws_act_post_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2333, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2334, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2335, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_010,PROCEDURE,2336, Else
WS_JOB_EXEC_010,PROCEDURE,2337, p_status_code_2 := 1;
WS_JOB_EXEC_010,PROCEDURE,2338, End If;
WS_JOB_EXEC_010,PROCEDURE,2339, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2340, If p_status_code_2 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2341, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2342, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2343, Else
WS_JOB_EXEC_010,PROCEDURE,2344, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2345, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2346, End If;
WS_JOB_EXEC_010,PROCEDURE,2347, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2348, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2349, p_job_name, p_task_name, p_job_id, p_task_id,'',
WS_JOB_EXEC_010,PROCEDURE,2350, p_return_msg_3, p_status_code_3);
WS_JOB_EXEC_010,PROCEDURE,2351, If p_status_code_3 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2352, v_result := WsWrkAudit('I',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2353, p_return_msg_3,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2354, ElsIf p_status_code_3 < 1 Then
WS_JOB_EXEC_010,PROCEDURE,2355, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2356, p_return_msg_3,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2357, End If;
WS_JOB_EXEC_010,PROCEDURE,2358, Else
WS_JOB_EXEC_010,PROCEDURE,2359, p_status_code_3 := 1;
WS_JOB_EXEC_010,PROCEDURE,2360, End If;
WS_JOB_EXEC_010,PROCEDURE,2361,
WS_JOB_EXEC_010,PROCEDURE,2362, -- If our index build failed and the load worked then
WS_JOB_EXEC_010,PROCEDURE,2363, -- record the index failure
WS_JOB_EXEC_010,PROCEDURE,2364, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,2365, p_status_code := p_status_code_2;
WS_JOB_EXEC_010,PROCEDURE,2366, End If;
WS_JOB_EXEC_010,PROCEDURE,2367, If p_status_code_3 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,2368, p_status_code := p_status_code_3;
WS_JOB_EXEC_010,PROCEDURE,2369, End If;
WS_JOB_EXEC_010,PROCEDURE,2370, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2371, -- P R O C E S S U P D A T E
WS_JOB_EXEC_010,PROCEDURE,2372, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2373, Else
WS_JOB_EXEC_010,PROCEDURE,2374, v_result := ws_act_pre_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2375, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2376, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2377, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2378, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2379, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2380, v_result := WsWrkAudit('S',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2381, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2382, Else
WS_JOB_EXEC_010,PROCEDURE,2383, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2384, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2385, End If;
WS_JOB_EXEC_010,PROCEDURE,2386, v_result := ws_act_update(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2387, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2388, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2389, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2390, End If;
WS_JOB_EXEC_010,PROCEDURE,2391, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2392, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2393, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2394, p_job_name, p_task_name, p_job_id, p_task_id,'',
WS_JOB_EXEC_010,PROCEDURE,2395, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_010,PROCEDURE,2396, If p_status_code_2 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2397, v_result := WsWrkAudit('S',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2398, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2399, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_010,PROCEDURE,2400, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2401, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2402, End If;
WS_JOB_EXEC_010,PROCEDURE,2403, Else
WS_JOB_EXEC_010,PROCEDURE,2404, p_status_code_2 := 1;
WS_JOB_EXEC_010,PROCEDURE,2405, End If;
WS_JOB_EXEC_010,PROCEDURE,2406,
WS_JOB_EXEC_010,PROCEDURE,2407, -- If our index build failed and the update worked then
WS_JOB_EXEC_010,PROCEDURE,2408, -- record the index failure
WS_JOB_EXEC_010,PROCEDURE,2409, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,2410, p_status_code := p_status_code_2;
WS_JOB_EXEC_010,PROCEDURE,2411, End If;
WS_JOB_EXEC_010,PROCEDURE,2412, End If;
WS_JOB_EXEC_010,PROCEDURE,2413, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2414, -- I N I T I A L L O A D
WS_JOB_EXEC_010,PROCEDURE,2415, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2416, ElsIf v_action_type = v_ws_act_initial then
WS_JOB_EXEC_010,PROCEDURE,2417, v_result := ws_act_drop_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2418, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2419, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2420, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2421, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2422, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2423, v_result := WsWrkAudit('S',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2424, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2425, Else
WS_JOB_EXEC_010,PROCEDURE,2426, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2427, p_return_msg,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2428, End If;
WS_JOB_EXEC_010,PROCEDURE,2429, v_result := ws_act_initial_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2430, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2431, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2432, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2433, End If;
WS_JOB_EXEC_010,PROCEDURE,2434, If v_result >= -1 Then
WS_JOB_EXEC_010,PROCEDURE,2435, v_result := ws_act_build_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2436, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2437, p_job_name, p_task_name, p_job_id, p_task_id,'',
WS_JOB_EXEC_010,PROCEDURE,2438, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_010,PROCEDURE,2439, End If;
WS_JOB_EXEC_010,PROCEDURE,2440, If p_status_code_2 = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2441, v_result := WsWrkAudit('S',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2442, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2443, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_010,PROCEDURE,2444, v_result := WsWrkAudit('W',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2445, p_return_msg_2,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2446, End If;
WS_JOB_EXEC_010,PROCEDURE,2447,
WS_JOB_EXEC_010,PROCEDURE,2448, -- If our index build failed and the initial load worked then
WS_JOB_EXEC_010,PROCEDURE,2449, -- record the index failure
WS_JOB_EXEC_010,PROCEDURE,2450, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_010,PROCEDURE,2451, p_status_code := p_status_code_2;
WS_JOB_EXEC_010,PROCEDURE,2452, End If;
WS_JOB_EXEC_010,PROCEDURE,2453, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2454, -- C U S T O M
WS_JOB_EXEC_010,PROCEDURE,2455, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2456, ElsIf v_action_type = v_ws_act_custom then
WS_JOB_EXEC_010,PROCEDURE,2457, v_result := ws_act_initial_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_010,PROCEDURE,2458, v_obj_key,
WS_JOB_EXEC_010,PROCEDURE,2459, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_010,PROCEDURE,2460, p_return_msg, p_status_code);
WS_JOB_EXEC_010,PROCEDURE,2461, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2462, -- C U B E P R O C E S S C U B E D I M S
WS_JOB_EXEC_010,PROCEDURE,2463, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2464, ElsIf v_action_type = v_ws_act_cube_dim then
WS_JOB_EXEC_010,PROCEDURE,2465, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2466, -- return value of 6
WS_JOB_EXEC_010,PROCEDURE,2467, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2468, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2469, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2470, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2471, po_result_msg := 'cube process cube dimensions';
WS_JOB_EXEC_010,PROCEDURE,2472, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2473, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2474, po_result_code := 6;
WS_JOB_EXEC_010,PROCEDURE,2475, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2476, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2477, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2478, v_step := 337;
WS_JOB_EXEC_010,PROCEDURE,2479, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2480, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2481, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2482, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2483, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2484, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2485, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2486, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2487, End If;
WS_JOB_EXEC_010,PROCEDURE,2488, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2489, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2490, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2491, END;
WS_JOB_EXEC_010,PROCEDURE,2492, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2493, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2494, -- C U B E P R O C E S S D A T A B A S E D I M S
WS_JOB_EXEC_010,PROCEDURE,2495, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2496, ElsIf v_action_type = v_ws_act_db_dim then
WS_JOB_EXEC_010,PROCEDURE,2497, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_010,PROCEDURE,2498, -- return value of 7
WS_JOB_EXEC_010,PROCEDURE,2499, -- Skip out to process it
WS_JOB_EXEC_010,PROCEDURE,2500, po_job_key := p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2501, po_task_key := p_task_id;
WS_JOB_EXEC_010,PROCEDURE,2502, po_task_name := p_task_name;
WS_JOB_EXEC_010,PROCEDURE,2503, po_result_msg := 'cube process db dimensions';
WS_JOB_EXEC_010,PROCEDURE,2504, po_action_key := v_obj_key;
WS_JOB_EXEC_010,PROCEDURE,2505, po_action_msg := 'no action';
WS_JOB_EXEC_010,PROCEDURE,2506, po_result_code := 7;
WS_JOB_EXEC_010,PROCEDURE,2507, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2508, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2509, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2510, v_step := 338;
WS_JOB_EXEC_010,PROCEDURE,2511, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2512, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2513, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2514, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2515, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2516, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2517, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2518, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2519, End If;
WS_JOB_EXEC_010,PROCEDURE,2520, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2521, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2522, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2523, END;
WS_JOB_EXEC_010,PROCEDURE,2524, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2525, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2526, -- U N S U P P O R T E D
WS_JOB_EXEC_010,PROCEDURE,2527, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2528, Else
WS_JOB_EXEC_010,PROCEDURE,2529, v_MsgText := 'Job '||pi_task_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,2530, ' could not perform action. Unsupported action '||
WS_JOB_EXEC_010,PROCEDURE,2531, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_010,PROCEDURE,2532, v_result := WsWrkAudit('E',pi_job_name, p_task_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2533, v_MsgText,NULL,NULL,p_task_id,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2534, p_status_code := -2;
WS_JOB_EXEC_010,PROCEDURE,2535, p_return_msg := 'Unsupported action '||
WS_JOB_EXEC_010,PROCEDURE,2536, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_010,PROCEDURE,2537, v_result := 1;
WS_JOB_EXEC_010,PROCEDURE,2538, End If;
WS_JOB_EXEC_010,PROCEDURE,2539, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2540, v_step := 190;
WS_JOB_EXEC_010,PROCEDURE,2541, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2542, -- Check that our function worked. If not then task failed
WS_JOB_EXEC_010,PROCEDURE,2543, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2544, --If v_result = -3 Then
WS_JOB_EXEC_010,PROCEDURE,2545, -- p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,2546, -- If ltrim(rtrim(p_return_msg)) = Then
WS_JOB_EXEC_010,PROCEDURE,2547, -- p_return_msg := Unhandled exception in action;
WS_JOB_EXEC_010,PROCEDURE,2548, -- End If;
WS_JOB_EXEC_010,PROCEDURE,2549, --End If;
WS_JOB_EXEC_010,PROCEDURE,2550,
WS_JOB_EXEC_010,PROCEDURE,2551, v_just_done := 1;
WS_JOB_EXEC_010,PROCEDURE,2552, v_step := 192;
WS_JOB_EXEC_010,PROCEDURE,2553, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2554, -- Log the results in the audit trail
WS_JOB_EXEC_010,PROCEDURE,2555, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2556, If p_status_code = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2557, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,2558, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,2559, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_010,PROCEDURE,2560, v_audit_status := 'W';
WS_JOB_EXEC_010,PROCEDURE,2561, v_run_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,2562, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_010,PROCEDURE,2563, v_audit_status := 'E';
WS_JOB_EXEC_010,PROCEDURE,2564, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,2565, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_010,PROCEDURE,2566, v_audit_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,2567, v_run_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,2568, ELSE
WS_JOB_EXEC_010,PROCEDURE,2569, v_audit_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,2570, v_run_status := 'U';
WS_JOB_EXEC_010,PROCEDURE,2571, p_status_code := -3;
WS_JOB_EXEC_010,PROCEDURE,2572, End If;
WS_JOB_EXEC_010,PROCEDURE,2573, v_result := WsWrkAudit(v_audit_status, p_job_name, p_task_name, p_sequence,
WS_JOB_EXEC_010,PROCEDURE,2574, p_return_msg, NULL, NULL, p_task_id, p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2575, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2576, -- See if the task needs a status update.
WS_JOB_EXEC_010,PROCEDURE,2577, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2578, If v_okay = 1 OR v_halted = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2579, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2580, -- Update the run record to indicate our final status
WS_JOB_EXEC_010,PROCEDURE,2581, -- If we have a halt then generate a message
WS_JOB_EXEC_010,PROCEDURE,2582, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2583, v_step := 230;
WS_JOB_EXEC_010,PROCEDURE,2584, If v_halted = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2585, p_return_msg := 'Halted by dependency failure or halt';
WS_JOB_EXEC_010,PROCEDURE,2586, v_run_status := 'H';
WS_JOB_EXEC_010,PROCEDURE,2587, v_audit_status := NULL;
WS_JOB_EXEC_010,PROCEDURE,2588, End If;
WS_JOB_EXEC_010,PROCEDURE,2589, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2590, update ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,2591, set wtr_run_status = v_run_status,
WS_JOB_EXEC_010,PROCEDURE,2592, wtr_audit_status = v_audit_status,
WS_JOB_EXEC_010,PROCEDURE,2593, wtr_return_msg = p_return_msg,
WS_JOB_EXEC_010,PROCEDURE,2594, wtr_elapsed_hh = trunc(to_number(sysdate-wtr_started)*24,0),
WS_JOB_EXEC_010,PROCEDURE,2595, wtr_elapsed_mi = round(to_number(sysdate-wtr_started)*24*60,0) - (
WS_JOB_EXEC_010,PROCEDURE,2596, trunc(to_number(sysdate-wtr_started)*24,0)*60),
WS_JOB_EXEC_010,PROCEDURE,2597, wtr_completed = sysdate
WS_JOB_EXEC_010,PROCEDURE,2598, where wtr_task_key = v_task_key
WS_JOB_EXEC_010,PROCEDURE,2599, and wtr_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2600, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2601, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,2602, ' failed in final update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_010,PROCEDURE,2603, v_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_010,PROCEDURE,2604, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2605, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2606, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,2607, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2608, END;
WS_JOB_EXEC_010,PROCEDURE,2609, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2610, End If; -- End of task record update
WS_JOB_EXEC_010,PROCEDURE,2611, Else -- not processing, so must be an idle thread
WS_JOB_EXEC_010,PROCEDURE,2612, v_idle_thread := 1;
WS_JOB_EXEC_010,PROCEDURE,2613, End If; -- End of Processing of a task
WS_JOB_EXEC_010,PROCEDURE,2614,
WS_JOB_EXEC_010,PROCEDURE,2615, -- If just processed then sleep for 2 seconds and look for next task
WS_JOB_EXEC_010,PROCEDURE,2616, If v_just_done = 0 Then
WS_JOB_EXEC_010,PROCEDURE,2617, DBMS_LOCK.SLEEP(2);
WS_JOB_EXEC_010,PROCEDURE,2618, End If;
WS_JOB_EXEC_010,PROCEDURE,2619,
WS_JOB_EXEC_010,PROCEDURE,2620, -- If the thread is idle then sleep for 30 seconds.
WS_JOB_EXEC_010,PROCEDURE,2621, If v_idle_thread = 1 And v_running_count > 0 Then
WS_JOB_EXEC_010,PROCEDURE,2622, DBMS_LOCK.SLEEP(30);
WS_JOB_EXEC_010,PROCEDURE,2623, End If;
WS_JOB_EXEC_010,PROCEDURE,2624,
WS_JOB_EXEC_010,PROCEDURE,2625, END LOOP; -- End of While More tasks Loop
WS_JOB_EXEC_010,PROCEDURE,2626,
WS_JOB_EXEC_010,PROCEDURE,2627, v_step := 250;
WS_JOB_EXEC_010,PROCEDURE,2628,
WS_JOB_EXEC_010,PROCEDURE,2629, DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_JOB_EXEC_010,PROCEDURE,2630,
WS_JOB_EXEC_010,PROCEDURE,2631, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2632, -- A L L T A S K S D O N E
WS_JOB_EXEC_010,PROCEDURE,2633, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2634, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2635, -- Here if no more waiting tasks. If no more running tasks
WS_JOB_EXEC_010,PROCEDURE,2636, -- then all threads are finished, so update the job_run
WS_JOB_EXEC_010,PROCEDURE,2637, -- record to a completed state
WS_JOB_EXEC_010,PROCEDURE,2638, -- WMR Need to update the ctrl record and move the run records to the log tables. WMR
WS_JOB_EXEC_010,PROCEDURE,2639, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2640, po_action_key := 0;
WS_JOB_EXEC_010,PROCEDURE,2641, po_action_msg := '';
WS_JOB_EXEC_010,PROCEDURE,2642, v_step := 260;
WS_JOB_EXEC_010,PROCEDURE,2643, If v_running_count = 0 Then
WS_JOB_EXEC_010,PROCEDURE,2644,
WS_JOB_EXEC_010,PROCEDURE,2645, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,2646,
WS_JOB_EXEC_010,PROCEDURE,2647, -- work out what the return will be
WS_JOB_EXEC_010,PROCEDURE,2648, If v_halted_count = 0 AND v_failed_count = 0 Then
WS_JOB_EXEC_010,PROCEDURE,2649, v_job_status := 'C';
WS_JOB_EXEC_010,PROCEDURE,2650, v_audit_status := 'S';
WS_JOB_EXEC_010,PROCEDURE,2651, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,2652, ' Completed. ';
WS_JOB_EXEC_010,PROCEDURE,2653, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2654, Select wjr_publish_okay into v_OkayMsg
WS_JOB_EXEC_010,PROCEDURE,2655, From ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,2656, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2657, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2658, v_FailMsg := '';
WS_JOB_EXEC_010,PROCEDURE,2659, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2660, v_OkayMsg := '';
WS_JOB_EXEC_010,PROCEDURE,2661, v_FailMsg := '';
WS_JOB_EXEC_010,PROCEDURE,2662, END;
WS_JOB_EXEC_010,PROCEDURE,2663, Else
WS_JOB_EXEC_010,PROCEDURE,2664, v_job_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,2665, v_audit_status := 'F';
WS_JOB_EXEC_010,PROCEDURE,2666, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,2667, ' FAILED. ';
WS_JOB_EXEC_010,PROCEDURE,2668, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2669, Select wjr_publish_fail into v_FailMsg
WS_JOB_EXEC_010,PROCEDURE,2670, From ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,2671, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2672, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2673, v_OkayMsg := '';
WS_JOB_EXEC_010,PROCEDURE,2674, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2675, v_OkayMsg := '';
WS_JOB_EXEC_010,PROCEDURE,2676, v_FailMsg := '';
WS_JOB_EXEC_010,PROCEDURE,2677, END;
WS_JOB_EXEC_010,PROCEDURE,2678, End If;
WS_JOB_EXEC_010,PROCEDURE,2679,
WS_JOB_EXEC_010,PROCEDURE,2680, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2681, -- All tasks done
WS_JOB_EXEC_010,PROCEDURE,2682, -- Set the job status on the run record and job finish time
WS_JOB_EXEC_010,PROCEDURE,2683, -- Need to lock the record first to prevent another thread from
WS_JOB_EXEC_010,PROCEDURE,2684, -- grabbing it, or in case another thread has already got it,
WS_JOB_EXEC_010,PROCEDURE,2685, -- or updated it
WS_JOB_EXEC_010,PROCEDURE,2686, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2687, v_step := 270;
WS_JOB_EXEC_010,PROCEDURE,2688, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2689, select wjr_status into v_run_status
WS_JOB_EXEC_010,PROCEDURE,2690, from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,2691, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2692, and wjr_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2693, for update nowait;
WS_JOB_EXEC_010,PROCEDURE,2694, If v_run_status = 'R' Then
WS_JOB_EXEC_010,PROCEDURE,2695, update ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,2696, set wjr_status = v_job_status,
WS_JOB_EXEC_010,PROCEDURE,2697, wjr_elapsed_hh = trunc(to_number(sysdate-wjr_started)*24,0),
WS_JOB_EXEC_010,PROCEDURE,2698, wjr_elapsed_mi = round(to_number(sysdate-wjr_started)*24*60,0) - (
WS_JOB_EXEC_010,PROCEDURE,2699, trunc(to_number(sysdate-wjr_started)*24,0)*60),
WS_JOB_EXEC_010,PROCEDURE,2700, wjr_completed = sysdate
WS_JOB_EXEC_010,PROCEDURE,2701, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2702, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2703, v_okay := 1;
WS_JOB_EXEC_010,PROCEDURE,2704, Else
WS_JOB_EXEC_010,PROCEDURE,2705, -- someone else got the record
WS_JOB_EXEC_010,PROCEDURE,2706, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,2707, End If;
WS_JOB_EXEC_010,PROCEDURE,2708, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2709, -- If a resource busy someone else has the record
WS_JOB_EXEC_010,PROCEDURE,2710, -- so skip it
WS_JOB_EXEC_010,PROCEDURE,2711, -- If a no data found then the run record has already been
WS_JOB_EXEC_010,PROCEDURE,2712, -- changed to log so all okay
WS_JOB_EXEC_010,PROCEDURE,2713, If SQLCODE = -54 Then
WS_JOB_EXEC_010,PROCEDURE,2714, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,2715, ElsIf SQLCODE = 100 Then
WS_JOB_EXEC_010,PROCEDURE,2716, v_okay := 0;
WS_JOB_EXEC_010,PROCEDURE,2717, Else
WS_JOB_EXEC_010,PROCEDURE,2718, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,2719, ' failed to change state to completed '||
WS_JOB_EXEC_010,PROCEDURE,2720, 'in ws_wrk_job_run.!!!';
WS_JOB_EXEC_010,PROCEDURE,2721, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2722, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2723, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,2724, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2725, End If;
WS_JOB_EXEC_010,PROCEDURE,2726, END;
WS_JOB_EXEC_010,PROCEDURE,2727, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2728,
WS_JOB_EXEC_010,PROCEDURE,2729, -- if we are the thread doing the update then
WS_JOB_EXEC_010,PROCEDURE,2730, -- write to the audit trail and complete the cleanup
WS_JOB_EXEC_010,PROCEDURE,2731, If v_okay = 1 Then
WS_JOB_EXEC_010,PROCEDURE,2732,
WS_JOB_EXEC_010,PROCEDURE,2733, If v_OkayMsg is not Null Then
WS_JOB_EXEC_010,PROCEDURE,2734, po_action_key := 1;
WS_JOB_EXEC_010,PROCEDURE,2735, po_action_msg := v_OkayMsg;
WS_JOB_EXEC_010,PROCEDURE,2736, End If;
WS_JOB_EXEC_010,PROCEDURE,2737, If v_FailMsg is not Null Then
WS_JOB_EXEC_010,PROCEDURE,2738, po_action_key := 2;
WS_JOB_EXEC_010,PROCEDURE,2739, po_action_msg := v_FailMsg;
WS_JOB_EXEC_010,PROCEDURE,2740, End If;
WS_JOB_EXEC_010,PROCEDURE,2741,
WS_JOB_EXEC_010,PROCEDURE,2742,
WS_JOB_EXEC_010,PROCEDURE,2743,
WS_JOB_EXEC_010,PROCEDURE,2744, v_result := WsWrkAudit(v_audit_status,pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2745, v_MsgText,NULL,NULL,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2746,
WS_JOB_EXEC_010,PROCEDURE,2747,
WS_JOB_EXEC_010,PROCEDURE,2748, -- Set the job status on the control record for the job and finish time.
WS_JOB_EXEC_010,PROCEDURE,2749, -- WMR need to set the status to HOLD or Waiting depending on if another run.
WS_JOB_EXEC_010,PROCEDURE,2750, v_step := 280;
WS_JOB_EXEC_010,PROCEDURE,2751, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2752, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,2753, set wjc_last_status = v_job_status,
WS_JOB_EXEC_010,PROCEDURE,2754, wjc_completed = sysdate
WS_JOB_EXEC_010,PROCEDURE,2755, where wjc_job_key = p_job_id;
WS_JOB_EXEC_010,PROCEDURE,2756, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2757, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_010,PROCEDURE,2758, ' failed to change completed time for job '||
WS_JOB_EXEC_010,PROCEDURE,2759, 'in ws_wrk_job_ctrl.!!!';
WS_JOB_EXEC_010,PROCEDURE,2760, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2761, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2762, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,2763, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2764, END;
WS_JOB_EXEC_010,PROCEDURE,2765, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2766,
WS_JOB_EXEC_010,PROCEDURE,2767, v_step := 290;
WS_JOB_EXEC_010,PROCEDURE,2768, If v_job_status = 'C' Then
WS_JOB_EXEC_010,PROCEDURE,2769, -- Move the job run record to the log record
WS_JOB_EXEC_010,PROCEDURE,2770, v_step := 300;
WS_JOB_EXEC_010,PROCEDURE,2771, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2772, insert into ws_wrk_job_log
WS_JOB_EXEC_010,PROCEDURE,2773, select * from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,2774, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2775, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2776, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2777, delete from ws_wrk_job_run
WS_JOB_EXEC_010,PROCEDURE,2778, where wjr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2779, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2780, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2781, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2782, v_MsgText := 'Job '||pi_job_name||' failed in xfer to ws_wrk_job_log. '||
WS_JOB_EXEC_010,PROCEDURE,2783, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,2784, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2785, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2786, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,2787, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2788, END;
WS_JOB_EXEC_010,PROCEDURE,2789,
WS_JOB_EXEC_010,PROCEDURE,2790, -- Move the task run records to the log record
WS_JOB_EXEC_010,PROCEDURE,2791, v_step := 310;
WS_JOB_EXEC_010,PROCEDURE,2792, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2793, insert into ws_wrk_task_log
WS_JOB_EXEC_010,PROCEDURE,2794, select * from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,2795, where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2796, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2797, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2798, v_step := 320;
WS_JOB_EXEC_010,PROCEDURE,2799, delete from ws_wrk_task_run
WS_JOB_EXEC_010,PROCEDURE,2800, where wtr_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2801, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_010,PROCEDURE,2802, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2803, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2804, v_MsgText := 'Job '||pi_job_name||' failed in xfer of tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_010,PROCEDURE,2805, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,2806, v_result := WsWrkAudit('F',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2807, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2808, po_result_code := -2;
WS_JOB_EXEC_010,PROCEDURE,2809, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2810, END;
WS_JOB_EXEC_010,PROCEDURE,2811, End If;
WS_JOB_EXEC_010,PROCEDURE,2812,
WS_JOB_EXEC_010,PROCEDURE,2813, -- If this job has a blocked iteration waiting then release it
WS_JOB_EXEC_010,PROCEDURE,2814, v_step := 311;
WS_JOB_EXEC_010,PROCEDURE,2815, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2816, update ws_wrk_job_ctrl
WS_JOB_EXEC_010,PROCEDURE,2817, set wjc_status = 'W'
WS_JOB_EXEC_010,PROCEDURE,2818, where wjc_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2819, and wjc_status = 'B';
WS_JOB_EXEC_010,PROCEDURE,2820, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2821, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2822, v_MsgText := 'Job '||pi_job_name||' failed to release blocked job. '||
WS_JOB_EXEC_010,PROCEDURE,2823, ' No Action !!!';
WS_JOB_EXEC_010,PROCEDURE,2824, v_result := WsWrkAudit('W',pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2825, v_MsgText,SQLCODE,SQLERRM,0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2826, END;
WS_JOB_EXEC_010,PROCEDURE,2827,
WS_JOB_EXEC_010,PROCEDURE,2828, End If; -- end of final thread
WS_JOB_EXEC_010,PROCEDURE,2829,
WS_JOB_EXEC_010,PROCEDURE,2830, End If; -- end of running count 0
WS_JOB_EXEC_010,PROCEDURE,2831,
WS_JOB_EXEC_010,PROCEDURE,2832, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2833, -- Remove this thread as being active
WS_JOB_EXEC_010,PROCEDURE,2834, --=====================================================
WS_JOB_EXEC_010,PROCEDURE,2835, v_step := 330;
WS_JOB_EXEC_010,PROCEDURE,2836, BEGIN
WS_JOB_EXEC_010,PROCEDURE,2837, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_010,PROCEDURE,2838, Delete from ws_wrk_job_thread
WS_JOB_EXEC_010,PROCEDURE,2839, Where wjt_job_key = p_job_id
WS_JOB_EXEC_010,PROCEDURE,2840, And wjt_thread = pi_thread
WS_JOB_EXEC_010,PROCEDURE,2841, And wjt_sequence = pi_sequence
WS_JOB_EXEC_010,PROCEDURE,2842, And wjt_sid = v_sid
WS_JOB_EXEC_010,PROCEDURE,2843, And wjt_serial = v_serial;
WS_JOB_EXEC_010,PROCEDURE,2844, End If;
WS_JOB_EXEC_010,PROCEDURE,2845, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2846, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2847, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_010,PROCEDURE,2848, END;
WS_JOB_EXEC_010,PROCEDURE,2849,
WS_JOB_EXEC_010,PROCEDURE,2850, v_step := 340;
WS_JOB_EXEC_010,PROCEDURE,2851, COMMIT;
WS_JOB_EXEC_010,PROCEDURE,2852, po_result_code := 1;
WS_JOB_EXEC_010,PROCEDURE,2853,
WS_JOB_EXEC_010,PROCEDURE,2854, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2855,
WS_JOB_EXEC_010,PROCEDURE,2856,EXCEPTION
WS_JOB_EXEC_010,PROCEDURE,2857, WHEN OTHERS THEN
WS_JOB_EXEC_010,PROCEDURE,2858, v_MsgText := 'Unhandled Exception in ws_job_execute. '||
WS_JOB_EXEC_010,PROCEDURE,2859, ' Step ' ||v_step;
WS_JOB_EXEC_010,PROCEDURE,2860, v_result := WsWrkAudit('F', pi_job_name, pi_job_name, pi_sequence,
WS_JOB_EXEC_010,PROCEDURE,2861, v_MsgText,SQLCODE, SQLERRM, 0,p_job_id);
WS_JOB_EXEC_010,PROCEDURE,2862, po_result_code := -3;
WS_JOB_EXEC_010,PROCEDURE,2863, RETURN;
WS_JOB_EXEC_010,PROCEDURE,2864,END ws_job_exec_010;
WS_JOB_EXEC_010,PROCEDURE,2865,
WS_JOB_EXEC_411,PROCEDURE,1,procedure ws_job_exec_411
WS_JOB_EXEC_411,PROCEDURE,2, (
WS_JOB_EXEC_411,PROCEDURE,3, pi_job_name IN varchar2,
WS_JOB_EXEC_411,PROCEDURE,4, pi_task_name IN varchar2,
WS_JOB_EXEC_411,PROCEDURE,5, pi_action IN varchar2,
WS_JOB_EXEC_411,PROCEDURE,6, pi_thread IN number,
WS_JOB_EXEC_411,PROCEDURE,7, pi_sequence IN number,
WS_JOB_EXEC_411,PROCEDURE,8, pi_job_key IN number,
WS_JOB_EXEC_411,PROCEDURE,9, pi_task_key IN number,
WS_JOB_EXEC_411,PROCEDURE,10, pi_task_status IN number, -- used during rejoin to pass back a tasks status
WS_JOB_EXEC_411,PROCEDURE,11, pi_task_msg IN varchar2,
WS_JOB_EXEC_411,PROCEDURE,12, pm_job_name IN varchar2, -- Master job name ( used in audit trail)
WS_JOB_EXEC_411,PROCEDURE,13, pm_job_key IN number, -- Master job key ( used in audit trail )
WS_JOB_EXEC_411,PROCEDURE,14, pm_rejoin_job_keys IN varchar2, -- List of job keys to rejoin on.
WS_JOB_EXEC_411,PROCEDURE,15, pm_rejoin_task_keys IN varchar2, -- List of task keys to rejoin on.
WS_JOB_EXEC_411,PROCEDURE,16, po_result_code OUT number,
WS_JOB_EXEC_411,PROCEDURE,17, po_result_msg OUT varchar2,
WS_JOB_EXEC_411,PROCEDURE,18, po_job_key OUT number,
WS_JOB_EXEC_411,PROCEDURE,19, po_task_key OUT number,
WS_JOB_EXEC_411,PROCEDURE,20, po_task_name OUT varchar2,
WS_JOB_EXEC_411,PROCEDURE,21, po_action_key OUT number,
WS_JOB_EXEC_411,PROCEDURE,22, po_action_msg OUT varchar2,
WS_JOB_EXEC_411,PROCEDURE,23, ps_job_key_list OUT varchar2, -- ( list of jobs to pass task down to. Comma separated )
WS_JOB_EXEC_411,PROCEDURE,24, ps_task_key_list OUT varchar2,
WS_JOB_EXEC_411,PROCEDURE,25, po_task_data OUT varchar2
WS_JOB_EXEC_411,PROCEDURE,26, )
WS_JOB_EXEC_411,PROCEDURE,27, AUTHID CURRENT_USER
WS_JOB_EXEC_411,PROCEDURE,28, As
WS_JOB_EXEC_411,PROCEDURE,29,
WS_JOB_EXEC_411,PROCEDURE,30, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_EXEC_411,PROCEDURE,31,
WS_JOB_EXEC_411,PROCEDURE,32, -- =============================================================================
WS_JOB_EXEC_411,PROCEDURE,33, -- DBMS Name : Oracle
WS_JOB_EXEC_411,PROCEDURE,34, -- Script Name : ws_job_exec_411
WS_JOB_EXEC_411,PROCEDURE,35, -- Description : Executes a WhereScape Job
WS_JOB_EXEC_411,PROCEDURE,36, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_EXEC_411,PROCEDURE,37, -- =============================================================================
WS_JOB_EXEC_411,PROCEDURE,38,
WS_JOB_EXEC_411,PROCEDURE,39, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,40, -- Constants
WS_JOB_EXEC_411,PROCEDURE,41, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,42, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_JOB_EXEC_411,PROCEDURE,43, v_ws_obj_procedure constant number := 1;
WS_JOB_EXEC_411,PROCEDURE,44, v_ws_obj_fact_kpi constant number := 2;
WS_JOB_EXEC_411,PROCEDURE,45, v_ws_obj_script constant number := 3;
WS_JOB_EXEC_411,PROCEDURE,46, v_ws_obj_template constant number := 4;
WS_JOB_EXEC_411,PROCEDURE,47, v_ws_obj_fact constant number := 5;
WS_JOB_EXEC_411,PROCEDURE,48, v_ws_obj_dim constant number := 6;
WS_JOB_EXEC_411,PROCEDURE,49, v_ws_obj_stage constant number := 7;
WS_JOB_EXEC_411,PROCEDURE,50, v_ws_obj_load constant number := 8;
WS_JOB_EXEC_411,PROCEDURE,51, v_ws_obj_agg constant number := 9;
WS_JOB_EXEC_411,PROCEDURE,52, v_ws_obj_index constant number := 10;
WS_JOB_EXEC_411,PROCEDURE,53, v_ws_obj_connect constant number := 11;
WS_JOB_EXEC_411,PROCEDURE,54, v_ws_obj_dim_view constant number := 12;
WS_JOB_EXEC_411,PROCEDURE,55, v_ws_obj_export constant number := 13;
WS_JOB_EXEC_411,PROCEDURE,56, v_ws_obj_cube constant number := 15;
WS_JOB_EXEC_411,PROCEDURE,57, v_ws_obj_cube_virtual constant number := 16;
WS_JOB_EXEC_411,PROCEDURE,58, v_ws_obj_report constant number := 17;
WS_JOB_EXEC_411,PROCEDURE,59, v_ws_obj_view constant number := 18;
WS_JOB_EXEC_411,PROCEDURE,60, v_ws_obj_file constant number := 19;
WS_JOB_EXEC_411,PROCEDURE,61, v_ws_obj_join constant number := 20;
WS_JOB_EXEC_411,PROCEDURE,62, v_ws_obj_retro constant number := 21;
WS_JOB_EXEC_411,PROCEDURE,63, v_ws_obj_retro_copy constant number := 22;
WS_JOB_EXEC_411,PROCEDURE,64, v_ws_obj_olap_cube constant number := 23;
WS_JOB_EXEC_411,PROCEDURE,65, v_ws_obj_olap_dim constant number := 24;
WS_JOB_EXEC_411,PROCEDURE,66, v_ws_obj_olap_role constant number := 25;
WS_JOB_EXEC_411,PROCEDURE,67, v_ws_obj_ods constant number := 26;
WS_JOB_EXEC_411,PROCEDURE,68, v_ws_obj_normal constant number := 27;
WS_JOB_EXEC_411,PROCEDURE,69, v_ws_obj_hub constant number := 28;
WS_JOB_EXEC_411,PROCEDURE,70, v_ws_obj_satellite constant number := 29;
WS_JOB_EXEC_411,PROCEDURE,71, v_ws_obj_link constant number := 30;
WS_JOB_EXEC_411,PROCEDURE,72, v_ws_obj_custom1 constant number := 31;
WS_JOB_EXEC_411,PROCEDURE,73, v_ws_obj_custom2 constant number := 32;
WS_JOB_EXEC_411,PROCEDURE,74, v_ws_obj_max constant number := 32;
WS_JOB_EXEC_411,PROCEDURE,75,
WS_JOB_EXEC_411,PROCEDURE,76, v_ws_obj_job constant number := 50;
WS_JOB_EXEC_411,PROCEDURE,77, v_ws_obj_source_mapping constant number := 69;
WS_JOB_EXEC_411,PROCEDURE,78,
WS_JOB_EXEC_411,PROCEDURE,79, v_ws_act_drop constant number := 1;
WS_JOB_EXEC_411,PROCEDURE,80, v_ws_act_create constant number := 2;
WS_JOB_EXEC_411,PROCEDURE,81, v_ws_act_drop_all constant number := 3;
WS_JOB_EXEC_411,PROCEDURE,82, v_ws_act_pre_drop constant number := 4;
WS_JOB_EXEC_411,PROCEDURE,83, v_ws_act_load constant number := 5;
WS_JOB_EXEC_411,PROCEDURE,84, v_ws_act_update constant number := 6;
WS_JOB_EXEC_411,PROCEDURE,85, v_ws_act_execute constant number := 7;
WS_JOB_EXEC_411,PROCEDURE,86, v_ws_act_process constant number := 8;
WS_JOB_EXEC_411,PROCEDURE,87, v_ws_act_build constant number := 9;
WS_JOB_EXEC_411,PROCEDURE,88, v_ws_act_build_all constant number := 10;
WS_JOB_EXEC_411,PROCEDURE,89, v_ws_act_analyze constant number := 11;
WS_JOB_EXEC_411,PROCEDURE,90, v_ws_act_quick_analyze constant number := 12;
WS_JOB_EXEC_411,PROCEDURE,91, v_ws_act_statistics constant number := 13;
WS_JOB_EXEC_411,PROCEDURE,92, v_ws_act_quick_statistics constant number := 14;
WS_JOB_EXEC_411,PROCEDURE,93, v_ws_act_initial constant number := 15;
WS_JOB_EXEC_411,PROCEDURE,94, v_ws_act_cube_dim constant number := 16;
WS_JOB_EXEC_411,PROCEDURE,95, v_ws_act_db_dim constant number := 17;
WS_JOB_EXEC_411,PROCEDURE,96, v_ws_act_custom constant number := 18;
WS_JOB_EXEC_411,PROCEDURE,97, v_ws_act_truncate constant number := 19;
WS_JOB_EXEC_411,PROCEDURE,98,
WS_JOB_EXEC_411,PROCEDURE,99, v_wants_to_run integer := 1;
WS_JOB_EXEC_411,PROCEDURE,100, v_ws_act_disabled_once constant char(1) := 'A';
WS_JOB_EXEC_411,PROCEDURE,101, v_ws_act_disabled constant char(1) := 'B';
WS_JOB_EXEC_411,PROCEDURE,102,
WS_JOB_EXEC_411,PROCEDURE,103, v_ws_create_ddl_type constant char(1) := '3';
WS_JOB_EXEC_411,PROCEDURE,104,
WS_JOB_EXEC_411,PROCEDURE,105, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,106, -- Parameters to the called procedures
WS_JOB_EXEC_411,PROCEDURE,107, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,108, p_sequence number;
WS_JOB_EXEC_411,PROCEDURE,109, p_job_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,110, p_task_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,111, p_task_id number;
WS_JOB_EXEC_411,PROCEDURE,112, p_job_id number;
WS_JOB_EXEC_411,PROCEDURE,113, p_return_msg varchar2(1024);
WS_JOB_EXEC_411,PROCEDURE,114, p_status_code number;
WS_JOB_EXEC_411,PROCEDURE,115, p_return_msg_2 varchar2(1024);
WS_JOB_EXEC_411,PROCEDURE,116, p_status_code_2 number;
WS_JOB_EXEC_411,PROCEDURE,117, p_return_msg_3 varchar2(1024);
WS_JOB_EXEC_411,PROCEDURE,118, p_status_code_3 number;
WS_JOB_EXEC_411,PROCEDURE,119,
WS_JOB_EXEC_411,PROCEDURE,120, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,121, -- Variables
WS_JOB_EXEC_411,PROCEDURE,122, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,123, v_rec_count number;
WS_JOB_EXEC_411,PROCEDURE,124, v_job_count number;
WS_JOB_EXEC_411,PROCEDURE,125, v_task_count number;
WS_JOB_EXEC_411,PROCEDURE,126, v_child_key number;
WS_JOB_EXEC_411,PROCEDURE,127, v_run_status varchar2(1);
WS_JOB_EXEC_411,PROCEDURE,128, v_audit_status varchar2(1);
WS_JOB_EXEC_411,PROCEDURE,129, v_abort_level number;
WS_JOB_EXEC_411,PROCEDURE,130, v_halted number;
WS_JOB_EXEC_411,PROCEDURE,131, v_okay number;
WS_JOB_EXEC_411,PROCEDURE,132, v_checked number;
WS_JOB_EXEC_411,PROCEDURE,133, v_running_count number;
WS_JOB_EXEC_411,PROCEDURE,134, v_failed_count number;
WS_JOB_EXEC_411,PROCEDURE,135, v_halted_count number;
WS_JOB_EXEC_411,PROCEDURE,136, v_job_status varchar2(1);
WS_JOB_EXEC_411,PROCEDURE,137, v_loop_count number;
WS_JOB_EXEC_411,PROCEDURE,138, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_EXEC_411,PROCEDURE,139, v_OkayMsg varchar2(256); -- Okay result command
WS_JOB_EXEC_411,PROCEDURE,140, v_FailMsg varchar2(256); -- Failure result command
WS_JOB_EXEC_411,PROCEDURE,141, v_result number;
WS_JOB_EXEC_411,PROCEDURE,142, v_status_code varchar2(1);
WS_JOB_EXEC_411,PROCEDURE,143, v_step integer := 0; -- return code
WS_JOB_EXEC_411,PROCEDURE,144, v_Cursor number;
WS_JOB_EXEC_411,PROCEDURE,145, v_Just_done integer := 0;
WS_JOB_EXEC_411,PROCEDURE,146, v_idle_thread integer := 0;
WS_JOB_EXEC_411,PROCEDURE,147, v_start_hh integer;
WS_JOB_EXEC_411,PROCEDURE,148, v_start_mi integer;
WS_JOB_EXEC_411,PROCEDURE,149, v_start_day integer;
WS_JOB_EXEC_411,PROCEDURE,150, v_job_type varchar2(1);
WS_JOB_EXEC_411,PROCEDURE,151, v_sid integer;
WS_JOB_EXEC_411,PROCEDURE,152, v_serial integer;
WS_JOB_EXEC_411,PROCEDURE,153, v_process integer;
WS_JOB_EXEC_411,PROCEDURE,154, v_action_type integer;
WS_JOB_EXEC_411,PROCEDURE,155, v_obj_type integer;
WS_JOB_EXEC_411,PROCEDURE,156, v_obj_key integer;
WS_JOB_EXEC_411,PROCEDURE,157, v_task_key integer;
WS_JOB_EXEC_411,PROCEDURE,158, v_ctrl_sequence integer;
WS_JOB_EXEC_411,PROCEDURE,159, v_start_after date;
WS_JOB_EXEC_411,PROCEDURE,160, v_cust_sa_hh integer;
WS_JOB_EXEC_411,PROCEDURE,161, v_cust_sa_mm integer;
WS_JOB_EXEC_411,PROCEDURE,162, v_cust_sb_hh integer;
WS_JOB_EXEC_411,PROCEDURE,163, v_cust_sb_mm integer;
WS_JOB_EXEC_411,PROCEDURE,164, v_cust_min integer;
WS_JOB_EXEC_411,PROCEDURE,165, v_cust_days integer;
WS_JOB_EXEC_411,PROCEDURE,166, v_cust_sb integer;
WS_JOB_EXEC_411,PROCEDURE,167, v_cust_sa integer;
WS_JOB_EXEC_411,PROCEDURE,168, v_more integer;
WS_JOB_EXEC_411,PROCEDURE,169, v_AddDays integer;
WS_JOB_EXEC_411,PROCEDURE,170, v_wait_HH integer;
WS_JOB_EXEC_411,PROCEDURE,171, v_wait_MM integer;
WS_JOB_EXEC_411,PROCEDURE,172, v_cur_HH integer;
WS_JOB_EXEC_411,PROCEDURE,173, v_cur_MM integer;
WS_JOB_EXEC_411,PROCEDURE,174, v_cur_HHMM integer;
WS_JOB_EXEC_411,PROCEDURE,175, v_cur_day_name varchar(3);
WS_JOB_EXEC_411,PROCEDURE,176, v_Monday integer;
WS_JOB_EXEC_411,PROCEDURE,177, v_Tuesday integer;
WS_JOB_EXEC_411,PROCEDURE,178, v_Wednesday integer;
WS_JOB_EXEC_411,PROCEDURE,179, v_Thursday integer;
WS_JOB_EXEC_411,PROCEDURE,180, v_Friday integer;
WS_JOB_EXEC_411,PROCEDURE,181, v_Saturday integer;
WS_JOB_EXEC_411,PROCEDURE,182, v_Sunday integer;
WS_JOB_EXEC_411,PROCEDURE,183, v_log_keep integer;
WS_JOB_EXEC_411,PROCEDURE,184,-- v_start_after_hour integer;
WS_JOB_EXEC_411,PROCEDURE,185,-- v_start_after_minute integer;
WS_JOB_EXEC_411,PROCEDURE,186, v_new_HH integer;
WS_JOB_EXEC_411,PROCEDURE,187, v_new_MM integer;
WS_JOB_EXEC_411,PROCEDURE,188, v_new_HHMM integer;
WS_JOB_EXEC_411,PROCEDURE,189, v_increment integer;
WS_JOB_EXEC_411,PROCEDURE,190, v_increment_days integer;
WS_JOB_EXEC_411,PROCEDURE,191, v_increment_current integer;
WS_JOB_EXEC_411,PROCEDURE,192, v_spos integer;
WS_JOB_EXEC_411,PROCEDURE,193, v_epos integer;
WS_JOB_EXEC_411,PROCEDURE,194, v_work varchar2(4000);
WS_JOB_EXEC_411,PROCEDURE,195, v_parameter varchar2(4000);
WS_JOB_EXEC_411,PROCEDURE,196,-- v_start_after_date date;
WS_JOB_EXEC_411,PROCEDURE,197, v_idle_thread_wait integer;-- wait interval for an idle thread
WS_JOB_EXEC_411,PROCEDURE,198, v_retry integer; -- variable to act as a boolean for retry/while loops
WS_JOB_EXEC_411,PROCEDURE,199, v_retry_msg_count integer; -- counter of retries for message logging (want to try more often than report)
WS_JOB_EXEC_411,PROCEDURE,200, v_procedure_type varchar2(1);
WS_JOB_EXEC_411,PROCEDURE,201, v_any_hive_targets integer;
WS_JOB_EXEC_411,PROCEDURE,202, v_bda_connect_key integer;
WS_JOB_EXEC_411,PROCEDURE,203, v_is_hive_target integer;
WS_JOB_EXEC_411,PROCEDURE,204, v_secret_id integer;
WS_JOB_EXEC_411,PROCEDURE,205, v_secret_text varchar2(4000);
WS_JOB_EXEC_411,PROCEDURE,206, v_task_data varchar2(4000);
WS_JOB_EXEC_411,PROCEDURE,207, v_is_msas_tabular_target integer;
WS_JOB_EXEC_411,PROCEDURE,208, v_is_template_ddl_target integer;
WS_JOB_EXEC_411,PROCEDURE,209, v_target_key integer;
WS_JOB_EXEC_411,PROCEDURE,210, v_target_db_type integer;
WS_JOB_EXEC_411,PROCEDURE,211,
WS_JOB_EXEC_411,PROCEDURE,212, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,213, -- Variables for jobs from jobs
WS_JOB_EXEC_411,PROCEDURE,214, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,215, v_job_result_code integer;
WS_JOB_EXEC_411,PROCEDURE,216, v_job_result_msg varchar2(1024);
WS_JOB_EXEC_411,PROCEDURE,217, v_job_job_key integer;
WS_JOB_EXEC_411,PROCEDURE,218, v_job_job_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,219, v_job_task_key integer;
WS_JOB_EXEC_411,PROCEDURE,220, v_job_task_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,221, v_job_key_list varchar2(256);
WS_JOB_EXEC_411,PROCEDURE,222, v_task_key_list varchar2(256);
WS_JOB_EXEC_411,PROCEDURE,223, v_job_action_key integer;
WS_JOB_EXEC_411,PROCEDURE,224, v_job_action_msg varchar2(4000);
WS_JOB_EXEC_411,PROCEDURE,225, v_integer integer;
WS_JOB_EXEC_411,PROCEDURE,226, v_audit_job_id integer;
WS_JOB_EXEC_411,PROCEDURE,227, v_audit_task_id integer;
WS_JOB_EXEC_411,PROCEDURE,228, v_audit_job_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,229, v_audit_task_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,230, v_child_job integer := 0;
WS_JOB_EXEC_411,PROCEDURE,231, v_sub_job_key integer;
WS_JOB_EXEC_411,PROCEDURE,232, v_sub_task_key integer;
WS_JOB_EXEC_411,PROCEDURE,233, v_my_job_key integer;
WS_JOB_EXEC_411,PROCEDURE,234, v_my_task_key integer;
WS_JOB_EXEC_411,PROCEDURE,235, v_sub_job_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,236, v_my_task_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,237, v_rejoin_job_keys varchar2(256);
WS_JOB_EXEC_411,PROCEDURE,238, v_rejoin_task_keys varchar2(256);
WS_JOB_EXEC_411,PROCEDURE,239, v_cpos integer;
WS_JOB_EXEC_411,PROCEDURE,240, v_pm_job_key integer;
WS_JOB_EXEC_411,PROCEDURE,241, v_pm_job_name varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,242, v_restart_flag integer := 0;
WS_JOB_EXEC_411,PROCEDURE,243, v_run_count integer := 0;
WS_JOB_EXEC_411,PROCEDURE,244, v_job_action varchar2(64);
WS_JOB_EXEC_411,PROCEDURE,245, v_depend_loop integer := 0;
WS_JOB_EXEC_411,PROCEDURE,246,
WS_JOB_EXEC_411,PROCEDURE,247, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,248, -- Cursor for all the task control records to be added to task run
WS_JOB_EXEC_411,PROCEDURE,249, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,250, Cursor c_TaskCtrl is
WS_JOB_EXEC_411,PROCEDURE,251, Select *
WS_JOB_EXEC_411,PROCEDURE,252, from ws_wrk_task_ctrl
WS_JOB_EXEC_411,PROCEDURE,253, Where wtc_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,254,
WS_JOB_EXEC_411,PROCEDURE,255, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,256, -- Cursor for all the task run records waiting to be run
WS_JOB_EXEC_411,PROCEDURE,257, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,258, Cursor c_TaskRun is
WS_JOB_EXEC_411,PROCEDURE,259, SELECT ws_wrk_task_run.*
WS_JOB_EXEC_411,PROCEDURE,260, FROM ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,261, WHERE wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,262, AND wtr_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,263, ORDER BY wtr_type desc,wtr_name;
WS_JOB_EXEC_411,PROCEDURE,264,
WS_JOB_EXEC_411,PROCEDURE,265, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,266, -- Cursor for all the parent dependencies of a particular task
WS_JOB_EXEC_411,PROCEDURE,267, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,268, Cursor c_Dependency is
WS_JOB_EXEC_411,PROCEDURE,269, Select *
WS_JOB_EXEC_411,PROCEDURE,270, from ws_wrk_dependency
WS_JOB_EXEC_411,PROCEDURE,271, Where wdp_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,272, And wdp_child_task_key = v_child_key;
WS_JOB_EXEC_411,PROCEDURE,273,
WS_JOB_EXEC_411,PROCEDURE,274,BEGIN
WS_JOB_EXEC_411,PROCEDURE,275, v_step := 100;
WS_JOB_EXEC_411,PROCEDURE,276,
WS_JOB_EXEC_411,PROCEDURE,277, p_job_name := pi_job_name;
WS_JOB_EXEC_411,PROCEDURE,278, p_task_name := pi_task_name;
WS_JOB_EXEC_411,PROCEDURE,279, p_sequence := pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,280, p_job_id := 0;
WS_JOB_EXEC_411,PROCEDURE,281, p_task_id := 0;
WS_JOB_EXEC_411,PROCEDURE,282, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,283, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,284, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,285, po_task_data := '';
WS_JOB_EXEC_411,PROCEDURE,286, po_result_msg := 'no result';
WS_JOB_EXEC_411,PROCEDURE,287, v_idle_thread_wait :=30;
WS_JOB_EXEC_411,PROCEDURE,288,
WS_JOB_EXEC_411,PROCEDURE,289, -- setup the default audit log variables
WS_JOB_EXEC_411,PROCEDURE,290, v_audit_job_id := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,291, v_audit_task_id := pi_task_key;
WS_JOB_EXEC_411,PROCEDURE,292, v_audit_job_name := pi_job_name;
WS_JOB_EXEC_411,PROCEDURE,293, v_audit_task_name := pi_task_name;
WS_JOB_EXEC_411,PROCEDURE,294,
WS_JOB_EXEC_411,PROCEDURE,295, -- If we have a calling job then setup to use its keys in the audit log
WS_JOB_EXEC_411,PROCEDURE,296, IF pm_job_name IS NOT NULL THEN
WS_JOB_EXEC_411,PROCEDURE,297, IF pm_job_name <> pi_job_name THEN
WS_JOB_EXEC_411,PROCEDURE,298, v_audit_job_id := pm_job_key;
WS_JOB_EXEC_411,PROCEDURE,299, v_audit_job_name := pm_job_name;
WS_JOB_EXEC_411,PROCEDURE,300, v_audit_task_name := pi_job_name;
WS_JOB_EXEC_411,PROCEDURE,301, v_child_job := 1;
WS_JOB_EXEC_411,PROCEDURE,302, END IF;
WS_JOB_EXEC_411,PROCEDURE,303, v_pm_job_key := pm_job_key;
WS_JOB_EXEC_411,PROCEDURE,304, v_pm_job_name := pm_job_name;
WS_JOB_EXEC_411,PROCEDURE,305, ELSE
WS_JOB_EXEC_411,PROCEDURE,306, v_pm_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,307, v_pm_job_name := pi_job_name;
WS_JOB_EXEC_411,PROCEDURE,308, END IF;
WS_JOB_EXEC_411,PROCEDURE,309,
WS_JOB_EXEC_411,PROCEDURE,310,
WS_JOB_EXEC_411,PROCEDURE,311, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,312, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,313, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,314, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,315, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,316, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,317, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,318, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,319, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,320, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,321, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,322, -- N E W J O B
WS_JOB_EXEC_411,PROCEDURE,323, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,324, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,325, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,326, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,327, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,328, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,329, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,330, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,331, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,332, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,333, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,334, -- If we are a New job then check we are not already running, under
WS_JOB_EXEC_411,PROCEDURE,335, -- this or some other sequence number.
WS_JOB_EXEC_411,PROCEDURE,336, -- Create the job_run and task_run records
WS_JOB_EXEC_411,PROCEDURE,337, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,338, If upper(pi_action) = 'NEW' Then
WS_JOB_EXEC_411,PROCEDURE,339, v_step := 200;
WS_JOB_EXEC_411,PROCEDURE,340,
WS_JOB_EXEC_411,PROCEDURE,341, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,342, -- If we are thread 0 then do some checks and create the records
WS_JOB_EXEC_411,PROCEDURE,343, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,344, IF pi_thread = 0 Then
WS_JOB_EXEC_411,PROCEDURE,345, v_step := 300;
WS_JOB_EXEC_411,PROCEDURE,346,
WS_JOB_EXEC_411,PROCEDURE,347, -- Get the job key for the job name. There should be one and
WS_JOB_EXEC_411,PROCEDURE,348, -- only one key. Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,349, BEGIN
WS_JOB_EXEC_411,PROCEDURE,350, SELECT wjc_job_key, wjc_type, wjc_start_hour, wjc_start_minute, wjc_start_day,
WS_JOB_EXEC_411,PROCEDURE,351, wjc_sequence, wjc_publish_fail,
WS_JOB_EXEC_411,PROCEDURE,352, nvl(wjc_cust_sa_hh,0), nvl(wjc_cust_sa_mm,0),
WS_JOB_EXEC_411,PROCEDURE,353, nvl(wjc_cust_sb_hh,0), nvl(wjc_cust_sb_mm,0),
WS_JOB_EXEC_411,PROCEDURE,354, nvl(wjc_cust_min,0), nvl(wjc_cust_days,0),
WS_JOB_EXEC_411,PROCEDURE,355, nvl(wjc_avg_count,0),
WS_JOB_EXEC_411,PROCEDURE,356,-- to_number(to_char(wjc_start_after,HH24)),
WS_JOB_EXEC_411,PROCEDURE,357,-- to_number(to_char(wjc_start_after,MI)),
WS_JOB_EXEC_411,PROCEDURE,358, wjc_start_after, NVL(wjc_idle_thread_wait ,30)
WS_JOB_EXEC_411,PROCEDURE,359, INTO p_job_id, v_job_type, v_start_hh, v_start_mi, v_start_day,
WS_JOB_EXEC_411,PROCEDURE,360, v_ctrl_sequence, v_FailMsg,
WS_JOB_EXEC_411,PROCEDURE,361, v_cust_sa_hh, v_cust_sa_mm, v_cust_sb_hh, v_cust_sb_mm,
WS_JOB_EXEC_411,PROCEDURE,362, v_cust_min, v_cust_days, v_log_keep,
WS_JOB_EXEC_411,PROCEDURE,363,-- v_start_after_hour,
WS_JOB_EXEC_411,PROCEDURE,364,-- v_start_after_minute,
WS_JOB_EXEC_411,PROCEDURE,365, v_start_after, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,366, FROM ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,367, WHERE RTRIM(UPPER(wjc_name)) = RTRIM(UPPER(pi_job_name));
WS_JOB_EXEC_411,PROCEDURE,368,
WS_JOB_EXEC_411,PROCEDURE,369, v_rec_count := 1;
WS_JOB_EXEC_411,PROCEDURE,370,
WS_JOB_EXEC_411,PROCEDURE,371, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,372, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,373, v_MsgText := 'No job found named:'||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,374,
WS_JOB_EXEC_411,PROCEDURE,375, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,376, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,377, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,378, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,379, RETURN;
WS_JOB_EXEC_411,PROCEDURE,380,
WS_JOB_EXEC_411,PROCEDURE,381, WHEN TOO_MANY_ROWS THEN
WS_JOB_EXEC_411,PROCEDURE,382, v_MsgText := 'Multiple jobs found named:'||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,383,
WS_JOB_EXEC_411,PROCEDURE,384, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,385, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,386, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,387, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,388, RETURN;
WS_JOB_EXEC_411,PROCEDURE,389,
WS_JOB_EXEC_411,PROCEDURE,390, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,391, v_MsgText := 'Unhandled exception finding job:'||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,392,
WS_JOB_EXEC_411,PROCEDURE,393, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,394, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,395, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,396, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,397, RETURN;
WS_JOB_EXEC_411,PROCEDURE,398,
WS_JOB_EXEC_411,PROCEDURE,399, END;
WS_JOB_EXEC_411,PROCEDURE,400,
WS_JOB_EXEC_411,PROCEDURE,401,-- EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,402,-- v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,403,-- END;
WS_JOB_EXEC_411,PROCEDURE,404,-- If v_rec_count <> 1 Then
WS_JOB_EXEC_411,PROCEDURE,405,-- v_MsgText := Job ||pi_job_name|| passed invalid job name in New Job. ||
WS_JOB_EXEC_411,PROCEDURE,406,-- v_rec_count|| such records exist. No Action !!!;
WS_JOB_EXEC_411,PROCEDURE,407,-- v_result := WsWrkAudit(F,v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,408,-- v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,409,-- po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,410,-- RETURN;
WS_JOB_EXEC_411,PROCEDURE,411,-- End If;
WS_JOB_EXEC_411,PROCEDURE,412,
WS_JOB_EXEC_411,PROCEDURE,413, -- If we have a parent job then setup to use its keys in the audit log
WS_JOB_EXEC_411,PROCEDURE,414, IF v_child_job = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,415, v_audit_job_id := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,416, v_pm_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,417, END IF;
WS_JOB_EXEC_411,PROCEDURE,418,
WS_JOB_EXEC_411,PROCEDURE,419, -- Setup to default for a failure if a Fail command has been provided
WS_JOB_EXEC_411,PROCEDURE,420, If v_FailMsg is not Null Then
WS_JOB_EXEC_411,PROCEDURE,421, po_action_key := 2;
WS_JOB_EXEC_411,PROCEDURE,422, po_action_msg := v_FailMsg;
WS_JOB_EXEC_411,PROCEDURE,423, Else
WS_JOB_EXEC_411,PROCEDURE,424, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,425, End If;
WS_JOB_EXEC_411,PROCEDURE,426,
WS_JOB_EXEC_411,PROCEDURE,427, -- Make sure we are not already running (i.e. have a job_run record)
WS_JOB_EXEC_411,PROCEDURE,428, -- Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,429, BEGIN
WS_JOB_EXEC_411,PROCEDURE,430, select count(1)
WS_JOB_EXEC_411,PROCEDURE,431, into v_rec_count
WS_JOB_EXEC_411,PROCEDURE,432, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,433, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,434, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,435, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,436, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,437, END;
WS_JOB_EXEC_411,PROCEDURE,438, If v_rec_count <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,439, v_MsgText := 'Job '||pi_job_name||' already running. '||
WS_JOB_EXEC_411,PROCEDURE,440, 'Cannot start a new iteration. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,441, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,442, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,443, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,444, RETURN;
WS_JOB_EXEC_411,PROCEDURE,445, End If;
WS_JOB_EXEC_411,PROCEDURE,446,
WS_JOB_EXEC_411,PROCEDURE,447, -- Make sure there is no other sequence of this job running
WS_JOB_EXEC_411,PROCEDURE,448, -- Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,449, -- WMR 24/08/2001. Put the job on hold, if there are running sequences.
WS_JOB_EXEC_411,PROCEDURE,450, -- WMR 24/08/2001. If failed sequences then put out a warning and proceed.
WS_JOB_EXEC_411,PROCEDURE,451, -- BC 05/04/2016 retry logic added as need to loop if blocked job being called as a child job
WS_JOB_EXEC_411,PROCEDURE,452, v_retry := 1;
WS_JOB_EXEC_411,PROCEDURE,453, v_retry_msg_count := 6; -- force message on first pass then will occur on every n ones
WS_JOB_EXEC_411,PROCEDURE,454, WHILE v_retry = 1 LOOP
WS_JOB_EXEC_411,PROCEDURE,455, v_retry := 0;
WS_JOB_EXEC_411,PROCEDURE,456,
WS_JOB_EXEC_411,PROCEDURE,457, BEGIN
WS_JOB_EXEC_411,PROCEDURE,458, select count(1)
WS_JOB_EXEC_411,PROCEDURE,459, into v_rec_count
WS_JOB_EXEC_411,PROCEDURE,460, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,461, where wjr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,462, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,463, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,464, END;
WS_JOB_EXEC_411,PROCEDURE,465, If v_rec_count <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,466, BEGIN
WS_JOB_EXEC_411,PROCEDURE,467, select count(1)
WS_JOB_EXEC_411,PROCEDURE,468, into v_job_count
WS_JOB_EXEC_411,PROCEDURE,469, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,470, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,471, and wjr_status = 'F';
WS_JOB_EXEC_411,PROCEDURE,472, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,473, v_job_count := 0;
WS_JOB_EXEC_411,PROCEDURE,474, END;
WS_JOB_EXEC_411,PROCEDURE,475, If v_job_count <> v_rec_count Then
WS_JOB_EXEC_411,PROCEDURE,476, v_MsgText := 'Job '||pi_job_name||' already has a running sequence. '||
WS_JOB_EXEC_411,PROCEDURE,477, ' Job Blocked, until current job completes.';
WS_JOB_EXEC_411,PROCEDURE,478,
WS_JOB_EXEC_411,PROCEDURE,479, If v_child_job = 1 Then
WS_JOB_EXEC_411,PROCEDURE,480, v_retry := 1;
WS_JOB_EXEC_411,PROCEDURE,481, v_retry_msg_count := v_retry_msg_count + 1;
WS_JOB_EXEC_411,PROCEDURE,482,
WS_JOB_EXEC_411,PROCEDURE,483, If v_retry_msg_count > 5 Then -- dont want a message on every occurrence
WS_JOB_EXEC_411,PROCEDURE,484, -- Note using diff p_sequence rather than ctrl_sequ .. not sure whats with ctrl_seq
WS_JOB_EXEC_411,PROCEDURE,485, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,486, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,487, v_retry_msg_count := 0;
WS_JOB_EXEC_411,PROCEDURE,488, End If;
WS_JOB_EXEC_411,PROCEDURE,489,
WS_JOB_EXEC_411,PROCEDURE,490, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_411,PROCEDURE,491, Else
WS_JOB_EXEC_411,PROCEDURE,492, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,493, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,494, BEGIN
WS_JOB_EXEC_411,PROCEDURE,495, update ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,496, set wjc_status = 'B'
WS_JOB_EXEC_411,PROCEDURE,497, where wjc_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,498, and wjc_sequence = v_ctrl_sequence;
WS_JOB_EXEC_411,PROCEDURE,499, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,500,
WS_JOB_EXEC_411,PROCEDURE,501, --RED_3792
WS_JOB_EXEC_411,PROCEDURE,502, -- substitute any variables.
WS_JOB_EXEC_411,PROCEDURE,503, IF po_action_msg IS NOT NULL THEN
WS_JOB_EXEC_411,PROCEDURE,504, po_action_msg := REPLACE(po_action_msg,'$JOB_KEY$',NVL(v_audit_job_id,0));
WS_JOB_EXEC_411,PROCEDURE,505, po_action_msg := REPLACE(po_action_msg,'$JOB_SEQ$',NVL(pi_sequence,0));
WS_JOB_EXEC_411,PROCEDURE,506, po_action_msg := REPLACE(po_action_msg,'$JOB_THREAD$',NVL(pi_thread,-1));
WS_JOB_EXEC_411,PROCEDURE,507, po_action_msg := REPLACE(po_action_msg,'$JOB_NAME$',RTRIM(v_audit_job_name));
WS_JOB_EXEC_411,PROCEDURE,508, END IF;
WS_JOB_EXEC_411,PROCEDURE,509,
WS_JOB_EXEC_411,PROCEDURE,510, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,511, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,512, ' failed to change state to blocked '||
WS_JOB_EXEC_411,PROCEDURE,513, 'in ws_wrk_job_ctrl. No Action!!!';
WS_JOB_EXEC_411,PROCEDURE,514, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,515, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,516, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,517, RETURN;
WS_JOB_EXEC_411,PROCEDURE,518, END;
WS_JOB_EXEC_411,PROCEDURE,519, po_result_code := -99;
WS_JOB_EXEC_411,PROCEDURE,520, RETURN;
WS_JOB_EXEC_411,PROCEDURE,521, End If;
WS_JOB_EXEC_411,PROCEDURE,522, Else
WS_JOB_EXEC_411,PROCEDURE,523, v_MsgText := 'Job '||pi_job_name||' has a previously Failed (incomplete) sequence. Now Aborted';
WS_JOB_EXEC_411,PROCEDURE,524, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,525, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,526,
WS_JOB_EXEC_411,PROCEDURE,527, -- Update the job run record to be completed (Failed-Aborted)
WS_JOB_EXEC_411,PROCEDURE,528, -- and set the completion date if it is null
WS_JOB_EXEC_411,PROCEDURE,529, -- Move the job run record to the log record
WS_JOB_EXEC_411,PROCEDURE,530, BEGIN
WS_JOB_EXEC_411,PROCEDURE,531, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,532, set wjr_status = 'G'
WS_JOB_EXEC_411,PROCEDURE,533, where wjr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,534, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,535, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,536, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,537, set wjr_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,538, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,539, and wjr_completed is NULL;
WS_JOB_EXEC_411,PROCEDURE,540, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,541, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,542, insert into ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,543, select *
WS_JOB_EXEC_411,PROCEDURE,544, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,545, where wjr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,546, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,547, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,548, delete
WS_JOB_EXEC_411,PROCEDURE,549, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,550, where wjr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,551, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,552, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,553, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,554, v_MsgText := 'Job '||pi_job_name||' failed in xfer to aborted job to ws_wrk_job_log. '||
WS_JOB_EXEC_411,PROCEDURE,555, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,556, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,557, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,558, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,559, RETURN;
WS_JOB_EXEC_411,PROCEDURE,560, END;
WS_JOB_EXEC_411,PROCEDURE,561,
WS_JOB_EXEC_411,PROCEDURE,562, -- Move the task run records to the log record
WS_JOB_EXEC_411,PROCEDURE,563, BEGIN
WS_JOB_EXEC_411,PROCEDURE,564, insert into ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,565, select *
WS_JOB_EXEC_411,PROCEDURE,566, from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,567, where wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,568, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,569, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,570, delete
WS_JOB_EXEC_411,PROCEDURE,571, from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,572, where wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,573, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,574, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,575, v_MsgText := 'Job '||pi_job_name||
WS_JOB_EXEC_411,PROCEDURE,576, ' failed in xfer of aborted jobs tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_411,PROCEDURE,577, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,578, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,579, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,580, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,581, RETURN;
WS_JOB_EXEC_411,PROCEDURE,582, END;
WS_JOB_EXEC_411,PROCEDURE,583,
WS_JOB_EXEC_411,PROCEDURE,584, End If;
WS_JOB_EXEC_411,PROCEDURE,585, End If;
WS_JOB_EXEC_411,PROCEDURE,586, END LOOP; -- Loop for in case a blocked child job
WS_JOB_EXEC_411,PROCEDURE,587,
WS_JOB_EXEC_411,PROCEDURE,588, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,589, -- Record this thread as being active
WS_JOB_EXEC_411,PROCEDURE,590, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,591, BEGIN
WS_JOB_EXEC_411,PROCEDURE,592, select sid,serial#
WS_JOB_EXEC_411,PROCEDURE,593, into v_sid, v_serial
WS_JOB_EXEC_411,PROCEDURE,594, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_411,PROCEDURE,595, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,596, v_sid := 0;
WS_JOB_EXEC_411,PROCEDURE,597, v_serial := 0;
WS_JOB_EXEC_411,PROCEDURE,598, END;
WS_JOB_EXEC_411,PROCEDURE,599,
WS_JOB_EXEC_411,PROCEDURE,600, BEGIN
WS_JOB_EXEC_411,PROCEDURE,601, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_411,PROCEDURE,602, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_411,PROCEDURE,603, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_411,PROCEDURE,604, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,605, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,606, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,607, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,608, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,609, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,610, END;
WS_JOB_EXEC_411,PROCEDURE,611,
WS_JOB_EXEC_411,PROCEDURE,612, -- Create the Job run record
WS_JOB_EXEC_411,PROCEDURE,613, -- Set its initial state to P for pending until we have the task_run records built
WS_JOB_EXEC_411,PROCEDURE,614, -- NOTE: wjr_chkp_count is used to hold the parent job number
WS_JOB_EXEC_411,PROCEDURE,615, v_integer := 0;
WS_JOB_EXEC_411,PROCEDURE,616, IF v_child_job = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,617, v_integer := v_audit_job_id;
WS_JOB_EXEC_411,PROCEDURE,618, END IF;
WS_JOB_EXEC_411,PROCEDURE,619,
WS_JOB_EXEC_411,PROCEDURE,620, BEGIN
WS_JOB_EXEC_411,PROCEDURE,621, Insert into ws_wrk_job_run (
WS_JOB_EXEC_411,PROCEDURE,622, wjr_job_key, wjr_sequence, wjr_restart, wjr_status, wjr_scheduled,
WS_JOB_EXEC_411,PROCEDURE,623, wjr_started, wjr_completed, wjr_elapsed_hh, wjr_elapsed_mi,
WS_JOB_EXEC_411,PROCEDURE,624, wjr_okay_count, wjr_info_count, wjr_warning_count, wjr_error_count,
WS_JOB_EXEC_411,PROCEDURE,625, wjr_detail_count, wjr_chkp_count, wjr_chkp_number, wjr_name, wjr_user_key,
WS_JOB_EXEC_411,PROCEDURE,626, wjr_max_threads, wjr_publish_okay, wjr_publish_fail, wjr_scheduler, wjr_idle_thread_wait)
WS_JOB_EXEC_411,PROCEDURE,627, Select
WS_JOB_EXEC_411,PROCEDURE,628, wjc_job_key, pi_sequence, 0, 'P', sysdate, sysdate, NULL, 0,0,
WS_JOB_EXEC_411,PROCEDURE,629, 0,0,0,0,0,v_integer,0, wjc_name, wjc_user_key, wjc_max_threads,
WS_JOB_EXEC_411,PROCEDURE,630, wjc_publish_okay, wjc_publish_fail, wjc_scheduler, NVL(wjc_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,631, from ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,632, where wjc_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,633, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,634, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,635, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,636, v_MsgText := 'Job '||pi_job_name||' unable to create record in ws_wrk_job_run table. '||
WS_JOB_EXEC_411,PROCEDURE,637, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,638, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,639, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,640, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,641, RETURN;
WS_JOB_EXEC_411,PROCEDURE,642, END;
WS_JOB_EXEC_411,PROCEDURE,643,
WS_JOB_EXEC_411,PROCEDURE,644, -- Create All the Task records.
WS_JOB_EXEC_411,PROCEDURE,645, -- Loop through all the tasks and add them. Initial state is Waiting.
WS_JOB_EXEC_411,PROCEDURE,646, FOR v_TaskCtrlRec in c_TaskCtrl LOOP
WS_JOB_EXEC_411,PROCEDURE,647,
WS_JOB_EXEC_411,PROCEDURE,648, BEGIN
WS_JOB_EXEC_411,PROCEDURE,649, Insert into ws_wrk_task_run (
WS_JOB_EXEC_411,PROCEDURE,650, wtr_task_key, wtr_job_key, wtr_sequence, wtr_restart, wtr_run_status,
WS_JOB_EXEC_411,PROCEDURE,651, wtr_audit_status, wtr_started, wtr_completed, wtr_elapsed_hh, wtr_elapsed_mi,
WS_JOB_EXEC_411,PROCEDURE,652, wtr_info_count, wtr_warning_count, wtr_detail_count, wtr_return_msg, wtr_type,
WS_JOB_EXEC_411,PROCEDURE,653, wtr_abort_level, wtr_chkp_number, wtr_name, wtr_obj_type, wtr_action_type,
WS_JOB_EXEC_411,PROCEDURE,654, wtr_obj_key, wtr_thread, wtr_order, wtr_action_ind)
WS_JOB_EXEC_411,PROCEDURE,655, Values (
WS_JOB_EXEC_411,PROCEDURE,656, v_TaskCtrlRec.wtc_task_key,
WS_JOB_EXEC_411,PROCEDURE,657, v_TaskCtrlRec.wtc_job_key,
WS_JOB_EXEC_411,PROCEDURE,658, pi_sequence,0,'W',NULL,NULL,NULL,0,0,
WS_JOB_EXEC_411,PROCEDURE,659, 0,0,0,NULL,
WS_JOB_EXEC_411,PROCEDURE,660, v_TaskCtrlRec.wtc_type,
WS_JOB_EXEC_411,PROCEDURE,661, v_TaskCtrlRec.wtc_abort_level,
WS_JOB_EXEC_411,PROCEDURE,662, v_TaskCtrlRec.wtc_chkp_number, v_TaskCtrlRec.wtc_name,
WS_JOB_EXEC_411,PROCEDURE,663, v_TaskCtrlRec.wtc_obj_type, v_TaskCtrlRec.wtc_action_type,
WS_JOB_EXEC_411,PROCEDURE,664, v_TaskCtrlRec.wtc_obj_key,
WS_JOB_EXEC_411,PROCEDURE,665, v_TaskCtrlRec.wtc_order, -- used temporarily to sort running tasks
WS_JOB_EXEC_411,PROCEDURE,666, v_TaskCtrlRec.wtc_order,
WS_JOB_EXEC_411,PROCEDURE,667, v_TaskCtrlRec.wtc_action_ind
WS_JOB_EXEC_411,PROCEDURE,668, );
WS_JOB_EXEC_411,PROCEDURE,669, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,670, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,671, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,672, v_MsgText := 'Job '||pi_job_name||' failed creating records in ws_wrk_task_run table. '||
WS_JOB_EXEC_411,PROCEDURE,673, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,674, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,675, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,676, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,677, RETURN;
WS_JOB_EXEC_411,PROCEDURE,678, END;
WS_JOB_EXEC_411,PROCEDURE,679,
WS_JOB_EXEC_411,PROCEDURE,680, END LOOP;
WS_JOB_EXEC_411,PROCEDURE,681,
WS_JOB_EXEC_411,PROCEDURE,682, -- All tasks added
WS_JOB_EXEC_411,PROCEDURE,683, -- Set the job status to running so our threads can start running the tasks
WS_JOB_EXEC_411,PROCEDURE,684, BEGIN
WS_JOB_EXEC_411,PROCEDURE,685, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,686, set wjr_status = 'R',
WS_JOB_EXEC_411,PROCEDURE,687, wjr_started = sysdate
WS_JOB_EXEC_411,PROCEDURE,688, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,689, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,690, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,691, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,692, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,693, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,694, ' failed to change state to running '||
WS_JOB_EXEC_411,PROCEDURE,695, 'in ws_wrk_job_run. No Action!!!';
WS_JOB_EXEC_411,PROCEDURE,696, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,697, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,698, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,699, RETURN;
WS_JOB_EXEC_411,PROCEDURE,700, END;
WS_JOB_EXEC_411,PROCEDURE,701,
WS_JOB_EXEC_411,PROCEDURE,702, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,703,
WS_JOB_EXEC_411,PROCEDURE,704, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,705, ' Started. ';
WS_JOB_EXEC_411,PROCEDURE,706, v_result := WsWrkAudit('B',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,707, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,708,
WS_JOB_EXEC_411,PROCEDURE,709, -- Set the task back to enabled if was set as disabled once only unless job was a once only
WS_JOB_EXEC_411,PROCEDURE,710, IF v_job_type <> 'O' THEN
WS_JOB_EXEC_411,PROCEDURE,711, BEGIN
WS_JOB_EXEC_411,PROCEDURE,712, UPDATE ws_wrk_task_ctrl
WS_JOB_EXEC_411,PROCEDURE,713, SET wtc_action_ind = NULL
WS_JOB_EXEC_411,PROCEDURE,714, WHERE wtc_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,715, AND NVL(wtc_action_ind,'') = v_ws_act_disabled_once;
WS_JOB_EXEC_411,PROCEDURE,716,
WS_JOB_EXEC_411,PROCEDURE,717, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,718, v_MsgText := 'Job '||pi_job_name||
WS_JOB_EXEC_411,PROCEDURE,719, ' failed to change task disabled once '||
WS_JOB_EXEC_411,PROCEDURE,720, 'in ws_wrk_task_ctrl. No Action!!!';
WS_JOB_EXEC_411,PROCEDURE,721, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,722, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,723, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,724, RETURN;
WS_JOB_EXEC_411,PROCEDURE,725, END;
WS_JOB_EXEC_411,PROCEDURE,726, END IF;
WS_JOB_EXEC_411,PROCEDURE,727,
WS_JOB_EXEC_411,PROCEDURE,728, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,729, -- Clear out any old logs for this job unless a child job
WS_JOB_EXEC_411,PROCEDURE,730, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,731, If v_log_keep > 0 AND v_child_job = 0 Then
WS_JOB_EXEC_411,PROCEDURE,732,
WS_JOB_EXEC_411,PROCEDURE,733, -- we will create a log as part of this log, so keep 1 less
WS_JOB_EXEC_411,PROCEDURE,734, v_log_keep := v_log_keep - 1;
WS_JOB_EXEC_411,PROCEDURE,735, v_result := Ws_Job_Clear_Logs(p_sequence,
WS_JOB_EXEC_411,PROCEDURE,736, p_job_name, p_task_name, p_job_id, p_task_id,
WS_JOB_EXEC_411,PROCEDURE,737, p_job_name, v_log_keep,
WS_JOB_EXEC_411,PROCEDURE,738, v_status_code, p_return_msg);
WS_JOB_EXEC_411,PROCEDURE,739, End If;
WS_JOB_EXEC_411,PROCEDURE,740,
WS_JOB_EXEC_411,PROCEDURE,741,
WS_JOB_EXEC_411,PROCEDURE,742, -- Now either modify or delete the control record
WS_JOB_EXEC_411,PROCEDURE,743, -- and if required delete the task records
WS_JOB_EXEC_411,PROCEDURE,744, -- If it is a once only job then delete it from job control
WS_JOB_EXEC_411,PROCEDURE,745, -- If a once and hold then set its status to Hold
WS_JOB_EXEC_411,PROCEDURE,746, -- In all other cases work out when it will next run
WS_JOB_EXEC_411,PROCEDURE,747, -- and put it in a wait state.
WS_JOB_EXEC_411,PROCEDURE,748, IF v_child_job = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,749, BEGIN
WS_JOB_EXEC_411,PROCEDURE,750,
WS_JOB_EXEC_411,PROCEDURE,751, If v_job_type = 'O' Then
WS_JOB_EXEC_411,PROCEDURE,752, delete
WS_JOB_EXEC_411,PROCEDURE,753, from ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,754, where wjc_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,755, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,756, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,757, delete
WS_JOB_EXEC_411,PROCEDURE,758, from ws_wrk_task_ctrl
WS_JOB_EXEC_411,PROCEDURE,759, where wtc_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,760, --============= New code by Chris for ws_job_starttime ===================
WS_JOB_EXEC_411,PROCEDURE,761, ELSE
WS_JOB_EXEC_411,PROCEDURE,762,
WS_JOB_EXEC_411,PROCEDURE,763, -- Retrieve the next valid starttime for this job.
WS_JOB_EXEC_411,PROCEDURE,764, v_result := ws_job_get_start(p_job_id, v_start_after, v_job_status, v_status_code, v_msgtext);
WS_JOB_EXEC_411,PROCEDURE,765,
WS_JOB_EXEC_411,PROCEDURE,766, IF v_result <> 1 THEN
WS_JOB_EXEC_411,PROCEDURE,767, v_result := WsWrkAudit('E',p_job_name, p_job_name, p_sequence,
WS_JOB_EXEC_411,PROCEDURE,768, v_MsgText,NULL,NULL,pi_task_key,pi_job_key);
WS_JOB_EXEC_411,PROCEDURE,769, END IF;
WS_JOB_EXEC_411,PROCEDURE,770,
WS_JOB_EXEC_411,PROCEDURE,771, -- Set new job status and starttime.
WS_JOB_EXEC_411,PROCEDURE,772, -- If in error, then correct values already passed back from Ws_Job_Starttime
WS_JOB_EXEC_411,PROCEDURE,773, UPDATE ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,774, SET wjc_status = v_job_status
WS_JOB_EXEC_411,PROCEDURE,775, , wjc_start_after = v_start_after
WS_JOB_EXEC_411,PROCEDURE,776, WHERE wjc_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,777,
WS_JOB_EXEC_411,PROCEDURE,778, END IF;
WS_JOB_EXEC_411,PROCEDURE,779, --============= End of New code by Chris for ws_job_starttime ===================
WS_JOB_EXEC_411,PROCEDURE,780,
WS_JOB_EXEC_411,PROCEDURE,781, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,782, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,783, v_MsgText := 'Failure to re-appoint scheduled job ' || pi_job_name;
WS_JOB_EXEC_411,PROCEDURE,784, v_result := WsWrkAudit('E',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,785, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,786, END;
WS_JOB_EXEC_411,PROCEDURE,787, END IF; -- ENd of if not a child job
WS_JOB_EXEC_411,PROCEDURE,788,
WS_JOB_EXEC_411,PROCEDURE,789, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,790, -- If we are any other thread then we can start processing once
WS_JOB_EXEC_411,PROCEDURE,791, -- the job_run and task_run tables have been updated.
WS_JOB_EXEC_411,PROCEDURE,792, -- We will sleep for 2 minutes just in case, to give thread 0
WS_JOB_EXEC_411,PROCEDURE,793, -- time to compete its work
WS_JOB_EXEC_411,PROCEDURE,794, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,795, Else
WS_JOB_EXEC_411,PROCEDURE,796, DBMS_LOCK.SLEEP(2);
WS_JOB_EXEC_411,PROCEDURE,797,
WS_JOB_EXEC_411,PROCEDURE,798, v_loop_count := 0;
WS_JOB_EXEC_411,PROCEDURE,799,
WS_JOB_EXEC_411,PROCEDURE,800,
WS_JOB_EXEC_411,PROCEDURE,801, LOOP
WS_JOB_EXEC_411,PROCEDURE,802, -- Make sure we are running
WS_JOB_EXEC_411,PROCEDURE,803, -- Otherwise wait some more then go. Wait maximum of 2 minutes
WS_JOB_EXEC_411,PROCEDURE,804, BEGIN
WS_JOB_EXEC_411,PROCEDURE,805, select wjr_status, wjr_job_key, NVL(wjr_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,806, into v_run_status, p_job_id,v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,807, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,808, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_411,PROCEDURE,809, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,810, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,811, v_run_status := 'P';
WS_JOB_EXEC_411,PROCEDURE,812, END;
WS_JOB_EXEC_411,PROCEDURE,813,
WS_JOB_EXEC_411,PROCEDURE,814, If v_run_status = 'R' Then
WS_JOB_EXEC_411,PROCEDURE,815, EXIT;
WS_JOB_EXEC_411,PROCEDURE,816, End If;
WS_JOB_EXEC_411,PROCEDURE,817,
WS_JOB_EXEC_411,PROCEDURE,818, v_loop_count := v_loop_count + 1;
WS_JOB_EXEC_411,PROCEDURE,819, If v_loop_count < 13 Then
WS_JOB_EXEC_411,PROCEDURE,820, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_411,PROCEDURE,821, Else
WS_JOB_EXEC_411,PROCEDURE,822, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,823, ' Thread '||pi_thread||' failed to locate job. Terminating ...';
WS_JOB_EXEC_411,PROCEDURE,824, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,825, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,826, po_result_code := -98;
WS_JOB_EXEC_411,PROCEDURE,827, RETURN;
WS_JOB_EXEC_411,PROCEDURE,828, End If;
WS_JOB_EXEC_411,PROCEDURE,829, END LOOP;
WS_JOB_EXEC_411,PROCEDURE,830,
WS_JOB_EXEC_411,PROCEDURE,831,
WS_JOB_EXEC_411,PROCEDURE,832, -- If we are the parent job then we need the job id
WS_JOB_EXEC_411,PROCEDURE,833, IF v_child_job = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,834, v_audit_job_id := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,835, v_pm_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,836, END IF;
WS_JOB_EXEC_411,PROCEDURE,837,
WS_JOB_EXEC_411,PROCEDURE,838,
WS_JOB_EXEC_411,PROCEDURE,839, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,840, -- Record this thread as being active
WS_JOB_EXEC_411,PROCEDURE,841, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,842, BEGIN
WS_JOB_EXEC_411,PROCEDURE,843, select sid,serial#
WS_JOB_EXEC_411,PROCEDURE,844, into v_sid, v_serial
WS_JOB_EXEC_411,PROCEDURE,845, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_411,PROCEDURE,846, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,847, v_sid := 0;
WS_JOB_EXEC_411,PROCEDURE,848, v_serial := 0;
WS_JOB_EXEC_411,PROCEDURE,849, END;
WS_JOB_EXEC_411,PROCEDURE,850,
WS_JOB_EXEC_411,PROCEDURE,851, BEGIN
WS_JOB_EXEC_411,PROCEDURE,852, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_411,PROCEDURE,853, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_411,PROCEDURE,854, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_411,PROCEDURE,855, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,856, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,857, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,858, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,859, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,860, END;
WS_JOB_EXEC_411,PROCEDURE,861,
WS_JOB_EXEC_411,PROCEDURE,862, End If;
WS_JOB_EXEC_411,PROCEDURE,863,
WS_JOB_EXEC_411,PROCEDURE,864, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,865, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,866, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,867, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,868, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,869, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,870, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,871, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,872, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,873, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,874, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,875, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,876, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,877, -- R E S T A R T J O B
WS_JOB_EXEC_411,PROCEDURE,878, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,879, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,880, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,881, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,882, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,883, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,884, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,885, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,886, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,887, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,888, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,889, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,890, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,891, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,892, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,893, -- If we are a Restart job then check we are in a waiting
WS_JOB_EXEC_411,PROCEDURE,894, -- state.
WS_JOB_EXEC_411,PROCEDURE,895, -- Archive the _run table to the log table
WS_JOB_EXEC_411,PROCEDURE,896, -- Reset any failed jobs, change the restart counter and proceed
WS_JOB_EXEC_411,PROCEDURE,897, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,898, ElsIf upper(pi_action) = 'RESTART' Then
WS_JOB_EXEC_411,PROCEDURE,899, v_restart_flag := 1;
WS_JOB_EXEC_411,PROCEDURE,900, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,901, -- If we are thread 0 then do some checks and reset any halted or
WS_JOB_EXEC_411,PROCEDURE,902, -- failed tasks so that they will run
WS_JOB_EXEC_411,PROCEDURE,903, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,904, If pi_thread = 0
WS_JOB_EXEC_411,PROCEDURE,905, AND v_child_job = 0 Then
WS_JOB_EXEC_411,PROCEDURE,906,
WS_JOB_EXEC_411,PROCEDURE,907, -- Make sure we are in run tables (i.e. have a job_run record)
WS_JOB_EXEC_411,PROCEDURE,908, -- And have a waiting state
WS_JOB_EXEC_411,PROCEDURE,909, -- Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,910, BEGIN
WS_JOB_EXEC_411,PROCEDURE,911, select wjr_status, wjr_job_key, wjr_publish_fail, NVL(wjr_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,912, into v_run_status, p_job_id, v_FailMsg, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,913, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,914, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_411,PROCEDURE,915, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,916,
WS_JOB_EXEC_411,PROCEDURE,917, select count(1)
WS_JOB_EXEC_411,PROCEDURE,918, into v_rec_count
WS_JOB_EXEC_411,PROCEDURE,919, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,920, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,921, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,922,
WS_JOB_EXEC_411,PROCEDURE,923, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,924, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,925, END;
WS_JOB_EXEC_411,PROCEDURE,926, If v_rec_count <> 1 Then
WS_JOB_EXEC_411,PROCEDURE,927, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not running. '||
WS_JOB_EXEC_411,PROCEDURE,928, 'Cannot restart. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,929, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,930, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,931, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,932, RETURN;
WS_JOB_EXEC_411,PROCEDURE,933, End If;
WS_JOB_EXEC_411,PROCEDURE,934,
WS_JOB_EXEC_411,PROCEDURE,935, -- If we have a parent job then setup to use its keys in the audit log
WS_JOB_EXEC_411,PROCEDURE,936, IF v_child_job = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,937, v_audit_job_id := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,938, v_pm_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,939, END IF;
WS_JOB_EXEC_411,PROCEDURE,940,
WS_JOB_EXEC_411,PROCEDURE,941, -- Setup to default for a failure if a Fail command has been provided
WS_JOB_EXEC_411,PROCEDURE,942, If v_FailMsg is not Null Then
WS_JOB_EXEC_411,PROCEDURE,943, po_action_key := 2;
WS_JOB_EXEC_411,PROCEDURE,944, po_action_msg := v_FailMsg;
WS_JOB_EXEC_411,PROCEDURE,945, Else
WS_JOB_EXEC_411,PROCEDURE,946, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,947, End If;
WS_JOB_EXEC_411,PROCEDURE,948, If v_run_status <> 'P' Then
WS_JOB_EXEC_411,PROCEDURE,949, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not prepared for re-run. '||
WS_JOB_EXEC_411,PROCEDURE,950, 'Cannot restart. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,951, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,952, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,953, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,954, RETURN;
WS_JOB_EXEC_411,PROCEDURE,955, End If;
WS_JOB_EXEC_411,PROCEDURE,956,
WS_JOB_EXEC_411,PROCEDURE,957, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,958, -- Record this thread as being active
WS_JOB_EXEC_411,PROCEDURE,959, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,960, BEGIN
WS_JOB_EXEC_411,PROCEDURE,961, select sid,serial#
WS_JOB_EXEC_411,PROCEDURE,962, into v_sid, v_serial
WS_JOB_EXEC_411,PROCEDURE,963, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_411,PROCEDURE,964, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,965, v_sid := 0;
WS_JOB_EXEC_411,PROCEDURE,966, v_serial := 0;
WS_JOB_EXEC_411,PROCEDURE,967, END;
WS_JOB_EXEC_411,PROCEDURE,968,
WS_JOB_EXEC_411,PROCEDURE,969, BEGIN
WS_JOB_EXEC_411,PROCEDURE,970, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_411,PROCEDURE,971, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_411,PROCEDURE,972, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_411,PROCEDURE,973, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,974, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,975, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,976, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,977, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,978, END;
WS_JOB_EXEC_411,PROCEDURE,979,
WS_JOB_EXEC_411,PROCEDURE,980,
WS_JOB_EXEC_411,PROCEDURE,981, -- Copy the job run record to the log record
WS_JOB_EXEC_411,PROCEDURE,982, --BEGIN
WS_JOB_EXEC_411,PROCEDURE,983, -- insert into ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,984, -- select * from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,985, -- where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,986, -- and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,987, --
WS_JOB_EXEC_411,PROCEDURE,988, -- update ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,989, -- set wjl_status = F
WS_JOB_EXEC_411,PROCEDURE,990, -- where wjl_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,991, -- and wjl_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,992, -- COMMIT;
WS_JOB_EXEC_411,PROCEDURE,993, --EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,994, -- v_MsgText := Job ||pi_job_name|| failed in copy to ws_wrk_job_log. ||
WS_JOB_EXEC_411,PROCEDURE,995, -- No Action !!!;
WS_JOB_EXEC_411,PROCEDURE,996, -- v_result := WsWrkAudit(F,v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,997, -- v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,998, -- RETURN -2;
WS_JOB_EXEC_411,PROCEDURE,999, --END;
WS_JOB_EXEC_411,PROCEDURE,1000,
WS_JOB_EXEC_411,PROCEDURE,1001, -- Copy the failed task run records to the log record
WS_JOB_EXEC_411,PROCEDURE,1002, --BEGIN
WS_JOB_EXEC_411,PROCEDURE,1003, -- insert into ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,1004, -- select * from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,1005, -- where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1006, -- and wtr_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,1007, -- and wtr_run_status not in (W,C,H);
WS_JOB_EXEC_411,PROCEDURE,1008, -- COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1009, --EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1010, -- v_MsgText := Job ||pi_job_name|| failed in copy of tasks to ws_wrk_task_log. ||
WS_JOB_EXEC_411,PROCEDURE,1011, -- No Action !!!;
WS_JOB_EXEC_411,PROCEDURE,1012, -- v_result := WsWrkAudit(F,v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1013, -- v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1014, -- RETURN -2;
WS_JOB_EXEC_411,PROCEDURE,1015, --END;
WS_JOB_EXEC_411,PROCEDURE,1016,
WS_JOB_EXEC_411,PROCEDURE,1017, -- Set the job status to pending so our threads dont start
WS_JOB_EXEC_411,PROCEDURE,1018, -- And increment the restart counter
WS_JOB_EXEC_411,PROCEDURE,1019, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1020, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1021, set wjr_status = 'P',
WS_JOB_EXEC_411,PROCEDURE,1022, -- wjr_okay_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1023, -- wjr_info_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1024, -- wjr_warning_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1025, -- wjr_error_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1026, -- wjr_detail_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1027, wjr_restart = wjr_restart + 1
WS_JOB_EXEC_411,PROCEDURE,1028, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1029, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1030, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1031, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1032, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1033, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,1034, ' failed to change state to pending restart '||
WS_JOB_EXEC_411,PROCEDURE,1035, 'in ws_wrk_job_run. No Action!!!';
WS_JOB_EXEC_411,PROCEDURE,1036, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1037, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1038, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1039, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1040, END;
WS_JOB_EXEC_411,PROCEDURE,1041, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1042, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1043,
WS_JOB_EXEC_411,PROCEDURE,1044, -- Loop through All the Task records.
WS_JOB_EXEC_411,PROCEDURE,1045, -- Clearing any halted or failed statuses
WS_JOB_EXEC_411,PROCEDURE,1046, FOR v_TaskRec in c_TaskRun LOOP
WS_JOB_EXEC_411,PROCEDURE,1047,
WS_JOB_EXEC_411,PROCEDURE,1048, If v_TaskRec.wtr_run_status = 'H' OR v_TaskRec.wtr_run_status = 'F'
WS_JOB_EXEC_411,PROCEDURE,1049, OR v_TaskRec.wtr_run_status = 'U' Then
WS_JOB_EXEC_411,PROCEDURE,1050, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1051, Update ws_wrk_task_run set
WS_JOB_EXEC_411,PROCEDURE,1052, wtr_restart = wtr_restart + 1,
WS_JOB_EXEC_411,PROCEDURE,1053, wtr_started = NULL,
WS_JOB_EXEC_411,PROCEDURE,1054, wtr_completed = NULL,
WS_JOB_EXEC_411,PROCEDURE,1055, wtr_elapsed_hh = 0,
WS_JOB_EXEC_411,PROCEDURE,1056, wtr_elapsed_mi = 0,
WS_JOB_EXEC_411,PROCEDURE,1057, wtr_run_status = 'W',
WS_JOB_EXEC_411,PROCEDURE,1058, wtr_audit_status = NULL,
WS_JOB_EXEC_411,PROCEDURE,1059, wtr_info_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1060, wtr_warning_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1061, wtr_detail_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1062, wtr_return_msg = NULL
WS_JOB_EXEC_411,PROCEDURE,1063, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,1064, and wtr_job_key = v_TaskRec.wtr_job_key
WS_JOB_EXEC_411,PROCEDURE,1065, and wtr_sequence = v_TaskRec.wtr_sequence;
WS_JOB_EXEC_411,PROCEDURE,1066, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1067, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1068, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1069, v_MsgText := 'Job '||pi_job_name||' failed resetting records in ws_wrk_task_run table. '||
WS_JOB_EXEC_411,PROCEDURE,1070, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,1071, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1072, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1073, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1074, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1075, END;
WS_JOB_EXEC_411,PROCEDURE,1076, Else
WS_JOB_EXEC_411,PROCEDURE,1077, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1078, Update ws_wrk_task_run set
WS_JOB_EXEC_411,PROCEDURE,1079, wtr_restart = wtr_restart + 1
WS_JOB_EXEC_411,PROCEDURE,1080, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,1081, and wtr_job_key = v_TaskRec.wtr_job_key
WS_JOB_EXEC_411,PROCEDURE,1082, and wtr_sequence = v_TaskRec.wtr_sequence;
WS_JOB_EXEC_411,PROCEDURE,1083, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1084, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1085, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1086, v_MsgText := 'Job '||pi_job_name||' failed resetting records in ws_wrk_task_run table. '||
WS_JOB_EXEC_411,PROCEDURE,1087, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,1088, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1089, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1090, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1091, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1092, END;
WS_JOB_EXEC_411,PROCEDURE,1093, End If;
WS_JOB_EXEC_411,PROCEDURE,1094,
WS_JOB_EXEC_411,PROCEDURE,1095, END LOOP;
WS_JOB_EXEC_411,PROCEDURE,1096,
WS_JOB_EXEC_411,PROCEDURE,1097, -- ======================
WS_JOB_EXEC_411,PROCEDURE,1098, -- Fix up any child jobs
WS_JOB_EXEC_411,PROCEDURE,1099, -- ======================
WS_JOB_EXEC_411,PROCEDURE,1100, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1101, set wjr_status = 'P',
WS_JOB_EXEC_411,PROCEDURE,1102, wjr_restart = wjr_restart + 1
WS_JOB_EXEC_411,PROCEDURE,1103, where wjr_job_key in
WS_JOB_EXEC_411,PROCEDURE,1104, (Select wjr_job_key from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1105, where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1106, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,1107, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1108, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1109, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1110,
WS_JOB_EXEC_411,PROCEDURE,1111, Update ws_wrk_task_run set
WS_JOB_EXEC_411,PROCEDURE,1112, wtr_restart = wtr_restart + 1
WS_JOB_EXEC_411,PROCEDURE,1113, where wtr_job_key in
WS_JOB_EXEC_411,PROCEDURE,1114, (Select wjr_job_key from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1115, where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1116, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,1117, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1118, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1119, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1120,
WS_JOB_EXEC_411,PROCEDURE,1121, Update ws_wrk_task_run set
WS_JOB_EXEC_411,PROCEDURE,1122, wtr_started = NULL,
WS_JOB_EXEC_411,PROCEDURE,1123, wtr_completed = NULL,
WS_JOB_EXEC_411,PROCEDURE,1124, wtr_elapsed_hh = 0,
WS_JOB_EXEC_411,PROCEDURE,1125, wtr_elapsed_mi = 0,
WS_JOB_EXEC_411,PROCEDURE,1126, wtr_run_status = 'W',
WS_JOB_EXEC_411,PROCEDURE,1127, wtr_audit_status = NULL,
WS_JOB_EXEC_411,PROCEDURE,1128, wtr_info_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1129, wtr_warning_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1130, wtr_detail_count = 0,
WS_JOB_EXEC_411,PROCEDURE,1131, wtr_return_msg = NULL
WS_JOB_EXEC_411,PROCEDURE,1132, where wtr_job_key in
WS_JOB_EXEC_411,PROCEDURE,1133, (Select wjr_job_key from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1134, where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1135, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,1136, and wtr_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,1137, and wtr_run_status in ('H','F','U');
WS_JOB_EXEC_411,PROCEDURE,1138,
WS_JOB_EXEC_411,PROCEDURE,1139, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1140, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1141,
WS_JOB_EXEC_411,PROCEDURE,1142, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1143, set wjr_status = 'R'
WS_JOB_EXEC_411,PROCEDURE,1144, where wjr_job_key in
WS_JOB_EXEC_411,PROCEDURE,1145, (Select wjr_job_key from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1146, where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1147, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,1148, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1149, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1150, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1151,
WS_JOB_EXEC_411,PROCEDURE,1152, -- End of child job fixup.
WS_JOB_EXEC_411,PROCEDURE,1153,
WS_JOB_EXEC_411,PROCEDURE,1154,
WS_JOB_EXEC_411,PROCEDURE,1155, -- Set the job status to running
WS_JOB_EXEC_411,PROCEDURE,1156, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1157, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1158, set wjr_status = 'R'
WS_JOB_EXEC_411,PROCEDURE,1159, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1160, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1161, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,1162, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1163, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1164, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,1165, ' failed to change state to running '||
WS_JOB_EXEC_411,PROCEDURE,1166, 'in ws_wrk_job_run. No Action!!!';
WS_JOB_EXEC_411,PROCEDURE,1167, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1168, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1169, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1170, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1171, END;
WS_JOB_EXEC_411,PROCEDURE,1172, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1173,
WS_JOB_EXEC_411,PROCEDURE,1174, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,1175, ' Restarted. ';
WS_JOB_EXEC_411,PROCEDURE,1176, v_result := WsWrkAudit('B',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1177, v_MsgText,NULL,NULL,v_audit_task_id,p_job_id);
WS_JOB_EXEC_411,PROCEDURE,1178,
WS_JOB_EXEC_411,PROCEDURE,1179,
WS_JOB_EXEC_411,PROCEDURE,1180, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1181, -- If we are not thread 0
WS_JOB_EXEC_411,PROCEDURE,1182, -- or are a a child job then wait up to two minutes for the okay
WS_JOB_EXEC_411,PROCEDURE,1183, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1184, Else
WS_JOB_EXEC_411,PROCEDURE,1185, -- Get the job key for the job name. There should be one and
WS_JOB_EXEC_411,PROCEDURE,1186, -- only one key. Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,1187, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1188, select wjr_job_key, NVL(wjr_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,1189, into p_job_id, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,1190, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1191, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_411,PROCEDURE,1192, --5.1.0.1 Added sequence .. as is possible to have 2 jobs in fail state
WS_JOB_EXEC_411,PROCEDURE,1193, -- due to parent job wait failure
WS_JOB_EXEC_411,PROCEDURE,1194, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1195, v_rec_count := 1;
WS_JOB_EXEC_411,PROCEDURE,1196, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1197, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,1198, END;
WS_JOB_EXEC_411,PROCEDURE,1199, If v_rec_count <> 1 Then
WS_JOB_EXEC_411,PROCEDURE,1200, v_MsgText := 'Job '||pi_job_name||' passed invalid job name in Restart. '||
WS_JOB_EXEC_411,PROCEDURE,1201, v_rec_count||' such records exist. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,1202, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1203, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1204, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1205, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1206, End If;
WS_JOB_EXEC_411,PROCEDURE,1207,
WS_JOB_EXEC_411,PROCEDURE,1208, -- If we have a parent job then setup to use its keys in the audit log
WS_JOB_EXEC_411,PROCEDURE,1209, IF v_child_job = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1210, v_audit_job_id := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,1211, v_pm_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,1212, END IF;
WS_JOB_EXEC_411,PROCEDURE,1213,
WS_JOB_EXEC_411,PROCEDURE,1214, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1215, -- Record this thread as being active
WS_JOB_EXEC_411,PROCEDURE,1216, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1217, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1218, select sid,serial#
WS_JOB_EXEC_411,PROCEDURE,1219, into v_sid, v_serial
WS_JOB_EXEC_411,PROCEDURE,1220, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_411,PROCEDURE,1221, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1222, v_sid := 0;
WS_JOB_EXEC_411,PROCEDURE,1223, v_serial := 0;
WS_JOB_EXEC_411,PROCEDURE,1224, END;
WS_JOB_EXEC_411,PROCEDURE,1225,
WS_JOB_EXEC_411,PROCEDURE,1226, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1227, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_411,PROCEDURE,1228, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_411,PROCEDURE,1229, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_411,PROCEDURE,1230, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1231, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1232, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,1233, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1234, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1235, END;
WS_JOB_EXEC_411,PROCEDURE,1236,
WS_JOB_EXEC_411,PROCEDURE,1237, v_loop_count := 0;
WS_JOB_EXEC_411,PROCEDURE,1238,
WS_JOB_EXEC_411,PROCEDURE,1239, LOOP
WS_JOB_EXEC_411,PROCEDURE,1240, -- Make sure we are running
WS_JOB_EXEC_411,PROCEDURE,1241, -- Otherwise wait some more then go. Wait maximum of 2 minutes
WS_JOB_EXEC_411,PROCEDURE,1242, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1243, select wjr_status, NVL(wjr_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,1244, into v_run_status, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,1245, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1246, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1247, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1248, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1249, v_run_status := 'P';
WS_JOB_EXEC_411,PROCEDURE,1250, END;
WS_JOB_EXEC_411,PROCEDURE,1251,
WS_JOB_EXEC_411,PROCEDURE,1252, If v_run_status = 'R' Then
WS_JOB_EXEC_411,PROCEDURE,1253, EXIT;
WS_JOB_EXEC_411,PROCEDURE,1254, End If;
WS_JOB_EXEC_411,PROCEDURE,1255,
WS_JOB_EXEC_411,PROCEDURE,1256, v_loop_count := v_loop_count + 1;
WS_JOB_EXEC_411,PROCEDURE,1257, If v_loop_count < 13 Then
WS_JOB_EXEC_411,PROCEDURE,1258, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_411,PROCEDURE,1259, Else
WS_JOB_EXEC_411,PROCEDURE,1260, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,1261, ' Thread '||pi_thread||' failed to locate job. Terminating ...';
WS_JOB_EXEC_411,PROCEDURE,1262, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1263, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1264, po_result_code := -98;
WS_JOB_EXEC_411,PROCEDURE,1265, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1266, End If;
WS_JOB_EXEC_411,PROCEDURE,1267, END LOOP;
WS_JOB_EXEC_411,PROCEDURE,1268, End If;
WS_JOB_EXEC_411,PROCEDURE,1269,
WS_JOB_EXEC_411,PROCEDURE,1270, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1271, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1272, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1273, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1274, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1275, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1276, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1277, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1278, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1279, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1280, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1281, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1282, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1283, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1284, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1285, -- R E J O I N J O B
WS_JOB_EXEC_411,PROCEDURE,1286, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1287, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1288, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1289, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1290, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1291, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1292, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1293, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1294, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1295, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1296, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1297, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1298, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1299, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1300, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1301, -- If we are a Rejoin job then we have completed a host
WS_JOB_EXEC_411,PROCEDURE,1302, -- subtask. So check we are in a running state.
WS_JOB_EXEC_411,PROCEDURE,1303, -- Set the result status for the task we have just actioned
WS_JOB_EXEC_411,PROCEDURE,1304, -- and proceed with other tasks
WS_JOB_EXEC_411,PROCEDURE,1305, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1306, ElsIf SUBSTR(UPPER(pi_action),1,6) = 'REJOIN' OR UPPER(pi_action) = 'EXTRETURN' Then
WS_JOB_EXEC_411,PROCEDURE,1307,
WS_JOB_EXEC_411,PROCEDURE,1308, v_step := 400;
WS_JOB_EXEC_411,PROCEDURE,1309,--v_MsgText := Rejoin Job || pi_job_name
WS_JOB_EXEC_411,PROCEDURE,1310,--|| parent job || v_pm_job_name
WS_JOB_EXEC_411,PROCEDURE,1311,--|| job key || pi_job_key
WS_JOB_EXEC_411,PROCEDURE,1312,--|| parent key || v_pm_job_key
WS_JOB_EXEC_411,PROCEDURE,1313,--|| task key || pi_task_key
WS_JOB_EXEC_411,PROCEDURE,1314,--|| audit key || v_pm_job_key
WS_JOB_EXEC_411,PROCEDURE,1315,--|| child flag || v_child_job
WS_JOB_EXEC_411,PROCEDURE,1316,--|| job key list || SUBSTR(pm_rejoin_job_keys,1,20)
WS_JOB_EXEC_411,PROCEDURE,1317,--|| task key list || SUBSTR(pm_rejoin_task_keys,1,20);
WS_JOB_EXEC_411,PROCEDURE,1318,--v_result := WsWrkAudit(H,v_audit_job_name, v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,1319,--v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1320,
WS_JOB_EXEC_411,PROCEDURE,1321, -- If there are child jobs then rejoin them
WS_JOB_EXEC_411,PROCEDURE,1322, IF INSTR(pm_rejoin_job_keys,',') > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1323, p_job_id := pi_job_key;
WS_JOB_EXEC_411,PROCEDURE,1324,
WS_JOB_EXEC_411,PROCEDURE,1325, -- Get the top job key off the list which should be my key
WS_JOB_EXEC_411,PROCEDURE,1326, v_cpos := INSTR(pm_rejoin_job_keys,',');
WS_JOB_EXEC_411,PROCEDURE,1327, IF v_cpos > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1328, v_my_job_key := TO_NUMBER(SUBSTR(pm_rejoin_job_keys,1,v_cpos-1));
WS_JOB_EXEC_411,PROCEDURE,1329, IF v_my_job_key > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1330, v_rejoin_job_keys := SUBSTR(pm_rejoin_job_keys,v_cpos+1,256);
WS_JOB_EXEC_411,PROCEDURE,1331, END IF; -- end of got my job key
WS_JOB_EXEC_411,PROCEDURE,1332, ELSE
WS_JOB_EXEC_411,PROCEDURE,1333, v_my_job_key := TO_NUMBER(pm_rejoin_job_keys);
WS_JOB_EXEC_411,PROCEDURE,1334, v_rejoin_job_keys := NULL;
WS_JOB_EXEC_411,PROCEDURE,1335, END IF;
WS_JOB_EXEC_411,PROCEDURE,1336,
WS_JOB_EXEC_411,PROCEDURE,1337, -- If not my job then a fatal problem
WS_JOB_EXEC_411,PROCEDURE,1338, IF v_my_job_key <> pi_job_key THEN
WS_JOB_EXEC_411,PROCEDURE,1339, v_MsgText := 'Job ' || pi_job_name || ' Encountered bad rejoin job key list.';
WS_JOB_EXEC_411,PROCEDURE,1340, v_result := WsWrkAudit('E',v_audit_job_name, v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1341, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1342, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1343, po_result_msg := v_MsgText;
WS_JOB_EXEC_411,PROCEDURE,1344, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1345, END IF;
WS_JOB_EXEC_411,PROCEDURE,1346,
WS_JOB_EXEC_411,PROCEDURE,1347,
WS_JOB_EXEC_411,PROCEDURE,1348, -- Get the next job key off the list (child) and lookup the job name
WS_JOB_EXEC_411,PROCEDURE,1349, v_cpos := INSTR(v_rejoin_job_keys,',');
WS_JOB_EXEC_411,PROCEDURE,1350, IF v_cpos > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1351, v_sub_job_key := TO_NUMBER(SUBSTR(v_rejoin_job_keys,1,v_cpos-1));
WS_JOB_EXEC_411,PROCEDURE,1352, ELSE
WS_JOB_EXEC_411,PROCEDURE,1353, v_sub_job_key := TO_NUMBER(v_rejoin_job_keys);
WS_JOB_EXEC_411,PROCEDURE,1354, END IF;
WS_JOB_EXEC_411,PROCEDURE,1355,
WS_JOB_EXEC_411,PROCEDURE,1356,
WS_JOB_EXEC_411,PROCEDURE,1357, -- If no key then a fatal problem
WS_JOB_EXEC_411,PROCEDURE,1358, IF v_sub_job_key = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1359, v_MsgText := 'Job ' || pi_job_name || ' Unable to rejoin to sub job. Bad key list ';
WS_JOB_EXEC_411,PROCEDURE,1360, v_result := WsWrkAudit('E',v_audit_job_name, v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1361, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1362, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1363, po_result_msg := v_MsgText;
WS_JOB_EXEC_411,PROCEDURE,1364, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1365, END IF;
WS_JOB_EXEC_411,PROCEDURE,1366,
WS_JOB_EXEC_411,PROCEDURE,1367, -- Get the sub job name
WS_JOB_EXEC_411,PROCEDURE,1368, v_sub_job_name := NULL;
WS_JOB_EXEC_411,PROCEDURE,1369, SELECT
WS_JOB_EXEC_411,PROCEDURE,1370, wjr_name, NVL(wjr_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,1371, INTO v_sub_job_name, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,1372, FROM ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1373, WHERE wjr_job_key = v_sub_job_key
WS_JOB_EXEC_411,PROCEDURE,1374, AND wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1375,
WS_JOB_EXEC_411,PROCEDURE,1376, -- If no running job to join to then a fatal problem
WS_JOB_EXEC_411,PROCEDURE,1377, IF v_sub_job_name IS NULL THEN
WS_JOB_EXEC_411,PROCEDURE,1378, v_MsgText := 'Job ' || pi_job_name || ' Unable to rejoin to sub job. No such running job';
WS_JOB_EXEC_411,PROCEDURE,1379, v_result := WsWrkAudit('E',v_audit_job_name, v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1380, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1381, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1382, po_result_msg := v_MsgText;
WS_JOB_EXEC_411,PROCEDURE,1383, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1384, END IF;
WS_JOB_EXEC_411,PROCEDURE,1385,
WS_JOB_EXEC_411,PROCEDURE,1386, -- Get the top task key off the list which should be my task key
WS_JOB_EXEC_411,PROCEDURE,1387, v_cpos := INSTR(pm_rejoin_task_keys,',');
WS_JOB_EXEC_411,PROCEDURE,1388, IF v_cpos > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1389, v_my_task_key := TO_NUMBER(SUBSTR(pm_rejoin_task_keys,1,v_cpos-1));
WS_JOB_EXEC_411,PROCEDURE,1390, IF v_my_task_key > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1391, v_rejoin_task_keys := SUBSTR(pm_rejoin_task_keys,v_cpos+1,256);
WS_JOB_EXEC_411,PROCEDURE,1392, END IF;
WS_JOB_EXEC_411,PROCEDURE,1393, ELSE
WS_JOB_EXEC_411,PROCEDURE,1394, v_my_task_key := TO_NUMBER(pm_rejoin_task_keys);
WS_JOB_EXEC_411,PROCEDURE,1395, v_rejoin_task_keys := NULL;
WS_JOB_EXEC_411,PROCEDURE,1396, END IF;
WS_JOB_EXEC_411,PROCEDURE,1397,
WS_JOB_EXEC_411,PROCEDURE,1398,
WS_JOB_EXEC_411,PROCEDURE,1399, -- Get the next task key off the list (child task) and lookup the task name
WS_JOB_EXEC_411,PROCEDURE,1400, v_cpos := INSTR(v_rejoin_task_keys,',');
WS_JOB_EXEC_411,PROCEDURE,1401, IF v_cpos > 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1402, v_sub_task_key := TO_NUMBER(SUBSTR(v_rejoin_task_keys,1,v_cpos-1));
WS_JOB_EXEC_411,PROCEDURE,1403, ELSE
WS_JOB_EXEC_411,PROCEDURE,1404, v_sub_task_key := TO_NUMBER(v_rejoin_task_keys);
WS_JOB_EXEC_411,PROCEDURE,1405, END IF;
WS_JOB_EXEC_411,PROCEDURE,1406,
WS_JOB_EXEC_411,PROCEDURE,1407,
WS_JOB_EXEC_411,PROCEDURE,1408, -- If no key then a fatal problem
WS_JOB_EXEC_411,PROCEDURE,1409, IF v_my_task_key = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1410, v_MsgText := 'Job ' || pi_job_name || ' Unable to locate calling task. Bad key list ';
WS_JOB_EXEC_411,PROCEDURE,1411, v_result := WsWrkAudit('E',v_audit_job_name, v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1412, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1413, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1414, po_result_msg := v_MsgText;
WS_JOB_EXEC_411,PROCEDURE,1415, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1416, END IF;
WS_JOB_EXEC_411,PROCEDURE,1417,
WS_JOB_EXEC_411,PROCEDURE,1418, -- Get sub task name
WS_JOB_EXEC_411,PROCEDURE,1419, v_my_task_name := NULL;
WS_JOB_EXEC_411,PROCEDURE,1420, SELECT
WS_JOB_EXEC_411,PROCEDURE,1421, wtr_name
WS_JOB_EXEC_411,PROCEDURE,1422, INTO v_my_task_name
WS_JOB_EXEC_411,PROCEDURE,1423, FROM ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,1424, WHERE wtr_job_key = pi_job_key
WS_JOB_EXEC_411,PROCEDURE,1425, AND wtr_task_key = v_my_task_key
WS_JOB_EXEC_411,PROCEDURE,1426, AND wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1427,
WS_JOB_EXEC_411,PROCEDURE,1428, -- If no task to then a fatal problem
WS_JOB_EXEC_411,PROCEDURE,1429, IF v_my_task_name IS NULL THEN
WS_JOB_EXEC_411,PROCEDURE,1430, v_MsgText := 'Job ' || pi_job_name || ' Unable to rejoin to job. Unable to locate calling Task';
WS_JOB_EXEC_411,PROCEDURE,1431, v_result := WsWrkAudit('E',v_audit_job_name, v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1432, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1433, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1434, po_result_msg := v_MsgText;
WS_JOB_EXEC_411,PROCEDURE,1435, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1436, END IF;
WS_JOB_EXEC_411,PROCEDURE,1437,
WS_JOB_EXEC_411,PROCEDURE,1438, -- Rejoin this sub job
WS_JOB_EXEC_411,PROCEDURE,1439, Ws_Job_Exec_411(v_sub_job_name,pi_task_name,pi_action,0,pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1440, v_sub_job_key, pi_task_key,pi_task_status,pi_task_msg,
WS_JOB_EXEC_411,PROCEDURE,1441, v_pm_job_name, v_pm_job_key, v_rejoin_job_keys, v_rejoin_task_keys,
WS_JOB_EXEC_411,PROCEDURE,1442, p_status_code,
WS_JOB_EXEC_411,PROCEDURE,1443, p_return_msg,
WS_JOB_EXEC_411,PROCEDURE,1444, v_job_job_key,
WS_JOB_EXEC_411,PROCEDURE,1445, v_job_task_key, v_job_task_name,
WS_JOB_EXEC_411,PROCEDURE,1446, v_job_action_key, v_job_action_msg,
WS_JOB_EXEC_411,PROCEDURE,1447, v_job_key_list, v_task_key_list,
WS_JOB_EXEC_411,PROCEDURE,1448, v_task_data);
WS_JOB_EXEC_411,PROCEDURE,1449,
WS_JOB_EXEC_411,PROCEDURE,1450,
WS_JOB_EXEC_411,PROCEDURE,1451, IF p_status_code = -3 THEN
WS_JOB_EXEC_411,PROCEDURE,1452, p_return_msg := 'Called job ' || RTRIM(v_sub_job_name) || ' FAILED with unhandled error';
WS_JOB_EXEC_411,PROCEDURE,1453, END IF;
WS_JOB_EXEC_411,PROCEDURE,1454, IF p_status_code = -2 THEN
WS_JOB_EXEC_411,PROCEDURE,1455, p_return_msg := 'Called job ' || RTRIM(v_sub_job_name) || ' FAILED';
WS_JOB_EXEC_411,PROCEDURE,1456, END IF;
WS_JOB_EXEC_411,PROCEDURE,1457, IF p_status_code = -1 THEN
WS_JOB_EXEC_411,PROCEDURE,1458, p_return_msg := 'Called job ' || RTRIM(v_sub_job_name) || ' completed with WARNINGS';
WS_JOB_EXEC_411,PROCEDURE,1459, END IF;
WS_JOB_EXEC_411,PROCEDURE,1460, IF p_status_code = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,1461, p_return_msg := 'Called job ' || RTRIM(v_sub_job_name) || ' FAILED with unhandled problem';
WS_JOB_EXEC_411,PROCEDURE,1462, p_status_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1463, END IF;
WS_JOB_EXEC_411,PROCEDURE,1464, IF p_status_code = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,1465, p_return_msg := 'Called job ' || RTRIM(v_sub_job_name) || ' completed successfully';
WS_JOB_EXEC_411,PROCEDURE,1466, END IF;
WS_JOB_EXEC_411,PROCEDURE,1467, IF p_status_code > 1 THEN
WS_JOB_EXEC_411,PROCEDURE,1468, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,1469, po_task_key := v_job_task_key;
WS_JOB_EXEC_411,PROCEDURE,1470, po_task_name := v_job_task_name;
WS_JOB_EXEC_411,PROCEDURE,1471, po_result_msg := p_return_msg;
WS_JOB_EXEC_411,PROCEDURE,1472, po_action_key := v_job_action_key;
WS_JOB_EXEC_411,PROCEDURE,1473, po_action_msg := v_job_action_msg;
WS_JOB_EXEC_411,PROCEDURE,1474, po_result_code := p_status_code;
WS_JOB_EXEC_411,PROCEDURE,1475, ps_job_key_list := p_job_id || ',' || NVL(v_job_key_list,'');
WS_JOB_EXEC_411,PROCEDURE,1476, ps_task_key_list := v_my_task_key || ',' || NVL(v_task_key_list,'');
WS_JOB_EXEC_411,PROCEDURE,1477, po_task_data := v_task_data;
WS_JOB_EXEC_411,PROCEDURE,1478, return;
WS_JOB_EXEC_411,PROCEDURE,1479, END IF;
WS_JOB_EXEC_411,PROCEDURE,1480,
WS_JOB_EXEC_411,PROCEDURE,1481, -- put up my task key for the drop through on this rejoin.
WS_JOB_EXEC_411,PROCEDURE,1482, p_task_id := v_my_task_key;
WS_JOB_EXEC_411,PROCEDURE,1483, p_task_name := v_my_task_name;
WS_JOB_EXEC_411,PROCEDURE,1484, v_audit_job_id := v_pm_job_key;
WS_JOB_EXEC_411,PROCEDURE,1485, v_audit_task_id := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,1486, v_audit_task_name := v_my_task_name;
WS_JOB_EXEC_411,PROCEDURE,1487,
WS_JOB_EXEC_411,PROCEDURE,1488, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1489, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1490, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1491, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1492, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1493, -- Normal rejoin (no child jobs )
WS_JOB_EXEC_411,PROCEDURE,1494, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1495, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1496, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1497, --==========================================================================
WS_JOB_EXEC_411,PROCEDURE,1498,
WS_JOB_EXEC_411,PROCEDURE,1499, ELSE
WS_JOB_EXEC_411,PROCEDURE,1500, --Setup our return codes
WS_JOB_EXEC_411,PROCEDURE,1501, p_status_code := pi_task_status;
WS_JOB_EXEC_411,PROCEDURE,1502, p_return_msg := pi_task_msg;
WS_JOB_EXEC_411,PROCEDURE,1503, p_task_id := pi_task_key;
WS_JOB_EXEC_411,PROCEDURE,1504, p_job_id := pi_job_key;
WS_JOB_EXEC_411,PROCEDURE,1505, v_audit_job_id := v_pm_job_key;
WS_JOB_EXEC_411,PROCEDURE,1506, v_audit_task_id := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,1507, v_audit_task_name := pi_task_name;
WS_JOB_EXEC_411,PROCEDURE,1508, END IF; -- end of sub jobs to rejoin
WS_JOB_EXEC_411,PROCEDURE,1509,
WS_JOB_EXEC_411,PROCEDURE,1510,
WS_JOB_EXEC_411,PROCEDURE,1511, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1512, -- Make sure we have a valid return status
WS_JOB_EXEC_411,PROCEDURE,1513, -- Otherwise make this a failure
WS_JOB_EXEC_411,PROCEDURE,1514, -- Update the status of the task we have completed.
WS_JOB_EXEC_411,PROCEDURE,1515, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1516, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1517, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,1518, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1519, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_411,PROCEDURE,1520, v_audit_status := 'W';
WS_JOB_EXEC_411,PROCEDURE,1521, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1522, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_411,PROCEDURE,1523, v_audit_status := 'E';
WS_JOB_EXEC_411,PROCEDURE,1524, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1525, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_411,PROCEDURE,1526, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1527, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1528, ELSE
WS_JOB_EXEC_411,PROCEDURE,1529, v_audit_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1530, v_run_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1531, p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,1532, p_return_msg := substr('Invalid return code '||pi_task_status||
WS_JOB_EXEC_411,PROCEDURE,1533, '. Msg was '||pi_task_msg,1,970)||
WS_JOB_EXEC_411,PROCEDURE,1534, '. Expecting return code of 1,-1,-2, or -3';
WS_JOB_EXEC_411,PROCEDURE,1535, End If;
WS_JOB_EXEC_411,PROCEDURE,1536,
WS_JOB_EXEC_411,PROCEDURE,1537, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1538, -- Record this thread as being active
WS_JOB_EXEC_411,PROCEDURE,1539, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1540, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1541, select sid,serial#
WS_JOB_EXEC_411,PROCEDURE,1542, into v_sid, v_serial
WS_JOB_EXEC_411,PROCEDURE,1543, from v$session where audsid = userenv('sessionid') ;
WS_JOB_EXEC_411,PROCEDURE,1544, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1545, v_sid := 0;
WS_JOB_EXEC_411,PROCEDURE,1546, v_serial := 0;
WS_JOB_EXEC_411,PROCEDURE,1547, END;
WS_JOB_EXEC_411,PROCEDURE,1548, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1549, Insert into ws_wrk_job_thread (
WS_JOB_EXEC_411,PROCEDURE,1550, wjt_job_key, wjt_sequence, wjt_thread, wjt_sid, wjt_serial)
WS_JOB_EXEC_411,PROCEDURE,1551, Values (p_job_id, pi_sequence, pi_thread, v_sid, v_serial);
WS_JOB_EXEC_411,PROCEDURE,1552, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1553, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1554, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,1555, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1556, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1557, END;
WS_JOB_EXEC_411,PROCEDURE,1558,
WS_JOB_EXEC_411,PROCEDURE,1559,
WS_JOB_EXEC_411,PROCEDURE,1560,
WS_JOB_EXEC_411,PROCEDURE,1561, -- Delete the temporary script we have created for this
WS_JOB_EXEC_411,PROCEDURE,1562, -- task to use
WS_JOB_EXEC_411,PROCEDURE,1563, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1564, delete
WS_JOB_EXEC_411,PROCEDURE,1565, from ws_wrk_task_scr_line
WS_JOB_EXEC_411,PROCEDURE,1566, where wtsl_task_key = p_task_id
WS_JOB_EXEC_411,PROCEDURE,1567, and wtsl_job_key = v_audit_job_id -- 5.6.2.1 changed from p_job_id
WS_JOB_EXEC_411,PROCEDURE,1568, and wtsl_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1569,
WS_JOB_EXEC_411,PROCEDURE,1570, delete
WS_JOB_EXEC_411,PROCEDURE,1571, from ws_wrk_task_scr_hdr
WS_JOB_EXEC_411,PROCEDURE,1572, where wtsh_task_key = p_task_id
WS_JOB_EXEC_411,PROCEDURE,1573, and wtsh_job_key = v_audit_job_id -- 5.6.2.1 changed from p_job_id
WS_JOB_EXEC_411,PROCEDURE,1574, and wtsh_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1575, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1576, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1577, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,1578, END;
WS_JOB_EXEC_411,PROCEDURE,1579,
WS_JOB_EXEC_411,PROCEDURE,1580, -- Make sure we are in run tables (i.e. have a job_run record)
WS_JOB_EXEC_411,PROCEDURE,1581, -- And have a waiting state
WS_JOB_EXEC_411,PROCEDURE,1582, -- Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,1583, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1584, select wjr_status, wjr_job_key, wjr_publish_fail, NVL(wjr_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,1585, into v_run_status, p_job_id, v_FailMsg, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,1586, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1587, where rtrim(upper(wjr_name)) = rtrim(upper(pi_job_name))
WS_JOB_EXEC_411,PROCEDURE,1588, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1589,
WS_JOB_EXEC_411,PROCEDURE,1590, select count(1)
WS_JOB_EXEC_411,PROCEDURE,1591, into v_rec_count
WS_JOB_EXEC_411,PROCEDURE,1592, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,1593, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1594, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1595, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1596, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,1597, END;
WS_JOB_EXEC_411,PROCEDURE,1598, If v_rec_count <> 1 Then
WS_JOB_EXEC_411,PROCEDURE,1599, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not running. '||
WS_JOB_EXEC_411,PROCEDURE,1600, 'Cannot rejoin. '||v_rec_count||' jobs running. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,1601, v_result := WsWrkAudit('E',v_audit_job_name,RTRIM(v_audit_task_name), pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1602, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1603,
WS_JOB_EXEC_411,PROCEDURE,1604, -- See if we can work out what has happened to the job
WS_JOB_EXEC_411,PROCEDURE,1605, -- and let them know
WS_JOB_EXEC_411,PROCEDURE,1606, If v_rec_count = 0 Then
WS_JOB_EXEC_411,PROCEDURE,1607, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1608, select wjl_status, wjl_publish_fail, NVL(wjl_idle_thread_wait,30)
WS_JOB_EXEC_411,PROCEDURE,1609, into v_run_status, v_FailMsg, v_idle_thread_wait
WS_JOB_EXEC_411,PROCEDURE,1610, from ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,1611, where wjl_name = pi_job_name
WS_JOB_EXEC_411,PROCEDURE,1612, and wjl_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1613, v_MsgText := substr('Job '||pi_job_name||' sequence '||pi_sequence||' has a log entry with status '||
WS_JOB_EXEC_411,PROCEDURE,1614, v_run_status||' '||v_FailMsg,1,1023);
WS_JOB_EXEC_411,PROCEDURE,1615, v_result := WsWrkAudit('E',v_audit_job_name,RTRIM(v_audit_task_name), pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1616, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1617, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1618, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,1619, END;
WS_JOB_EXEC_411,PROCEDURE,1620, End If;
WS_JOB_EXEC_411,PROCEDURE,1621,
WS_JOB_EXEC_411,PROCEDURE,1622, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1623, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,1624, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1625, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_411,PROCEDURE,1626, v_audit_status := 'W';
WS_JOB_EXEC_411,PROCEDURE,1627, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1628, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_411,PROCEDURE,1629, v_audit_status := 'E';
WS_JOB_EXEC_411,PROCEDURE,1630, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1631, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_411,PROCEDURE,1632, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1633, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1634, ELSE
WS_JOB_EXEC_411,PROCEDURE,1635, v_audit_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1636, v_run_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1637, p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,1638, End If;
WS_JOB_EXEC_411,PROCEDURE,1639, v_result := WsWrkAudit(v_audit_status, v_audit_job_name,RTRIM(v_audit_task_name), p_sequence,
WS_JOB_EXEC_411,PROCEDURE,1640, p_return_msg, NULL, NULL, v_audit_task_id, v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1641, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1642, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1643, End If;
WS_JOB_EXEC_411,PROCEDURE,1644,
WS_JOB_EXEC_411,PROCEDURE,1645,
WS_JOB_EXEC_411,PROCEDURE,1646, -- Setup to default for a failure if a Fail command has been provided
WS_JOB_EXEC_411,PROCEDURE,1647, If v_FailMsg is not Null Then
WS_JOB_EXEC_411,PROCEDURE,1648, po_action_key := 2;
WS_JOB_EXEC_411,PROCEDURE,1649, po_action_msg := v_FailMsg;
WS_JOB_EXEC_411,PROCEDURE,1650, Else
WS_JOB_EXEC_411,PROCEDURE,1651, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,1652, End If;
WS_JOB_EXEC_411,PROCEDURE,1653,
WS_JOB_EXEC_411,PROCEDURE,1654, -- Get some info about the task we have just completed
WS_JOB_EXEC_411,PROCEDURE,1655, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1656, select wtr_obj_key, wtr_obj_type, wtr_action_type
WS_JOB_EXEC_411,PROCEDURE,1657, into v_obj_key, v_obj_type, v_action_type
WS_JOB_EXEC_411,PROCEDURE,1658, from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,1659, where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1660, and wtr_task_key = p_task_id
WS_JOB_EXEC_411,PROCEDURE,1661, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,1662, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1663, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,1664, ' Task ' || p_task_name || ' not running. '||
WS_JOB_EXEC_411,PROCEDURE,1665, 'Cannot rejoin. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,1666, v_result := WsWrkAudit('E',v_audit_job_name,RTRIM(v_audit_task_name), pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1667, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1668, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1669, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,1670, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1671, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_411,PROCEDURE,1672, v_audit_status := 'W';
WS_JOB_EXEC_411,PROCEDURE,1673, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1674, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_411,PROCEDURE,1675, v_audit_status := 'E';
WS_JOB_EXEC_411,PROCEDURE,1676, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1677, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_411,PROCEDURE,1678, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1679, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1680, ELSE
WS_JOB_EXEC_411,PROCEDURE,1681, v_audit_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1682, v_run_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1683, p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,1684, End If;
WS_JOB_EXEC_411,PROCEDURE,1685, v_result := WsWrkAudit(v_audit_status, v_audit_job_name,RTRIM(v_audit_task_name), p_sequence,
WS_JOB_EXEC_411,PROCEDURE,1686, p_return_msg, NULL, NULL, v_audit_task_id, v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1687,
WS_JOB_EXEC_411,PROCEDURE,1688, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,1689, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1690, END;
WS_JOB_EXEC_411,PROCEDURE,1691,
WS_JOB_EXEC_411,PROCEDURE,1692,
WS_JOB_EXEC_411,PROCEDURE,1693, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1694, -- If a Load then we have just completed the load phase
WS_JOB_EXEC_411,PROCEDURE,1695, -- And now need to run any post load procedure if the
WS_JOB_EXEC_411,PROCEDURE,1696, -- load was a success
WS_JOB_EXEC_411,PROCEDURE,1697, -- If a Load and the action is a process then we need
WS_JOB_EXEC_411,PROCEDURE,1698, -- to do any index builds as well
WS_JOB_EXEC_411,PROCEDURE,1699, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1700, v_step := 500;
WS_JOB_EXEC_411,PROCEDURE,1701, If v_obj_type = v_ws_obj_load Then
WS_JOB_EXEC_411,PROCEDURE,1702, If p_status_code >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,1703, IF UPPER(pi_action) = 'REJOIN' OR UPPER(pi_action) = 'REJOIN91' -- NOT a procedure execute rejoin
WS_JOB_EXEC_411,PROCEDURE,1704, THEN
WS_JOB_EXEC_411,PROCEDURE,1705, v_result := ws_act_post_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,1706, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,1707, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,1708, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,1709,
WS_JOB_EXEC_411,PROCEDURE,1710, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1711, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name , pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1712, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1713,
WS_JOB_EXEC_411,PROCEDURE,1714, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,1715, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1716, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1717,
WS_JOB_EXEC_411,PROCEDURE,1718, End If;
WS_JOB_EXEC_411,PROCEDURE,1719,
WS_JOB_EXEC_411,PROCEDURE,1720, -- If this procedure is a SQLBLOCK then well get back a result of 2
WS_JOB_EXEC_411,PROCEDURE,1721, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,1722, -- When we rejoin the job any post action (index build) will be run
WS_JOB_EXEC_411,PROCEDURE,1723, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,1724, THEN
WS_JOB_EXEC_411,PROCEDURE,1725,
WS_JOB_EXEC_411,PROCEDURE,1726, -- Need to first output the info message for the load step
WS_JOB_EXEC_411,PROCEDURE,1727, v_result := WsWrkAudit(v_audit_status,v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1728, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1729,
WS_JOB_EXEC_411,PROCEDURE,1730, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,1731, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,1732, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,1733, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,1734, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,1735, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,1736, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,1737, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,1738, po_result_code := p_status_code_2; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,1739,
WS_JOB_EXEC_411,PROCEDURE,1740, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1741, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,1742, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1743, v_step := 600;
WS_JOB_EXEC_411,PROCEDURE,1744, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1745, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,1746, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,1747, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1748, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,1749, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,1750, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,1751, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,1752, End If;
WS_JOB_EXEC_411,PROCEDURE,1753, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1754, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1755, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,1756, END;
WS_JOB_EXEC_411,PROCEDURE,1757, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1758, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,1759, ELSE -- Procedure Exec REJOIN
WS_JOB_EXEC_411,PROCEDURE,1760, p_status_code_2 := p_status_code;
WS_JOB_EXEC_411,PROCEDURE,1761, p_return_msg_2 := p_return_msg;
WS_JOB_EXEC_411,PROCEDURE,1762, v_result := 1;
WS_JOB_EXEC_411,PROCEDURE,1763, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1764, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name , pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1765, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1766, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,1767, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1768, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1769, End If;
WS_JOB_EXEC_411,PROCEDURE,1770,
WS_JOB_EXEC_411,PROCEDURE,1771,
WS_JOB_EXEC_411,PROCEDURE,1772, END IF; -- action test (REJOIN or not)
WS_JOB_EXEC_411,PROCEDURE,1773,
WS_JOB_EXEC_411,PROCEDURE,1774, --
WS_JOB_EXEC_411,PROCEDURE,1775, -- Now build any indexes if action is PROCESS
WS_JOB_EXEC_411,PROCEDURE,1776, --
WS_JOB_EXEC_411,PROCEDURE,1777, If v_result >= -1 And v_action_type = v_ws_act_process
WS_JOB_EXEC_411,PROCEDURE,1778, THEN
WS_JOB_EXEC_411,PROCEDURE,1779, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,1780, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,1781, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,1782, p_return_msg_3, p_status_code_3);
WS_JOB_EXEC_411,PROCEDURE,1783, If p_status_code_3 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1784, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1785, p_return_msg_3,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1786, ElsIf p_status_code_3 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,1787, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1788, p_return_msg_3,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1789, End If;
WS_JOB_EXEC_411,PROCEDURE,1790, Else
WS_JOB_EXEC_411,PROCEDURE,1791, p_status_code_2 := 1;
WS_JOB_EXEC_411,PROCEDURE,1792, End If;
WS_JOB_EXEC_411,PROCEDURE,1793,
WS_JOB_EXEC_411,PROCEDURE,1794, -- If our post load procedure failed and the load worked then
WS_JOB_EXEC_411,PROCEDURE,1795, -- record the post load failure
WS_JOB_EXEC_411,PROCEDURE,1796, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,1797, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,1798, End If;
WS_JOB_EXEC_411,PROCEDURE,1799, If p_status_code_3 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,1800, p_status_code := p_status_code_3;
WS_JOB_EXEC_411,PROCEDURE,1801, End If;
WS_JOB_EXEC_411,PROCEDURE,1802,
WS_JOB_EXEC_411,PROCEDURE,1803, End If; -- Status code >= -1
WS_JOB_EXEC_411,PROCEDURE,1804, End If; -- Object = Load
WS_JOB_EXEC_411,PROCEDURE,1805,
WS_JOB_EXEC_411,PROCEDURE,1806, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1807, -- If an Export then we have just completed the export phase
WS_JOB_EXEC_411,PROCEDURE,1808, -- And now need to run any post load procedure if the
WS_JOB_EXEC_411,PROCEDURE,1809, -- export was a success
WS_JOB_EXEC_411,PROCEDURE,1810, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1811, v_step := 700;
WS_JOB_EXEC_411,PROCEDURE,1812, If v_obj_type = v_ws_obj_export Then
WS_JOB_EXEC_411,PROCEDURE,1813,
WS_JOB_EXEC_411,PROCEDURE,1814, If p_status_code >= -1
WS_JOB_EXEC_411,PROCEDURE,1815, THEN
WS_JOB_EXEC_411,PROCEDURE,1816, IF UPPER(pi_action) = 'REJOIN' --Standard REJOIN
WS_JOB_EXEC_411,PROCEDURE,1817, THEN
WS_JOB_EXEC_411,PROCEDURE,1818, v_step := 800;
WS_JOB_EXEC_411,PROCEDURE,1819, v_result := ws_act_post_export(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,1820, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,1821, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,1822, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,1823, -- If this procedure is a SQLBLOCK then well get back a result of 2
WS_JOB_EXEC_411,PROCEDURE,1824, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,1825, -- When we rejoin the job any post action (index build) will be run
WS_JOB_EXEC_411,PROCEDURE,1826, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,1827, THEN
WS_JOB_EXEC_411,PROCEDURE,1828, -- Need to first output the info message for the export step
WS_JOB_EXEC_411,PROCEDURE,1829, v_result := WsWrkAudit(v_audit_status,v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1830, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1831,
WS_JOB_EXEC_411,PROCEDURE,1832, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,1833, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,1834, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,1835, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,1836, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,1837, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,1838, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,1839, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,1840, po_result_code := p_status_code_2; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,1841,
WS_JOB_EXEC_411,PROCEDURE,1842, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1843, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,1844, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1845, v_step := 900;
WS_JOB_EXEC_411,PROCEDURE,1846, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1847, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,1848, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,1849, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,1850, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,1851, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,1852, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,1853, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,1854, End If;
WS_JOB_EXEC_411,PROCEDURE,1855, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,1856, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,1857, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,1858, END;
WS_JOB_EXEC_411,PROCEDURE,1859, RETURN;
WS_JOB_EXEC_411,PROCEDURE,1860, END IF;-- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,1861,
WS_JOB_EXEC_411,PROCEDURE,1862, ELSE -- Procedure Exec REJOIN
WS_JOB_EXEC_411,PROCEDURE,1863, p_status_code_2 := p_status_code;
WS_JOB_EXEC_411,PROCEDURE,1864, p_return_msg_2 := p_return_msg;
WS_JOB_EXEC_411,PROCEDURE,1865, v_result := 1;
WS_JOB_EXEC_411,PROCEDURE,1866,
WS_JOB_EXEC_411,PROCEDURE,1867, END IF; -- REJOIN or REJOIN16/17
WS_JOB_EXEC_411,PROCEDURE,1868,
WS_JOB_EXEC_411,PROCEDURE,1869,
WS_JOB_EXEC_411,PROCEDURE,1870, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1871, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name , pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1872, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1873, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,1874, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1875, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1876, End If;
WS_JOB_EXEC_411,PROCEDURE,1877,
WS_JOB_EXEC_411,PROCEDURE,1878,
WS_JOB_EXEC_411,PROCEDURE,1879, -- If our post export procedure failed and the export worked then
WS_JOB_EXEC_411,PROCEDURE,1880, -- record the post export failure
WS_JOB_EXEC_411,PROCEDURE,1881, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,1882, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,1883, End If;
WS_JOB_EXEC_411,PROCEDURE,1884, If p_status_code_3 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,1885, p_status_code := p_status_code_3;
WS_JOB_EXEC_411,PROCEDURE,1886, End If;
WS_JOB_EXEC_411,PROCEDURE,1887,
WS_JOB_EXEC_411,PROCEDURE,1888, End If; --p_status_code >= -1
WS_JOB_EXEC_411,PROCEDURE,1889, End If; --Export
WS_JOB_EXEC_411,PROCEDURE,1890,
WS_JOB_EXEC_411,PROCEDURE,1891, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1892, -- If a Retro Initial load then we have just completed
WS_JOB_EXEC_411,PROCEDURE,1893, -- the load phase
WS_JOB_EXEC_411,PROCEDURE,1894, -- And now need to run any index creates if the
WS_JOB_EXEC_411,PROCEDURE,1895, -- load was a success
WS_JOB_EXEC_411,PROCEDURE,1896,
WS_JOB_EXEC_411,PROCEDURE,1897, -- EXTENDED TO ALL OBJECTTYPES FOR ACT_INITIAL
WS_JOB_EXEC_411,PROCEDURE,1898, -- AS MAY BE FROM EXIT FOR PROCEDURE/SQLBLOCK
WS_JOB_EXEC_411,PROCEDURE,1899, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1900, v_step := 1000;
WS_JOB_EXEC_411,PROCEDURE,1901, -- If v_obj_type = v_ws_obj_retro_copy AND v_action_type = v_ws_act_initial THEN
WS_JOB_EXEC_411,PROCEDURE,1902, IF v_action_type = v_ws_act_initial
WS_JOB_EXEC_411,PROCEDURE,1903, AND UPPER(pi_action) <> 'REJOIN90'
WS_JOB_EXEC_411,PROCEDURE,1904, THEN
WS_JOB_EXEC_411,PROCEDURE,1905,
WS_JOB_EXEC_411,PROCEDURE,1906, If p_status_code >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,1907, v_step := 1100;
WS_JOB_EXEC_411,PROCEDURE,1908,
WS_JOB_EXEC_411,PROCEDURE,1909, v_result := ws_act_build_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,1910, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,1911, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,1912, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,1913, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1914, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name , pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1915, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1916, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,1917, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1918, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1919, End If;
WS_JOB_EXEC_411,PROCEDURE,1920,
WS_JOB_EXEC_411,PROCEDURE,1921, -- If index build failed and the load worked then
WS_JOB_EXEC_411,PROCEDURE,1922, -- record the index build failure
WS_JOB_EXEC_411,PROCEDURE,1923, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,1924, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,1925, End If;
WS_JOB_EXEC_411,PROCEDURE,1926,
WS_JOB_EXEC_411,PROCEDURE,1927, End If; --p_status_code >= -1
WS_JOB_EXEC_411,PROCEDURE,1928, End If;--v_action_type = v_ws_act_initial
WS_JOB_EXEC_411,PROCEDURE,1929,
WS_JOB_EXEC_411,PROCEDURE,1930, --REJOIN AFTER UPDATE SQLBLOCK(REJOIN16)
WS_JOB_EXEC_411,PROCEDURE,1931, -- Need to do the build indexes for process action
WS_JOB_EXEC_411,PROCEDURE,1932, If v_obj_type <> v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,1933, AND v_obj_type <> v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,1934, AND v_obj_type <> v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,1935, AND v_obj_type <> v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,1936, AND v_obj_type <> v_ws_obj_cube_virtual
WS_JOB_EXEC_411,PROCEDURE,1937, AND v_obj_type <> v_ws_obj_load
WS_JOB_EXEC_411,PROCEDURE,1938, AND v_obj_type <> v_ws_obj_export
WS_JOB_EXEC_411,PROCEDURE,1939, AND v_obj_type <> v_ws_obj_job
WS_JOB_EXEC_411,PROCEDURE,1940, THEN
WS_JOB_EXEC_411,PROCEDURE,1941, IF p_status_code >= -1
WS_JOB_EXEC_411,PROCEDURE,1942, AND v_action_type >= v_ws_act_process
WS_JOB_EXEC_411,PROCEDURE,1943, AND UPPER(pi_action) = 'REJOIN16'
WS_JOB_EXEC_411,PROCEDURE,1944, THEN
WS_JOB_EXEC_411,PROCEDURE,1945, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,1946, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,1947, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,1948, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,1949, IF p_status_code_2 = 1
WS_JOB_EXEC_411,PROCEDURE,1950, THEN
WS_JOB_EXEC_411,PROCEDURE,1951, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1952, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1953, ELSIF p_status_code_2 < 1
WS_JOB_EXEC_411,PROCEDURE,1954, THEN
WS_JOB_EXEC_411,PROCEDURE,1955, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,1956, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1957, END IF;
WS_JOB_EXEC_411,PROCEDURE,1958,
WS_JOB_EXEC_411,PROCEDURE,1959, -- If index build failed and the action worked then
WS_JOB_EXEC_411,PROCEDURE,1960, -- record the index build failure
WS_JOB_EXEC_411,PROCEDURE,1961, IF p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,1962, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,1963, END IF;
WS_JOB_EXEC_411,PROCEDURE,1964,
WS_JOB_EXEC_411,PROCEDURE,1965, END IF; --p_status_code >= -1 etc
WS_JOB_EXEC_411,PROCEDURE,1966, END IF; -- Selected object Types
WS_JOB_EXEC_411,PROCEDURE,1967,
WS_JOB_EXEC_411,PROCEDURE,1968, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1969, -- Log the results in the audit trail
WS_JOB_EXEC_411,PROCEDURE,1970, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1971, v_step := 1200;
WS_JOB_EXEC_411,PROCEDURE,1972, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,1973, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,1974, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1975, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_411,PROCEDURE,1976, v_audit_status := 'W';
WS_JOB_EXEC_411,PROCEDURE,1977, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,1978, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_411,PROCEDURE,1979, v_audit_status := 'E';
WS_JOB_EXEC_411,PROCEDURE,1980, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1981, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_411,PROCEDURE,1982, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1983, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,1984, ELSE
WS_JOB_EXEC_411,PROCEDURE,1985, v_audit_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1986, v_run_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,1987, p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,1988, End If;
WS_JOB_EXEC_411,PROCEDURE,1989, v_result := WsWrkAudit(v_audit_status, v_audit_job_name,RTRIM(v_audit_task_name), p_sequence,
WS_JOB_EXEC_411,PROCEDURE,1990, p_return_msg, NULL, NULL, v_audit_task_id, v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,1991,
WS_JOB_EXEC_411,PROCEDURE,1992, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1993, -- Update the run record to indicate our final status
WS_JOB_EXEC_411,PROCEDURE,1994, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,1995, v_step := 1300;
WS_JOB_EXEC_411,PROCEDURE,1996, BEGIN
WS_JOB_EXEC_411,PROCEDURE,1997, update ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,1998, set wtr_run_status = v_run_status,
WS_JOB_EXEC_411,PROCEDURE,1999, wtr_audit_status = v_audit_status,
WS_JOB_EXEC_411,PROCEDURE,2000, wtr_return_msg = p_return_msg,
WS_JOB_EXEC_411,PROCEDURE,2001, wtr_elapsed_hh = trunc(to_number(sysdate-wtr_started)*24,0),
WS_JOB_EXEC_411,PROCEDURE,2002, wtr_elapsed_mi = round(to_number(sysdate-wtr_started)*24*60,0) - (
WS_JOB_EXEC_411,PROCEDURE,2003, trunc(to_number(sysdate-wtr_started)*24,0)*60),
WS_JOB_EXEC_411,PROCEDURE,2004, wtr_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,2005, where wtr_task_key = p_task_id
WS_JOB_EXEC_411,PROCEDURE,2006, and wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2007, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2008, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2009, ' failed in final update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_411,PROCEDURE,2010, p_task_id ||'. Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,2011, v_result := WsWrkAudit('F',v_audit_job_name,RTRIM(v_audit_task_name), pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2012, v_MsgText,SQLCODE,SQLERRM,0,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2013, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2014, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2015, END;
WS_JOB_EXEC_411,PROCEDURE,2016, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2017,
WS_JOB_EXEC_411,PROCEDURE,2018,
WS_JOB_EXEC_411,PROCEDURE,2019, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2020, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2021, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2022, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2023, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2024, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2025, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2026, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2027, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2028, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2029, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2030, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2031, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2032, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2033, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2034, -- C A N C E L J O B
WS_JOB_EXEC_411,PROCEDURE,2035, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2036, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2037, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2038, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2039, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2040, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2041, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2042, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2043, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2044, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2045, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2046, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2047, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2048, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2049, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2050, -- If we are a Cancel job then check we are in a halted or aborted
WS_JOB_EXEC_411,PROCEDURE,2051, -- state.
WS_JOB_EXEC_411,PROCEDURE,2052, -- Archive the _run table to the log table
WS_JOB_EXEC_411,PROCEDURE,2053, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2054, ElsIf upper(pi_action) = 'CANCEL' Then
WS_JOB_EXEC_411,PROCEDURE,2055, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2056, -- If we are thread 0 then do some checks and archive
WS_JOB_EXEC_411,PROCEDURE,2057, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2058, If pi_thread = 0 Then
WS_JOB_EXEC_411,PROCEDURE,2059,
WS_JOB_EXEC_411,PROCEDURE,2060, -- Get the job key for the job name. There should be one and
WS_JOB_EXEC_411,PROCEDURE,2061, -- only one key. Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,2062, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2063, select wjc_job_key into p_job_id
WS_JOB_EXEC_411,PROCEDURE,2064, from ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,2065, where rtrim(upper(wjc_name)) = rtrim(upper(pi_job_name));
WS_JOB_EXEC_411,PROCEDURE,2066, v_rec_count := 1;
WS_JOB_EXEC_411,PROCEDURE,2067, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2068, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2069, END;
WS_JOB_EXEC_411,PROCEDURE,2070, If v_rec_count <> 1 Then
WS_JOB_EXEC_411,PROCEDURE,2071, v_MsgText := 'Job '||pi_job_name||' passed invalid job name in Cancel. '||
WS_JOB_EXEC_411,PROCEDURE,2072, v_rec_count||' such records exist. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,2073, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2074, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2075, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2076, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2077, End If;
WS_JOB_EXEC_411,PROCEDURE,2078,
WS_JOB_EXEC_411,PROCEDURE,2079, -- Make sure we are already running (i.e. have a job_run record)
WS_JOB_EXEC_411,PROCEDURE,2080, -- Otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,2081, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2082, select count(1) into v_rec_count
WS_JOB_EXEC_411,PROCEDURE,2083, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,2084, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2085, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2086, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2087, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2088, END;
WS_JOB_EXEC_411,PROCEDURE,2089, If v_rec_count <> 1 Then
WS_JOB_EXEC_411,PROCEDURE,2090, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||' not running. '||
WS_JOB_EXEC_411,PROCEDURE,2091, 'Cannot cancel. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,2092, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2093, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2094, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2095, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2096, End If;
WS_JOB_EXEC_411,PROCEDURE,2097,
WS_JOB_EXEC_411,PROCEDURE,2098, -- Move the job run record to the log record
WS_JOB_EXEC_411,PROCEDURE,2099, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2100, insert into ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,2101, select * from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,2102, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2103, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2104, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2105, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2106, delete from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,2107, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2108, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2109, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2110, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2111,
WS_JOB_EXEC_411,PROCEDURE,2112, -- delete any child jobs
WS_JOB_EXEC_411,PROCEDURE,2113, delete from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,2114, where wjr_job_key in
WS_JOB_EXEC_411,PROCEDURE,2115, ( Select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2116, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,2117, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2118, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2119, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2120, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2121, v_MsgText := 'Job '||pi_job_name||' failed in xfer to ws_wrk_job_log. '||
WS_JOB_EXEC_411,PROCEDURE,2122, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,2123, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2124, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2125, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2126, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2127, END;
WS_JOB_EXEC_411,PROCEDURE,2128,
WS_JOB_EXEC_411,PROCEDURE,2129, -- Move the task run records to the log record
WS_JOB_EXEC_411,PROCEDURE,2130, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2131, insert into ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,2132, select * from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2133, where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2134, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2135, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2136, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2137, delete from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2138, where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2139, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2140, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2141, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2142, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2143, v_MsgText := 'Job '||pi_job_name||' failed in xfer of tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_411,PROCEDURE,2144, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,2145, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2146, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2147, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2148, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2149, END;
WS_JOB_EXEC_411,PROCEDURE,2150, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2151, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2152,
WS_JOB_EXEC_411,PROCEDURE,2153, -- Clean up any child jobs
WS_JOB_EXEC_411,PROCEDURE,2154, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2155, insert into ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,2156, select * from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2157, where wtr_job_key in
WS_JOB_EXEC_411,PROCEDURE,2158, ( Select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2159, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,2160, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2161, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2162, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2163, delete from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2164, where wtr_job_key in
WS_JOB_EXEC_411,PROCEDURE,2165, ( Select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2166, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,2167, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2168, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2169, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2170, update ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,2171, set wtl_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2172, where wtl_job_key in
WS_JOB_EXEC_411,PROCEDURE,2173, ( Select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2174, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,2175, and wtl_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2176, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2177, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2178, -- delete any child jobs
WS_JOB_EXEC_411,PROCEDURE,2179, delete from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,2180, where wjr_job_key in
WS_JOB_EXEC_411,PROCEDURE,2181, ( Select wjr_job_key from ws_wrk_job_run where wjr_chkp_count = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2182, and wjr_sequence = pi_sequence)
WS_JOB_EXEC_411,PROCEDURE,2183, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,2184, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,2185, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2186,
WS_JOB_EXEC_411,PROCEDURE,2187, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2188, v_MsgText := 'Job '||pi_job_name||' failed in xfer of tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_411,PROCEDURE,2189, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,2190, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2191, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2192, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2193, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2194, END;
WS_JOB_EXEC_411,PROCEDURE,2195, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2196,
WS_JOB_EXEC_411,PROCEDURE,2197, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2198, ' Canceled. ';
WS_JOB_EXEC_411,PROCEDURE,2199, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2200, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2201,
WS_JOB_EXEC_411,PROCEDURE,2202, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2203, -- If we are not thread 0 then wait for ten seconds and proceed.
WS_JOB_EXEC_411,PROCEDURE,2204, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2205, Else
WS_JOB_EXEC_411,PROCEDURE,2206, DBMS_LOCK.SLEEP(10);
WS_JOB_EXEC_411,PROCEDURE,2207, End If;
WS_JOB_EXEC_411,PROCEDURE,2208,
WS_JOB_EXEC_411,PROCEDURE,2209,
WS_JOB_EXEC_411,PROCEDURE,2210, -- not a New or a Restart so we have a problem
WS_JOB_EXEC_411,PROCEDURE,2211, Else
WS_JOB_EXEC_411,PROCEDURE,2212, v_MsgText := 'Job '||pi_job_name||' passed invalid option: '||
WS_JOB_EXEC_411,PROCEDURE,2213, pi_action||'. No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,2214, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2215, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2216, End If;
WS_JOB_EXEC_411,PROCEDURE,2217,
WS_JOB_EXEC_411,PROCEDURE,2218, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2219, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2220, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2221, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2222, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2223, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2224, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2225, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2226, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2227, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2228, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2229, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2230, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2231, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2232, -- E X E C U T E T A S K S
WS_JOB_EXEC_411,PROCEDURE,2233, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2234, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2235, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2236, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2237, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2238, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2239, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2240, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2241, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2242, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2243, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2244, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2245, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2246, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2247, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2248, --**********************************************************************
WS_JOB_EXEC_411,PROCEDURE,2249, -- Okay to start processing tasks. Three possible types of tasks
WS_JOB_EXEC_411,PROCEDURE,2250, -- will be handled. These Being (P)procedures, (F)functions and
WS_JOB_EXEC_411,PROCEDURE,2251, -- (C) checkpoints.
WS_JOB_EXEC_411,PROCEDURE,2252, -- Open the cursor we will use t run the tasks
WS_JOB_EXEC_411,PROCEDURE,2253, --**********************************************************************
WS_JOB_EXEC_411,PROCEDURE,2254, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2255,-- v_cursor := DBMS_SQL.OPEN_CURSOR;
WS_JOB_EXEC_411,PROCEDURE,2256, v_task_count := 1;
WS_JOB_EXEC_411,PROCEDURE,2257, v_step := 1400;
WS_JOB_EXEC_411,PROCEDURE,2258, v_depend_loop := 0;
WS_JOB_EXEC_411,PROCEDURE,2259,
WS_JOB_EXEC_411,PROCEDURE,2260, -- While More tasks loop
WS_JOB_EXEC_411,PROCEDURE,2261, WHILE v_task_count > 0 LOOP
WS_JOB_EXEC_411,PROCEDURE,2262,
WS_JOB_EXEC_411,PROCEDURE,2263, v_step := 1500;
WS_JOB_EXEC_411,PROCEDURE,2264, v_task_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2265, v_running_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2266, v_halted_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2267, v_failed_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2268, v_just_done := 0;
WS_JOB_EXEC_411,PROCEDURE,2269, v_idle_thread := 0;
WS_JOB_EXEC_411,PROCEDURE,2270, FOR v_TaskRec in c_TaskRun LOOP
WS_JOB_EXEC_411,PROCEDURE,2271, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2272, -- Check the status of each task
WS_JOB_EXEC_411,PROCEDURE,2273, -- If it is waiting then we will check dependencies etc.
WS_JOB_EXEC_411,PROCEDURE,2274, -- and see if it needs to be executed.
WS_JOB_EXEC_411,PROCEDURE,2275, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2276, v_step := 1600;
WS_JOB_EXEC_411,PROCEDURE,2277, v_process := 0;
WS_JOB_EXEC_411,PROCEDURE,2278, If v_TaskRec.wtr_run_status = 'W' Then
WS_JOB_EXEC_411,PROCEDURE,2279, v_step := 1700;
WS_JOB_EXEC_411,PROCEDURE,2280, v_task_count := 1;
WS_JOB_EXEC_411,PROCEDURE,2281, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2282, -- Check the dependencies for the task
WS_JOB_EXEC_411,PROCEDURE,2283, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2284, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2285, select count(1) into v_rec_count from ws_wrk_dependency
WS_JOB_EXEC_411,PROCEDURE,2286, where wdp_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2287, and wdp_child_task_key = v_TaskRec.wtr_task_key;
WS_JOB_EXEC_411,PROCEDURE,2288, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2289, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2290, ' failed in read of ws_wrk_dependency. '||
WS_JOB_EXEC_411,PROCEDURE,2291, ' Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,2292, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2293, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2294, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2295, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2296, END;
WS_JOB_EXEC_411,PROCEDURE,2297, -- If parent dependencies then check each to see if it has completed.
WS_JOB_EXEC_411,PROCEDURE,2298, v_child_key := v_TaskRec.wtr_task_key;
WS_JOB_EXEC_411,PROCEDURE,2299, v_halted := 0;
WS_JOB_EXEC_411,PROCEDURE,2300, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2301, v_checked := 0;
WS_JOB_EXEC_411,PROCEDURE,2302, v_step := 1800;
WS_JOB_EXEC_411,PROCEDURE,2303, FOR v_DepRec in c_Dependency LOOP
WS_JOB_EXEC_411,PROCEDURE,2304, -- get the parent task record from the task_run table
WS_JOB_EXEC_411,PROCEDURE,2305, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2306, select wtr_run_status, wtr_audit_status, wtr_abort_level
WS_JOB_EXEC_411,PROCEDURE,2307, into v_run_status, v_audit_status, v_abort_level
WS_JOB_EXEC_411,PROCEDURE,2308, from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2309, where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2310, and wtr_task_key = v_DepRec.wdp_parent_task_key;
WS_JOB_EXEC_411,PROCEDURE,2311, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2312, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2313, ' failed in parent task read of ws_wrk_task_run. '||
WS_JOB_EXEC_411,PROCEDURE,2314, ' Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,2315, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2316, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2317, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2318, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2319, END;
WS_JOB_EXEC_411,PROCEDURE,2320, v_step := 1900;
WS_JOB_EXEC_411,PROCEDURE,2321,
WS_JOB_EXEC_411,PROCEDURE,2322, -- Get the status for the parent task.
WS_JOB_EXEC_411,PROCEDURE,2323, -- If the parent is waiting or running then skip the rest of the tests as we cant go
WS_JOB_EXEC_411,PROCEDURE,2324, -- If the parent has been halted then set the flag to halt this task also.
WS_JOB_EXEC_411,PROCEDURE,2325, -- If the parent has failed or completed check the audit status
WS_JOB_EXEC_411,PROCEDURE,2326, -- The abort level will tell us if we should count this as a halt or an okay
WS_JOB_EXEC_411,PROCEDURE,2327, If v_run_status = 'W' Then
WS_JOB_EXEC_411,PROCEDURE,2328, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2329, ElsIf v_run_status = 'R' Then
WS_JOB_EXEC_411,PROCEDURE,2330, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2331, ElsIf v_run_status = 'H' Then
WS_JOB_EXEC_411,PROCEDURE,2332, v_halted := 1;
WS_JOB_EXEC_411,PROCEDURE,2333, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2334, ElsIf v_run_status = 'F' Then
WS_JOB_EXEC_411,PROCEDURE,2335, If v_abort_level = 5 Then
WS_JOB_EXEC_411,PROCEDURE,2336, v_checked := v_checked + 1;
WS_JOB_EXEC_411,PROCEDURE,2337, Else
WS_JOB_EXEC_411,PROCEDURE,2338, v_halted := 1;
WS_JOB_EXEC_411,PROCEDURE,2339, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2340, End If;
WS_JOB_EXEC_411,PROCEDURE,2341, ElsIf v_run_status = 'U' Then
WS_JOB_EXEC_411,PROCEDURE,2342, If v_abort_level = 5 Then
WS_JOB_EXEC_411,PROCEDURE,2343, v_checked := v_checked + 1;
WS_JOB_EXEC_411,PROCEDURE,2344, Else
WS_JOB_EXEC_411,PROCEDURE,2345, v_halted := 1;
WS_JOB_EXEC_411,PROCEDURE,2346, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2347, End If;
WS_JOB_EXEC_411,PROCEDURE,2348, ElsIf v_run_status = 'C' Then
WS_JOB_EXEC_411,PROCEDURE,2349, If v_abort_level <= 3 Then
WS_JOB_EXEC_411,PROCEDURE,2350, If v_audit_status = 'W' Then
WS_JOB_EXEC_411,PROCEDURE,2351, v_halted := 1;
WS_JOB_EXEC_411,PROCEDURE,2352, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2353, Else
WS_JOB_EXEC_411,PROCEDURE,2354, v_checked := v_checked + 1;
WS_JOB_EXEC_411,PROCEDURE,2355, End If;
WS_JOB_EXEC_411,PROCEDURE,2356, Else
WS_JOB_EXEC_411,PROCEDURE,2357, v_checked := v_checked + 1;
WS_JOB_EXEC_411,PROCEDURE,2358, End If;
WS_JOB_EXEC_411,PROCEDURE,2359, Else
WS_JOB_EXEC_411,PROCEDURE,2360, EXIT;
WS_JOB_EXEC_411,PROCEDURE,2361, End If;
WS_JOB_EXEC_411,PROCEDURE,2362,
WS_JOB_EXEC_411,PROCEDURE,2363, END LOOP; -- End of dependency Loop
WS_JOB_EXEC_411,PROCEDURE,2364,
WS_JOB_EXEC_411,PROCEDURE,2365, -- See if we passed our dependency check
WS_JOB_EXEC_411,PROCEDURE,2366, -- We either passed, need to halt the task or need to skip this task
WS_JOB_EXEC_411,PROCEDURE,2367, -- 5.6.1.1 also reset the depend_loop now to minimise erroneous errors
WS_JOB_EXEC_411,PROCEDURE,2368, -- that result if tasks have contention etc
WS_JOB_EXEC_411,PROCEDURE,2369,
WS_JOB_EXEC_411,PROCEDURE,2370, If v_checked = v_rec_count Then
WS_JOB_EXEC_411,PROCEDURE,2371, v_okay := 1;
WS_JOB_EXEC_411,PROCEDURE,2372, v_depend_loop := 0;
WS_JOB_EXEC_411,PROCEDURE,2373, End If;
WS_JOB_EXEC_411,PROCEDURE,2374,
WS_JOB_EXEC_411,PROCEDURE,2375, v_step := 2000;
WS_JOB_EXEC_411,PROCEDURE,2376, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2377, -- See if the task is okay to run and a procedure if so run it
WS_JOB_EXEC_411,PROCEDURE,2378, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2379, v_wants_to_run := 1;
WS_JOB_EXEC_411,PROCEDURE,2380,
WS_JOB_EXEC_411,PROCEDURE,2381, If v_okay = 1
WS_JOB_EXEC_411,PROCEDURE,2382, And ( (v_TaskRec.wtr_obj_type > 0 And v_TaskRec.wtr_obj_type <= v_ws_obj_max)
WS_JOB_EXEC_411,PROCEDURE,2383, OR (v_TaskRec.wtr_obj_type = v_ws_obj_source_mapping)
WS_JOB_EXEC_411,PROCEDURE,2384, OR (v_TaskRec.wtr_obj_type = v_ws_obj_job)
WS_JOB_EXEC_411,PROCEDURE,2385, )
WS_JOB_EXEC_411,PROCEDURE,2386, Then
WS_JOB_EXEC_411,PROCEDURE,2387, v_step := 2100;
WS_JOB_EXEC_411,PROCEDURE,2388, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2389, -- Update the run record to indicate we are running.
WS_JOB_EXEC_411,PROCEDURE,2390, -- Need to lock the record first to prevent another thread from
WS_JOB_EXEC_411,PROCEDURE,2391, -- grabbing it, or in case another thread has already got it,
WS_JOB_EXEC_411,PROCEDURE,2392, -- or updated it
WS_JOB_EXEC_411,PROCEDURE,2393, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2394, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2395, SELECT wtr_run_status
WS_JOB_EXEC_411,PROCEDURE,2396, , DECODE(NVL(wtr_action_ind,''),'A',0,'B',0,1)
WS_JOB_EXEC_411,PROCEDURE,2397, INTO v_run_status, v_wants_to_run
WS_JOB_EXEC_411,PROCEDURE,2398, from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2399, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,2400, and wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2401, and wtr_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,2402, for update nowait;
WS_JOB_EXEC_411,PROCEDURE,2403,
WS_JOB_EXEC_411,PROCEDURE,2404, If v_run_status = 'W' Then
WS_JOB_EXEC_411,PROCEDURE,2405, If v_wants_to_run = 0 Then
WS_JOB_EXEC_411,PROCEDURE,2406, v_task_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2407, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2408, UPDATE ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2409, SET wtr_run_status = 'C'
WS_JOB_EXEC_411,PROCEDURE,2410, , wtr_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,2411, , wtr_started = sysdate
WS_JOB_EXEC_411,PROCEDURE,2412, , wtr_audit_status = 'S'
WS_JOB_EXEC_411,PROCEDURE,2413, , wtr_return_msg = 'Task Disabled, Skipped.'
WS_JOB_EXEC_411,PROCEDURE,2414, , wtr_elapsed_hh = 0
WS_JOB_EXEC_411,PROCEDURE,2415, , wtr_elapsed_mi = 0
WS_JOB_EXEC_411,PROCEDURE,2416, , wtr_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,2417, WHERE wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,2418, AND wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2419, Else
WS_JOB_EXEC_411,PROCEDURE,2420, update ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2421, set wtr_run_status = 'R',
WS_JOB_EXEC_411,PROCEDURE,2422, wtr_thread = pi_thread,
WS_JOB_EXEC_411,PROCEDURE,2423, wtr_started = sysdate
WS_JOB_EXEC_411,PROCEDURE,2424, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,2425, and wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2426, End If;
WS_JOB_EXEC_411,PROCEDURE,2427, ElsIf v_run_status = 'R' Then
WS_JOB_EXEC_411,PROCEDURE,2428, -- someone else got the record and is running it
WS_JOB_EXEC_411,PROCEDURE,2429, v_running_count := v_running_count + 1;
WS_JOB_EXEC_411,PROCEDURE,2430, v_task_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2431, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2432, Else
WS_JOB_EXEC_411,PROCEDURE,2433, -- someone else got the record
WS_JOB_EXEC_411,PROCEDURE,2434, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2435, End If;
WS_JOB_EXEC_411,PROCEDURE,2436, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2437, -- If a resource busy someone else has the record
WS_JOB_EXEC_411,PROCEDURE,2438, -- so skip it
WS_JOB_EXEC_411,PROCEDURE,2439, If SQLCODE = -54 Then
WS_JOB_EXEC_411,PROCEDURE,2440, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2441, Else
WS_JOB_EXEC_411,PROCEDURE,2442, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2443, ' failed in update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_411,PROCEDURE,2444, v_taskRec.wtr_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,2445, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2446, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2447, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2448, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2449, End If;
WS_JOB_EXEC_411,PROCEDURE,2450, END;
WS_JOB_EXEC_411,PROCEDURE,2451, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2452, v_step := 2200;
WS_JOB_EXEC_411,PROCEDURE,2453, -- If we still have a go, then run it
WS_JOB_EXEC_411,PROCEDURE,2454, -- Break out of this loop and run the task by setting the v_process flag
WS_JOB_EXEC_411,PROCEDURE,2455, If v_okay = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2456, v_process := 1;
WS_JOB_EXEC_411,PROCEDURE,2457, p_task_id := v_TaskRec.wtr_task_key;
WS_JOB_EXEC_411,PROCEDURE,2458, p_task_name := v_TaskRec.wtr_name;
WS_JOB_EXEC_411,PROCEDURE,2459, v_action_type := v_TaskRec.wtr_action_type;
WS_JOB_EXEC_411,PROCEDURE,2460, v_obj_type := v_TaskRec.wtr_obj_type;
WS_JOB_EXEC_411,PROCEDURE,2461, v_obj_key := v_TaskRec.wtr_obj_key;
WS_JOB_EXEC_411,PROCEDURE,2462, v_task_key := v_TaskRec.wtr_task_key;
WS_JOB_EXEC_411,PROCEDURE,2463, Exit;
WS_JOB_EXEC_411,PROCEDURE,2464, End if;
WS_JOB_EXEC_411,PROCEDURE,2465, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2466, -- See if OKay and A Checkpoint
WS_JOB_EXEC_411,PROCEDURE,2467, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2468, ElsIf v_okay = 1 And v_TaskRec.wtr_type = 'C' Then
WS_JOB_EXEC_411,PROCEDURE,2469, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2470, -- Update the run record to indicate we are running.
WS_JOB_EXEC_411,PROCEDURE,2471, -- Need to lock the record first to prevent another thread from
WS_JOB_EXEC_411,PROCEDURE,2472, -- grabbing it, or in case another thread has already go it,
WS_JOB_EXEC_411,PROCEDURE,2473, -- or updated it
WS_JOB_EXEC_411,PROCEDURE,2474, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2475, v_step := 2300;
WS_JOB_EXEC_411,PROCEDURE,2476, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2477, select wtr_run_status into v_run_status
WS_JOB_EXEC_411,PROCEDURE,2478, from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2479, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,2480, and wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2481, for update nowait;
WS_JOB_EXEC_411,PROCEDURE,2482, If v_run_status = 'W' Then
WS_JOB_EXEC_411,PROCEDURE,2483, update ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2484, set wtr_run_status = 'R',
WS_JOB_EXEC_411,PROCEDURE,2485, wtr_started = sysdate
WS_JOB_EXEC_411,PROCEDURE,2486, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,2487, and wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2488, Else
WS_JOB_EXEC_411,PROCEDURE,2489, -- someone else got the record
WS_JOB_EXEC_411,PROCEDURE,2490, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2491, End If;
WS_JOB_EXEC_411,PROCEDURE,2492, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2493, -- If a resource busy someone else has the record
WS_JOB_EXEC_411,PROCEDURE,2494, -- so skip it
WS_JOB_EXEC_411,PROCEDURE,2495, If SQLCODE = -54 Then
WS_JOB_EXEC_411,PROCEDURE,2496, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,2497, Else
WS_JOB_EXEC_411,PROCEDURE,2498, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2499, ' failed in update of ws_wrk_task_ctrl for task id '||
WS_JOB_EXEC_411,PROCEDURE,2500, v_taskRec.wtr_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,2501, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2502, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2503, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2504, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2505, End If;
WS_JOB_EXEC_411,PROCEDURE,2506, END;
WS_JOB_EXEC_411,PROCEDURE,2507, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2508, v_step := 2400;
WS_JOB_EXEC_411,PROCEDURE,2509, -- If still okay (i.e we got the record then record the checkpoint
WS_JOB_EXEC_411,PROCEDURE,2510, If v_okay = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2511, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,2512, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,2513, p_task_name := 'Checkpoint';
WS_JOB_EXEC_411,PROCEDURE,2514, p_return_msg := 'Checkpoint completed';
WS_JOB_EXEC_411,PROCEDURE,2515, v_result := WsWrkAudit(v_audit_status, v_audit_job_name,v_audit_task_name, p_sequence,
WS_JOB_EXEC_411,PROCEDURE,2516, p_return_msg, NULL, NULL, v_audit_task_id, v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2517, If v_TaskRec.wtr_chkp_number <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,2518, v_result := WsWrkChkPoint(p_job_id, pi_sequence, v_TaskRec.wtr_chkp_number);
WS_JOB_EXEC_411,PROCEDURE,2519, End If;
WS_JOB_EXEC_411,PROCEDURE,2520, v_just_done := 1;
WS_JOB_EXEC_411,PROCEDURE,2521, End If;
WS_JOB_EXEC_411,PROCEDURE,2522,
WS_JOB_EXEC_411,PROCEDURE,2523, End If; -- End of task
WS_JOB_EXEC_411,PROCEDURE,2524, v_step := 2500;
WS_JOB_EXEC_411,PROCEDURE,2525, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2526, -- See if the task needs a status update.
WS_JOB_EXEC_411,PROCEDURE,2527, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2528, If v_okay = 1 OR v_halted = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2529, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2530, -- Update the run record to indicate our final status
WS_JOB_EXEC_411,PROCEDURE,2531, -- If we have a halt then generate a message
WS_JOB_EXEC_411,PROCEDURE,2532, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2533, v_step := 2600;
WS_JOB_EXEC_411,PROCEDURE,2534, If v_halted = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2535, p_return_msg := 'Halted by dependency failure or halt';
WS_JOB_EXEC_411,PROCEDURE,2536, v_run_status := 'H';
WS_JOB_EXEC_411,PROCEDURE,2537, v_audit_status := NULL;
WS_JOB_EXEC_411,PROCEDURE,2538, End If;
WS_JOB_EXEC_411,PROCEDURE,2539, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2540, update ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,2541, set wtr_run_status = v_run_status,
WS_JOB_EXEC_411,PROCEDURE,2542, wtr_audit_status = v_audit_status,
WS_JOB_EXEC_411,PROCEDURE,2543, wtr_return_msg = p_return_msg,
WS_JOB_EXEC_411,PROCEDURE,2544, wtr_elapsed_hh = trunc(to_number(sysdate-wtr_started)*24,0),
WS_JOB_EXEC_411,PROCEDURE,2545, wtr_elapsed_mi = round(to_number(sysdate-wtr_started)*24*60,0) - (
WS_JOB_EXEC_411,PROCEDURE,2546, trunc(to_number(sysdate-wtr_started)*24,0)*60),
WS_JOB_EXEC_411,PROCEDURE,2547, wtr_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,2548, where wtr_task_key = v_TaskRec.wtr_task_key
WS_JOB_EXEC_411,PROCEDURE,2549, and wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2550, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2551, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,2552, ' failed in final update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_411,PROCEDURE,2553, v_taskRec.wtr_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,2554, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,2555, v_MsgText,SQLCODE,SQLERRM,0,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2556, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2557, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2558, END;
WS_JOB_EXEC_411,PROCEDURE,2559, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2560, End If; -- End of task record update
WS_JOB_EXEC_411,PROCEDURE,2561, ElsIf v_TaskRec.wtr_run_status = 'R' Then
WS_JOB_EXEC_411,PROCEDURE,2562, v_running_count := v_running_count + 1;
WS_JOB_EXEC_411,PROCEDURE,2563, ElsIf v_TaskRec.wtr_run_status = 'H' Then
WS_JOB_EXEC_411,PROCEDURE,2564, v_halted_count := v_halted_count + 1;
WS_JOB_EXEC_411,PROCEDURE,2565, ElsIf v_TaskRec.wtr_run_status = 'F' Then
WS_JOB_EXEC_411,PROCEDURE,2566, v_failed_count := v_failed_count + 1;
WS_JOB_EXEC_411,PROCEDURE,2567, ElsIf v_TaskRec.wtr_run_status = 'U' Then
WS_JOB_EXEC_411,PROCEDURE,2568, v_failed_count := v_failed_count + 1;
WS_JOB_EXEC_411,PROCEDURE,2569, End If; -- End of Waiting task if statement
WS_JOB_EXEC_411,PROCEDURE,2570, v_step := 2700;
WS_JOB_EXEC_411,PROCEDURE,2571, END LOOP; -- End of task Loop
WS_JOB_EXEC_411,PROCEDURE,2572,
WS_JOB_EXEC_411,PROCEDURE,2573, -- A task that we are ready to run will break out of the Task loop
WS_JOB_EXEC_411,PROCEDURE,2574, -- with the v_Process flag set, so proceed to process it.
WS_JOB_EXEC_411,PROCEDURE,2575, If v_Process = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2576, v_step := 2800;
WS_JOB_EXEC_411,PROCEDURE,2577,
WS_JOB_EXEC_411,PROCEDURE,2578, v_audit_task_id := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,2579, v_audit_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,2580, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2581, -- Work out the type of action and run the appropriate
WS_JOB_EXEC_411,PROCEDURE,2582, -- function.
WS_JOB_EXEC_411,PROCEDURE,2583, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2584, p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,2585, p_return_msg := 'Unhandled exception in action';
WS_JOB_EXEC_411,PROCEDURE,2586,
WS_JOB_EXEC_411,PROCEDURE,2587, v_bda_connect_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2588, v_is_hive_target := 0;
WS_JOB_EXEC_411,PROCEDURE,2589,
WS_JOB_EXEC_411,PROCEDURE,2590, -- Determine if there is any Hive target
WS_JOB_EXEC_411,PROCEDURE,2591, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2592, SELECT DISTINCT 1 INTO v_any_hive_targets FROM ws_dbc_connect
WS_JOB_EXEC_411,PROCEDURE,2593, JOIN ws_dbc_target ON dt_connect_key = dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2594, WHERE dc_db_type_ind = 8;
WS_JOB_EXEC_411,PROCEDURE,2595, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2596, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2597, v_any_hive_targets := 0;
WS_JOB_EXEC_411,PROCEDURE,2598, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2599, v_MsgText := 'Unhandled exception checking if there is any Hive target.';
WS_JOB_EXEC_411,PROCEDURE,2600, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2601, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2602, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2603, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2604, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2605, END;
WS_JOB_EXEC_411,PROCEDURE,2606,
WS_JOB_EXEC_411,PROCEDURE,2607, -- Get the BDA connection key for a BDA operation.
WS_JOB_EXEC_411,PROCEDURE,2608, -- There should be at most one key, otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,2609, -- Attention: lt_obj_key can also hold a job key! We need to explicitly exclude job keys as they can accidentally point to a Hive or Hadoop object
WS_JOB_EXEC_411,PROCEDURE,2610, If v_any_hive_targets = 1 and v_obj_type <> v_ws_obj_job Then
WS_JOB_EXEC_411,PROCEDURE,2611, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2612, SELECT bda.connect_key, bda.is_hive_target
WS_JOB_EXEC_411,PROCEDURE,2613, INTO v_bda_connect_key, v_is_hive_target
WS_JOB_EXEC_411,PROCEDURE,2614, FROM (
WS_JOB_EXEC_411,PROCEDURE,2615, -- Use key only for Apache, File and Script loads to send to BDA, other load types, e.g. ODBC, are treated as remote targets
WS_JOB_EXEC_411,PROCEDURE,2616, -- All Load tables using Apache Sqoop from Hive or Hadoop
WS_JOB_EXEC_411,PROCEDURE,2617, SELECT src_con.dc_obj_key connect_key, CASE WHEN tgt_con.dc_db_type_ind = 8 THEN 1 ELSE 0 END is_hive_target -- 8 = WS_DB_HIVE
WS_JOB_EXEC_411,PROCEDURE,2618, FROM ws_load_tab
WS_JOB_EXEC_411,PROCEDURE,2619, JOIN ws_dbc_connect src_con ON lt_connect_key = src_con.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2620, JOIN ws_obj_object ON lt_obj_key = oo_obj_key
WS_JOB_EXEC_411,PROCEDURE,2621, LEFT JOIN ws_dbc_target ON oo_target_key = dt_target_key
WS_JOB_EXEC_411,PROCEDURE,2622, LEFT JOIN ws_dbc_connect tgt_con ON dt_connect_key = tgt_con.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2623, WHERE lt_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2624, AND (lt_type = 'A' AND (src_con.dc_db_type_ind = 8 OR src_con.dc_type = 'H')) -- A = Apache Sqoop Load, 8 = WS_DB_HIVE, H = Hadoop
WS_JOB_EXEC_411,PROCEDURE,2625, UNION ALL
WS_JOB_EXEC_411,PROCEDURE,2626, -- All other non-Script-based Load tables with Hive targets
WS_JOB_EXEC_411,PROCEDURE,2627, SELECT CASE WHEN lt_type IN ('A','F','D') THEN tgt_con.dc_obj_key ELSE 0 END connect_key, 1 is_hive_target
WS_JOB_EXEC_411,PROCEDURE,2628, FROM ws_load_tab
WS_JOB_EXEC_411,PROCEDURE,2629, JOIN ws_dbc_connect src_con ON lt_connect_key = src_con.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2630, JOIN ws_obj_object ON lt_obj_key = oo_obj_key
WS_JOB_EXEC_411,PROCEDURE,2631, JOIN ws_dbc_target ON oo_target_key = dt_target_key
WS_JOB_EXEC_411,PROCEDURE,2632, JOIN ws_dbc_connect tgt_con ON dt_connect_key = tgt_con.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2633, WHERE lt_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2634, AND NOT (lt_type = 'A' AND (src_con.dc_db_type_ind = 8 OR src_con.dc_type = 'H')) -- A = Apache Sqoop Load, 8 = WS_DB_HIVE, H = Hadoop
WS_JOB_EXEC_411,PROCEDURE,2635, AND tgt_con.dc_db_type_ind = 8 -- 8 = WS_DB_HIVE
WS_JOB_EXEC_411,PROCEDURE,2636, UNION ALL
WS_JOB_EXEC_411,PROCEDURE,2637, -- All other non-Load tables with Hive targets, except Script-based exports
WS_JOB_EXEC_411,PROCEDURE,2638, SELECT tgt_con.dc_obj_key connect_key, 1 is_hive_target
WS_JOB_EXEC_411,PROCEDURE,2639, FROM ws_obj_object
WS_JOB_EXEC_411,PROCEDURE,2640, JOIN ws_dbc_target ON oo_target_key = dt_target_key
WS_JOB_EXEC_411,PROCEDURE,2641, JOIN ws_dbc_connect tgt_con ON dt_connect_key = tgt_con.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2642, WHERE oo_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2643, AND oo_type_key <> v_ws_obj_load
WS_JOB_EXEC_411,PROCEDURE,2644, AND NOT (oo_type_key = v_ws_obj_export AND (SELECT et_type from ws_export_tab WHERE et_obj_key = oo_obj_key) = 'S')
WS_JOB_EXEC_411,PROCEDURE,2645, AND tgt_con.dc_db_type_ind = 8 -- 8 = WS_DB_HIVE
WS_JOB_EXEC_411,PROCEDURE,2646, ) bda;
WS_JOB_EXEC_411,PROCEDURE,2647,
WS_JOB_EXEC_411,PROCEDURE,2648, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2649, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2650, v_bda_connect_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2651, v_is_hive_target := 0;
WS_JOB_EXEC_411,PROCEDURE,2652,
WS_JOB_EXEC_411,PROCEDURE,2653, WHEN TOO_MANY_ROWS THEN
WS_JOB_EXEC_411,PROCEDURE,2654, v_MsgText := 'Multiple BDA connection keys found for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2655,
WS_JOB_EXEC_411,PROCEDURE,2656, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2657, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2658, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2659, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2660, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2661,
WS_JOB_EXEC_411,PROCEDURE,2662, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2663, v_MsgText := 'Unhandled exception checking if job is a BDA operation: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2664,
WS_JOB_EXEC_411,PROCEDURE,2665, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2666, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2667, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2668, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2669, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2670,
WS_JOB_EXEC_411,PROCEDURE,2671, END;
WS_JOB_EXEC_411,PROCEDURE,2672, END IF;
WS_JOB_EXEC_411,PROCEDURE,2673, -- Determine if the job is an MSAS Tabular operation.
WS_JOB_EXEC_411,PROCEDURE,2674, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2675, SELECT 1
WS_JOB_EXEC_411,PROCEDURE,2676, INTO v_is_msas_tabular_target
WS_JOB_EXEC_411,PROCEDURE,2677, FROM ws_obj_object
WS_JOB_EXEC_411,PROCEDURE,2678, JOIN ws_dbc_target ON oo_target_key = dt_target_key
WS_JOB_EXEC_411,PROCEDURE,2679, JOIN ws_dbc_connect ON dt_connect_key = dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2680, WHERE oo_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2681, AND dc_db_type_ind = 12; -- 12 = WS_DB_MSASTABULAR
WS_JOB_EXEC_411,PROCEDURE,2682, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2683, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2684, v_is_msas_tabular_target := 0;
WS_JOB_EXEC_411,PROCEDURE,2685, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2686, v_MsgText := 'Unhandled exception checking if job is an MSAS Tabular operation: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2687, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2688, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2689, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2690, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2691, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2692, END;
WS_JOB_EXEC_411,PROCEDURE,2693,
WS_JOB_EXEC_411,PROCEDURE,2694, -- Determine if the job requires on-the-fly Create DDL template evaluation.
WS_JOB_EXEC_411,PROCEDURE,2695, v_is_template_ddl_target := 0;
WS_JOB_EXEC_411,PROCEDURE,2696, IF v_action_type = v_ws_act_create
WS_JOB_EXEC_411,PROCEDURE,2697, THEN
WS_JOB_EXEC_411,PROCEDURE,2698, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2699, SELECT 1
WS_JOB_EXEC_411,PROCEDURE,2700, INTO v_is_template_ddl_target
WS_JOB_EXEC_411,PROCEDURE,2701, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,2702, WHERE ta_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2703, AND ta_type = 'L'
WS_JOB_EXEC_411,PROCEDURE,2704, AND ( v_ws_create_ddl_type = ta_ind_1
WS_JOB_EXEC_411,PROCEDURE,2705, OR v_ws_create_ddl_type = ta_ind_2
WS_JOB_EXEC_411,PROCEDURE,2706, OR v_ws_create_ddl_type = ta_ind_3
WS_JOB_EXEC_411,PROCEDURE,2707, OR v_ws_create_ddl_type = ta_ind_4
WS_JOB_EXEC_411,PROCEDURE,2708, OR v_ws_create_ddl_type = ta_ind_5
WS_JOB_EXEC_411,PROCEDURE,2709, OR v_ws_create_ddl_type = ta_ind_6
WS_JOB_EXEC_411,PROCEDURE,2710, OR v_ws_create_ddl_type = ta_ind_7
WS_JOB_EXEC_411,PROCEDURE,2711, OR v_ws_create_ddl_type = ta_ind_8
WS_JOB_EXEC_411,PROCEDURE,2712, OR v_ws_create_ddl_type = ta_ind_9
WS_JOB_EXEC_411,PROCEDURE,2713, OR v_ws_create_ddl_type = ta_ind_10
WS_JOB_EXEC_411,PROCEDURE,2714, OR v_ws_create_ddl_type = ta_ind_11
WS_JOB_EXEC_411,PROCEDURE,2715, OR v_ws_create_ddl_type = ta_ind_12
WS_JOB_EXEC_411,PROCEDURE,2716, )
WS_JOB_EXEC_411,PROCEDURE,2717, ;
WS_JOB_EXEC_411,PROCEDURE,2718, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2719, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2720, v_is_template_ddl_target := 0;
WS_JOB_EXEC_411,PROCEDURE,2721, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2722, v_MsgText := 'Unhandled exception checking if job requires on-the-fly template DDL evaluation: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2723, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2724, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2725, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2726, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2727, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2728, END;
WS_JOB_EXEC_411,PROCEDURE,2729,
WS_JOB_EXEC_411,PROCEDURE,2730, -- override DDL trumps on-the-fly DDL template
WS_JOB_EXEC_411,PROCEDURE,2731, IF v_is_template_ddl_target = 1
WS_JOB_EXEC_411,PROCEDURE,2732, THEN
WS_JOB_EXEC_411,PROCEDURE,2733, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2734, SELECT NVL(ta_text_1, '')
WS_JOB_EXEC_411,PROCEDURE,2735, INTO v_work
WS_JOB_EXEC_411,PROCEDURE,2736, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,2737, WHERE ta_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2738, AND ta_type = 'D'
WS_JOB_EXEC_411,PROCEDURE,2739, ;
WS_JOB_EXEC_411,PROCEDURE,2740, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2741, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2742, v_work := '';
WS_JOB_EXEC_411,PROCEDURE,2743, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2744, v_MsgText := 'Unhandled exception checking if job uses override DDL: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2745, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2746, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2747, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2748, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2749, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2750, END;
WS_JOB_EXEC_411,PROCEDURE,2751, IF TRIM(v_work) IS NOT NULL THEN
WS_JOB_EXEC_411,PROCEDURE,2752, v_is_template_ddl_target := 0;
WS_JOB_EXEC_411,PROCEDURE,2753, END IF;
WS_JOB_EXEC_411,PROCEDURE,2754, END IF;
WS_JOB_EXEC_411,PROCEDURE,2755, END IF;
WS_JOB_EXEC_411,PROCEDURE,2756,
WS_JOB_EXEC_411,PROCEDURE,2757, If v_bda_connect_key > 0 And v_is_hive_target = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2758, v_step := 2850;
WS_JOB_EXEC_411,PROCEDURE,2759,
WS_JOB_EXEC_411,PROCEDURE,2760, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2761, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,2762, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,2763, po_result_msg := 'BDA Server task with Hive target';
WS_JOB_EXEC_411,PROCEDURE,2764, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2765, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,2766, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,2767, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,2768, po_result_code := 90;
WS_JOB_EXEC_411,PROCEDURE,2769,
WS_JOB_EXEC_411,PROCEDURE,2770, -- Put BDA connection settings into task data (used by the Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,2771, -- There should be at most one record, otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,2772, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2773,
WS_JOB_EXEC_411,PROCEDURE,2774, SELECT ta_text_1
WS_JOB_EXEC_411,PROCEDURE,2775, INTO v_task_data
WS_JOB_EXEC_411,PROCEDURE,2776, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,2777, WHERE ta_obj_key = v_bda_connect_key AND ta_type = 'B';
WS_JOB_EXEC_411,PROCEDURE,2778,
WS_JOB_EXEC_411,PROCEDURE,2779, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2780, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2781, v_task_data := '';
WS_JOB_EXEC_411,PROCEDURE,2782,
WS_JOB_EXEC_411,PROCEDURE,2783, WHEN TOO_MANY_ROWS THEN
WS_JOB_EXEC_411,PROCEDURE,2784, v_MsgText := 'Multiple BDA connection parameters found for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2785,
WS_JOB_EXEC_411,PROCEDURE,2786, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2787, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2788, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2789, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2790, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2791,
WS_JOB_EXEC_411,PROCEDURE,2792, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2793, v_MsgText := 'Unhandled exception getting BDA connection parameters for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2794,
WS_JOB_EXEC_411,PROCEDURE,2795, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2796, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2797, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2798, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2799, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2800,
WS_JOB_EXEC_411,PROCEDURE,2801, END;
WS_JOB_EXEC_411,PROCEDURE,2802,
WS_JOB_EXEC_411,PROCEDURE,2803, -- Put the BDA connection key into task data (used by the Windows Scheduler).
WS_JOB_EXEC_411,PROCEDURE,2804, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,2805, || 'SCH_BDA_ConnectKey[WSH]' || TO_CHAR(v_bda_connect_key) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,2806,
WS_JOB_EXEC_411,PROCEDURE,2807, -- Put the object key and action type into task data (used by the Windows Scheduler and Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,2808, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,2809, || 'SCH_BDA_ObjKey[WSH]' || TO_CHAR(v_obj_key) || '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,2810, || 'SCH_BDA_Action[WSH]' || TO_CHAR(v_action_type) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,2811,
WS_JOB_EXEC_411,PROCEDURE,2812, -- Put the shared secret timestamp and base64 bytes into task data.
WS_JOB_EXEC_411,PROCEDURE,2813, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2814, SELECT ta_val_1 AS secret_id, ta_text_1 AS secret_text
WS_JOB_EXEC_411,PROCEDURE,2815, INTO v_secret_id, v_secret_text
WS_JOB_EXEC_411,PROCEDURE,2816, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,2817, WHERE ta_type = 'Z'
WS_JOB_EXEC_411,PROCEDURE,2818, AND ta_obj_key = 0;
WS_JOB_EXEC_411,PROCEDURE,2819,
WS_JOB_EXEC_411,PROCEDURE,2820, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2821, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2822, v_MsgText := 'No shared secret for BDA connection found for job: ' || pi_job_name || '.';
WS_JOB_EXEC_411,PROCEDURE,2823, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2824, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2825, v_secret_id := 0;
WS_JOB_EXEC_411,PROCEDURE,2826, v_secret_text := '';
WS_JOB_EXEC_411,PROCEDURE,2827,
WS_JOB_EXEC_411,PROCEDURE,2828, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2829, v_MsgText := 'Unhandled exception getting shared secret for BDA connection for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2830,
WS_JOB_EXEC_411,PROCEDURE,2831, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2832, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2833, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2834, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2835, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2836,
WS_JOB_EXEC_411,PROCEDURE,2837, END;
WS_JOB_EXEC_411,PROCEDURE,2838,
WS_JOB_EXEC_411,PROCEDURE,2839, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,2840, || 'SCH_BDA_SecretId[WSH]' || TO_CHAR(v_secret_id) || '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,2841, || 'SCH_BDA_Secret[WSH]' || TRIM(v_secret_text) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,2842,
WS_JOB_EXEC_411,PROCEDURE,2843, po_task_data := v_task_data;
WS_JOB_EXEC_411,PROCEDURE,2844,
WS_JOB_EXEC_411,PROCEDURE,2845, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2846, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,2847, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2848, v_step := 2860;
WS_JOB_EXEC_411,PROCEDURE,2849, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2850, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,2851, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,2852, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2853, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,2854, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,2855, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,2856, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,2857, End If;
WS_JOB_EXEC_411,PROCEDURE,2858, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2859, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2860, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,2861, END;
WS_JOB_EXEC_411,PROCEDURE,2862, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2863,
WS_JOB_EXEC_411,PROCEDURE,2864, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2865, -- Treat other Hive Loads, e.g. ODBC loads as external objects
WS_JOB_EXEC_411,PROCEDURE,2866, -- Process tables with MSAS Tabular targets as external objects
WS_JOB_EXEC_411,PROCEDURE,2867, -- Process tables with on-the-fly template DDL as external objects
WS_JOB_EXEC_411,PROCEDURE,2868, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2869, ElsIf v_is_hive_target = 1 Or v_is_msas_tabular_target = 1 OR v_is_template_ddl_target = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2870,
WS_JOB_EXEC_411,PROCEDURE,2871, v_step := 2870;
WS_JOB_EXEC_411,PROCEDURE,2872,
WS_JOB_EXEC_411,PROCEDURE,2873, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2874, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,2875, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,2876, po_result_code := 18;
WS_JOB_EXEC_411,PROCEDURE,2877, If v_is_hive_target = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2878, po_result_msg := 'Other Load with Hive target';
WS_JOB_EXEC_411,PROCEDURE,2879, ElsIf v_is_msas_tabular_target = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2880, po_result_msg := 'Table operation with MSAS Tabular target';
WS_JOB_EXEC_411,PROCEDURE,2881, ElsIf v_is_template_ddl_target = 1 Then
WS_JOB_EXEC_411,PROCEDURE,2882, po_result_msg := 'Table operation with template DDL';
WS_JOB_EXEC_411,PROCEDURE,2883, po_result_code := 22;
WS_JOB_EXEC_411,PROCEDURE,2884, Else
WS_JOB_EXEC_411,PROCEDURE,2885, -- We should never get this message
WS_JOB_EXEC_411,PROCEDURE,2886, po_result_msg := 'External object table operation';
WS_JOB_EXEC_411,PROCEDURE,2887, End If;
WS_JOB_EXEC_411,PROCEDURE,2888, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2889, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,2890, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,2891, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,2892,
WS_JOB_EXEC_411,PROCEDURE,2893, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2894, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,2895, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,2896, v_step := 2880;
WS_JOB_EXEC_411,PROCEDURE,2897, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2898, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,2899, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,2900, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,2901, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,2902, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,2903, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,2904, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,2905, End If;
WS_JOB_EXEC_411,PROCEDURE,2906, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,2907, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2908, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,2909, END;
WS_JOB_EXEC_411,PROCEDURE,2910, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2911, END IF;
WS_JOB_EXEC_411,PROCEDURE,2912,
WS_JOB_EXEC_411,PROCEDURE,2913, IF v_obj_type <> v_ws_obj_job Then
WS_JOB_EXEC_411,PROCEDURE,2914, -- ====================================================
WS_JOB_EXEC_411,PROCEDURE,2915, -- Determine if need to return to caller due to being
WS_JOB_EXEC_411,PROCEDURE,2916, -- an external object
WS_JOB_EXEC_411,PROCEDURE,2917, -- ====================================================
WS_JOB_EXEC_411,PROCEDURE,2918, IF v_obj_type = v_ws_obj_source_mapping Then
WS_JOB_EXEC_411,PROCEDURE,2919, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2920, SELECT NVL(ws_obj_object.oo_target_key, 0)
WS_JOB_EXEC_411,PROCEDURE,2921, , NVL(ws_dbc_connect.dc_db_type_ind, 5) -- Presume local
WS_JOB_EXEC_411,PROCEDURE,2922, INTO v_target_key
WS_JOB_EXEC_411,PROCEDURE,2923, , v_target_db_type
WS_JOB_EXEC_411,PROCEDURE,2924, FROM ws_source_mapping_tab
WS_JOB_EXEC_411,PROCEDURE,2925, JOIN ws_obj_object ON ws_source_mapping_tab.smt_parent_obj_key = ws_obj_object.oo_obj_key
WS_JOB_EXEC_411,PROCEDURE,2926, LEFT JOIN ws_dbc_target ON ws_obj_object.oo_target_key = ws_dbc_target.dt_target_key
WS_JOB_EXEC_411,PROCEDURE,2927, LEFT JOIN ws_dbc_connect ON ws_dbc_target.dt_connect_key = ws_dbc_connect.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2928, WHERE ws_source_mapping_tab.smt_source_mapping_key = v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,2929,
WS_JOB_EXEC_411,PROCEDURE,2930, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2931, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2932, v_target_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2933, v_target_db_type := 0;
WS_JOB_EXEC_411,PROCEDURE,2934,
WS_JOB_EXEC_411,PROCEDURE,2935, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2936, v_MsgText := 'Unhandled exception getting target database type for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2937,
WS_JOB_EXEC_411,PROCEDURE,2938, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2939, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2940, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2941, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2942, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2943, END;
WS_JOB_EXEC_411,PROCEDURE,2944, Else
WS_JOB_EXEC_411,PROCEDURE,2945, BEGIN
WS_JOB_EXEC_411,PROCEDURE,2946, SELECT NVL(ws_obj_object.oo_target_key, 0)
WS_JOB_EXEC_411,PROCEDURE,2947, , NVL(ws_dbc_connect.dc_db_type_ind, 5) -- Presume local
WS_JOB_EXEC_411,PROCEDURE,2948, INTO v_target_key
WS_JOB_EXEC_411,PROCEDURE,2949, , v_target_db_type
WS_JOB_EXEC_411,PROCEDURE,2950, FROM ws_obj_object
WS_JOB_EXEC_411,PROCEDURE,2951, LEFT JOIN ws_dbc_target ON ws_obj_object.oo_target_key = ws_dbc_target.dt_target_key
WS_JOB_EXEC_411,PROCEDURE,2952, LEFT JOIN ws_dbc_connect ON ws_dbc_target.dt_connect_key = ws_dbc_connect.dc_obj_key
WS_JOB_EXEC_411,PROCEDURE,2953, WHERE (ws_obj_object.oo_obj_key = v_obj_key AND ws_obj_object.oo_type_key <> v_ws_obj_export)
WS_JOB_EXEC_411,PROCEDURE,2954, OR UPPER(ws_obj_object.oo_name) IN (
WS_JOB_EXEC_411,PROCEDURE,2955, SELECT DISTINCT UPPER(ws_export_col.ec_src_table)
WS_JOB_EXEC_411,PROCEDURE,2956, FROM ws_export_col
WS_JOB_EXEC_411,PROCEDURE,2957, WHERE ws_export_col.ec_obj_key = v_obj_key
WS_JOB_EXEC_411,PROCEDURE,2958, );
WS_JOB_EXEC_411,PROCEDURE,2959,
WS_JOB_EXEC_411,PROCEDURE,2960, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,2961, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,2962, v_target_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2963, v_target_db_type := 0;
WS_JOB_EXEC_411,PROCEDURE,2964,
WS_JOB_EXEC_411,PROCEDURE,2965, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,2966, v_MsgText := 'Unhandled exception getting target database type for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,2967,
WS_JOB_EXEC_411,PROCEDURE,2968, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,2969, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,2970, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,2971, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,2972, RETURN;
WS_JOB_EXEC_411,PROCEDURE,2973, END;
WS_JOB_EXEC_411,PROCEDURE,2974, END IF;
WS_JOB_EXEC_411,PROCEDURE,2975,
WS_JOB_EXEC_411,PROCEDURE,2976, -- we can only process target here if type for local Oracle;
WS_JOB_EXEC_411,PROCEDURE,2977, -- something else (like Custom) needs to go to Odl
WS_JOB_EXEC_411,PROCEDURE,2978, -- TODO: remote Oracle target job also needs to go to Odl but
WS_JOB_EXEC_411,PROCEDURE,2979, -- currently remote targets not supported for Oracle
WS_JOB_EXEC_411,PROCEDURE,2980, If (v_target_key <> 0) AND (v_target_db_type <> 0) AND (v_target_db_type <> 5) Then
WS_JOB_EXEC_411,PROCEDURE,2981,
WS_JOB_EXEC_411,PROCEDURE,2982, -- If this execute is for an external object
WS_JOB_EXEC_411,PROCEDURE,2983, -- return value of 18
WS_JOB_EXEC_411,PROCEDURE,2984, -- passed back to the scheduler and let it do the processing
WS_JOB_EXEC_411,PROCEDURE,2985, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,2986, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,2987, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,2988, po_result_msg := 'External Object';
WS_JOB_EXEC_411,PROCEDURE,2989, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,2990, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,2991, po_result_code := 18;
WS_JOB_EXEC_411,PROCEDURE,2992, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,2993, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,2994,
WS_JOB_EXEC_411,PROCEDURE,2995, If v_bda_connect_key > 0 Then
WS_JOB_EXEC_411,PROCEDURE,2996, po_result_msg := po_result_msg + ' as BDA Server task with non-Hive target';
WS_JOB_EXEC_411,PROCEDURE,2997,
WS_JOB_EXEC_411,PROCEDURE,2998, -- Dont need to put BDA connection settings into task data (only used by the Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,2999, v_task_data := '';
WS_JOB_EXEC_411,PROCEDURE,3000,
WS_JOB_EXEC_411,PROCEDURE,3001, -- Put the BDA connection key into task data (used by the Windows Scheduler).
WS_JOB_EXEC_411,PROCEDURE,3002, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,3003, + 'SCH_BDA_ConnectKey[WSH]' + TO_CHAR(v_bda_connect_key) + '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,3004,
WS_JOB_EXEC_411,PROCEDURE,3005, -- Put the object key and action type into task data (used by the Windows Scheduler and Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,3006, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,3007, + 'SCH_BDA_ObjKey[WSH]' + TO_CHAR(v_obj_key) + '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,3008, + 'SCH_BDA_Action[WSH]' + TO_CHAR(v_action_type) + '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,3009,
WS_JOB_EXEC_411,PROCEDURE,3010, po_task_data := v_task_data;
WS_JOB_EXEC_411,PROCEDURE,3011, END IF;
WS_JOB_EXEC_411,PROCEDURE,3012,
WS_JOB_EXEC_411,PROCEDURE,3013, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3014, --Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3015, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3016, v_step := 2890;
WS_JOB_EXEC_411,PROCEDURE,3017, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3018, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3019, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3020, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3021, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3022, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3023, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3024, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3025, End If;
WS_JOB_EXEC_411,PROCEDURE,3026, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3027, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3028, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3029, END;
WS_JOB_EXEC_411,PROCEDURE,3030, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3031, END IF;
WS_JOB_EXEC_411,PROCEDURE,3032, END IF;
WS_JOB_EXEC_411,PROCEDURE,3033,
WS_JOB_EXEC_411,PROCEDURE,3034, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3035, -- E X E C U T E
WS_JOB_EXEC_411,PROCEDURE,3036, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3037, If v_action_type = v_ws_act_execute then
WS_JOB_EXEC_411,PROCEDURE,3038, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3039, -- E X E C U T E C U B E
WS_JOB_EXEC_411,PROCEDURE,3040, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3041, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3042, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3043, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3044, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3045, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3046, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3047, -- return value of 8
WS_JOB_EXEC_411,PROCEDURE,3048, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3049, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3050, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3051, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3052, po_result_msg := 'cube execute';
WS_JOB_EXEC_411,PROCEDURE,3053, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3054, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3055, po_result_code := 8;
WS_JOB_EXEC_411,PROCEDURE,3056, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3057, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3058, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3059, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3060, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3061, v_step := 2900;
WS_JOB_EXEC_411,PROCEDURE,3062, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3063, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3064, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3065, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3066, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3067, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3068, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3069, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3070, End If;
WS_JOB_EXEC_411,PROCEDURE,3071, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3072, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3073, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3074, END;
WS_JOB_EXEC_411,PROCEDURE,3075, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3076, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3077, -- E X E C U T E P R O C E D U R E
WS_JOB_EXEC_411,PROCEDURE,3078, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3079, ElsIf v_obj_type = v_ws_obj_procedure
WS_JOB_EXEC_411,PROCEDURE,3080, THEN
WS_JOB_EXEC_411,PROCEDURE,3081, SELECT NVL(ph_type,'P')
WS_JOB_EXEC_411,PROCEDURE,3082, INTO v_procedure_type
WS_JOB_EXEC_411,PROCEDURE,3083, FROM ws_pro_header
WS_JOB_EXEC_411,PROCEDURE,3084, WHERE ph_obj_key = v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3085,
WS_JOB_EXEC_411,PROCEDURE,3086, v_step := 3000;
WS_JOB_EXEC_411,PROCEDURE,3087,
WS_JOB_EXEC_411,PROCEDURE,3088, IF v_procedure_type = 'B'
WS_JOB_EXEC_411,PROCEDURE,3089, THEN
WS_JOB_EXEC_411,PROCEDURE,3090,
WS_JOB_EXEC_411,PROCEDURE,3091, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3092, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3093, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3094, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,3095, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3096, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3097, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3098, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3099, po_result_code := 16;
WS_JOB_EXEC_411,PROCEDURE,3100,
WS_JOB_EXEC_411,PROCEDURE,3101, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3102, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3103, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3104, v_step := 3100;
WS_JOB_EXEC_411,PROCEDURE,3105, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3106, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3107, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3108, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3109, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3110, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3111, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3112, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3113, End If;
WS_JOB_EXEC_411,PROCEDURE,3114, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3115, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3116, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3117, END;
WS_JOB_EXEC_411,PROCEDURE,3118, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3119, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,3120,
WS_JOB_EXEC_411,PROCEDURE,3121, -- Normal Procedure
WS_JOB_EXEC_411,PROCEDURE,3122, v_result := ws_act_execute(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3123, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3124, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3125, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3126, -- E X E C U T E S C R I P T
WS_JOB_EXEC_411,PROCEDURE,3127, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3128, ElsIf v_obj_type = v_ws_obj_script Then
WS_JOB_EXEC_411,PROCEDURE,3129, v_result := ws_act_host_script(p_sequence,v_obj_type,v_action_type,v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3130, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3131, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3132, -- If script build worked then skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3133, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_411,PROCEDURE,3134, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,3135, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3136, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3137, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3138, po_result_msg := 'execute script';
WS_JOB_EXEC_411,PROCEDURE,3139, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,3140, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3141, po_result_code := 2;
WS_JOB_EXEC_411,PROCEDURE,3142, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3143, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3144, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3145, End If;
WS_JOB_EXEC_411,PROCEDURE,3146, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3147, -- E X E C U T E U N S U P P O R T E D
WS_JOB_EXEC_411,PROCEDURE,3148, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3149, Else
WS_JOB_EXEC_411,PROCEDURE,3150, v_MsgText := 'Job '||p_task_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,3151, ' could not perform action. Unsupported action '||
WS_JOB_EXEC_411,PROCEDURE,3152, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_411,PROCEDURE,3153, v_result := WsWrkAudit('E',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3154, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3155, p_status_code := -2;
WS_JOB_EXEC_411,PROCEDURE,3156, p_return_msg := 'Unsupported action '||
WS_JOB_EXEC_411,PROCEDURE,3157, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_411,PROCEDURE,3158, v_result := 1;
WS_JOB_EXEC_411,PROCEDURE,3159, End If;
WS_JOB_EXEC_411,PROCEDURE,3160, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3161, -- L O A D
WS_JOB_EXEC_411,PROCEDURE,3162, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3163, ElsIf v_action_type = v_ws_act_load then
WS_JOB_EXEC_411,PROCEDURE,3164, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3165, -- R E T R O L O A D
WS_JOB_EXEC_411,PROCEDURE,3166, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3167, If v_obj_type = v_ws_obj_retro_copy Then
WS_JOB_EXEC_411,PROCEDURE,3168,
WS_JOB_EXEC_411,PROCEDURE,3169, -- If this a Retrofit ODBC based load then
WS_JOB_EXEC_411,PROCEDURE,3170, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3171, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3172, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3173, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3174, po_result_msg := 'retro table';
WS_JOB_EXEC_411,PROCEDURE,3175, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3176, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3177, po_result_code := 13;
WS_JOB_EXEC_411,PROCEDURE,3178, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3179, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3180, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3181, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3182, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3183, v_step := 3200;
WS_JOB_EXEC_411,PROCEDURE,3184, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3185, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3186, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3187, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3188, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3189, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3190, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3191, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3192, End If;
WS_JOB_EXEC_411,PROCEDURE,3193, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3194, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3195, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3196, END;
WS_JOB_EXEC_411,PROCEDURE,3197, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3198,
WS_JOB_EXEC_411,PROCEDURE,3199, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3200, -- L O A D O B J E C T L O A D
WS_JOB_EXEC_411,PROCEDURE,3201, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3202, Else
WS_JOB_EXEC_411,PROCEDURE,3203, v_result := ws_act_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3204, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3205, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3206, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3207, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,3208, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,3209, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3210, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3211, ElsIf p_status_code <> 2 Then
WS_JOB_EXEC_411,PROCEDURE,3212, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3213, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3214, End If;
WS_JOB_EXEC_411,PROCEDURE,3215, -- If this load requires a host script then we will have a
WS_JOB_EXEC_411,PROCEDURE,3216, -- return value of 2
WS_JOB_EXEC_411,PROCEDURE,3217, -- If script build worked then skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3218, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_411,PROCEDURE,3219, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3220, If v_result = 2 Then
WS_JOB_EXEC_411,PROCEDURE,3221, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3222, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3223, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3224, po_result_msg := 'load table';
WS_JOB_EXEC_411,PROCEDURE,3225, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,3226, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3227, po_result_code := 2;
WS_JOB_EXEC_411,PROCEDURE,3228, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3229, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3230, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3231, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3232, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3233, v_step := 3300;
WS_JOB_EXEC_411,PROCEDURE,3234, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3235, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3236, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3237, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3238, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3239, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3240, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3241, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3242, End If;
WS_JOB_EXEC_411,PROCEDURE,3243, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3244, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3245, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3246, END;
WS_JOB_EXEC_411,PROCEDURE,3247, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3248, -- If this load requires an ODBC based load then we will have a
WS_JOB_EXEC_411,PROCEDURE,3249, -- return value of 3
WS_JOB_EXEC_411,PROCEDURE,3250, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3251, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3252, ElsIf v_result = 3 Then
WS_JOB_EXEC_411,PROCEDURE,3253, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3254, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3255, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3256, po_result_msg := 'load table';
WS_JOB_EXEC_411,PROCEDURE,3257, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3258, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3259, po_result_code := 3;
WS_JOB_EXEC_411,PROCEDURE,3260, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3261, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3262, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3263, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3264, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3265, v_step := 3400;
WS_JOB_EXEC_411,PROCEDURE,3266, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3267, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3268, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3269, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3270, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3271, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3272, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3273, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3274, End If;
WS_JOB_EXEC_411,PROCEDURE,3275, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3276, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3277, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3278, END;
WS_JOB_EXEC_411,PROCEDURE,3279, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3280, -- If this load requires a Native ODBC based load then we will have a return value of 12
WS_JOB_EXEC_411,PROCEDURE,3281, -- If this load requires a SSIS based load then we will have a return value of 14
WS_JOB_EXEC_411,PROCEDURE,3282, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3283, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3284, ElsIf v_result = 12
WS_JOB_EXEC_411,PROCEDURE,3285, OR v_result = 14 Then
WS_JOB_EXEC_411,PROCEDURE,3286, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3287, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3288, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3289, po_result_msg := 'load table';
WS_JOB_EXEC_411,PROCEDURE,3290, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3291, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3292, po_result_code := v_result;
WS_JOB_EXEC_411,PROCEDURE,3293, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3294, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3295, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3296, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3297, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3298, v_step := 3500;
WS_JOB_EXEC_411,PROCEDURE,3299, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3300, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3301, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3302, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3303, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3304, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3305, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3306, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3307, End If;
WS_JOB_EXEC_411,PROCEDURE,3308, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3309, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3310, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3311, END;
WS_JOB_EXEC_411,PROCEDURE,3312, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3313,
WS_JOB_EXEC_411,PROCEDURE,3314, -- If this load is a BDA Server operation with non-Hive target
WS_JOB_EXEC_411,PROCEDURE,3315, -- then we will have a return value of 91
WS_JOB_EXEC_411,PROCEDURE,3316, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3317, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3318, ElsIf v_result = 91 Then
WS_JOB_EXEC_411,PROCEDURE,3319, v_step := 3550;
WS_JOB_EXEC_411,PROCEDURE,3320,
WS_JOB_EXEC_411,PROCEDURE,3321, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3322, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3323, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3324, po_result_msg := p_return_msg || ' with non-Hive target';
WS_JOB_EXEC_411,PROCEDURE,3325, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,3326, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3327, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3328, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3329, po_result_code := 91;
WS_JOB_EXEC_411,PROCEDURE,3330,
WS_JOB_EXEC_411,PROCEDURE,3331, -- Put BDA connection settings into task data (used by the Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,3332, -- There should be at most one record, otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,3333, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3334,
WS_JOB_EXEC_411,PROCEDURE,3335, SELECT ta_text_1
WS_JOB_EXEC_411,PROCEDURE,3336, INTO v_task_data
WS_JOB_EXEC_411,PROCEDURE,3337, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,3338, WHERE ta_obj_key = v_bda_connect_key AND ta_type = 'B';
WS_JOB_EXEC_411,PROCEDURE,3339,
WS_JOB_EXEC_411,PROCEDURE,3340, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,3341, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,3342, v_task_data := '';
WS_JOB_EXEC_411,PROCEDURE,3343,
WS_JOB_EXEC_411,PROCEDURE,3344, WHEN TOO_MANY_ROWS THEN
WS_JOB_EXEC_411,PROCEDURE,3345, v_MsgText := 'Multiple BDA connection parameters found for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,3346,
WS_JOB_EXEC_411,PROCEDURE,3347, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,3348, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,3349, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3350, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,3351, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3352,
WS_JOB_EXEC_411,PROCEDURE,3353, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3354, v_MsgText := 'Unhandled exception getting BDA connection parameters for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,3355,
WS_JOB_EXEC_411,PROCEDURE,3356, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,3357, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,3358, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3359, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,3360, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3361,
WS_JOB_EXEC_411,PROCEDURE,3362, END;
WS_JOB_EXEC_411,PROCEDURE,3363,
WS_JOB_EXEC_411,PROCEDURE,3364, -- Put the BDA connection key into task data (used by the Windows Scheduler).
WS_JOB_EXEC_411,PROCEDURE,3365, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,3366, || 'SCH_BDA_ConnectKey[WSH]' || TO_CHAR(v_bda_connect_key) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,3367,
WS_JOB_EXEC_411,PROCEDURE,3368, -- Put the object key and action type into task data (used by the Windows Scheduler and Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,3369, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,3370, || 'SCH_BDA_ObjKey[WSH]' || TO_CHAR(v_obj_key) || '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,3371, || 'SCH_BDA_Action[WSH]' || TO_CHAR(v_action_type) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,3372,
WS_JOB_EXEC_411,PROCEDURE,3373, -- Put the shared secret timestamp and base64 bytes into task data.
WS_JOB_EXEC_411,PROCEDURE,3374, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3375, SELECT ta_val_1 AS secret_id, ta_text_1 AS secret_text
WS_JOB_EXEC_411,PROCEDURE,3376, INTO v_secret_id, v_secret_text
WS_JOB_EXEC_411,PROCEDURE,3377, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,3378, WHERE ta_type = 'Z'
WS_JOB_EXEC_411,PROCEDURE,3379, AND ta_obj_key = 0;
WS_JOB_EXEC_411,PROCEDURE,3380,
WS_JOB_EXEC_411,PROCEDURE,3381, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,3382, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,3383, v_MsgText := 'No shared secret for BDA connection found for job: ' || pi_job_name || '.';
WS_JOB_EXEC_411,PROCEDURE,3384, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,3385, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3386, v_secret_id := 0;
WS_JOB_EXEC_411,PROCEDURE,3387, v_secret_text := '';
WS_JOB_EXEC_411,PROCEDURE,3388,
WS_JOB_EXEC_411,PROCEDURE,3389, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3390, v_MsgText := 'Unhandled exception getting shared secret for BDA connection for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,3391,
WS_JOB_EXEC_411,PROCEDURE,3392, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,3393, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,3394, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3395, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,3396, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3397,
WS_JOB_EXEC_411,PROCEDURE,3398, END;
WS_JOB_EXEC_411,PROCEDURE,3399,
WS_JOB_EXEC_411,PROCEDURE,3400, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,3401, || 'SCH_BDA_SecretId[WSH]' || TO_CHAR(v_secret_id) || '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,3402, || 'SCH_BDA_Secret[WSH]' || TRIM(v_secret_text) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,3403,
WS_JOB_EXEC_411,PROCEDURE,3404, po_task_data := v_task_data;
WS_JOB_EXEC_411,PROCEDURE,3405,
WS_JOB_EXEC_411,PROCEDURE,3406, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3407, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3408, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3409, v_step := 3560;
WS_JOB_EXEC_411,PROCEDURE,3410, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3411, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3412, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3413, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3414, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3415, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3416, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3417, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3418, End If;
WS_JOB_EXEC_411,PROCEDURE,3419, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3420, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3421, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3422, END;
WS_JOB_EXEC_411,PROCEDURE,3423, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3424,
WS_JOB_EXEC_411,PROCEDURE,3425, End If;
WS_JOB_EXEC_411,PROCEDURE,3426,
WS_JOB_EXEC_411,PROCEDURE,3427, v_result := ws_act_post_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3428, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3429, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3430, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,3431, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,3432, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3433, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3434, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,3435, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3436, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3437, End If;
WS_JOB_EXEC_411,PROCEDURE,3438,
WS_JOB_EXEC_411,PROCEDURE,3439, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,3440, THEN
WS_JOB_EXEC_411,PROCEDURE,3441,
WS_JOB_EXEC_411,PROCEDURE,3442, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3443, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3444, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3445, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,3446, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3447, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3448, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3449, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3450, po_result_code := p_status_code_2; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,3451,
WS_JOB_EXEC_411,PROCEDURE,3452, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3453, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3454, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3455, v_step := 3600;
WS_JOB_EXEC_411,PROCEDURE,3456, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3457, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3458, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3459, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3460, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3461, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3462, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3463, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3464, End If;
WS_JOB_EXEC_411,PROCEDURE,3465, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3466, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3467, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3468, END;
WS_JOB_EXEC_411,PROCEDURE,3469, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3470, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,3471,
WS_JOB_EXEC_411,PROCEDURE,3472,
WS_JOB_EXEC_411,PROCEDURE,3473, -- If our post load procedure failed and the load worked then
WS_JOB_EXEC_411,PROCEDURE,3474, -- record the post load failure
WS_JOB_EXEC_411,PROCEDURE,3475, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,3476, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,3477, End If;
WS_JOB_EXEC_411,PROCEDURE,3478, End If;
WS_JOB_EXEC_411,PROCEDURE,3479, End If;
WS_JOB_EXEC_411,PROCEDURE,3480, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3481, -- U P D A T E
WS_JOB_EXEC_411,PROCEDURE,3482, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3483, ElsIf v_action_type = v_ws_act_update then
WS_JOB_EXEC_411,PROCEDURE,3484, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3485, -- U P D A T E C U B E
WS_JOB_EXEC_411,PROCEDURE,3486, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3487, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3488, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3489, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3490, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3491, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3492, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3493, -- return value of 9
WS_JOB_EXEC_411,PROCEDURE,3494, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3495, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3496, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3497, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3498, po_result_msg := 'cube update';
WS_JOB_EXEC_411,PROCEDURE,3499, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3500, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3501, po_result_code := 9;
WS_JOB_EXEC_411,PROCEDURE,3502, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3503, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3504, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3505, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3506, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3507, v_step := 3700;
WS_JOB_EXEC_411,PROCEDURE,3508, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3509, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3510, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3511, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3512, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3513, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3514, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3515, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3516, End If;
WS_JOB_EXEC_411,PROCEDURE,3517, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3518, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3519, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3520, END;
WS_JOB_EXEC_411,PROCEDURE,3521, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3522, Else
WS_JOB_EXEC_411,PROCEDURE,3523, v_step := 3800;
WS_JOB_EXEC_411,PROCEDURE,3524, v_result := ws_act_update(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3525, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3526, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3527, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3528, v_step := 3900;
WS_JOB_EXEC_411,PROCEDURE,3529,
WS_JOB_EXEC_411,PROCEDURE,3530, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,3531, THEN
WS_JOB_EXEC_411,PROCEDURE,3532, v_step := 4000;
WS_JOB_EXEC_411,PROCEDURE,3533,
WS_JOB_EXEC_411,PROCEDURE,3534, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3535, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3536, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3537, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,3538, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3539, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3540, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3541, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3542, po_result_code := p_status_code; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,3543,
WS_JOB_EXEC_411,PROCEDURE,3544, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3545, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3546, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3547, v_step := 4100;
WS_JOB_EXEC_411,PROCEDURE,3548, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3549, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3550, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3551, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3552, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3553, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3554, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3555, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3556, End If;
WS_JOB_EXEC_411,PROCEDURE,3557, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3558, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3559, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3560, END;
WS_JOB_EXEC_411,PROCEDURE,3561, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3562, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,3563,
WS_JOB_EXEC_411,PROCEDURE,3564, End If;
WS_JOB_EXEC_411,PROCEDURE,3565, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3566, -- C R E A T E
WS_JOB_EXEC_411,PROCEDURE,3567, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3568, ElsIf v_action_type = v_ws_act_create then
WS_JOB_EXEC_411,PROCEDURE,3569, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3570, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3571, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3572, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3573, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3574, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3575, -- return value of 4
WS_JOB_EXEC_411,PROCEDURE,3576, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3577, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3578, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3579, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3580, po_result_msg := 'cube create';
WS_JOB_EXEC_411,PROCEDURE,3581, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3582, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3583, po_result_code := 4;
WS_JOB_EXEC_411,PROCEDURE,3584, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3585, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3586, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3587, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3588, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3589, v_step := 4200;
WS_JOB_EXEC_411,PROCEDURE,3590, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3591, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3592, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3593, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3594, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3595, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3596, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3597, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3598, End If;
WS_JOB_EXEC_411,PROCEDURE,3599, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3600, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3601, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3602, END;
WS_JOB_EXEC_411,PROCEDURE,3603, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3604, Else
WS_JOB_EXEC_411,PROCEDURE,3605, v_result := ws_act_create(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3606, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3607, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3608, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3609, End If;
WS_JOB_EXEC_411,PROCEDURE,3610, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3611, -- D R O P
WS_JOB_EXEC_411,PROCEDURE,3612, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3613, ElsIf v_action_type = v_ws_act_drop then
WS_JOB_EXEC_411,PROCEDURE,3614, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3615, -- D R O P C U B E
WS_JOB_EXEC_411,PROCEDURE,3616, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3617, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3618, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3619, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3620, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3621, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3622, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3623, -- return value of 10
WS_JOB_EXEC_411,PROCEDURE,3624, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3625, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3626, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3627, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3628, po_result_msg := 'cube drop';
WS_JOB_EXEC_411,PROCEDURE,3629, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3630, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3631, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3632, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3633, po_result_code := 10;
WS_JOB_EXEC_411,PROCEDURE,3634, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3635, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3636, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3637, v_step := 4300;
WS_JOB_EXEC_411,PROCEDURE,3638, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3639, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3640, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3641, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3642, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3643, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3644, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3645, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3646, End If;
WS_JOB_EXEC_411,PROCEDURE,3647, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3648, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3649, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3650, END;
WS_JOB_EXEC_411,PROCEDURE,3651, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3652, Else
WS_JOB_EXEC_411,PROCEDURE,3653, v_result := ws_act_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3654, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3655, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3656, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3657, End If;
WS_JOB_EXEC_411,PROCEDURE,3658, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3659, -- T R U N C A T E
WS_JOB_EXEC_411,PROCEDURE,3660, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3661, ElsIf v_action_type = v_ws_act_truncate then
WS_JOB_EXEC_411,PROCEDURE,3662, v_result := ws_act_truncate(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3663, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3664, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3665, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3666, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3667, -- D R O P A L L
WS_JOB_EXEC_411,PROCEDURE,3668, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3669, ElsIf v_action_type = v_ws_act_drop_all then
WS_JOB_EXEC_411,PROCEDURE,3670, v_result := ws_act_drop_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3671, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3672, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3673, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3674, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3675, -- B U I L D
WS_JOB_EXEC_411,PROCEDURE,3676, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3677, ElsIf v_action_type = v_ws_act_build then
WS_JOB_EXEC_411,PROCEDURE,3678, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3679, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3680, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,3681, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3682, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3683, -- B U I L D A L L
WS_JOB_EXEC_411,PROCEDURE,3684, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3685, ElsIf v_action_type = v_ws_act_build_all then
WS_JOB_EXEC_411,PROCEDURE,3686, v_result := ws_act_build_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3687, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3688, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,3689, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3690, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3691, -- P R E D R O P
WS_JOB_EXEC_411,PROCEDURE,3692, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3693, ElsIf v_action_type = v_ws_act_pre_drop then
WS_JOB_EXEC_411,PROCEDURE,3694, v_result := ws_act_pre_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3695, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3696, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3697, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3698, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3699, -- A N A L Y Z E
WS_JOB_EXEC_411,PROCEDURE,3700, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3701, ElsIf v_action_type = v_ws_act_analyze then
WS_JOB_EXEC_411,PROCEDURE,3702, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3703, -- A N A L Y Z E C U B E
WS_JOB_EXEC_411,PROCEDURE,3704, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3705, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3706, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3707, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3708, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3709, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3710, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3711, -- return value of 8
WS_JOB_EXEC_411,PROCEDURE,3712, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3713, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3714, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3715, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3716, po_result_msg := 'cube analyze';
WS_JOB_EXEC_411,PROCEDURE,3717, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3718, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3719, po_result_code := 8;
WS_JOB_EXEC_411,PROCEDURE,3720, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3721, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3722, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3723, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3724, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3725, v_step := 4400;
WS_JOB_EXEC_411,PROCEDURE,3726, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3727, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3728, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3729, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3730, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3731, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3732, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3733, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3734, End If;
WS_JOB_EXEC_411,PROCEDURE,3735, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3736, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3737, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3738, END;
WS_JOB_EXEC_411,PROCEDURE,3739, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3740, Else
WS_JOB_EXEC_411,PROCEDURE,3741, v_result := ws_act_analyze(p_sequence,v_obj_type,v_action_type, 100,
WS_JOB_EXEC_411,PROCEDURE,3742, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3743, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3744, End If;
WS_JOB_EXEC_411,PROCEDURE,3745, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3746, -- Q U I C K A N A L Y Z E
WS_JOB_EXEC_411,PROCEDURE,3747, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3748, ElsIf v_action_type = v_ws_act_quick_analyze then
WS_JOB_EXEC_411,PROCEDURE,3749, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3750, -- Q U I C K A N A L Y Z E C U B E
WS_JOB_EXEC_411,PROCEDURE,3751, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3752, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3753, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3754, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3755, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3756, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3757, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3758, -- return value of 9
WS_JOB_EXEC_411,PROCEDURE,3759, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3760, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3761, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3762, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3763, po_result_msg := 'cube quick analyze';
WS_JOB_EXEC_411,PROCEDURE,3764, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3765, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3766, po_result_code := 9;
WS_JOB_EXEC_411,PROCEDURE,3767, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3768, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3769, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3770, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3771, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3772, v_step := 4500;
WS_JOB_EXEC_411,PROCEDURE,3773, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3774, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3775, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3776, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3777, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3778, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3779, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3780, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3781, End If;
WS_JOB_EXEC_411,PROCEDURE,3782, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3783, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3784, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3785, END;
WS_JOB_EXEC_411,PROCEDURE,3786, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3787, Else
WS_JOB_EXEC_411,PROCEDURE,3788, v_result := ws_act_analyze(p_sequence,v_obj_type,v_action_type, 3,
WS_JOB_EXEC_411,PROCEDURE,3789, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3790, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3791, End If;
WS_JOB_EXEC_411,PROCEDURE,3792, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3793, -- S T A T I S T I C S
WS_JOB_EXEC_411,PROCEDURE,3794, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3795, ElsIf v_action_type = v_ws_act_statistics then
WS_JOB_EXEC_411,PROCEDURE,3796, v_result := ws_act_dbms_stats(p_sequence,v_obj_type,v_action_type, 100,
WS_JOB_EXEC_411,PROCEDURE,3797, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3798, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3799, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3800, -- Q U I C K S T A T S
WS_JOB_EXEC_411,PROCEDURE,3801, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3802, ElsIf v_action_type = v_ws_act_quick_statistics then
WS_JOB_EXEC_411,PROCEDURE,3803, v_result := ws_act_dbms_stats(p_sequence,v_obj_type,v_action_type, 3,
WS_JOB_EXEC_411,PROCEDURE,3804, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3805, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3806, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3807, -- P R O C E S S
WS_JOB_EXEC_411,PROCEDURE,3808, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3809, ElsIf v_action_type = v_ws_act_process then
WS_JOB_EXEC_411,PROCEDURE,3810,
WS_JOB_EXEC_411,PROCEDURE,3811,
WS_JOB_EXEC_411,PROCEDURE,3812, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3813, -- P R O C E S S C U B E
WS_JOB_EXEC_411,PROCEDURE,3814, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3815, If v_obj_type = v_ws_obj_olap_cube
WS_JOB_EXEC_411,PROCEDURE,3816, Or v_obj_type = v_ws_obj_olap_dim
WS_JOB_EXEC_411,PROCEDURE,3817, Or v_obj_type = v_ws_obj_olap_role
WS_JOB_EXEC_411,PROCEDURE,3818, Or v_obj_type = v_ws_obj_cube
WS_JOB_EXEC_411,PROCEDURE,3819, Or v_obj_type = v_ws_obj_cube_virtual Then
WS_JOB_EXEC_411,PROCEDURE,3820, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,3821, -- return value of 5
WS_JOB_EXEC_411,PROCEDURE,3822, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3823, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3824, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3825, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3826, po_result_msg := 'cube process';
WS_JOB_EXEC_411,PROCEDURE,3827, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3828, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3829, po_result_code := 5;
WS_JOB_EXEC_411,PROCEDURE,3830, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3831, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3832, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3833, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3834, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3835, v_step := 4600;
WS_JOB_EXEC_411,PROCEDURE,3836, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3837, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3838, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3839, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3840, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3841, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3842, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3843, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3844, End If;
WS_JOB_EXEC_411,PROCEDURE,3845, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3846, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3847, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3848, END;
WS_JOB_EXEC_411,PROCEDURE,3849, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3850, End If;
WS_JOB_EXEC_411,PROCEDURE,3851, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3852, -- P R O C E S S L O A D
WS_JOB_EXEC_411,PROCEDURE,3853, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3854, If v_obj_type = v_ws_obj_load Then
WS_JOB_EXEC_411,PROCEDURE,3855, v_result := ws_act_pre_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3856, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3857, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3858, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3859, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,3860, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,3861, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3862, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3863, Else
WS_JOB_EXEC_411,PROCEDURE,3864, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,3865, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,3866, End If;
WS_JOB_EXEC_411,PROCEDURE,3867, v_result := ws_act_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,3868, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,3869, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,3870, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,3871, -- If this load requires a host script then we will have a
WS_JOB_EXEC_411,PROCEDURE,3872, -- return value of 2
WS_JOB_EXEC_411,PROCEDURE,3873, -- If script build worked then skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3874, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_411,PROCEDURE,3875, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3876, If v_result = 2 Then
WS_JOB_EXEC_411,PROCEDURE,3877, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3878, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3879, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3880, po_result_msg := 'process table';
WS_JOB_EXEC_411,PROCEDURE,3881, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,3882, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3883, po_result_code := 2;
WS_JOB_EXEC_411,PROCEDURE,3884, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3885, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3886, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3887, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3888, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3889, v_step := 4700;
WS_JOB_EXEC_411,PROCEDURE,3890, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3891, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3892, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3893, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3894, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3895, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3896, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3897, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3898, End If;
WS_JOB_EXEC_411,PROCEDURE,3899, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3900, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3901, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3902, END;
WS_JOB_EXEC_411,PROCEDURE,3903, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3904, -- If this load requires an ODBC load then we will have a
WS_JOB_EXEC_411,PROCEDURE,3905, -- return value of 3
WS_JOB_EXEC_411,PROCEDURE,3906, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3907, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3908, ElsIf v_result = 3 Then
WS_JOB_EXEC_411,PROCEDURE,3909, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3910, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3911, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3912, po_result_msg := 'process table';
WS_JOB_EXEC_411,PROCEDURE,3913, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3914, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3915, po_result_code := 3;
WS_JOB_EXEC_411,PROCEDURE,3916, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3917, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3918, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3919, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3920, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3921, v_step := 4800;
WS_JOB_EXEC_411,PROCEDURE,3922, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3923, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3924, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3925, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3926, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3927, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3928, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3929, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3930, End If;
WS_JOB_EXEC_411,PROCEDURE,3931, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3932, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3933, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3934, END;
WS_JOB_EXEC_411,PROCEDURE,3935, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3936, -- If this load requires a Native ODBC load then we will have a
WS_JOB_EXEC_411,PROCEDURE,3937, -- return value of 12
WS_JOB_EXEC_411,PROCEDURE,3938, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3939, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3940, ElsIf v_result = 12
WS_JOB_EXEC_411,PROCEDURE,3941, or v_result = 14 Then --RED_3266
WS_JOB_EXEC_411,PROCEDURE,3942, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3943, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3944, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3945, po_result_msg := 'process table';
WS_JOB_EXEC_411,PROCEDURE,3946, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,3947, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3948, po_result_code := v_result;--RED_3266
WS_JOB_EXEC_411,PROCEDURE,3949, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3950, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3951, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3952, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,3953, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,3954, v_step := 4900;
WS_JOB_EXEC_411,PROCEDURE,3955, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3956, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,3957, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,3958, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,3959, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,3960, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,3961, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,3962, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,3963, End If;
WS_JOB_EXEC_411,PROCEDURE,3964, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,3965, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,3966, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,3967, END;
WS_JOB_EXEC_411,PROCEDURE,3968, RETURN;
WS_JOB_EXEC_411,PROCEDURE,3969,
WS_JOB_EXEC_411,PROCEDURE,3970, -- If this load is a BDA Server operation with non-Hive target
WS_JOB_EXEC_411,PROCEDURE,3971, -- then we will have a return value of 91
WS_JOB_EXEC_411,PROCEDURE,3972, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,3973, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,3974, ElsIf v_result = 91 Then
WS_JOB_EXEC_411,PROCEDURE,3975, v_step := 4950;
WS_JOB_EXEC_411,PROCEDURE,3976,
WS_JOB_EXEC_411,PROCEDURE,3977, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,3978, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,3979, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,3980, po_result_msg := p_return_msg || ' with non-Hive target';
WS_JOB_EXEC_411,PROCEDURE,3981, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,3982, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,3983, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,3984, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,3985, po_result_code := 91;
WS_JOB_EXEC_411,PROCEDURE,3986,
WS_JOB_EXEC_411,PROCEDURE,3987, -- Put BDA connection settings into task data (used by the Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,3988, -- There should be at most one record, otherwise a fatal problem.
WS_JOB_EXEC_411,PROCEDURE,3989, BEGIN
WS_JOB_EXEC_411,PROCEDURE,3990,
WS_JOB_EXEC_411,PROCEDURE,3991, SELECT ta_text_1
WS_JOB_EXEC_411,PROCEDURE,3992, INTO v_task_data
WS_JOB_EXEC_411,PROCEDURE,3993, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,3994, WHERE ta_obj_key = v_bda_connect_key AND ta_type = 'B';
WS_JOB_EXEC_411,PROCEDURE,3995,
WS_JOB_EXEC_411,PROCEDURE,3996, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,3997, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,3998, v_task_data := '';
WS_JOB_EXEC_411,PROCEDURE,3999,
WS_JOB_EXEC_411,PROCEDURE,4000, WHEN TOO_MANY_ROWS THEN
WS_JOB_EXEC_411,PROCEDURE,4001, v_MsgText := 'Multiple BDA connection parameters found for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,4002,
WS_JOB_EXEC_411,PROCEDURE,4003, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,4004, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,4005, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4006, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4007, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4008,
WS_JOB_EXEC_411,PROCEDURE,4009, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4010, v_MsgText := 'Unhandled exception getting BDA connection parameters for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,4011,
WS_JOB_EXEC_411,PROCEDURE,4012, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,4013, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,4014, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4015, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4016, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4017,
WS_JOB_EXEC_411,PROCEDURE,4018, END;
WS_JOB_EXEC_411,PROCEDURE,4019,
WS_JOB_EXEC_411,PROCEDURE,4020, -- Put the BDA connection key into task data (used by the Windows Scheduler).
WS_JOB_EXEC_411,PROCEDURE,4021, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,4022, || 'SCH_BDA_ConnectKey[WSH]' || TO_CHAR(v_bda_connect_key) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,4023,
WS_JOB_EXEC_411,PROCEDURE,4024, -- Put the object key and action type into task data (used by the Windows Scheduler and Linux/Unix Scheduler).
WS_JOB_EXEC_411,PROCEDURE,4025, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,4026, || 'SCH_BDA_ObjKey[WSH]' || TO_CHAR(v_obj_key) || '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,4027, || 'SCH_BDA_Action[WSH]' || TO_CHAR(v_action_type) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,4028,
WS_JOB_EXEC_411,PROCEDURE,4029, -- Put the shared secret timestamp and base64 bytes into task data.
WS_JOB_EXEC_411,PROCEDURE,4030, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4031, SELECT ta_val_1 AS secret_id, ta_text_1 AS secret_text
WS_JOB_EXEC_411,PROCEDURE,4032, INTO v_secret_id, v_secret_text
WS_JOB_EXEC_411,PROCEDURE,4033, FROM ws_table_attributes
WS_JOB_EXEC_411,PROCEDURE,4034, WHERE ta_type = 'Z'
WS_JOB_EXEC_411,PROCEDURE,4035, AND ta_obj_key = 0;
WS_JOB_EXEC_411,PROCEDURE,4036,
WS_JOB_EXEC_411,PROCEDURE,4037, EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,4038, WHEN NO_DATA_FOUND THEN
WS_JOB_EXEC_411,PROCEDURE,4039, v_MsgText := 'No shared secret for BDA connection found for job: ' || pi_job_name || '.';
WS_JOB_EXEC_411,PROCEDURE,4040, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,4041, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4042, v_secret_id := 0;
WS_JOB_EXEC_411,PROCEDURE,4043, v_secret_text := '';
WS_JOB_EXEC_411,PROCEDURE,4044,
WS_JOB_EXEC_411,PROCEDURE,4045, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4046, v_MsgText := 'Unhandled exception getting shared secret for BDA connection for job: '||pi_job_name||'.';
WS_JOB_EXEC_411,PROCEDURE,4047,
WS_JOB_EXEC_411,PROCEDURE,4048, v_rec_count := 0;
WS_JOB_EXEC_411,PROCEDURE,4049, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, v_ctrl_sequence,
WS_JOB_EXEC_411,PROCEDURE,4050, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4051, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4052, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4053,
WS_JOB_EXEC_411,PROCEDURE,4054, END;
WS_JOB_EXEC_411,PROCEDURE,4055,
WS_JOB_EXEC_411,PROCEDURE,4056, v_task_data := v_task_data
WS_JOB_EXEC_411,PROCEDURE,4057, || 'SCH_BDA_SecretId[WSH]' || TO_CHAR(v_secret_id) || '[WSH]'
WS_JOB_EXEC_411,PROCEDURE,4058, || 'SCH_BDA_Secret[WSH]' || TRIM(v_secret_text) || '[WSH]';
WS_JOB_EXEC_411,PROCEDURE,4059,
WS_JOB_EXEC_411,PROCEDURE,4060, po_task_data := v_task_data;
WS_JOB_EXEC_411,PROCEDURE,4061,
WS_JOB_EXEC_411,PROCEDURE,4062, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4063, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4064, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4065, v_step := 4960;
WS_JOB_EXEC_411,PROCEDURE,4066, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4067, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4068, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4069, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4070, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4071, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4072, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4073, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4074, End If;
WS_JOB_EXEC_411,PROCEDURE,4075, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4076, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4077, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4078, END;
WS_JOB_EXEC_411,PROCEDURE,4079, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4080,
WS_JOB_EXEC_411,PROCEDURE,4081, End If;
WS_JOB_EXEC_411,PROCEDURE,4082, End If;
WS_JOB_EXEC_411,PROCEDURE,4083, If v_result >= -1
WS_JOB_EXEC_411,PROCEDURE,4084, THEN
WS_JOB_EXEC_411,PROCEDURE,4085, v_result := ws_act_post_load(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4086, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4087, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4088, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,4089,
WS_JOB_EXEC_411,PROCEDURE,4090, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,4091, THEN
WS_JOB_EXEC_411,PROCEDURE,4092, v_step := 5000;
WS_JOB_EXEC_411,PROCEDURE,4093,
WS_JOB_EXEC_411,PROCEDURE,4094, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4095, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4096, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4097, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,4098, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4099, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4100, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4101, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4102, po_result_code := p_status_code_2; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,4103,
WS_JOB_EXEC_411,PROCEDURE,4104, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4105, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4106, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4107, v_step := 5100;
WS_JOB_EXEC_411,PROCEDURE,4108, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4109, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4110, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4111, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4112, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4113, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4114, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4115, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4116, End If;
WS_JOB_EXEC_411,PROCEDURE,4117, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4118, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4119, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4120, END;
WS_JOB_EXEC_411,PROCEDURE,4121, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4122, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,4123,
WS_JOB_EXEC_411,PROCEDURE,4124,
WS_JOB_EXEC_411,PROCEDURE,4125, Else
WS_JOB_EXEC_411,PROCEDURE,4126, p_status_code_2 := 1;
WS_JOB_EXEC_411,PROCEDURE,4127, End If;
WS_JOB_EXEC_411,PROCEDURE,4128, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4129, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4130, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4131, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4132, Else
WS_JOB_EXEC_411,PROCEDURE,4133, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4134, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4135, End If;
WS_JOB_EXEC_411,PROCEDURE,4136, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4137, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4138, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,4139, p_return_msg_3, p_status_code_3);
WS_JOB_EXEC_411,PROCEDURE,4140, If p_status_code_3 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4141, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4142, p_return_msg_3,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4143, ElsIf p_status_code_3 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,4144, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4145, p_return_msg_3,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4146, End If;
WS_JOB_EXEC_411,PROCEDURE,4147, Else
WS_JOB_EXEC_411,PROCEDURE,4148, p_status_code_3 := 1;
WS_JOB_EXEC_411,PROCEDURE,4149, End If;
WS_JOB_EXEC_411,PROCEDURE,4150,
WS_JOB_EXEC_411,PROCEDURE,4151, -- If our index build failed and the load worked then
WS_JOB_EXEC_411,PROCEDURE,4152, -- record the index failure
WS_JOB_EXEC_411,PROCEDURE,4153, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,4154, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,4155, End If;
WS_JOB_EXEC_411,PROCEDURE,4156, If p_status_code_3 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,4157, p_status_code := p_status_code_3;
WS_JOB_EXEC_411,PROCEDURE,4158, End If;
WS_JOB_EXEC_411,PROCEDURE,4159,
WS_JOB_EXEC_411,PROCEDURE,4160, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4161, -- P R O C E S S E X P O R T
WS_JOB_EXEC_411,PROCEDURE,4162, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4163, ElsIf v_obj_type = v_ws_obj_export Then
WS_JOB_EXEC_411,PROCEDURE,4164, v_result := ws_act_export(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4165, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4166, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4167, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4168,
WS_JOB_EXEC_411,PROCEDURE,4169, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4170, -- If this load requires a host script then we will have a
WS_JOB_EXEC_411,PROCEDURE,4171, -- return value of 2
WS_JOB_EXEC_411,PROCEDURE,4172, -- If script build worked then skip out to process it
WS_JOB_EXEC_411,PROCEDURE,4173, -- If it failed then the standard handling will deal with it.
WS_JOB_EXEC_411,PROCEDURE,4174, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,4175, If v_result = 2 Then
WS_JOB_EXEC_411,PROCEDURE,4176, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4177, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4178, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4179, po_result_msg := 'process table';
WS_JOB_EXEC_411,PROCEDURE,4180, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,4181, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4182, po_result_code := 11;
WS_JOB_EXEC_411,PROCEDURE,4183, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4184, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4185, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4186, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4187, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4188, v_step := 5200;
WS_JOB_EXEC_411,PROCEDURE,4189, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4190, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4191, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4192, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4193, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4194, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4195, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4196, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4197, End If;
WS_JOB_EXEC_411,PROCEDURE,4198, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4199, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4200, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4201, END;
WS_JOB_EXEC_411,PROCEDURE,4202, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4203, End If;
WS_JOB_EXEC_411,PROCEDURE,4204, -- If this load requires SSIS then we will have a
WS_JOB_EXEC_411,PROCEDURE,4205, -- return value of 14
WS_JOB_EXEC_411,PROCEDURE,4206, -- When we Rejoin the job any post load procedure will be run
WS_JOB_EXEC_411,PROCEDURE,4207, If v_result = 14 Then
WS_JOB_EXEC_411,PROCEDURE,4208, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4209, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4210, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4211, po_result_msg := 'process table';
WS_JOB_EXEC_411,PROCEDURE,4212, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,4213, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4214, po_result_code := 14;
WS_JOB_EXEC_411,PROCEDURE,4215, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4216, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4217, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4218, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4219, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4220, v_step := 5250;
WS_JOB_EXEC_411,PROCEDURE,4221, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4222, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4223, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4224, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4225, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4226, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4227, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4228, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4229, End If;
WS_JOB_EXEC_411,PROCEDURE,4230, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4231, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4232, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4233, END;
WS_JOB_EXEC_411,PROCEDURE,4234, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4235, End If;
WS_JOB_EXEC_411,PROCEDURE,4236, End If;
WS_JOB_EXEC_411,PROCEDURE,4237, If v_result >= -1
WS_JOB_EXEC_411,PROCEDURE,4238, THEN
WS_JOB_EXEC_411,PROCEDURE,4239, v_result := ws_act_post_export(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4240, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4241, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4242, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,4243, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,4244, THEN
WS_JOB_EXEC_411,PROCEDURE,4245, v_step := 5300;
WS_JOB_EXEC_411,PROCEDURE,4246,
WS_JOB_EXEC_411,PROCEDURE,4247, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4248, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4249, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4250, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,4251, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4252, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4253, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4254, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4255, po_result_code := p_status_code_2; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,4256,
WS_JOB_EXEC_411,PROCEDURE,4257, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4258, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4259, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4260, v_step := 5400;
WS_JOB_EXEC_411,PROCEDURE,4261, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4262, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4263, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4264, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4265, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4266, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4267, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4268, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4269, End If;
WS_JOB_EXEC_411,PROCEDURE,4270, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4271, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4272, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4273, END;
WS_JOB_EXEC_411,PROCEDURE,4274, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4275, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,4276, Else
WS_JOB_EXEC_411,PROCEDURE,4277, p_status_code_2 := 1;
WS_JOB_EXEC_411,PROCEDURE,4278, End If;
WS_JOB_EXEC_411,PROCEDURE,4279, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4280, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4281, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4282, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4283, Else
WS_JOB_EXEC_411,PROCEDURE,4284, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4285, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4286, End If;
WS_JOB_EXEC_411,PROCEDURE,4287, Else
WS_JOB_EXEC_411,PROCEDURE,4288, p_status_code_3 := 1;
WS_JOB_EXEC_411,PROCEDURE,4289, End If;
WS_JOB_EXEC_411,PROCEDURE,4290,
WS_JOB_EXEC_411,PROCEDURE,4291, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4292, -- P R O C E S S J O B
WS_JOB_EXEC_411,PROCEDURE,4293, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4294, ElsIf v_obj_type = v_ws_obj_job Then
WS_JOB_EXEC_411,PROCEDURE,4295,
WS_JOB_EXEC_411,PROCEDURE,4296, v_job_action := 'NEW';
WS_JOB_EXEC_411,PROCEDURE,4297,
WS_JOB_EXEC_411,PROCEDURE,4298, IF v_restart_flag = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,4299, SELECT count(*) into v_run_count
WS_JOB_EXEC_411,PROCEDURE,4300, FROM ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4301, WHERE wjr_name = p_task_name
WS_JOB_EXEC_411,PROCEDURE,4302, AND wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4303,
WS_JOB_EXEC_411,PROCEDURE,4304, IF v_run_count = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,4305, v_job_action := 'RESTART';
WS_JOB_EXEC_411,PROCEDURE,4306, END IF;
WS_JOB_EXEC_411,PROCEDURE,4307,
WS_JOB_EXEC_411,PROCEDURE,4308, END IF;
WS_JOB_EXEC_411,PROCEDURE,4309,
WS_JOB_EXEC_411,PROCEDURE,4310, Ws_Job_Exec_411(p_task_name,NULL,v_job_action,0,pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4311, p_job_id, p_task_id,0,NULL,
WS_JOB_EXEC_411,PROCEDURE,4312, v_pm_job_name, v_pm_job_key,
WS_JOB_EXEC_411,PROCEDURE,4313, NULL,NULL,
WS_JOB_EXEC_411,PROCEDURE,4314, p_status_code,
WS_JOB_EXEC_411,PROCEDURE,4315, p_return_msg,
WS_JOB_EXEC_411,PROCEDURE,4316, v_job_job_key,
WS_JOB_EXEC_411,PROCEDURE,4317, v_job_task_key,v_job_task_name,
WS_JOB_EXEC_411,PROCEDURE,4318, v_job_action_key, v_job_action_msg,
WS_JOB_EXEC_411,PROCEDURE,4319, v_job_key_list, v_task_key_list,
WS_JOB_EXEC_411,PROCEDURE,4320, v_task_data);
WS_JOB_EXEC_411,PROCEDURE,4321,
WS_JOB_EXEC_411,PROCEDURE,4322, IF p_status_code = -3 THEN
WS_JOB_EXEC_411,PROCEDURE,4323, p_return_msg := 'Called job ' || p_task_name || ' FAILED with unhandled error';
WS_JOB_EXEC_411,PROCEDURE,4324, END IF;
WS_JOB_EXEC_411,PROCEDURE,4325, IF p_status_code = -2 THEN
WS_JOB_EXEC_411,PROCEDURE,4326, p_return_msg := 'Called job ' || p_task_name || ' FAILED';
WS_JOB_EXEC_411,PROCEDURE,4327, END IF;
WS_JOB_EXEC_411,PROCEDURE,4328, IF p_status_code = -1 THEN
WS_JOB_EXEC_411,PROCEDURE,4329, p_return_msg := 'Called job ' || p_task_name || ' completed with WARNINGS';
WS_JOB_EXEC_411,PROCEDURE,4330, END IF;
WS_JOB_EXEC_411,PROCEDURE,4331, IF p_status_code = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,4332, p_return_msg := 'Called job ' || p_task_name || ' FAILED with unhandled problem';
WS_JOB_EXEC_411,PROCEDURE,4333, p_status_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4334, END IF;
WS_JOB_EXEC_411,PROCEDURE,4335, IF p_status_code = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,4336, p_return_msg := 'Called job ' || p_task_name || ' completed successfully';
WS_JOB_EXEC_411,PROCEDURE,4337, END IF;
WS_JOB_EXEC_411,PROCEDURE,4338, IF p_status_code > 1 THEN
WS_JOB_EXEC_411,PROCEDURE,4339, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4340, po_task_key := v_job_task_key;
WS_JOB_EXEC_411,PROCEDURE,4341, po_task_name := v_job_task_name;
WS_JOB_EXEC_411,PROCEDURE,4342, po_result_msg := p_return_msg;
WS_JOB_EXEC_411,PROCEDURE,4343, po_action_key := v_job_action_key;
WS_JOB_EXEC_411,PROCEDURE,4344, po_action_msg := v_job_action_msg;
WS_JOB_EXEC_411,PROCEDURE,4345, po_result_code := p_status_code;
WS_JOB_EXEC_411,PROCEDURE,4346, ps_job_key_list := TO_CHAR(p_job_id) || ',' || NVL(v_job_key_list,'');
WS_JOB_EXEC_411,PROCEDURE,4347, ps_task_key_list := TO_CHAR(p_task_id) || ',' || NVL(v_task_key_list,'');
WS_JOB_EXEC_411,PROCEDURE,4348, po_task_data := v_task_data;
WS_JOB_EXEC_411,PROCEDURE,4349, return;
WS_JOB_EXEC_411,PROCEDURE,4350, END IF;
WS_JOB_EXEC_411,PROCEDURE,4351,
WS_JOB_EXEC_411,PROCEDURE,4352, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4353, -- P R O C E S S U P D A T E
WS_JOB_EXEC_411,PROCEDURE,4354, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4355, Else
WS_JOB_EXEC_411,PROCEDURE,4356, v_result := ws_act_pre_drop(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4357, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4358, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4359, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4360, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4361, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4362, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4363, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4364, Else
WS_JOB_EXEC_411,PROCEDURE,4365, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4366, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4367, End If;
WS_JOB_EXEC_411,PROCEDURE,4368,
WS_JOB_EXEC_411,PROCEDURE,4369, v_result := ws_act_update(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4370, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4371, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4372, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4373,
WS_JOB_EXEC_411,PROCEDURE,4374, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,4375, THEN
WS_JOB_EXEC_411,PROCEDURE,4376, v_step := 5500;
WS_JOB_EXEC_411,PROCEDURE,4377,
WS_JOB_EXEC_411,PROCEDURE,4378, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4379, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4380, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4381, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,4382, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4383, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4384, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4385, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4386, po_result_code := p_status_code; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,4387,
WS_JOB_EXEC_411,PROCEDURE,4388, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4389, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4390, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4391, v_step := 5600;
WS_JOB_EXEC_411,PROCEDURE,4392, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4393, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4394, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4395, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4396, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4397, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4398, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4399, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4400, End If;
WS_JOB_EXEC_411,PROCEDURE,4401, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4402, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4403, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4404, END;
WS_JOB_EXEC_411,PROCEDURE,4405, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4406, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,4407,
WS_JOB_EXEC_411,PROCEDURE,4408,
WS_JOB_EXEC_411,PROCEDURE,4409, End If;
WS_JOB_EXEC_411,PROCEDURE,4410, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4411, v_result := ws_act_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4412, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4413, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,4414, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,4415, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4416, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4417, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4418, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,4419, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4420, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4421, End If;
WS_JOB_EXEC_411,PROCEDURE,4422, Else
WS_JOB_EXEC_411,PROCEDURE,4423, p_status_code_2 := 1;
WS_JOB_EXEC_411,PROCEDURE,4424, End If;
WS_JOB_EXEC_411,PROCEDURE,4425,
WS_JOB_EXEC_411,PROCEDURE,4426, -- If our index build failed and the update worked then
WS_JOB_EXEC_411,PROCEDURE,4427, -- record the index failure
WS_JOB_EXEC_411,PROCEDURE,4428, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,4429, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,4430, End If;
WS_JOB_EXEC_411,PROCEDURE,4431, End If;
WS_JOB_EXEC_411,PROCEDURE,4432, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4433, -- I N I T I A L L O A D
WS_JOB_EXEC_411,PROCEDURE,4434, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4435, ElsIf v_action_type = v_ws_act_initial then
WS_JOB_EXEC_411,PROCEDURE,4436,
WS_JOB_EXEC_411,PROCEDURE,4437,
WS_JOB_EXEC_411,PROCEDURE,4438, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4439, -- R E T R O I N I T I A L L O A D
WS_JOB_EXEC_411,PROCEDURE,4440, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4441, If v_obj_type = v_ws_obj_retro_copy THEN
WS_JOB_EXEC_411,PROCEDURE,4442, -- First create the table
WS_JOB_EXEC_411,PROCEDURE,4443, v_result := ws_act_create(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4444, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4445, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4446, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4447,
WS_JOB_EXEC_411,PROCEDURE,4448, -- If this a Retrofit ODBC based load then
WS_JOB_EXEC_411,PROCEDURE,4449, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,4450, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4451, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4452, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4453, po_result_msg := 'retro table';
WS_JOB_EXEC_411,PROCEDURE,4454, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4455, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4456, po_result_code := 13;
WS_JOB_EXEC_411,PROCEDURE,4457, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4458, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4459, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4460, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4461, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4462, v_step := 5700;
WS_JOB_EXEC_411,PROCEDURE,4463, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4464, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4465, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4466, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4467, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4468, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4469, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4470, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4471, End If;
WS_JOB_EXEC_411,PROCEDURE,4472, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4473, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4474, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4475, END;
WS_JOB_EXEC_411,PROCEDURE,4476, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4477,
WS_JOB_EXEC_411,PROCEDURE,4478, --==========================================================
WS_JOB_EXEC_411,PROCEDURE,4479, -- O T H E R O B J E C T I N I T I A L L O A D
WS_JOB_EXEC_411,PROCEDURE,4480, --==========================================================
WS_JOB_EXEC_411,PROCEDURE,4481, Else
WS_JOB_EXEC_411,PROCEDURE,4482, v_result := ws_act_drop_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4483, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4484, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4485, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4486, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4487, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4488, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4489, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4490, Else
WS_JOB_EXEC_411,PROCEDURE,4491, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4492, p_return_msg,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4493, End If;
WS_JOB_EXEC_411,PROCEDURE,4494, v_result := ws_act_initial_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4495, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4496, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4497, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4498, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,4499, THEN
WS_JOB_EXEC_411,PROCEDURE,4500, v_step := 5800;
WS_JOB_EXEC_411,PROCEDURE,4501,
WS_JOB_EXEC_411,PROCEDURE,4502, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4503, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4504, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4505, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,4506, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4507, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4508, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4509, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4510, po_result_code := p_status_code; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,4511,
WS_JOB_EXEC_411,PROCEDURE,4512, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4513, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4514, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4515, v_step := 5900;
WS_JOB_EXEC_411,PROCEDURE,4516, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4517, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4518, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4519, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4520, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4521, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4522, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4523, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4524, End If;
WS_JOB_EXEC_411,PROCEDURE,4525, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4526, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4527, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4528, END;
WS_JOB_EXEC_411,PROCEDURE,4529, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4530, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,4531,
WS_JOB_EXEC_411,PROCEDURE,4532, End If;
WS_JOB_EXEC_411,PROCEDURE,4533, If v_result >= -1 Then
WS_JOB_EXEC_411,PROCEDURE,4534, v_result := ws_act_build_all(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4535, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4536, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,NULL,
WS_JOB_EXEC_411,PROCEDURE,4537, p_return_msg_2, p_status_code_2);
WS_JOB_EXEC_411,PROCEDURE,4538, End If;
WS_JOB_EXEC_411,PROCEDURE,4539, If p_status_code_2 = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4540, v_result := WsWrkAudit('I',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4541, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4542, ElsIf p_status_code_2 < 1 Then
WS_JOB_EXEC_411,PROCEDURE,4543, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4544, p_return_msg_2,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4545, End If;
WS_JOB_EXEC_411,PROCEDURE,4546,
WS_JOB_EXEC_411,PROCEDURE,4547, -- If our index build failed and the initial load worked then
WS_JOB_EXEC_411,PROCEDURE,4548, -- record the index failure
WS_JOB_EXEC_411,PROCEDURE,4549, If p_status_code_2 < p_status_code Then
WS_JOB_EXEC_411,PROCEDURE,4550, p_status_code := p_status_code_2;
WS_JOB_EXEC_411,PROCEDURE,4551, End If;
WS_JOB_EXEC_411,PROCEDURE,4552, End If;
WS_JOB_EXEC_411,PROCEDURE,4553, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4554, -- C U S T O M
WS_JOB_EXEC_411,PROCEDURE,4555, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4556, ElsIf v_action_type = v_ws_act_custom then
WS_JOB_EXEC_411,PROCEDURE,4557, v_result := ws_act_initial_build(p_sequence,v_obj_type,v_action_type,
WS_JOB_EXEC_411,PROCEDURE,4558, v_obj_key,
WS_JOB_EXEC_411,PROCEDURE,4559, v_audit_job_name, v_audit_task_name, v_audit_job_id, v_audit_task_id,
WS_JOB_EXEC_411,PROCEDURE,4560, p_return_msg, p_status_code);
WS_JOB_EXEC_411,PROCEDURE,4561, IF v_result = 2
WS_JOB_EXEC_411,PROCEDURE,4562, THEN
WS_JOB_EXEC_411,PROCEDURE,4563, v_step := 6000;
WS_JOB_EXEC_411,PROCEDURE,4564,
WS_JOB_EXEC_411,PROCEDURE,4565, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4566, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4567, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4568, po_result_msg := 'execute sql';
WS_JOB_EXEC_411,PROCEDURE,4569, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4570, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4571, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4572, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4573, po_result_code := p_status_code; -- 16 or 17
WS_JOB_EXEC_411,PROCEDURE,4574,
WS_JOB_EXEC_411,PROCEDURE,4575, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4576, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4577, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4578, v_step := 6100;
WS_JOB_EXEC_411,PROCEDURE,4579, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4580, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4581, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4582, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4583, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4584, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4585, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4586, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4587, End If;
WS_JOB_EXEC_411,PROCEDURE,4588, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4589, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4590, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4591, END;
WS_JOB_EXEC_411,PROCEDURE,4592, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4593, END IF; -- SQLBLOCK post procedure
WS_JOB_EXEC_411,PROCEDURE,4594, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4595, -- C U B E P R O C E S S C U B E D I M S
WS_JOB_EXEC_411,PROCEDURE,4596, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4597, ElsIf v_action_type = v_ws_act_cube_dim then
WS_JOB_EXEC_411,PROCEDURE,4598, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,4599, -- return value of 6
WS_JOB_EXEC_411,PROCEDURE,4600, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,4601, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4602, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4603, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4604, po_result_msg := 'cube process cube dimensions';
WS_JOB_EXEC_411,PROCEDURE,4605, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4606, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4607, po_result_code := 6;
WS_JOB_EXEC_411,PROCEDURE,4608, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4609, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4610, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4611, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4612, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4613, v_step := 6200;
WS_JOB_EXEC_411,PROCEDURE,4614, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4615, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4616, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4617, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4618, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4619, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4620, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4621, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4622, End If;
WS_JOB_EXEC_411,PROCEDURE,4623, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4624, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4625, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4626, END;
WS_JOB_EXEC_411,PROCEDURE,4627, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4628, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4629, -- C U B E P R O C E S S D A T A B A S E D I M S
WS_JOB_EXEC_411,PROCEDURE,4630, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4631, ElsIf v_action_type = v_ws_act_db_dim then
WS_JOB_EXEC_411,PROCEDURE,4632, -- If this is a cube then let the scheduler handle it
WS_JOB_EXEC_411,PROCEDURE,4633, -- return value of 7
WS_JOB_EXEC_411,PROCEDURE,4634, -- Skip out to process it
WS_JOB_EXEC_411,PROCEDURE,4635, po_job_key := p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4636, po_task_key := p_task_id;
WS_JOB_EXEC_411,PROCEDURE,4637, po_task_name := p_task_name;
WS_JOB_EXEC_411,PROCEDURE,4638, po_result_msg := 'cube process db dimensions';
WS_JOB_EXEC_411,PROCEDURE,4639, po_action_key := v_obj_key;
WS_JOB_EXEC_411,PROCEDURE,4640, po_action_msg := 'no action';
WS_JOB_EXEC_411,PROCEDURE,4641, po_result_code := 7;
WS_JOB_EXEC_411,PROCEDURE,4642, ps_job_key_list := TO_CHAR(p_job_id);
WS_JOB_EXEC_411,PROCEDURE,4643, ps_task_key_list := TO_CHAR(p_task_id);
WS_JOB_EXEC_411,PROCEDURE,4644, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4645, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,4646, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4647, v_step := 6300;
WS_JOB_EXEC_411,PROCEDURE,4648, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4649, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,4650, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,4651, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4652, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,4653, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4654, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,4655, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,4656, End If;
WS_JOB_EXEC_411,PROCEDURE,4657, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4658, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4659, v_MsgText := 'Job '||pi_job_name||' unable to remove thread from ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,4660, END;
WS_JOB_EXEC_411,PROCEDURE,4661, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4662, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4663, -- U N S U P P O R T E D
WS_JOB_EXEC_411,PROCEDURE,4664, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4665, Else
WS_JOB_EXEC_411,PROCEDURE,4666, v_MsgText := 'Job '||p_task_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4667, ' could not perform action. Unsupported action '||
WS_JOB_EXEC_411,PROCEDURE,4668, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_411,PROCEDURE,4669, v_result := WsWrkAudit('E',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4670, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4671, p_status_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4672, p_return_msg := 'Unsupported action '||
WS_JOB_EXEC_411,PROCEDURE,4673, v_action_type||' for object ' ||v_obj_type;
WS_JOB_EXEC_411,PROCEDURE,4674, v_result := 1;
WS_JOB_EXEC_411,PROCEDURE,4675, End If;
WS_JOB_EXEC_411,PROCEDURE,4676, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4677, v_step := 6400;
WS_JOB_EXEC_411,PROCEDURE,4678, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4679, -- Check that our function worked. If not then task failed
WS_JOB_EXEC_411,PROCEDURE,4680, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4681, --If v_result = -3 Then
WS_JOB_EXEC_411,PROCEDURE,4682, -- p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,4683, -- If ltrim(rtrim(p_return_msg)) = Then
WS_JOB_EXEC_411,PROCEDURE,4684, -- p_return_msg := Unhandled exception in action;
WS_JOB_EXEC_411,PROCEDURE,4685, -- End If;
WS_JOB_EXEC_411,PROCEDURE,4686, --End If;
WS_JOB_EXEC_411,PROCEDURE,4687,
WS_JOB_EXEC_411,PROCEDURE,4688, v_just_done := 1;
WS_JOB_EXEC_411,PROCEDURE,4689, v_step := 6500;
WS_JOB_EXEC_411,PROCEDURE,4690, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4691, -- Log the results in the audit trail
WS_JOB_EXEC_411,PROCEDURE,4692, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4693, If p_status_code = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4694, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,4695, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,4696, ElsIf p_status_code = -1 Then
WS_JOB_EXEC_411,PROCEDURE,4697, v_audit_status := 'W';
WS_JOB_EXEC_411,PROCEDURE,4698, v_run_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,4699, ElsIf p_status_code = -2 Then
WS_JOB_EXEC_411,PROCEDURE,4700, v_audit_status := 'E';
WS_JOB_EXEC_411,PROCEDURE,4701, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4702, ElsIf p_status_code = -3 Then
WS_JOB_EXEC_411,PROCEDURE,4703, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4704, v_run_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4705, ELSE
WS_JOB_EXEC_411,PROCEDURE,4706, v_audit_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,4707, v_run_status := 'U';
WS_JOB_EXEC_411,PROCEDURE,4708, p_status_code := -3;
WS_JOB_EXEC_411,PROCEDURE,4709, End If;
WS_JOB_EXEC_411,PROCEDURE,4710, v_result := WsWrkAudit(v_audit_status, v_audit_job_name,v_audit_task_name, p_sequence,
WS_JOB_EXEC_411,PROCEDURE,4711, p_return_msg, NULL, NULL, v_audit_task_id, v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4712, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4713, -- See if the task needs a status update.
WS_JOB_EXEC_411,PROCEDURE,4714, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4715, If v_okay = 1 OR v_halted = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4716, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4717, -- Update the run record to indicate our final status
WS_JOB_EXEC_411,PROCEDURE,4718, -- If we have a halt then generate a message
WS_JOB_EXEC_411,PROCEDURE,4719, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4720, v_step := 6600;
WS_JOB_EXEC_411,PROCEDURE,4721, If v_halted = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4722, p_return_msg := 'Halted by dependency failure or halt';
WS_JOB_EXEC_411,PROCEDURE,4723, v_run_status := 'H';
WS_JOB_EXEC_411,PROCEDURE,4724, v_audit_status := NULL;
WS_JOB_EXEC_411,PROCEDURE,4725, End If;
WS_JOB_EXEC_411,PROCEDURE,4726, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4727, update ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,4728, set wtr_run_status = v_run_status,
WS_JOB_EXEC_411,PROCEDURE,4729, wtr_audit_status = v_audit_status,
WS_JOB_EXEC_411,PROCEDURE,4730, wtr_return_msg = p_return_msg,
WS_JOB_EXEC_411,PROCEDURE,4731, wtr_elapsed_hh = trunc(to_number(sysdate-wtr_started)*24,0),
WS_JOB_EXEC_411,PROCEDURE,4732, wtr_elapsed_mi = round(to_number(sysdate-wtr_started)*24*60,0) - (
WS_JOB_EXEC_411,PROCEDURE,4733, trunc(to_number(sysdate-wtr_started)*24,0)*60),
WS_JOB_EXEC_411,PROCEDURE,4734, wtr_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,4735, where wtr_task_key = v_task_key
WS_JOB_EXEC_411,PROCEDURE,4736, and wtr_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4737, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4738, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4739, ' failed in final update of ws_wrk_task_run for task id '||
WS_JOB_EXEC_411,PROCEDURE,4740, v_task_key||'. Run incomplete !!!';
WS_JOB_EXEC_411,PROCEDURE,4741, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4742, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4743, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4744, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4745, END;
WS_JOB_EXEC_411,PROCEDURE,4746, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4747, End If; -- End of task record update
WS_JOB_EXEC_411,PROCEDURE,4748, Else -- not processing, so must be an idle thread
WS_JOB_EXEC_411,PROCEDURE,4749, v_idle_thread := 1;
WS_JOB_EXEC_411,PROCEDURE,4750, --
WS_JOB_EXEC_411,PROCEDURE,4751, -- Check that we have running tasks.
WS_JOB_EXEC_411,PROCEDURE,4752, -- If we have waiting tasks and no running tasks then we must have a dependency loop
WS_JOB_EXEC_411,PROCEDURE,4753, -- So tell them about it and abort.
WS_JOB_EXEC_411,PROCEDURE,4754, IF v_task_count = 1
WS_JOB_EXEC_411,PROCEDURE,4755, AND v_running_count = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,4756, IF v_depend_loop = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,4757, v_task_count := 0; -- force a break out of the loop
WS_JOB_EXEC_411,PROCEDURE,4758, ELSE
WS_JOB_EXEC_411,PROCEDURE,4759, v_depend_loop := 1; -- set dependency flag so we break out next time through
WS_JOB_EXEC_411,PROCEDURE,4760, END IF;
WS_JOB_EXEC_411,PROCEDURE,4761, ELSIF v_running_count > 0 THEN -- running tasks so no loop yet
WS_JOB_EXEC_411,PROCEDURE,4762, v_depend_loop := 0; -- clear any dependency loop as nothing waiting
WS_JOB_EXEC_411,PROCEDURE,4763, ELSIF v_task_count = 0 THEN -- no Waiting Tasks so no loop. will exit
WS_JOB_EXEC_411,PROCEDURE,4764, v_depend_loop := 0; -- clear any dependency loop as nothing waiting
WS_JOB_EXEC_411,PROCEDURE,4765, END IF;
WS_JOB_EXEC_411,PROCEDURE,4766, End If; -- End of Processing of a task
WS_JOB_EXEC_411,PROCEDURE,4767,
WS_JOB_EXEC_411,PROCEDURE,4768, -- If just processed then sleep for 2 seconds and look for next task
WS_JOB_EXEC_411,PROCEDURE,4769, If v_just_done = 0 Then
WS_JOB_EXEC_411,PROCEDURE,4770, DBMS_LOCK.SLEEP(2);
WS_JOB_EXEC_411,PROCEDURE,4771, End If;
WS_JOB_EXEC_411,PROCEDURE,4772,
WS_JOB_EXEC_411,PROCEDURE,4773, -- If the thread is idle then sleep for 30 seconds.
WS_JOB_EXEC_411,PROCEDURE,4774, If v_idle_thread = 1 And v_running_count > 0 Then
WS_JOB_EXEC_411,PROCEDURE,4775,-- DBMS_LOCK.SLEEP(30);
WS_JOB_EXEC_411,PROCEDURE,4776, DBMS_LOCK.SLEEP(v_idle_thread_wait);
WS_JOB_EXEC_411,PROCEDURE,4777, End If;
WS_JOB_EXEC_411,PROCEDURE,4778,
WS_JOB_EXEC_411,PROCEDURE,4779, END LOOP; -- End of While More tasks Loop
WS_JOB_EXEC_411,PROCEDURE,4780,
WS_JOB_EXEC_411,PROCEDURE,4781, v_step := 6700;
WS_JOB_EXEC_411,PROCEDURE,4782,
WS_JOB_EXEC_411,PROCEDURE,4783,-- DBMS_SQL.CLOSE_CURSOR(v_cursor);
WS_JOB_EXEC_411,PROCEDURE,4784,
WS_JOB_EXEC_411,PROCEDURE,4785, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4786, -- A L L T A S K S D O N E
WS_JOB_EXEC_411,PROCEDURE,4787, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4788, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4789, -- Here if no more waiting tasks. If no more running tasks
WS_JOB_EXEC_411,PROCEDURE,4790, -- then all threads are finished, so update the job_run
WS_JOB_EXEC_411,PROCEDURE,4791, -- record to a completed state
WS_JOB_EXEC_411,PROCEDURE,4792, -- WMR Need to update the ctrl record and move the run records to the log tables. WMR
WS_JOB_EXEC_411,PROCEDURE,4793, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4794, po_action_key := 0;
WS_JOB_EXEC_411,PROCEDURE,4795, po_action_msg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4796, po_result_code := 1;
WS_JOB_EXEC_411,PROCEDURE,4797, v_step := 6800;
WS_JOB_EXEC_411,PROCEDURE,4798, If v_running_count = 0 Then
WS_JOB_EXEC_411,PROCEDURE,4799,
WS_JOB_EXEC_411,PROCEDURE,4800, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,4801,
WS_JOB_EXEC_411,PROCEDURE,4802, -- work out what the return will be
WS_JOB_EXEC_411,PROCEDURE,4803, If v_halted_count = 0 AND v_failed_count = 0 AND v_depend_loop = 0 Then
WS_JOB_EXEC_411,PROCEDURE,4804, v_job_status := 'C';
WS_JOB_EXEC_411,PROCEDURE,4805, v_audit_status := 'S';
WS_JOB_EXEC_411,PROCEDURE,4806, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4807, ' Completed. ';
WS_JOB_EXEC_411,PROCEDURE,4808, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4809, Select wjr_publish_okay into v_OkayMsg
WS_JOB_EXEC_411,PROCEDURE,4810, From ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4811, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4812, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4813, v_FailMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4814, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4815, v_OkayMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4816, v_FailMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4817, END;
WS_JOB_EXEC_411,PROCEDURE,4818, Else
WS_JOB_EXEC_411,PROCEDURE,4819, If v_depend_loop = 1 AND v_failed_count = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,4820, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4821, v_job_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4822, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4823, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4824, ' CANNOT COMPLETE. Possible task dependency loop. ';
WS_JOB_EXEC_411,PROCEDURE,4825, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4826, Select wjr_publish_fail into v_FailMsg
WS_JOB_EXEC_411,PROCEDURE,4827, From ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4828, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4829, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4830, v_OkayMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4831, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4832, v_OkayMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4833, v_FailMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4834, END;
WS_JOB_EXEC_411,PROCEDURE,4835, ELSE
WS_JOB_EXEC_411,PROCEDURE,4836, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4837, v_job_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4838, v_audit_status := 'F';
WS_JOB_EXEC_411,PROCEDURE,4839, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4840, ' FAILED. ';
WS_JOB_EXEC_411,PROCEDURE,4841, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4842, Select wjr_publish_fail into v_FailMsg
WS_JOB_EXEC_411,PROCEDURE,4843, From ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4844, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4845, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4846, v_OkayMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4847, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4848, v_OkayMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4849, v_FailMsg := NULL;
WS_JOB_EXEC_411,PROCEDURE,4850, END;
WS_JOB_EXEC_411,PROCEDURE,4851, END IF;
WS_JOB_EXEC_411,PROCEDURE,4852, End If;
WS_JOB_EXEC_411,PROCEDURE,4853,
WS_JOB_EXEC_411,PROCEDURE,4854, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4855, -- All tasks done
WS_JOB_EXEC_411,PROCEDURE,4856, -- Set the job status on the run record and job finish time
WS_JOB_EXEC_411,PROCEDURE,4857, -- Need to lock the record first to prevent another thread from
WS_JOB_EXEC_411,PROCEDURE,4858, -- grabbing it, or in case another thread has already got it,
WS_JOB_EXEC_411,PROCEDURE,4859, -- or updated it
WS_JOB_EXEC_411,PROCEDURE,4860, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,4861, v_step := 6900;
WS_JOB_EXEC_411,PROCEDURE,4862, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4863, select wjr_status into v_run_status
WS_JOB_EXEC_411,PROCEDURE,4864, from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4865, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4866, and wjr_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,4867, for update nowait;
WS_JOB_EXEC_411,PROCEDURE,4868, If v_run_status = 'R' Then
WS_JOB_EXEC_411,PROCEDURE,4869, update ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4870, set wjr_status = v_job_status,
WS_JOB_EXEC_411,PROCEDURE,4871, wjr_elapsed_hh = trunc(to_number(sysdate-wjr_started)*24,0),
WS_JOB_EXEC_411,PROCEDURE,4872, wjr_elapsed_mi = round(to_number(sysdate-wjr_started)*24*60,0) - (
WS_JOB_EXEC_411,PROCEDURE,4873, trunc(to_number(sysdate-wjr_started)*24,0)*60),
WS_JOB_EXEC_411,PROCEDURE,4874, wjr_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,4875, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4876, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4877, v_okay := 1;
WS_JOB_EXEC_411,PROCEDURE,4878, Else
WS_JOB_EXEC_411,PROCEDURE,4879, -- someone else got the record
WS_JOB_EXEC_411,PROCEDURE,4880, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,4881, End If;
WS_JOB_EXEC_411,PROCEDURE,4882, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4883, -- If a resource busy someone else has the record
WS_JOB_EXEC_411,PROCEDURE,4884, -- so skip it
WS_JOB_EXEC_411,PROCEDURE,4885, -- If a no data found then the run record has already been
WS_JOB_EXEC_411,PROCEDURE,4886, -- changed to log so all okay
WS_JOB_EXEC_411,PROCEDURE,4887, If SQLCODE = -54 Then
WS_JOB_EXEC_411,PROCEDURE,4888, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,4889, ElsIf SQLCODE = 100 Then
WS_JOB_EXEC_411,PROCEDURE,4890, v_okay := 0;
WS_JOB_EXEC_411,PROCEDURE,4891, Else
WS_JOB_EXEC_411,PROCEDURE,4892, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4893, ' failed to change state to completed '||
WS_JOB_EXEC_411,PROCEDURE,4894, 'in ws_wrk_job_run.!!!';
WS_JOB_EXEC_411,PROCEDURE,4895, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4896, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4897, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4898, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4899, End If;
WS_JOB_EXEC_411,PROCEDURE,4900, END;
WS_JOB_EXEC_411,PROCEDURE,4901, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4902,
WS_JOB_EXEC_411,PROCEDURE,4903, -- if we are the thread doing the update then
WS_JOB_EXEC_411,PROCEDURE,4904, -- write to the audit trail and complete the cleanup
WS_JOB_EXEC_411,PROCEDURE,4905, If v_okay = 1 Then
WS_JOB_EXEC_411,PROCEDURE,4906,
WS_JOB_EXEC_411,PROCEDURE,4907, If v_OkayMsg is not Null Then
WS_JOB_EXEC_411,PROCEDURE,4908, po_action_key := 1;
WS_JOB_EXEC_411,PROCEDURE,4909, po_action_msg := v_OkayMsg;
WS_JOB_EXEC_411,PROCEDURE,4910, End If;
WS_JOB_EXEC_411,PROCEDURE,4911, If v_FailMsg is not Null Then
WS_JOB_EXEC_411,PROCEDURE,4912, po_action_key := 2;
WS_JOB_EXEC_411,PROCEDURE,4913, po_action_msg := v_FailMsg;
WS_JOB_EXEC_411,PROCEDURE,4914, End If;
WS_JOB_EXEC_411,PROCEDURE,4915,
WS_JOB_EXEC_411,PROCEDURE,4916, -- substitute any variables.
WS_JOB_EXEC_411,PROCEDURE,4917, IF po_action_msg IS NOT NULL THEN
WS_JOB_EXEC_411,PROCEDURE,4918, po_action_msg := REPLACE(po_action_msg,'$JOB_KEY$',NVL(v_audit_job_id,0));
WS_JOB_EXEC_411,PROCEDURE,4919, po_action_msg := REPLACE(po_action_msg,'$JOB_SEQ$',NVL(pi_sequence,0));
WS_JOB_EXEC_411,PROCEDURE,4920, po_action_msg := REPLACE(po_action_msg,'$JOB_THREAD$',NVL(pi_thread,-1));
WS_JOB_EXEC_411,PROCEDURE,4921, po_action_msg := REPLACE(po_action_msg,'$JOB_NAME$',RTRIM(v_audit_job_name));
WS_JOB_EXEC_411,PROCEDURE,4922, END IF;
WS_JOB_EXEC_411,PROCEDURE,4923,
WS_JOB_EXEC_411,PROCEDURE,4924, --
WS_JOB_EXEC_411,PROCEDURE,4925, -- replace any DSS parameters with their current values
WS_JOB_EXEC_411,PROCEDURE,4926, --
WS_JOB_EXEC_411,PROCEDURE,4927,
WS_JOB_EXEC_411,PROCEDURE,4928, v_spos := INSTR(po_action_msg,'$P');
WS_JOB_EXEC_411,PROCEDURE,4929, WHILE v_spos > 0 LOOP
WS_JOB_EXEC_411,PROCEDURE,4930, v_spos := INSTR(po_action_msg,'$P');
WS_JOB_EXEC_411,PROCEDURE,4931, If v_spos > 0 Then
WS_JOB_EXEC_411,PROCEDURE,4932, v_epos := INSTR(po_action_msg,'$',v_spos+2);
WS_JOB_EXEC_411,PROCEDURE,4933, If v_epos = 0 Then
WS_JOB_EXEC_411,PROCEDURE,4934, v_spos := 0;
WS_JOB_EXEC_411,PROCEDURE,4935, Else
WS_JOB_EXEC_411,PROCEDURE,4936, v_work := SUBSTR(po_action_msg,v_spos+2,v_epos-v_spos-2);
WS_JOB_EXEC_411,PROCEDURE,4937, v_parameter := WsParameterRead(v_work);
WS_JOB_EXEC_411,PROCEDURE,4938, v_work := SUBSTR(po_action_msg,v_spos,v_epos-v_spos+1);
WS_JOB_EXEC_411,PROCEDURE,4939, po_action_msg := REPLACE(po_action_msg,v_work,v_parameter);
WS_JOB_EXEC_411,PROCEDURE,4940, End If;
WS_JOB_EXEC_411,PROCEDURE,4941, End If;
WS_JOB_EXEC_411,PROCEDURE,4942, END LOOP;
WS_JOB_EXEC_411,PROCEDURE,4943,
WS_JOB_EXEC_411,PROCEDURE,4944, v_result := WsWrkAudit(v_audit_status,v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4945, v_MsgText,NULL,NULL,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4946,
WS_JOB_EXEC_411,PROCEDURE,4947, -- Set the job status on the control record for the job and finish time.
WS_JOB_EXEC_411,PROCEDURE,4948, -- WMR need to set the status to HOLD or Waiting depending on if another run.
WS_JOB_EXEC_411,PROCEDURE,4949, v_step := 7000;
WS_JOB_EXEC_411,PROCEDURE,4950, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4951, update ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,4952, set wjc_last_status = v_job_status,
WS_JOB_EXEC_411,PROCEDURE,4953, wjc_completed = sysdate
WS_JOB_EXEC_411,PROCEDURE,4954, where wjc_job_key = p_job_id;
WS_JOB_EXEC_411,PROCEDURE,4955, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4956, v_MsgText := 'Job '||pi_job_name||' sequence '||pi_sequence||
WS_JOB_EXEC_411,PROCEDURE,4957, ' failed to change completed time for job '||
WS_JOB_EXEC_411,PROCEDURE,4958, 'in ws_wrk_job_ctrl.!!!';
WS_JOB_EXEC_411,PROCEDURE,4959, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4960, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4961, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4962, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4963, END;
WS_JOB_EXEC_411,PROCEDURE,4964, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,4965, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4966,
WS_JOB_EXEC_411,PROCEDURE,4967, v_step := 7100;
WS_JOB_EXEC_411,PROCEDURE,4968, If v_job_status = 'C' Then
WS_JOB_EXEC_411,PROCEDURE,4969, -- Move the job run record to the log record
WS_JOB_EXEC_411,PROCEDURE,4970, v_step := 7200;
WS_JOB_EXEC_411,PROCEDURE,4971, BEGIN
WS_JOB_EXEC_411,PROCEDURE,4972, insert into ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,4973, select * from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4974, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4975, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4976, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,4977, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4978, IF v_child_job = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,4979, DELETE FROM ws_wrk_job_log
WS_JOB_EXEC_411,PROCEDURE,4980, WHERE wjl_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4981, AND wjl_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4982, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,4983, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4984, END IF;
WS_JOB_EXEC_411,PROCEDURE,4985, delete from ws_wrk_job_run
WS_JOB_EXEC_411,PROCEDURE,4986, where wjr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,4987, and wjr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,4988, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,4989, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,4990, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,4991, v_MsgText := 'Job '||pi_job_name||' failed in xfer to ws_wrk_job_log. '||
WS_JOB_EXEC_411,PROCEDURE,4992, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,4993, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,4994, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,4995, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,4996, RETURN;
WS_JOB_EXEC_411,PROCEDURE,4997, END;
WS_JOB_EXEC_411,PROCEDURE,4998,
WS_JOB_EXEC_411,PROCEDURE,4999, -- Move the task run records to the log record
WS_JOB_EXEC_411,PROCEDURE,5000, v_step := 7300;
WS_JOB_EXEC_411,PROCEDURE,5001, BEGIN
WS_JOB_EXEC_411,PROCEDURE,5002, insert into ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,5003, select * from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,5004, where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,5005, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,5006, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,5007, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,5008, IF v_child_job = 1 THEN
WS_JOB_EXEC_411,PROCEDURE,5009, UPDATE ws_wrk_task_log
WS_JOB_EXEC_411,PROCEDURE,5010, SET wtl_job_key = v_audit_job_id
WS_JOB_EXEC_411,PROCEDURE,5011, WHERE wtl_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,5012, AND wtl_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,5013, -- 5.1.0.1 commit removed to make full transaction
WS_JOB_EXEC_411,PROCEDURE,5014, --COMMIT;
WS_JOB_EXEC_411,PROCEDURE,5015, END IF;
WS_JOB_EXEC_411,PROCEDURE,5016, v_step := 7400;
WS_JOB_EXEC_411,PROCEDURE,5017, delete from ws_wrk_task_run
WS_JOB_EXEC_411,PROCEDURE,5018, where wtr_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,5019, and wtr_sequence = pi_sequence;
WS_JOB_EXEC_411,PROCEDURE,5020, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,5021, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,5022, v_MsgText := 'Job '||pi_job_name||' failed in xfer of tasks to ws_wrk_task_log. '||
WS_JOB_EXEC_411,PROCEDURE,5023, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,5024, v_result := WsWrkAudit('F',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,5025, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,5026, po_result_code := -2;
WS_JOB_EXEC_411,PROCEDURE,5027, RETURN;
WS_JOB_EXEC_411,PROCEDURE,5028, END;
WS_JOB_EXEC_411,PROCEDURE,5029, End If;
WS_JOB_EXEC_411,PROCEDURE,5030,
WS_JOB_EXEC_411,PROCEDURE,5031, -- If this job has a blocked iteration waiting then release it
WS_JOB_EXEC_411,PROCEDURE,5032, v_step := 7500;
WS_JOB_EXEC_411,PROCEDURE,5033, BEGIN
WS_JOB_EXEC_411,PROCEDURE,5034, update ws_wrk_job_ctrl
WS_JOB_EXEC_411,PROCEDURE,5035, set wjc_status = 'W'
WS_JOB_EXEC_411,PROCEDURE,5036, where wjc_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,5037, and wjc_status = 'B';
WS_JOB_EXEC_411,PROCEDURE,5038, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,5039, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,5040, v_MsgText := 'Job '||pi_job_name||' failed to release blocked job. '||
WS_JOB_EXEC_411,PROCEDURE,5041, ' No Action !!!';
WS_JOB_EXEC_411,PROCEDURE,5042, v_result := WsWrkAudit('W',v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,5043, v_MsgText,SQLCODE,SQLERRM,v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,5044, END;
WS_JOB_EXEC_411,PROCEDURE,5045,
WS_JOB_EXEC_411,PROCEDURE,5046, End If; -- end of final thread
WS_JOB_EXEC_411,PROCEDURE,5047,
WS_JOB_EXEC_411,PROCEDURE,5048, End If; -- end of running count 0
WS_JOB_EXEC_411,PROCEDURE,5049,
WS_JOB_EXEC_411,PROCEDURE,5050, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,5051, -- Remove this thread as being active
WS_JOB_EXEC_411,PROCEDURE,5052, --=====================================================
WS_JOB_EXEC_411,PROCEDURE,5053, v_step := 7600;
WS_JOB_EXEC_411,PROCEDURE,5054, BEGIN
WS_JOB_EXEC_411,PROCEDURE,5055, IF p_job_id > 0 And v_sid <> 0 Then
WS_JOB_EXEC_411,PROCEDURE,5056, Delete from ws_wrk_job_thread
WS_JOB_EXEC_411,PROCEDURE,5057, Where wjt_job_key = p_job_id
WS_JOB_EXEC_411,PROCEDURE,5058, And wjt_thread = pi_thread
WS_JOB_EXEC_411,PROCEDURE,5059, And wjt_sequence = pi_sequence
WS_JOB_EXEC_411,PROCEDURE,5060, And wjt_sid = v_sid
WS_JOB_EXEC_411,PROCEDURE,5061, And wjt_serial = v_serial;
WS_JOB_EXEC_411,PROCEDURE,5062, End If;
WS_JOB_EXEC_411,PROCEDURE,5063, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,5064, EXCEPTION WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,5065, v_MsgText := 'Job '||pi_job_name||' unable to record thread in ws_wrk_job_thread ';
WS_JOB_EXEC_411,PROCEDURE,5066, END;
WS_JOB_EXEC_411,PROCEDURE,5067,
WS_JOB_EXEC_411,PROCEDURE,5068, v_step := 7700;
WS_JOB_EXEC_411,PROCEDURE,5069, COMMIT;
WS_JOB_EXEC_411,PROCEDURE,5070,
WS_JOB_EXEC_411,PROCEDURE,5071, -- If the master job then set the result code to 1 to indicate that the job completed okay
WS_JOB_EXEC_411,PROCEDURE,5072, -- even if it may have failed.
WS_JOB_EXEC_411,PROCEDURE,5073, IF v_child_job = 0 THEN
WS_JOB_EXEC_411,PROCEDURE,5074, po_result_code := 1;
WS_JOB_EXEC_411,PROCEDURE,5075, END IF;
WS_JOB_EXEC_411,PROCEDURE,5076,
WS_JOB_EXEC_411,PROCEDURE,5077,
WS_JOB_EXEC_411,PROCEDURE,5078, RETURN;
WS_JOB_EXEC_411,PROCEDURE,5079,
WS_JOB_EXEC_411,PROCEDURE,5080,EXCEPTION
WS_JOB_EXEC_411,PROCEDURE,5081, WHEN OTHERS THEN
WS_JOB_EXEC_411,PROCEDURE,5082, v_MsgText := 'Unhandled Exception in ws_job_exec_411 '|| v_ws_pro_version ||
WS_JOB_EXEC_411,PROCEDURE,5083, ' Step ' ||v_step;
WS_JOB_EXEC_411,PROCEDURE,5084, v_result := WsWrkAudit('F', v_audit_job_name,v_audit_task_name, pi_sequence,
WS_JOB_EXEC_411,PROCEDURE,5085, v_MsgText,SQLCODE, SQLERRM, v_audit_task_id,v_audit_job_id);
WS_JOB_EXEC_411,PROCEDURE,5086, po_result_code := -3;
WS_JOB_EXEC_411,PROCEDURE,5087, RETURN;
WS_JOB_EXEC_411,PROCEDURE,5088,END ws_job_exec_411;
WS_JOB_EXEC_411,PROCEDURE,5089,
WS_JOB_GET_START,FUNCTION,1,FUNCTION Ws_Job_Get_Start
WS_JOB_GET_START,FUNCTION,2, (
WS_JOB_GET_START,FUNCTION,3, pi_job_key IN number
WS_JOB_GET_START,FUNCTION,4, ,po_start_after OUT date
WS_JOB_GET_START,FUNCTION,5, ,po_job_status OUT varchar
WS_JOB_GET_START,FUNCTION,6, ,po_result_code OUT number
WS_JOB_GET_START,FUNCTION,7, ,po_return_msg OUT varchar2
WS_JOB_GET_START,FUNCTION,8, )
WS_JOB_GET_START,FUNCTION,9, RETURN integer
WS_JOB_GET_START,FUNCTION,10, AUTHID CURRENT_USER
WS_JOB_GET_START,FUNCTION,11, IS
WS_JOB_GET_START,FUNCTION,12, PRAGMA AUTONOMOUS_TRANSACTION;
WS_JOB_GET_START,FUNCTION,13,
WS_JOB_GET_START,FUNCTION,14, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_GET_START,FUNCTION,15,
WS_JOB_GET_START,FUNCTION,16, -- =============================================================================
WS_JOB_GET_START,FUNCTION,17, -- DBMS Name : ORACLE
WS_JOB_GET_START,FUNCTION,18, -- Script Name : Ws_Job_Get_Start
WS_JOB_GET_START,FUNCTION,19, -- Description : Return next valid starttime for a job
WS_JOB_GET_START,FUNCTION,20, -- Author : Chris Lerew
WS_JOB_GET_START,FUNCTION,21, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_GET_START,FUNCTION,22, -- =============================================================================
WS_JOB_GET_START,FUNCTION,23,
WS_JOB_GET_START,FUNCTION,24, --=====================================================
WS_JOB_GET_START,FUNCTION,25, -- Constants Declared
WS_JOB_GET_START,FUNCTION,26, --=====================================================
WS_JOB_GET_START,FUNCTION,27, v_ws_pro_version varchar2(50) := 'Ws_Job_Get_Start (8.4.1.0)';
WS_JOB_GET_START,FUNCTION,28,
WS_JOB_GET_START,FUNCTION,29, --=====================================================
WS_JOB_GET_START,FUNCTION,30, -- Control variables
WS_JOB_GET_START,FUNCTION,31, --=====================================================
WS_JOB_GET_START,FUNCTION,32, SQLCODE integer := 0; -- sql result code
WS_JOB_GET_START,FUNCTION,33, SQLSTATE char(5); -- sql result state
WS_JOB_GET_START,FUNCTION,34, v_step integer; -- return code
WS_JOB_GET_START,FUNCTION,35, v_sql_code integer; -- Database error code for Audit Trail
WS_JOB_GET_START,FUNCTION,36, v_sql_state char(5); -- Database error state
WS_JOB_GET_START,FUNCTION,37,
WS_JOB_GET_START,FUNCTION,38, --=====================================================
WS_JOB_GET_START,FUNCTION,39, -- Variables
WS_JOB_GET_START,FUNCTION,40, --=====================================================
WS_JOB_GET_START,FUNCTION,41, v_job_type char(1);
WS_JOB_GET_START,FUNCTION,42, v_start_after date;
WS_JOB_GET_START,FUNCTION,43, v_start_hh integer;
WS_JOB_GET_START,FUNCTION,44, v_start_mi integer;
WS_JOB_GET_START,FUNCTION,45, v_start_day integer;
WS_JOB_GET_START,FUNCTION,46, v_cust_sa_hh integer;
WS_JOB_GET_START,FUNCTION,47, v_cust_sa_mm integer;
WS_JOB_GET_START,FUNCTION,48, v_cust_sb_hh integer;
WS_JOB_GET_START,FUNCTION,49, v_cust_sb_mm integer;
WS_JOB_GET_START,FUNCTION,50, v_cust_min integer;
WS_JOB_GET_START,FUNCTION,51, v_cust_days integer;
WS_JOB_GET_START,FUNCTION,52, -- Variables for Custom schedule calculations
WS_JOB_GET_START,FUNCTION,53, v_Cust_SDate date; -- Proposed Start, Date part only
WS_JOB_GET_START,FUNCTION,54, v_Cust_SATime date; -- Start After time on proposed date
WS_JOB_GET_START,FUNCTION,55, v_Cust_SBTime date; -- Start Before time on proposed date
WS_JOB_GET_START,FUNCTION,56,
WS_JOB_GET_START,FUNCTION,57, v_Cust_SDayOK integer; -- 0 = Not scheduled on this day
WS_JOB_GET_START,FUNCTION,58, v_more integer;
WS_JOB_GET_START,FUNCTION,59,
WS_JOB_GET_START,FUNCTION,60, --=====================================================
WS_JOB_GET_START,FUNCTION,61, -- MAIN
WS_JOB_GET_START,FUNCTION,62, --=====================================================
WS_JOB_GET_START,FUNCTION,63,BEGIN
WS_JOB_GET_START,FUNCTION,64,
WS_JOB_GET_START,FUNCTION,65, v_step := 100;
WS_JOB_GET_START,FUNCTION,66, -- Set assumption for failure
WS_JOB_GET_START,FUNCTION,67, po_result_code := -3;
WS_JOB_GET_START,FUNCTION,68, po_start_after := TO_DATE('9999-12-31', 'YYYY-MM-DD');
WS_JOB_GET_START,FUNCTION,69, po_job_status := 'H';
WS_JOB_GET_START,FUNCTION,70, po_return_msg := v_ws_pro_version || ' Failed to determine next start for job key '
WS_JOB_GET_START,FUNCTION,71, || TO_CHAR(NVL(pi_job_key,0) );
WS_JOB_GET_START,FUNCTION,72,
WS_JOB_GET_START,FUNCTION,73, v_step := 200;
WS_JOB_GET_START,FUNCTION,74, v_job_type := NULL;
WS_JOB_GET_START,FUNCTION,75, SELECT wjc_type
WS_JOB_GET_START,FUNCTION,76, , wjc_start_hour
WS_JOB_GET_START,FUNCTION,77, , wjc_start_minute
WS_JOB_GET_START,FUNCTION,78, , wjc_start_day
WS_JOB_GET_START,FUNCTION,79, , NVL(wjc_cust_sa_hh,0)
WS_JOB_GET_START,FUNCTION,80, , NVL(wjc_cust_sa_mm,0)
WS_JOB_GET_START,FUNCTION,81, , NVL(wjc_cust_sb_hh,0)
WS_JOB_GET_START,FUNCTION,82, , NVL(wjc_cust_sb_mm,0)
WS_JOB_GET_START,FUNCTION,83, , NVL(wjc_cust_min,0)
WS_JOB_GET_START,FUNCTION,84, , NVL(wjc_cust_days,0)
WS_JOB_GET_START,FUNCTION,85, , wjc_start_after
WS_JOB_GET_START,FUNCTION,86, INTO v_job_type
WS_JOB_GET_START,FUNCTION,87, , v_start_hh
WS_JOB_GET_START,FUNCTION,88, , v_start_mi
WS_JOB_GET_START,FUNCTION,89, , v_start_day
WS_JOB_GET_START,FUNCTION,90, , v_cust_sa_hh
WS_JOB_GET_START,FUNCTION,91, , v_cust_sa_mm
WS_JOB_GET_START,FUNCTION,92, , v_cust_sb_hh
WS_JOB_GET_START,FUNCTION,93, , v_cust_sb_mm
WS_JOB_GET_START,FUNCTION,94, , v_cust_min
WS_JOB_GET_START,FUNCTION,95, , v_cust_days
WS_JOB_GET_START,FUNCTION,96, , v_start_after
WS_JOB_GET_START,FUNCTION,97, FROM ws_wrk_job_ctrl
WS_JOB_GET_START,FUNCTION,98, WHERE wjc_job_key = pi_job_key;
WS_JOB_GET_START,FUNCTION,99,
WS_JOB_GET_START,FUNCTION,100, IF v_job_type IS NULL
WS_JOB_GET_START,FUNCTION,101, THEN
WS_JOB_GET_START,FUNCTION,102, po_result_code := -2;
WS_JOB_GET_START,FUNCTION,103, po_return_msg := v_ws_pro_version || ' Failed to find job for job key '
WS_JOB_GET_START,FUNCTION,104, || TO_CHAR(NVL(pi_job_key,0) );
WS_JOB_GET_START,FUNCTION,105,
WS_JOB_GET_START,FUNCTION,106, RETURN po_result_code ;
WS_JOB_GET_START,FUNCTION,107, END IF;
WS_JOB_GET_START,FUNCTION,108,
WS_JOB_GET_START,FUNCTION,109, -- Assume custom range 0000 to 0000 is really 0000 to 2400 (all day)
WS_JOB_GET_START,FUNCTION,110, -- RED_1670
WS_JOB_GET_START,FUNCTION,111, -- IF v_cust_sa_hh + v_cust_sa_mm = 0
WS_JOB_GET_START,FUNCTION,112, IF v_cust_sb_hh + v_cust_sb_mm = 0
WS_JOB_GET_START,FUNCTION,113, THEN v_cust_sb_hh := 24;
WS_JOB_GET_START,FUNCTION,114, END IF;
WS_JOB_GET_START,FUNCTION,115,
WS_JOB_GET_START,FUNCTION,116, v_step := 300;
WS_JOB_GET_START,FUNCTION,117, po_job_status := 'W'; -- Default for most job types
WS_JOB_GET_START,FUNCTION,118,
WS_JOB_GET_START,FUNCTION,119, IF v_job_type IN ('H','S') THEN -- Hold, or Once and Hold Schedule.
WS_JOB_GET_START,FUNCTION,120,
WS_JOB_GET_START,FUNCTION,121, v_start_after := SYSDATE;
WS_JOB_GET_START,FUNCTION,122, po_job_status := 'H';
WS_JOB_GET_START,FUNCTION,123,
WS_JOB_GET_START,FUNCTION,124, ELSIF v_job_type = 'D' THEN -- Daily
WS_JOB_GET_START,FUNCTION,125, WHILE v_start_after < SYSDATE LOOP -- play catch up in case we got behind
WS_JOB_GET_START,FUNCTION,126, v_start_after := TRUNC(v_start_after) + 1 + (v_start_hh/24) + (v_start_mi/1440);
WS_JOB_GET_START,FUNCTION,127, END LOOP;
WS_JOB_GET_START,FUNCTION,128,
WS_JOB_GET_START,FUNCTION,129, ELSIF v_job_type = 'W' THEN -- Weekly
WS_JOB_GET_START,FUNCTION,130, WHILE v_start_after < SYSDATE LOOP -- play catch up in case we got behind
WS_JOB_GET_START,FUNCTION,131, v_start_after := TRUNC(v_start_after) + 7 + (v_start_hh/24) + (v_start_mi/1440);
WS_JOB_GET_START,FUNCTION,132, END LOOP;
WS_JOB_GET_START,FUNCTION,133,
WS_JOB_GET_START,FUNCTION,134, ELSIF v_job_type = 'M' THEN -- Monthly
WS_JOB_GET_START,FUNCTION,135, WHILE v_start_after < SYSDATE LOOP -- play catch up in case we got behind
WS_JOB_GET_START,FUNCTION,136, v_start_after := ADD_MONTHS(TRUNC(v_start_after) + (v_start_hh/24) + (v_start_mi/1440),1);
WS_JOB_GET_START,FUNCTION,137, END LOOP;
WS_JOB_GET_START,FUNCTION,138,
WS_JOB_GET_START,FUNCTION,139, ELSIF v_job_type = 'A' THEN -- Annually
WS_JOB_GET_START,FUNCTION,140, WHILE v_start_after < SYSDATE LOOP -- play catch up in case we got behind
WS_JOB_GET_START,FUNCTION,141, v_start_after := ADD_MONTHS(TRUNC(v_start_after) + (v_start_hh/24) + (v_start_mi/1440),12);
WS_JOB_GET_START,FUNCTION,142, END LOOP;
WS_JOB_GET_START,FUNCTION,143,
WS_JOB_GET_START,FUNCTION,144, ELSIF v_job_type = 'C' THEN -- Custom
WS_JOB_GET_START,FUNCTION,145,
WS_JOB_GET_START,FUNCTION,146, v_step := 400;
WS_JOB_GET_START,FUNCTION,147, WHILE v_start_after < SYSDATE LOOP -- play catch up in case we got behind
WS_JOB_GET_START,FUNCTION,148, v_start_after := v_start_after -- Add first Interval minutes for next proposed start date and time
WS_JOB_GET_START,FUNCTION,149, + v_cust_min/1440;
WS_JOB_GET_START,FUNCTION,150, END LOOP;
WS_JOB_GET_START,FUNCTION,151,
WS_JOB_GET_START,FUNCTION,152, v_more := 1;
WS_JOB_GET_START,FUNCTION,153,
WS_JOB_GET_START,FUNCTION,154, v_step := 500;
WS_JOB_GET_START,FUNCTION,155, WHILE v_more = 1 AND v_start_after < SYSDATE + 8 LOOP -- Must be a mistake if we get over a week out with no match.
WS_JOB_GET_START,FUNCTION,156, v_step := v_step + 1;
WS_JOB_GET_START,FUNCTION,157, v_Cust_SDate := TRUNC(v_start_after);
WS_JOB_GET_START,FUNCTION,158,
WS_JOB_GET_START,FUNCTION,159, v_Cust_SATime := v_Cust_SDate + (v_cust_sa_hh/24) + (v_cust_sa_mm/1440);
WS_JOB_GET_START,FUNCTION,160, v_Cust_SBTime := v_Cust_SDate + (v_cust_sb_hh/24) + (v_cust_sb_mm/1440);
WS_JOB_GET_START,FUNCTION,161,
WS_JOB_GET_START,FUNCTION,162, -- Check that the proposed Day is scheduled
WS_JOB_GET_START,FUNCTION,163, v_step := 600;
WS_JOB_GET_START,FUNCTION,164, IF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-01','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 1); --Monday
WS_JOB_GET_START,FUNCTION,165, ELSIF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-02','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 2); --Tuesday
WS_JOB_GET_START,FUNCTION,166, ELSIF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-03','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 4); --Wednesday
WS_JOB_GET_START,FUNCTION,167, ELSIF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-04','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 8); --Thurday
WS_JOB_GET_START,FUNCTION,168, ELSIF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-05','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 16); --Friday
WS_JOB_GET_START,FUNCTION,169, ELSIF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-06','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 32); --Saturday
WS_JOB_GET_START,FUNCTION,170, ELSIF TO_CHAR(v_start_after, 'DY') = TO_CHAR(TO_DATE('1900-01-07','YYYY-MM-DD') ,'DY') THEN v_Cust_SDayOK := BITAND(v_cust_days, 64); --Sunday
WS_JOB_GET_START,FUNCTION,171, END IF;
WS_JOB_GET_START,FUNCTION,172, -- Day not scheduled, skip to next day
WS_JOB_GET_START,FUNCTION,173, IF v_Cust_SDayOK = 0
WS_JOB_GET_START,FUNCTION,174, THEN
WS_JOB_GET_START,FUNCTION,175, v_start_after := v_Cust_SDate + 1;
WS_JOB_GET_START,FUNCTION,176,
WS_JOB_GET_START,FUNCTION,177, -- Exclusion period spans midnight. e.g. allow start After 2am and start Before 10pm
WS_JOB_GET_START,FUNCTION,178, ELSIF v_Cust_SATime <= v_Cust_SBTime
WS_JOB_GET_START,FUNCTION,179, THEN
WS_JOB_GET_START,FUNCTION,180, v_step := 700;
WS_JOB_GET_START,FUNCTION,181, IF v_start_after < v_Cust_SATime -- Prior to the Start After time
WS_JOB_GET_START,FUNCTION,182, THEN -- so jump directly to the Start After time and exit loop
WS_JOB_GET_START,FUNCTION,183, v_start_after := v_Cust_SATime;
WS_JOB_GET_START,FUNCTION,184, v_more := 0;
WS_JOB_GET_START,FUNCTION,185, ELSIF v_start_after > v_Cust_SBTime -- Past the Start Before time
WS_JOB_GET_START,FUNCTION,186, THEN
WS_JOB_GET_START,FUNCTION,187, v_start_after := v_Cust_SDate + 1; -- so skip to the next day
WS_JOB_GET_START,FUNCTION,188, ELSE
WS_JOB_GET_START,FUNCTION,189, v_more := 0; -- Between valid start times so exit the loop
WS_JOB_GET_START,FUNCTION,190, END IF;
WS_JOB_GET_START,FUNCTION,191,
WS_JOB_GET_START,FUNCTION,192, -- Exclusion period does not span midnight. e.g. allow start Before 2am and start again After 3am
WS_JOB_GET_START,FUNCTION,193, ELSE --v_Cust_SATime > v_Cust_SBTime
WS_JOB_GET_START,FUNCTION,194, v_step := 800;
WS_JOB_GET_START,FUNCTION,195, IF v_start_after > v_Cust_SBTime -- In exclusion period, jump to end of it, OK, exit loop
WS_JOB_GET_START,FUNCTION,196, AND v_start_after < v_Cust_SATime
WS_JOB_GET_START,FUNCTION,197, THEN
WS_JOB_GET_START,FUNCTION,198, v_start_after := v_Cust_SATime;
WS_JOB_GET_START,FUNCTION,199, v_more := 0;
WS_JOB_GET_START,FUNCTION,200, ELSE -- Not in exclusion period, OK, so exit loop
WS_JOB_GET_START,FUNCTION,201, v_more := 0;
WS_JOB_GET_START,FUNCTION,202, END IF;
WS_JOB_GET_START,FUNCTION,203, END IF;
WS_JOB_GET_START,FUNCTION,204,
WS_JOB_GET_START,FUNCTION,205, END LOOP;
WS_JOB_GET_START,FUNCTION,206,
WS_JOB_GET_START,FUNCTION,207, IF v_start_after >= SYSDATE + 8
WS_JOB_GET_START,FUNCTION,208, THEN
WS_JOB_GET_START,FUNCTION,209, v_start_after := TO_DATE('9999-12-31', 'YYYY-MM-DD');
WS_JOB_GET_START,FUNCTION,210, END IF;
WS_JOB_GET_START,FUNCTION,211, -- end of v_job_Type = Custom
WS_JOB_GET_START,FUNCTION,212,
WS_JOB_GET_START,FUNCTION,213, ELSE -- Unknown schedule type.
WS_JOB_GET_START,FUNCTION,214, v_step := 900;
WS_JOB_GET_START,FUNCTION,215, po_return_msg := v_ws_pro_version || ' Unknown schedule type ' || NVL(v_job_type,'Null') || ', or unknown job key ' || TO_CHAR(NVL(pi_job_key,0));
WS_JOB_GET_START,FUNCTION,216, v_start_after := TO_DATE('9999-12-31', 'YYYY-MM-DD');
WS_JOB_GET_START,FUNCTION,217, po_result_code := -2;
WS_JOB_GET_START,FUNCTION,218, po_job_status := 'H';
WS_JOB_GET_START,FUNCTION,219, RETURN po_result_code ;
WS_JOB_GET_START,FUNCTION,220, END IF; -- of CASE job_type
WS_JOB_GET_START,FUNCTION,221,
WS_JOB_GET_START,FUNCTION,222, po_start_after := v_start_after;
WS_JOB_GET_START,FUNCTION,223, po_result_code := 1;
WS_JOB_GET_START,FUNCTION,224, po_return_msg := 'New job Start time assigned';
WS_JOB_GET_START,FUNCTION,225, RETURN po_result_code ;
WS_JOB_GET_START,FUNCTION,226, --=====================================================
WS_JOB_GET_START,FUNCTION,227, -- Exceptions
WS_JOB_GET_START,FUNCTION,228, --=====================================================
WS_JOB_GET_START,FUNCTION,229, EXCEPTION
WS_JOB_GET_START,FUNCTION,230, WHEN OTHERS THEN
WS_JOB_GET_START,FUNCTION,231, po_return_msg := v_ws_pro_version
WS_JOB_GET_START,FUNCTION,232, || ' step ' || TO_CHAR(v_step)
WS_JOB_GET_START,FUNCTION,233, || '  Unhandled SQL Error ';
WS_JOB_GET_START,FUNCTION,234, po_start_after := TO_DATE('9999-12-31', 'YYYY-MM-DD');
WS_JOB_GET_START,FUNCTION,235, po_job_status := 'H';
WS_JOB_GET_START,FUNCTION,236, po_result_code := -3;
WS_JOB_GET_START,FUNCTION,237, RETURN po_result_code;
WS_JOB_GET_START,FUNCTION,238,
WS_JOB_GET_START,FUNCTION,239,END;
WS_JOB_GET_START,FUNCTION,240,
WS_JOB_RELEASE,FUNCTION,1,function ws_job_release
WS_JOB_RELEASE,FUNCTION,2, (
WS_JOB_RELEASE,FUNCTION,3, p_sequence IN number,
WS_JOB_RELEASE,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_RELEASE,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_RELEASE,FUNCTION,6, p_job_id IN number,
WS_JOB_RELEASE,FUNCTION,7, p_task_id IN number,
WS_JOB_RELEASE,FUNCTION,8, p_release_job IN varchar2,
WS_JOB_RELEASE,FUNCTION,9, p_return_code OUT varchar2,
WS_JOB_RELEASE,FUNCTION,10, p_return_msg OUT varchar2
WS_JOB_RELEASE,FUNCTION,11, )
WS_JOB_RELEASE,FUNCTION,12, Return integer
WS_JOB_RELEASE,FUNCTION,13, AUTHID CURRENT_USER
WS_JOB_RELEASE,FUNCTION,14, IS
WS_JOB_RELEASE,FUNCTION,15,
WS_JOB_RELEASE,FUNCTION,16, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_RELEASE,FUNCTION,17,
WS_JOB_RELEASE,FUNCTION,18, -- =============================================================================
WS_JOB_RELEASE,FUNCTION,19, -- DBMS Name : Oracle
WS_JOB_RELEASE,FUNCTION,20, -- Script Name : ws_job_release
WS_JOB_RELEASE,FUNCTION,21, -- Description : Releases a held or waiting job
WS_JOB_RELEASE,FUNCTION,22, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_RELEASE,FUNCTION,23, -- =============================================================================
WS_JOB_RELEASE,FUNCTION,24,
WS_JOB_RELEASE,FUNCTION,25, --=====================================================
WS_JOB_RELEASE,FUNCTION,26, -- Variables
WS_JOB_RELEASE,FUNCTION,27, --=====================================================
WS_JOB_RELEASE,FUNCTION,28, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_RELEASE,FUNCTION,29, v_step integer := 0; -- return code
WS_JOB_RELEASE,FUNCTION,30, v_result integer := 0; -- return code
WS_JOB_RELEASE,FUNCTION,31, v_count integer := 0;
WS_JOB_RELEASE,FUNCTION,32, v_part_count integer := 0;
WS_JOB_RELEASE,FUNCTION,33, v_specific_index integer := 0;
WS_JOB_RELEASE,FUNCTION,34, v_specific_part integer := 0;
WS_JOB_RELEASE,FUNCTION,35, v_status number := 0;
WS_JOB_RELEASE,FUNCTION,36, v_status_code number := 0;
WS_JOB_RELEASE,FUNCTION,37, v_msg varchar2(4000);
WS_JOB_RELEASE,FUNCTION,38, v_job_sequence integer;
WS_JOB_RELEASE,FUNCTION,39, v_job_key integer;
WS_JOB_RELEASE,FUNCTION,40, v_job_status varchar2(1);
WS_JOB_RELEASE,FUNCTION,41,
WS_JOB_RELEASE,FUNCTION,42,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_RELEASE,FUNCTION,43,BEGIN
WS_JOB_RELEASE,FUNCTION,44,
WS_JOB_RELEASE,FUNCTION,45, v_step := 10;
WS_JOB_RELEASE,FUNCTION,46, --***********************************************************************
WS_JOB_RELEASE,FUNCTION,47, -- First see if the job name specified is in a held or waiting state
WS_JOB_RELEASE,FUNCTION,48, -- If not in a held or waiting state report and exit
WS_JOB_RELEASE,FUNCTION,49, --***********************************************************************
WS_JOB_RELEASE,FUNCTION,50, BEGIN
WS_JOB_RELEASE,FUNCTION,51, Select wjc_job_key, wjc_sequence, wjc_status
WS_JOB_RELEASE,FUNCTION,52, Into v_job_key, v_job_sequence, v_job_status
WS_JOB_RELEASE,FUNCTION,53, From ws_wrk_job_ctrl
WS_JOB_RELEASE,FUNCTION,54, Where rtrim(upper(wjc_name)) = rtrim(upper(p_release_job));
WS_JOB_RELEASE,FUNCTION,55, EXCEPTION WHEN OTHERS THEN
WS_JOB_RELEASE,FUNCTION,56, v_job_key := 0;
WS_JOB_RELEASE,FUNCTION,57, END;
WS_JOB_RELEASE,FUNCTION,58,
WS_JOB_RELEASE,FUNCTION,59, v_step := 20;
WS_JOB_RELEASE,FUNCTION,60, --***********************************************************************
WS_JOB_RELEASE,FUNCTION,61, -- If not scheduled exit with that information
WS_JOB_RELEASE,FUNCTION,62, --***********************************************************************
WS_JOB_RELEASE,FUNCTION,63, If nvl(v_job_key,0) = 0 Then
WS_JOB_RELEASE,FUNCTION,64, p_return_msg := 'Job '||p_release_job||' is not in a holding or waiting state. Cannot release';
WS_JOB_RELEASE,FUNCTION,65, p_return_code := 'N';
WS_JOB_RELEASE,FUNCTION,66, return -1;
WS_JOB_RELEASE,FUNCTION,67, End If;
WS_JOB_RELEASE,FUNCTION,68,
WS_JOB_RELEASE,FUNCTION,69, v_step := 60;
WS_JOB_RELEASE,FUNCTION,70, --***********************************************************************
WS_JOB_RELEASE,FUNCTION,71, -- Set the flag to indicate that the job is waiting so the
WS_JOB_RELEASE,FUNCTION,72, -- scheduler will restart it
WS_JOB_RELEASE,FUNCTION,73, --***********************************************************************
WS_JOB_RELEASE,FUNCTION,74, BEGIN
WS_JOB_RELEASE,FUNCTION,75, Update ws_wrk_job_ctrl
WS_JOB_RELEASE,FUNCTION,76, Set
WS_JOB_RELEASE,FUNCTION,77, wjc_status = 'W',
WS_JOB_RELEASE,FUNCTION,78, wjc_start_after = sysdate
WS_JOB_RELEASE,FUNCTION,79, Where wjc_job_key = v_job_key
WS_JOB_RELEASE,FUNCTION,80, And wjc_status in ('H','W');
WS_JOB_RELEASE,FUNCTION,81,
WS_JOB_RELEASE,FUNCTION,82, Commit;
WS_JOB_RELEASE,FUNCTION,83,
WS_JOB_RELEASE,FUNCTION,84, p_return_code := 'S';
WS_JOB_RELEASE,FUNCTION,85, p_return_msg := 'Job '||p_release_job||' released.';
WS_JOB_RELEASE,FUNCTION,86, RETURN 1;
WS_JOB_RELEASE,FUNCTION,87,
WS_JOB_RELEASE,FUNCTION,88, EXCEPTION WHEN OTHERS THEN
WS_JOB_RELEASE,FUNCTION,89, p_return_code := 'E';
WS_JOB_RELEASE,FUNCTION,90, v_msg := 'Failed to release Job '||p_release_job||' '||SQLERRM;
WS_JOB_RELEASE,FUNCTION,91, p_return_msg := substr(v_msg,1,1023);
WS_JOB_RELEASE,FUNCTION,92, RETURN -2;
WS_JOB_RELEASE,FUNCTION,93, END;
WS_JOB_RELEASE,FUNCTION,94,
WS_JOB_RELEASE,FUNCTION,95, COMMIT;
WS_JOB_RELEASE,FUNCTION,96, RETURN -3;
WS_JOB_RELEASE,FUNCTION,97,
WS_JOB_RELEASE,FUNCTION,98,EXCEPTION
WS_JOB_RELEASE,FUNCTION,99, WHEN OTHERS THEN
WS_JOB_RELEASE,FUNCTION,100, p_return_code := 'F';
WS_JOB_RELEASE,FUNCTION,101, v_MsgText := 'Unhandled Exception in ws_job_release. '||
WS_JOB_RELEASE,FUNCTION,102, ' Step ' ||v_step;
WS_JOB_RELEASE,FUNCTION,103, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_JOB_RELEASE,FUNCTION,104, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_RELEASE,FUNCTION,105, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_RELEASE,FUNCTION,106, RETURN -3;
WS_JOB_RELEASE,FUNCTION,107,
WS_JOB_RELEASE,FUNCTION,108,END ws_job_release;
WS_JOB_RELEASE,FUNCTION,109,
WS_JOB_RESTART,FUNCTION,1,function ws_job_restart
WS_JOB_RESTART,FUNCTION,2, (
WS_JOB_RESTART,FUNCTION,3, p_sequence IN number,
WS_JOB_RESTART,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_RESTART,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_RESTART,FUNCTION,6, p_job_id IN number,
WS_JOB_RESTART,FUNCTION,7, p_task_id IN number,
WS_JOB_RESTART,FUNCTION,8, p_restart_job IN varchar2,
WS_JOB_RESTART,FUNCTION,9, p_return_code OUT varchar2,
WS_JOB_RESTART,FUNCTION,10, p_return_msg OUT varchar2
WS_JOB_RESTART,FUNCTION,11, )
WS_JOB_RESTART,FUNCTION,12, Return integer
WS_JOB_RESTART,FUNCTION,13, AUTHID CURRENT_USER
WS_JOB_RESTART,FUNCTION,14, IS
WS_JOB_RESTART,FUNCTION,15,
WS_JOB_RESTART,FUNCTION,16, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_RESTART,FUNCTION,17,
WS_JOB_RESTART,FUNCTION,18, -- =============================================================================
WS_JOB_RESTART,FUNCTION,19, -- DBMS Name : Oracle
WS_JOB_RESTART,FUNCTION,20, -- Script Name : ws_job_restart
WS_JOB_RESTART,FUNCTION,21, -- Description : Restarts a scheduled job
WS_JOB_RESTART,FUNCTION,22, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_RESTART,FUNCTION,23, -- =============================================================================
WS_JOB_RESTART,FUNCTION,24,
WS_JOB_RESTART,FUNCTION,25, --=====================================================
WS_JOB_RESTART,FUNCTION,26, -- Variables
WS_JOB_RESTART,FUNCTION,27, --=====================================================
WS_JOB_RESTART,FUNCTION,28, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_RESTART,FUNCTION,29, v_step integer := 0; -- return code
WS_JOB_RESTART,FUNCTION,30, v_result integer := 0; -- return code
WS_JOB_RESTART,FUNCTION,31, v_count integer := 0;
WS_JOB_RESTART,FUNCTION,32, v_part_count integer := 0;
WS_JOB_RESTART,FUNCTION,33, v_specific_index integer := 0;
WS_JOB_RESTART,FUNCTION,34, v_specific_part integer := 0;
WS_JOB_RESTART,FUNCTION,35, v_status number := 0;
WS_JOB_RESTART,FUNCTION,36, v_status_code number := 0;
WS_JOB_RESTART,FUNCTION,37, v_msg varchar2(4000);
WS_JOB_RESTART,FUNCTION,38, v_job_sequence integer;
WS_JOB_RESTART,FUNCTION,39, v_job_key integer;
WS_JOB_RESTART,FUNCTION,40, v_job_status varchar2(1);
WS_JOB_RESTART,FUNCTION,41,
WS_JOB_RESTART,FUNCTION,42,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_RESTART,FUNCTION,43,BEGIN
WS_JOB_RESTART,FUNCTION,44,
WS_JOB_RESTART,FUNCTION,45, v_step := 10;
WS_JOB_RESTART,FUNCTION,46, --***********************************************************************
WS_JOB_RESTART,FUNCTION,47, -- First see if the job name specified is in a failed state
WS_JOB_RESTART,FUNCTION,48, -- If not in a failed state then report if running, on hold, or not present
WS_JOB_RESTART,FUNCTION,49, --***********************************************************************
WS_JOB_RESTART,FUNCTION,50, BEGIN
WS_JOB_RESTART,FUNCTION,51, Select wjr_job_key, wjr_sequence, wjr_status
WS_JOB_RESTART,FUNCTION,52, Into v_job_key, v_job_sequence, v_job_status
WS_JOB_RESTART,FUNCTION,53, From ws_wrk_job_run
WS_JOB_RESTART,FUNCTION,54, Where wjr_name = p_restart_job;
WS_JOB_RESTART,FUNCTION,55, EXCEPTION WHEN OTHERS THEN
WS_JOB_RESTART,FUNCTION,56, v_job_key := 0;
WS_JOB_RESTART,FUNCTION,57, END;
WS_JOB_RESTART,FUNCTION,58,
WS_JOB_RESTART,FUNCTION,59, v_step := 20;
WS_JOB_RESTART,FUNCTION,60, --***********************************************************************
WS_JOB_RESTART,FUNCTION,61, -- If not running exit with that information
WS_JOB_RESTART,FUNCTION,62, --***********************************************************************
WS_JOB_RESTART,FUNCTION,63, If nvl(v_job_key,0) = 0 Then
WS_JOB_RESTART,FUNCTION,64, p_return_msg := 'Job '||p_restart_job||' is not in a running or Failed state. Cannot restart';
WS_JOB_RESTART,FUNCTION,65, p_return_code := 'N';
WS_JOB_RESTART,FUNCTION,66, return -1;
WS_JOB_RESTART,FUNCTION,67, End If;
WS_JOB_RESTART,FUNCTION,68,
WS_JOB_RESTART,FUNCTION,69, v_step := 30;
WS_JOB_RESTART,FUNCTION,70, --***********************************************************************
WS_JOB_RESTART,FUNCTION,71, -- If running then no need to restart
WS_JOB_RESTART,FUNCTION,72, --***********************************************************************
WS_JOB_RESTART,FUNCTION,73, If v_job_status = 'R' Then
WS_JOB_RESTART,FUNCTION,74, p_return_msg := 'Job '||p_restart_job||' is currently Running. Cannot restart';
WS_JOB_RESTART,FUNCTION,75, p_return_code := 'R';
WS_JOB_RESTART,FUNCTION,76, return -1;
WS_JOB_RESTART,FUNCTION,77, End If;
WS_JOB_RESTART,FUNCTION,78,
WS_JOB_RESTART,FUNCTION,79, v_step := 40;
WS_JOB_RESTART,FUNCTION,80, --***********************************************************************
WS_JOB_RESTART,FUNCTION,81, -- If not failed then no need to restart
WS_JOB_RESTART,FUNCTION,82, --***********************************************************************
WS_JOB_RESTART,FUNCTION,83, If v_job_status <> 'F' And v_job_status <> 'H' Then
WS_JOB_RESTART,FUNCTION,84, p_return_msg := 'Job '||p_restart_job||' is currently in state '||v_job_status||'. Cannot restart';
WS_JOB_RESTART,FUNCTION,85, p_return_code := 'U';
WS_JOB_RESTART,FUNCTION,86, return -2;
WS_JOB_RESTART,FUNCTION,87, End If;
WS_JOB_RESTART,FUNCTION,88,
WS_JOB_RESTART,FUNCTION,89, v_step := 50;
WS_JOB_RESTART,FUNCTION,90, --***********************************************************************
WS_JOB_RESTART,FUNCTION,91, -- First remove any threads that failed and didnt clean up
WS_JOB_RESTART,FUNCTION,92, -- the restart wont work if it thinks threads are still active
WS_JOB_RESTART,FUNCTION,93, --***********************************************************************
WS_JOB_RESTART,FUNCTION,94, BEGIN
WS_JOB_RESTART,FUNCTION,95, Delete from ws_wrk_job_thread
WS_JOB_RESTART,FUNCTION,96, Where wjt_job_key = v_job_key
WS_JOB_RESTART,FUNCTION,97, And wjt_sequence = v_job_sequence;
WS_JOB_RESTART,FUNCTION,98, Commit;
WS_JOB_RESTART,FUNCTION,99, EXCEPTION WHEN OTHERS THEN
WS_JOB_RESTART,FUNCTION,100, v_step := 51;
WS_JOB_RESTART,FUNCTION,101, END;
WS_JOB_RESTART,FUNCTION,102,
WS_JOB_RESTART,FUNCTION,103,
WS_JOB_RESTART,FUNCTION,104, v_step := 60;
WS_JOB_RESTART,FUNCTION,105, --***********************************************************************
WS_JOB_RESTART,FUNCTION,106, -- Set the flag to indicate that the job is waiting so the
WS_JOB_RESTART,FUNCTION,107, -- scheduler will restart it
WS_JOB_RESTART,FUNCTION,108, --***********************************************************************
WS_JOB_RESTART,FUNCTION,109, BEGIN
WS_JOB_RESTART,FUNCTION,110, Update ws_wrk_job_run
WS_JOB_RESTART,FUNCTION,111, Set wjr_status = 'W'
WS_JOB_RESTART,FUNCTION,112, Where wjr_job_key = v_job_key
WS_JOB_RESTART,FUNCTION,113, And wjr_sequence = v_job_sequence
WS_JOB_RESTART,FUNCTION,114, And wjr_status in ('H','F');
WS_JOB_RESTART,FUNCTION,115,
WS_JOB_RESTART,FUNCTION,116, Commit;
WS_JOB_RESTART,FUNCTION,117,
WS_JOB_RESTART,FUNCTION,118, p_return_code := 'S';
WS_JOB_RESTART,FUNCTION,119, p_return_msg := 'Job '||p_restart_job||' sequence '||v_job_sequence||' restarted.';
WS_JOB_RESTART,FUNCTION,120, RETURN 1;
WS_JOB_RESTART,FUNCTION,121,
WS_JOB_RESTART,FUNCTION,122, EXCEPTION WHEN OTHERS THEN
WS_JOB_RESTART,FUNCTION,123, p_return_code := 'E';
WS_JOB_RESTART,FUNCTION,124, v_msg := 'Failed to restart Job '||p_restart_job||' sequence '||v_job_sequence||SQLERRM;
WS_JOB_RESTART,FUNCTION,125, p_return_msg := substr(v_msg,1,1023);
WS_JOB_RESTART,FUNCTION,126, RETURN -2;
WS_JOB_RESTART,FUNCTION,127, END;
WS_JOB_RESTART,FUNCTION,128,
WS_JOB_RESTART,FUNCTION,129, COMMIT;
WS_JOB_RESTART,FUNCTION,130, RETURN -3;
WS_JOB_RESTART,FUNCTION,131,
WS_JOB_RESTART,FUNCTION,132,EXCEPTION
WS_JOB_RESTART,FUNCTION,133, WHEN OTHERS THEN
WS_JOB_RESTART,FUNCTION,134, p_return_code := 'F';
WS_JOB_RESTART,FUNCTION,135, v_MsgText := 'Unhandled Exception in ws_job_restart. '||
WS_JOB_RESTART,FUNCTION,136, ' Step ' ||v_step;
WS_JOB_RESTART,FUNCTION,137, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_JOB_RESTART,FUNCTION,138, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_RESTART,FUNCTION,139, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_RESTART,FUNCTION,140, RETURN -3;
WS_JOB_RESTART,FUNCTION,141,
WS_JOB_RESTART,FUNCTION,142,END ws_job_restart;
WS_JOB_RESTART,FUNCTION,143,
WS_JOB_SCHEDULE,FUNCTION,1,function ws_job_schedule
WS_JOB_SCHEDULE,FUNCTION,2, (
WS_JOB_SCHEDULE,FUNCTION,3, p_sequence IN number,
WS_JOB_SCHEDULE,FUNCTION,4, p_job_name IN varchar2,
WS_JOB_SCHEDULE,FUNCTION,5, p_task_name IN varchar2,
WS_JOB_SCHEDULE,FUNCTION,6, p_job_id IN number,
WS_JOB_SCHEDULE,FUNCTION,7, p_task_id IN number,
WS_JOB_SCHEDULE,FUNCTION,8, p_release_job IN varchar2,
WS_JOB_SCHEDULE,FUNCTION,9, p_release_time IN date,
WS_JOB_SCHEDULE,FUNCTION,10, p_return_code OUT varchar2,
WS_JOB_SCHEDULE,FUNCTION,11, p_return_msg OUT varchar2
WS_JOB_SCHEDULE,FUNCTION,12, )
WS_JOB_SCHEDULE,FUNCTION,13, Return integer
WS_JOB_SCHEDULE,FUNCTION,14, AUTHID CURRENT_USER
WS_JOB_SCHEDULE,FUNCTION,15, IS
WS_JOB_SCHEDULE,FUNCTION,16,
WS_JOB_SCHEDULE,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_SCHEDULE,FUNCTION,18,
WS_JOB_SCHEDULE,FUNCTION,19, -- =============================================================================
WS_JOB_SCHEDULE,FUNCTION,20, -- DBMS Name : Oracle
WS_JOB_SCHEDULE,FUNCTION,21, -- Script Name : ws_job_schedule
WS_JOB_SCHEDULE,FUNCTION,22, -- Description : Releases a held or waiting job to run at a specified time
WS_JOB_SCHEDULE,FUNCTION,23, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_SCHEDULE,FUNCTION,24, -- =============================================================================
WS_JOB_SCHEDULE,FUNCTION,25,
WS_JOB_SCHEDULE,FUNCTION,26, --=====================================================
WS_JOB_SCHEDULE,FUNCTION,27, -- Variables
WS_JOB_SCHEDULE,FUNCTION,28, --=====================================================
WS_JOB_SCHEDULE,FUNCTION,29, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_SCHEDULE,FUNCTION,30, v_step integer := 0; -- return code
WS_JOB_SCHEDULE,FUNCTION,31, v_result integer := 0; -- return code
WS_JOB_SCHEDULE,FUNCTION,32, v_count integer := 0;
WS_JOB_SCHEDULE,FUNCTION,33, v_part_count integer := 0;
WS_JOB_SCHEDULE,FUNCTION,34, v_specific_index integer := 0;
WS_JOB_SCHEDULE,FUNCTION,35, v_specific_part integer := 0;
WS_JOB_SCHEDULE,FUNCTION,36, v_status number := 0;
WS_JOB_SCHEDULE,FUNCTION,37, v_status_code number := 0;
WS_JOB_SCHEDULE,FUNCTION,38, v_msg varchar2(4000);
WS_JOB_SCHEDULE,FUNCTION,39, v_job_sequence integer;
WS_JOB_SCHEDULE,FUNCTION,40, v_job_key integer;
WS_JOB_SCHEDULE,FUNCTION,41, v_job_status varchar2(1);
WS_JOB_SCHEDULE,FUNCTION,42,
WS_JOB_SCHEDULE,FUNCTION,43,BEGIN
WS_JOB_SCHEDULE,FUNCTION,44,
WS_JOB_SCHEDULE,FUNCTION,45, v_step := 10;
WS_JOB_SCHEDULE,FUNCTION,46, --***********************************************************************
WS_JOB_SCHEDULE,FUNCTION,47, -- First see if the job name specified is in a held or waiting state
WS_JOB_SCHEDULE,FUNCTION,48, -- If not in a held or waiting state report and exit
WS_JOB_SCHEDULE,FUNCTION,49, --***********************************************************************
WS_JOB_SCHEDULE,FUNCTION,50, BEGIN
WS_JOB_SCHEDULE,FUNCTION,51, Select wjc_job_key, wjc_sequence, wjc_status
WS_JOB_SCHEDULE,FUNCTION,52, Into v_job_key, v_job_sequence, v_job_status
WS_JOB_SCHEDULE,FUNCTION,53, From ws_wrk_job_ctrl
WS_JOB_SCHEDULE,FUNCTION,54, Where rtrim(upper(wjc_name)) = rtrim(upper(p_release_job));
WS_JOB_SCHEDULE,FUNCTION,55, EXCEPTION WHEN OTHERS THEN
WS_JOB_SCHEDULE,FUNCTION,56, v_job_key := 0;
WS_JOB_SCHEDULE,FUNCTION,57, END;
WS_JOB_SCHEDULE,FUNCTION,58,
WS_JOB_SCHEDULE,FUNCTION,59, v_step := 20;
WS_JOB_SCHEDULE,FUNCTION,60, --***********************************************************************
WS_JOB_SCHEDULE,FUNCTION,61, -- If not scheduled exit with that information
WS_JOB_SCHEDULE,FUNCTION,62, --***********************************************************************
WS_JOB_SCHEDULE,FUNCTION,63, If nvl(v_job_key,0) = 0 Then
WS_JOB_SCHEDULE,FUNCTION,64, p_return_msg := 'Job '||p_release_job||' is not in a holding or waiting state. Cannot reschedule';
WS_JOB_SCHEDULE,FUNCTION,65, p_return_code := 'N';
WS_JOB_SCHEDULE,FUNCTION,66, return -1;
WS_JOB_SCHEDULE,FUNCTION,67, End If;
WS_JOB_SCHEDULE,FUNCTION,68,
WS_JOB_SCHEDULE,FUNCTION,69, v_step := 60;
WS_JOB_SCHEDULE,FUNCTION,70, --***********************************************************************
WS_JOB_SCHEDULE,FUNCTION,71, -- Set the flag to indicate that the job is waiting so the
WS_JOB_SCHEDULE,FUNCTION,72, -- scheduler will restart it
WS_JOB_SCHEDULE,FUNCTION,73, --***********************************************************************
WS_JOB_SCHEDULE,FUNCTION,74, BEGIN
WS_JOB_SCHEDULE,FUNCTION,75, Update ws_wrk_job_ctrl
WS_JOB_SCHEDULE,FUNCTION,76, Set
WS_JOB_SCHEDULE,FUNCTION,77, wjc_status = 'W',
WS_JOB_SCHEDULE,FUNCTION,78, wjc_start_after = p_release_time
WS_JOB_SCHEDULE,FUNCTION,79, Where wjc_job_key = v_job_key
WS_JOB_SCHEDULE,FUNCTION,80, And wjc_status in ('H','W');
WS_JOB_SCHEDULE,FUNCTION,81,
WS_JOB_SCHEDULE,FUNCTION,82, Commit;
WS_JOB_SCHEDULE,FUNCTION,83,
WS_JOB_SCHEDULE,FUNCTION,84, p_return_code := 'S';
WS_JOB_SCHEDULE,FUNCTION,85, p_return_msg := 'Job '||p_release_job||' rescheduled. It Will start at '||p_release_time;
WS_JOB_SCHEDULE,FUNCTION,86, RETURN 1;
WS_JOB_SCHEDULE,FUNCTION,87,
WS_JOB_SCHEDULE,FUNCTION,88, EXCEPTION WHEN OTHERS THEN
WS_JOB_SCHEDULE,FUNCTION,89, p_return_code := 'E';
WS_JOB_SCHEDULE,FUNCTION,90, v_msg := 'Failed to reschedule Job '||p_release_job||' '||SQLERRM;
WS_JOB_SCHEDULE,FUNCTION,91, p_return_msg := substr(v_msg,1,1023);
WS_JOB_SCHEDULE,FUNCTION,92, RETURN -2;
WS_JOB_SCHEDULE,FUNCTION,93, END;
WS_JOB_SCHEDULE,FUNCTION,94,
WS_JOB_SCHEDULE,FUNCTION,95, COMMIT;
WS_JOB_SCHEDULE,FUNCTION,96, RETURN -3;
WS_JOB_SCHEDULE,FUNCTION,97,
WS_JOB_SCHEDULE,FUNCTION,98,EXCEPTION
WS_JOB_SCHEDULE,FUNCTION,99, WHEN OTHERS THEN
WS_JOB_SCHEDULE,FUNCTION,100, p_return_code := 'F';
WS_JOB_SCHEDULE,FUNCTION,101, v_MsgText := 'Unhandled Exception in ws_job_schedule. '||
WS_JOB_SCHEDULE,FUNCTION,102, ' Step ' ||v_step;
WS_JOB_SCHEDULE,FUNCTION,103, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_JOB_SCHEDULE,FUNCTION,104, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_SCHEDULE,FUNCTION,105, p_return_msg := substr(v_MsgText,1,1023);
WS_JOB_SCHEDULE,FUNCTION,106, RETURN -3;
WS_JOB_SCHEDULE,FUNCTION,107,
WS_JOB_SCHEDULE,FUNCTION,108,END ws_job_schedule;
WS_JOB_SCHEDULE,FUNCTION,109,
WS_JOB_STATUS,FUNCTION,1,FUNCTION Ws_Job_Status
WS_JOB_STATUS,FUNCTION,2,( p_sequence IN NUMBER
WS_JOB_STATUS,FUNCTION,3,, p_job_name IN VARCHAR2
WS_JOB_STATUS,FUNCTION,4,, p_task_name IN VARCHAR2
WS_JOB_STATUS,FUNCTION,5,, p_job_id IN NUMBER
WS_JOB_STATUS,FUNCTION,6,, p_task_id IN NUMBER
WS_JOB_STATUS,FUNCTION,7,, p_check_sequence IN NUMBER
WS_JOB_STATUS,FUNCTION,8,, p_check_job IN VARCHAR2
WS_JOB_STATUS,FUNCTION,9,, p_started_in_last_mi IN NUMBER
WS_JOB_STATUS,FUNCTION,10,, p_started_after_dt IN DATE
WS_JOB_STATUS,FUNCTION,11,, p_return_code OUT VARCHAR2
WS_JOB_STATUS,FUNCTION,12,, p_return_msg OUT VARCHAR2
WS_JOB_STATUS,FUNCTION,13,, p_job_status_simple OUT VARCHAR2
WS_JOB_STATUS,FUNCTION,14,, p_job_status_standard OUT VARCHAR2
WS_JOB_STATUS,FUNCTION,15,, p_job_status_enhanced OUT VARCHAR2
WS_JOB_STATUS,FUNCTION,16,)
WS_JOB_STATUS,FUNCTION,17,RETURN INTEGER
WS_JOB_STATUS,FUNCTION,18,AUTHID CURRENT_USER
WS_JOB_STATUS,FUNCTION,19,IS
WS_JOB_STATUS,FUNCTION,20,
WS_JOB_STATUS,FUNCTION,21, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_STATUS,FUNCTION,22,
WS_JOB_STATUS,FUNCTION,23, -- =============================================================================
WS_JOB_STATUS,FUNCTION,24, -- DBMS Name : Oracle
WS_JOB_STATUS,FUNCTION,25, -- Script Name : ws_job_status
WS_JOB_STATUS,FUNCTION,26, -- Description : Returns the status of a job.
WS_JOB_STATUS,FUNCTION,27, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_STATUS,FUNCTION,28, -- =============================================================================
WS_JOB_STATUS,FUNCTION,29,
WS_JOB_STATUS,FUNCTION,30, --=====================================================
WS_JOB_STATUS,FUNCTION,31, -- Variables
WS_JOB_STATUS,FUNCTION,32, --=====================================================
WS_JOB_STATUS,FUNCTION,33, v_msgtext VARCHAR2(1024); -- Text in audit_trail
WS_JOB_STATUS,FUNCTION,34, v_step INTEGER; -- return code
WS_JOB_STATUS,FUNCTION,35, v_result INTEGER := 0; -- return code
WS_JOB_STATUS,FUNCTION,36, v_sql_code INTEGER; -- SQL Error Code for Audit Trail
WS_JOB_STATUS,FUNCTION,37, v_sql_error VARCHAR2(1024); -- SQL Error Code for Audit Trail as varchar
WS_JOB_STATUS,FUNCTION,38, v_job_not_found CHAR(1) := 'N';
WS_JOB_STATUS,FUNCTION,39, v_job_sequence INTEGER;
WS_JOB_STATUS,FUNCTION,40, v_job_status_simple VARCHAR2(1);
WS_JOB_STATUS,FUNCTION,41, v_job_status_standard VARCHAR2(1);
WS_JOB_STATUS,FUNCTION,42, v_job_status_enhanced VARCHAR2(2);
WS_JOB_STATUS,FUNCTION,43, v_job_state VARCHAR2(20);
WS_JOB_STATUS,FUNCTION,44, v_job_status_msg VARCHAR2(256);
WS_JOB_STATUS,FUNCTION,45, v_task_count INTEGER;
WS_JOB_STATUS,FUNCTION,46, v_started_after_dt DATE;
WS_JOB_STATUS,FUNCTION,47, v_sql VARCHAR2(32000);
WS_JOB_STATUS,FUNCTION,48,
WS_JOB_STATUS,FUNCTION,49,BEGIN
WS_JOB_STATUS,FUNCTION,50,
WS_JOB_STATUS,FUNCTION,51, --=====================================================
WS_JOB_STATUS,FUNCTION,52, -- Main
WS_JOB_STATUS,FUNCTION,53, --=====================================================
WS_JOB_STATUS,FUNCTION,54, v_step := 100;
WS_JOB_STATUS,FUNCTION,55,
WS_JOB_STATUS,FUNCTION,56, p_return_code := 'S';
WS_JOB_STATUS,FUNCTION,57,
WS_JOB_STATUS,FUNCTION,58, v_step := 200;
WS_JOB_STATUS,FUNCTION,59,
WS_JOB_STATUS,FUNCTION,60, -- Check to ensure neither time based parameters have been specified if check sequence has been.
WS_JOB_STATUS,FUNCTION,61, -- Abort in this case.
WS_JOB_STATUS,FUNCTION,62, IF (( p_check_sequence IS NOT NULL ) AND (( p_started_in_last_mi IS NOT NULL) OR ( p_started_after_dt IS NOT NULL ))) THEN
WS_JOB_STATUS,FUNCTION,63,
WS_JOB_STATUS,FUNCTION,64, v_step := 300;
WS_JOB_STATUS,FUNCTION,65,
WS_JOB_STATUS,FUNCTION,66, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,67, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,68, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,69, p_return_msg := 'Unable to proceed: neither p_started_in_last_mi or p_started_after_dt may not be specified if p_check_sequence is specified.';
WS_JOB_STATUS,FUNCTION,70, p_return_code := 'E';
WS_JOB_STATUS,FUNCTION,71,
WS_JOB_STATUS,FUNCTION,72, RETURN -2;
WS_JOB_STATUS,FUNCTION,73,
WS_JOB_STATUS,FUNCTION,74, -- Check to ensure zero or one time based parameters have been specified.
WS_JOB_STATUS,FUNCTION,75, -- Abort if both have been specified.
WS_JOB_STATUS,FUNCTION,76, ELSIF (( p_started_in_last_mi IS NOT NULL) AND ( p_started_after_dt IS NOT NULL )) THEN
WS_JOB_STATUS,FUNCTION,77,
WS_JOB_STATUS,FUNCTION,78, v_step := 400;
WS_JOB_STATUS,FUNCTION,79,
WS_JOB_STATUS,FUNCTION,80, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,81, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,82, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,83, p_return_msg := 'Unable to proceed: both p_started_in_last_mi and p_started_after_dt have been set. At most one of these may be set.';
WS_JOB_STATUS,FUNCTION,84, p_return_code := 'E';
WS_JOB_STATUS,FUNCTION,85,
WS_JOB_STATUS,FUNCTION,86, RETURN -2;
WS_JOB_STATUS,FUNCTION,87,
WS_JOB_STATUS,FUNCTION,88, ELSIF ((( p_started_in_last_mi IS NOT NULL) OR ( p_started_after_dt IS NOT NULL )) AND ( p_check_job IS NULL )) THEN
WS_JOB_STATUS,FUNCTION,89,
WS_JOB_STATUS,FUNCTION,90, v_step := 500;
WS_JOB_STATUS,FUNCTION,91,
WS_JOB_STATUS,FUNCTION,92, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,93, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,94, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,95, p_return_msg := 'Unable to proceed: if p_started_in_last_mi or p_started_after_dt have been set, then p_check_job must also be set.';
WS_JOB_STATUS,FUNCTION,96, p_return_code := 'E';
WS_JOB_STATUS,FUNCTION,97,
WS_JOB_STATUS,FUNCTION,98, RETURN -2;
WS_JOB_STATUS,FUNCTION,99,
WS_JOB_STATUS,FUNCTION,100, END IF;
WS_JOB_STATUS,FUNCTION,101,
WS_JOB_STATUS,FUNCTION,102, v_step := 600;
WS_JOB_STATUS,FUNCTION,103,
WS_JOB_STATUS,FUNCTION,104, -- If the job sequence has been specified, see if it is in the control, run
WS_JOB_STATUS,FUNCTION,105, -- or log tables.
WS_JOB_STATUS,FUNCTION,106, IF ( p_check_sequence IS NOT NULL ) THEN
WS_JOB_STATUS,FUNCTION,107,
WS_JOB_STATUS,FUNCTION,108, v_step := 700;
WS_JOB_STATUS,FUNCTION,109,
WS_JOB_STATUS,FUNCTION,110, SELECT NVL(MAX(job_state),'0')
WS_JOB_STATUS,FUNCTION,111, INTO v_job_state
WS_JOB_STATUS,FUNCTION,112, FROM ( SELECT sequence_data.*
WS_JOB_STATUS,FUNCTION,113, , ROWNUM AS rank_job_state
WS_JOB_STATUS,FUNCTION,114, FROM ( SELECT '0' AS job_state
WS_JOB_STATUS,FUNCTION,115, FROM ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,116, WHERE wjc_sequence = p_check_sequence
WS_JOB_STATUS,FUNCTION,117, AND wjc_status = 'B'
WS_JOB_STATUS,FUNCTION,118, UNION
WS_JOB_STATUS,FUNCTION,119, SELECT '1' AS job_state
WS_JOB_STATUS,FUNCTION,120, FROM ws_wrk_job_run
WS_JOB_STATUS,FUNCTION,121, WHERE wjr_sequence = p_check_sequence
WS_JOB_STATUS,FUNCTION,122, UNION
WS_JOB_STATUS,FUNCTION,123, SELECT '2' AS job_state
WS_JOB_STATUS,FUNCTION,124, FROM ws_wrk_job_log
WS_JOB_STATUS,FUNCTION,125, WHERE wjl_sequence = p_check_sequence
WS_JOB_STATUS,FUNCTION,126, UNION
WS_JOB_STATUS,FUNCTION,127, SELECT '3' AS job_state
WS_JOB_STATUS,FUNCTION,128, FROM ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,129, WHERE wjc_sequence = p_check_sequence
WS_JOB_STATUS,FUNCTION,130, AND wjc_status <> 'B'
WS_JOB_STATUS,FUNCTION,131, ORDER BY 1 ASC
WS_JOB_STATUS,FUNCTION,132, ) sequence_data
WS_JOB_STATUS,FUNCTION,133, ) ranked_date
WS_JOB_STATUS,FUNCTION,134, WHERE rank_job_state = 1
WS_JOB_STATUS,FUNCTION,135, ;
WS_JOB_STATUS,FUNCTION,136,
WS_JOB_STATUS,FUNCTION,137, v_step := 800;
WS_JOB_STATUS,FUNCTION,138,
WS_JOB_STATUS,FUNCTION,139, IF ( v_job_state = 0 ) THEN
WS_JOB_STATUS,FUNCTION,140,
WS_JOB_STATUS,FUNCTION,141, v_step := 900;
WS_JOB_STATUS,FUNCTION,142,
WS_JOB_STATUS,FUNCTION,143, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,144, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,145, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,146, p_return_msg := 'Unable to locate specified job sequence.';
WS_JOB_STATUS,FUNCTION,147, p_return_code := 'E';
WS_JOB_STATUS,FUNCTION,148,
WS_JOB_STATUS,FUNCTION,149, RETURN -1;
WS_JOB_STATUS,FUNCTION,150,
WS_JOB_STATUS,FUNCTION,151, END IF;
WS_JOB_STATUS,FUNCTION,152,
WS_JOB_STATUS,FUNCTION,153, v_job_sequence := p_check_sequence;
WS_JOB_STATUS,FUNCTION,154,
WS_JOB_STATUS,FUNCTION,155, -- If either date and time parameter has been specified...
WS_JOB_STATUS,FUNCTION,156, ELSIF (( p_started_in_last_mi IS NOT NULL ) OR ( p_started_after_dt IS NOT NULL )) THEN
WS_JOB_STATUS,FUNCTION,157,
WS_JOB_STATUS,FUNCTION,158, -- If the started in the last X minutes parameter has been specified, then
WS_JOB_STATUS,FUNCTION,159, -- convert this into a day.
WS_JOB_STATUS,FUNCTION,160, IF ( p_started_in_last_mi IS NOT NULL ) THEN
WS_JOB_STATUS,FUNCTION,161,
WS_JOB_STATUS,FUNCTION,162, v_step := 1000;
WS_JOB_STATUS,FUNCTION,163,
WS_JOB_STATUS,FUNCTION,164, -- Work out allowable start date and store in v_started_after_dt using the day, hour
WS_JOB_STATUS,FUNCTION,165, -- and minute interval values.
WS_JOB_STATUS,FUNCTION,166, v_started_after_dt := SYSDATE - p_started_in_last_mi/60/24;
WS_JOB_STATUS,FUNCTION,167,
WS_JOB_STATUS,FUNCTION,168, -- Start after date parameter specified, so assign this to v_started_after_dt.
WS_JOB_STATUS,FUNCTION,169, ELSIF ( p_started_after_dt IS NOT NULL ) THEN
WS_JOB_STATUS,FUNCTION,170,
WS_JOB_STATUS,FUNCTION,171, v_started_after_dt := p_started_after_dt;
WS_JOB_STATUS,FUNCTION,172,
WS_JOB_STATUS,FUNCTION,173, END IF;
WS_JOB_STATUS,FUNCTION,174,
WS_JOB_STATUS,FUNCTION,175, v_step := 1100;
WS_JOB_STATUS,FUNCTION,176,
WS_JOB_STATUS,FUNCTION,177, -- Get the sequence of the job and see if it is in the control, run
WS_JOB_STATUS,FUNCTION,178, -- or log tables.
WS_JOB_STATUS,FUNCTION,179, -- Note order of precedence: has run, is running, has not yet run.
WS_JOB_STATUS,FUNCTION,180, SELECT NVL(MAX(job_state),'0')
WS_JOB_STATUS,FUNCTION,181, , NVL(MAX(job_sequence),0)
WS_JOB_STATUS,FUNCTION,182, INTO v_job_state
WS_JOB_STATUS,FUNCTION,183, , v_job_sequence
WS_JOB_STATUS,FUNCTION,184, FROM ( SELECT sequence_data.*
WS_JOB_STATUS,FUNCTION,185, , ROWNUM AS rank_job_state
WS_JOB_STATUS,FUNCTION,186, FROM ( SELECT '0' AS job_state
WS_JOB_STATUS,FUNCTION,187, , wjc_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,188, FROM ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,189, WHERE wjc_started >= v_started_after_dt
WS_JOB_STATUS,FUNCTION,190, AND wjc_status = 'B'
WS_JOB_STATUS,FUNCTION,191, UNION
WS_JOB_STATUS,FUNCTION,192, SELECT '1' AS job_state
WS_JOB_STATUS,FUNCTION,193, , wjr_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,194, FROM ws_wrk_job_run
WS_JOB_STATUS,FUNCTION,195, WHERE wjr_name = p_check_job
WS_JOB_STATUS,FUNCTION,196, AND wjr_started >= v_started_after_dt
WS_JOB_STATUS,FUNCTION,197, UNION
WS_JOB_STATUS,FUNCTION,198, SELECT '2' AS job_state
WS_JOB_STATUS,FUNCTION,199, , wjl_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,200, FROM ws_wrk_job_log
WS_JOB_STATUS,FUNCTION,201, WHERE wjl_name = p_check_job
WS_JOB_STATUS,FUNCTION,202, AND wjl_started >= v_started_after_dt
WS_JOB_STATUS,FUNCTION,203, UNION
WS_JOB_STATUS,FUNCTION,204, SELECT '3' AS job_state
WS_JOB_STATUS,FUNCTION,205, , wjc_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,206, FROM ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,207, WHERE wjc_name = p_check_job
WS_JOB_STATUS,FUNCTION,208, AND wjc_started >= v_started_after_dt
WS_JOB_STATUS,FUNCTION,209, AND wjc_status <> 'B'
WS_JOB_STATUS,FUNCTION,210, ORDER BY job_state ASC
WS_JOB_STATUS,FUNCTION,211, , job_sequence DESC
WS_JOB_STATUS,FUNCTION,212, ) sequence_data
WS_JOB_STATUS,FUNCTION,213, ) ranked_date
WS_JOB_STATUS,FUNCTION,214, WHERE rank_job_state = 1
WS_JOB_STATUS,FUNCTION,215, ;
WS_JOB_STATUS,FUNCTION,216,
WS_JOB_STATUS,FUNCTION,217, -- If job sequence hasnt been found, set v_job_not_found to Y for later use.
WS_JOB_STATUS,FUNCTION,218, IF ( v_job_sequence = 0 ) THEN
WS_JOB_STATUS,FUNCTION,219,
WS_JOB_STATUS,FUNCTION,220, v_job_not_found := 'Y';
WS_JOB_STATUS,FUNCTION,221,
WS_JOB_STATUS,FUNCTION,222, END IF;
WS_JOB_STATUS,FUNCTION,223,
WS_JOB_STATUS,FUNCTION,224, END IF;
WS_JOB_STATUS,FUNCTION,225,
WS_JOB_STATUS,FUNCTION,226, -- If the sequence parameter or neither date parameters has been specified or
WS_JOB_STATUS,FUNCTION,227, -- both previous checks failed to find the job look for the max sequence of
WS_JOB_STATUS,FUNCTION,228, -- the specified job.
WS_JOB_STATUS,FUNCTION,229, -- Note order of precedence: has run, is running, has not yet run.
WS_JOB_STATUS,FUNCTION,230, IF ((( p_check_sequence IS NULL ) AND ( p_started_in_last_mi IS NULL ) AND ( p_started_after_dt IS NULL )) OR ( v_job_not_found = 'Y' )) THEN
WS_JOB_STATUS,FUNCTION,231,
WS_JOB_STATUS,FUNCTION,232, v_step := 1200;
WS_JOB_STATUS,FUNCTION,233,
WS_JOB_STATUS,FUNCTION,234, SELECT NVL(MAX(job_state),'0')
WS_JOB_STATUS,FUNCTION,235, , NVL(MAX(job_sequence),0)
WS_JOB_STATUS,FUNCTION,236, INTO v_job_state
WS_JOB_STATUS,FUNCTION,237, , v_job_sequence
WS_JOB_STATUS,FUNCTION,238, FROM ( SELECT sequence_data.*
WS_JOB_STATUS,FUNCTION,239, , ROWNUM AS rank_job_state
WS_JOB_STATUS,FUNCTION,240, FROM ( SELECT '0' AS job_state
WS_JOB_STATUS,FUNCTION,241, , wjc_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,242, FROM ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,243, WHERE wjc_name = p_check_job
WS_JOB_STATUS,FUNCTION,244, AND wjc_status = 'B'
WS_JOB_STATUS,FUNCTION,245, UNION
WS_JOB_STATUS,FUNCTION,246, SELECT '1' AS job_state
WS_JOB_STATUS,FUNCTION,247, , wjr_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,248, FROM ws_wrk_job_run
WS_JOB_STATUS,FUNCTION,249, WHERE wjr_name = p_check_job
WS_JOB_STATUS,FUNCTION,250, UNION
WS_JOB_STATUS,FUNCTION,251, SELECT '2' AS job_state
WS_JOB_STATUS,FUNCTION,252, , wjl_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,253, FROM ws_wrk_job_log
WS_JOB_STATUS,FUNCTION,254, WHERE wjl_name = p_check_job
WS_JOB_STATUS,FUNCTION,255, UNION
WS_JOB_STATUS,FUNCTION,256, SELECT '3' AS job_state
WS_JOB_STATUS,FUNCTION,257, , wjc_sequence AS job_sequence
WS_JOB_STATUS,FUNCTION,258, FROM ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,259, WHERE wjc_name = p_check_job
WS_JOB_STATUS,FUNCTION,260, AND wjc_status <> 'B'
WS_JOB_STATUS,FUNCTION,261, ORDER BY job_state ASC
WS_JOB_STATUS,FUNCTION,262, , job_sequence DESC
WS_JOB_STATUS,FUNCTION,263, ) sequence_data
WS_JOB_STATUS,FUNCTION,264, ) ranked_date
WS_JOB_STATUS,FUNCTION,265, WHERE rank_job_state = 1
WS_JOB_STATUS,FUNCTION,266, ;
WS_JOB_STATUS,FUNCTION,267,
WS_JOB_STATUS,FUNCTION,268, END IF;
WS_JOB_STATUS,FUNCTION,269,
WS_JOB_STATUS,FUNCTION,270, v_step := 1300;
WS_JOB_STATUS,FUNCTION,271,
WS_JOB_STATUS,FUNCTION,272, -- If the job could not be found, abort.
WS_JOB_STATUS,FUNCTION,273, IF ( v_job_sequence = 0 ) THEN
WS_JOB_STATUS,FUNCTION,274,
WS_JOB_STATUS,FUNCTION,275, v_step := 1400;
WS_JOB_STATUS,FUNCTION,276,
WS_JOB_STATUS,FUNCTION,277, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,278, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,279, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,280, p_return_msg := 'Unable to locate job.';
WS_JOB_STATUS,FUNCTION,281, p_return_code := 'E';
WS_JOB_STATUS,FUNCTION,282,
WS_JOB_STATUS,FUNCTION,283, RETURN -1;
WS_JOB_STATUS,FUNCTION,284,
WS_JOB_STATUS,FUNCTION,285, -- If the job exists but not starting in the last X minutes then abort.
WS_JOB_STATUS,FUNCTION,286, ELSIF ( p_started_in_last_mi IS NOT NULL AND v_job_not_found = 'Y' ) THEN
WS_JOB_STATUS,FUNCTION,287,
WS_JOB_STATUS,FUNCTION,288, v_step := 1500;
WS_JOB_STATUS,FUNCTION,289,
WS_JOB_STATUS,FUNCTION,290, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,291, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,292, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,293, p_return_msg := 'Job Not Found having started in the last ' || TRIM(TO_CHAR(p_started_in_last_mi)) ||' minutes.';
WS_JOB_STATUS,FUNCTION,294, p_return_code := 'N';
WS_JOB_STATUS,FUNCTION,295,
WS_JOB_STATUS,FUNCTION,296, RETURN -1;
WS_JOB_STATUS,FUNCTION,297,
WS_JOB_STATUS,FUNCTION,298, -- If the job exists but not starting since the specified date and time then abort.
WS_JOB_STATUS,FUNCTION,299, ELSIF ( p_started_after_dt IS NOT NULL AND v_job_not_found = 'Y' ) THEN
WS_JOB_STATUS,FUNCTION,300,
WS_JOB_STATUS,FUNCTION,301, v_step := 1600;
WS_JOB_STATUS,FUNCTION,302,
WS_JOB_STATUS,FUNCTION,303, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,304, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,305, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,306, p_return_msg := 'Job Not Found having started after ' || TO_CHAR(p_started_after_dt,'YYYY-MM-DD hh24:mi:ss') ||'.';
WS_JOB_STATUS,FUNCTION,307, p_return_code := 'N';
WS_JOB_STATUS,FUNCTION,308,
WS_JOB_STATUS,FUNCTION,309, RETURN -1;
WS_JOB_STATUS,FUNCTION,310,
WS_JOB_STATUS,FUNCTION,311, END IF;
WS_JOB_STATUS,FUNCTION,312,
WS_JOB_STATUS,FUNCTION,313, v_step := 1700;
WS_JOB_STATUS,FUNCTION,314,
WS_JOB_STATUS,FUNCTION,315, -- If the job was found and is currently running or has failed and not been
WS_JOB_STATUS,FUNCTION,316, -- aborted, get its details.
WS_JOB_STATUS,FUNCTION,317, IF ( v_job_state = '1' ) THEN
WS_JOB_STATUS,FUNCTION,318,
WS_JOB_STATUS,FUNCTION,319, v_step := 1800;
WS_JOB_STATUS,FUNCTION,320,
WS_JOB_STATUS,FUNCTION,321, v_sql := '
WS_JOB_STATUS,FUNCTION,322,    SELECT NVL(MAX(
WS_JOB_STATUS,FUNCTION,323,           CASE
WS_JOB_STATUS,FUNCTION,324,             WHEN job_status = ''H'' THEN ''N''
WS_JOB_STATUS,FUNCTION,325,             WHEN job_status = ''W'' THEN ''N''
WS_JOB_STATUS,FUNCTION,326,             WHEN job_status = ''B'' THEN ''N''
WS_JOB_STATUS,FUNCTION,327,             WHEN job_status = ''P'' THEN ''N''
WS_JOB_STATUS,FUNCTION,328,             WHEN job_status = ''R'' THEN ''R''
WS_JOB_STATUS,FUNCTION,329,             WHEN job_status = ''F'' THEN ''F''
WS_JOB_STATUS,FUNCTION,330,             WHEN job_status = ''C'' THEN ''C''
WS_JOB_STATUS,FUNCTION,331,             WHEN job_status = ''G'' THEN ''F''
WS_JOB_STATUS,FUNCTION,332,             WHEN job_status = ''E'' THEN ''F''
WS_JOB_STATUS,FUNCTION,333,             ELSE ''0''
WS_JOB_STATUS,FUNCTION,334,           END),''0'') AS Job_Status_Simple
WS_JOB_STATUS,FUNCTION,335,         , NVL(MAX(job_status),''0'') AS Job_Status_Standard
WS_JOB_STATUS,FUNCTION,336,         , NVL(MAX(
WS_JOB_STATUS,FUNCTION,337,           CASE
WS_JOB_STATUS,FUNCTION,338,             WHEN job_status = ''H'' THEN ''1''
WS_JOB_STATUS,FUNCTION,339,             WHEN job_status = ''W'' THEN ''2''
WS_JOB_STATUS,FUNCTION,340,             WHEN job_status = ''B'' THEN ''3''
WS_JOB_STATUS,FUNCTION,341,             WHEN job_status = ''P'' THEN ''4''
WS_JOB_STATUS,FUNCTION,342,             WHEN job_status = ''R'' THEN ''5''
WS_JOB_STATUS,FUNCTION,343,             WHEN job_status = ''F'' THEN ''8''
WS_JOB_STATUS,FUNCTION,344,             WHEN job_status = ''C'' THEN ''9''
WS_JOB_STATUS,FUNCTION,345,             WHEN job_status = ''G'' THEN ''11''
WS_JOB_STATUS,FUNCTION,346,             WHEN job_status = ''E'' THEN ''12''
WS_JOB_STATUS,FUNCTION,347,             ELSE ''0''
WS_JOB_STATUS,FUNCTION,348,           END),''0'') AS Job_Status_Enhanced
WS_JOB_STATUS,FUNCTION,349,         , NVL(MAX(CASE
WS_JOB_STATUS,FUNCTION,350,             WHEN job_status = ''H'' THEN ''On Hold''
WS_JOB_STATUS,FUNCTION,351,             WHEN job_status = ''R'' THEN ''Running''
WS_JOB_STATUS,FUNCTION,352,             WHEN job_status = ''P'' THEN ''Pending''
WS_JOB_STATUS,FUNCTION,353,             WHEN job_status = ''W'' THEN ''Waiting''
WS_JOB_STATUS,FUNCTION,354,             WHEN job_status = ''C'' THEN ''Completed''
WS_JOB_STATUS,FUNCTION,355,             WHEN job_status = ''B'' THEN ''Blocked''
WS_JOB_STATUS,FUNCTION,356,             WHEN job_status = ''F'' THEN ''Failed''
WS_JOB_STATUS,FUNCTION,357,             WHEN job_status = ''G'' THEN ''Failed - Aborted''
WS_JOB_STATUS,FUNCTION,358,             WHEN job_status = ''E'' THEN ''Error Completion''
WS_JOB_STATUS,FUNCTION,359,             ELSE ''Unknown''
WS_JOB_STATUS,FUNCTION,360,           END),''Unknown'') AS Job_Status_Message
WS_JOB_STATUS,FUNCTION,361,    FROM (
WS_JOB_STATUS,FUNCTION,362,        SELECT wjr_status AS job_status
WS_JOB_STATUS,FUNCTION,363,        FROM ws_wrk_job_run
WS_JOB_STATUS,FUNCTION,364,        WHERE wjr_sequence = :b1
WS_JOB_STATUS,FUNCTION,365,          UNION
WS_JOB_STATUS,FUNCTION,366,        SELECT wjl_status AS job_status
WS_JOB_STATUS,FUNCTION,367,        FROM ws_wrk_job_log
WS_JOB_STATUS,FUNCTION,368,        WHERE wjl_sequence = :b2
WS_JOB_STATUS,FUNCTION,369,    ) sequence_data'
WS_JOB_STATUS,FUNCTION,370, ;
WS_JOB_STATUS,FUNCTION,371,
WS_JOB_STATUS,FUNCTION,372, EXECUTE IMMEDIATE v_sql
WS_JOB_STATUS,FUNCTION,373, INTO v_job_status_simple
WS_JOB_STATUS,FUNCTION,374, , v_job_status_standard
WS_JOB_STATUS,FUNCTION,375, , v_job_status_enhanced
WS_JOB_STATUS,FUNCTION,376, , v_job_status_msg
WS_JOB_STATUS,FUNCTION,377, USING v_job_sequence
WS_JOB_STATUS,FUNCTION,378, , v_job_sequence;
WS_JOB_STATUS,FUNCTION,379,
WS_JOB_STATUS,FUNCTION,380, v_step := 1900;
WS_JOB_STATUS,FUNCTION,381,
WS_JOB_STATUS,FUNCTION,382, -- If the job is still running, check to see if any completed tasks
WS_JOB_STATUS,FUNCTION,383, -- have any errors or warning. Then enhance the return message and
WS_JOB_STATUS,FUNCTION,384, -- status. If there are both warnings and errors then report as a
WS_JOB_STATUS,FUNCTION,385, -- running with errors.
WS_JOB_STATUS,FUNCTION,386, IF ( v_job_status_enhanced = '5' ) THEN
WS_JOB_STATUS,FUNCTION,387,
WS_JOB_STATUS,FUNCTION,388, v_step := 2000;
WS_JOB_STATUS,FUNCTION,389,
WS_JOB_STATUS,FUNCTION,390, SELECT COUNT(*)
WS_JOB_STATUS,FUNCTION,391, INTO v_task_count
WS_JOB_STATUS,FUNCTION,392, FROM ws_wrk_task_run
WS_JOB_STATUS,FUNCTION,393, WHERE wtr_sequence = v_job_sequence
WS_JOB_STATUS,FUNCTION,394, AND wtr_audit_status IN ('E','F')
WS_JOB_STATUS,FUNCTION,395, ;
WS_JOB_STATUS,FUNCTION,396,
WS_JOB_STATUS,FUNCTION,397, v_step := 2100;
WS_JOB_STATUS,FUNCTION,398,
WS_JOB_STATUS,FUNCTION,399, IF ( v_task_count > 0 ) THEN
WS_JOB_STATUS,FUNCTION,400,
WS_JOB_STATUS,FUNCTION,401, v_step := 2200;
WS_JOB_STATUS,FUNCTION,402,
WS_JOB_STATUS,FUNCTION,403, v_job_status_enhanced := '6';
WS_JOB_STATUS,FUNCTION,404, v_job_status_msg := 'Running with Errors';
WS_JOB_STATUS,FUNCTION,405,
WS_JOB_STATUS,FUNCTION,406, ELSE
WS_JOB_STATUS,FUNCTION,407,
WS_JOB_STATUS,FUNCTION,408, v_step := 2300;
WS_JOB_STATUS,FUNCTION,409,
WS_JOB_STATUS,FUNCTION,410, SELECT COUNT(*)
WS_JOB_STATUS,FUNCTION,411, INTO v_task_count
WS_JOB_STATUS,FUNCTION,412, FROM ws_wrk_task_run
WS_JOB_STATUS,FUNCTION,413, WHERE wtr_sequence = v_job_sequence
WS_JOB_STATUS,FUNCTION,414, AND wtr_audit_status = 'W'
WS_JOB_STATUS,FUNCTION,415, ;
WS_JOB_STATUS,FUNCTION,416,
WS_JOB_STATUS,FUNCTION,417, v_step := 2400;
WS_JOB_STATUS,FUNCTION,418,
WS_JOB_STATUS,FUNCTION,419, IF ( v_task_count > 0 ) THEN
WS_JOB_STATUS,FUNCTION,420,
WS_JOB_STATUS,FUNCTION,421, v_step := 2500;
WS_JOB_STATUS,FUNCTION,422,
WS_JOB_STATUS,FUNCTION,423, v_job_status_enhanced := '7';
WS_JOB_STATUS,FUNCTION,424, v_job_status_msg := 'Running with Warnings';
WS_JOB_STATUS,FUNCTION,425,
WS_JOB_STATUS,FUNCTION,426, END IF;
WS_JOB_STATUS,FUNCTION,427,
WS_JOB_STATUS,FUNCTION,428, END IF;
WS_JOB_STATUS,FUNCTION,429,
WS_JOB_STATUS,FUNCTION,430, END IF;
WS_JOB_STATUS,FUNCTION,431,
WS_JOB_STATUS,FUNCTION,432, -- If the job was found and has completed running, get its details.
WS_JOB_STATUS,FUNCTION,433, ELSIF ( v_job_state = '2' ) THEN
WS_JOB_STATUS,FUNCTION,434,
WS_JOB_STATUS,FUNCTION,435, v_step := 2600;
WS_JOB_STATUS,FUNCTION,436,
WS_JOB_STATUS,FUNCTION,437, v_sql := '
WS_JOB_STATUS,FUNCTION,438,    SELECT NVL(MAX(
WS_JOB_STATUS,FUNCTION,439,           CASE
WS_JOB_STATUS,FUNCTION,440,             WHEN wjl_status = ''H'' THEN ''N''
WS_JOB_STATUS,FUNCTION,441,             WHEN wjl_status = ''W'' THEN ''N''
WS_JOB_STATUS,FUNCTION,442,             WHEN wjl_status = ''B'' THEN ''N''
WS_JOB_STATUS,FUNCTION,443,             WHEN wjl_status = ''P'' THEN ''N''
WS_JOB_STATUS,FUNCTION,444,             WHEN wjl_status = ''R'' THEN ''R''
WS_JOB_STATUS,FUNCTION,445,             WHEN wjl_status = ''F'' THEN ''F''
WS_JOB_STATUS,FUNCTION,446,             WHEN wjl_status = ''C'' THEN ''C''
WS_JOB_STATUS,FUNCTION,447,             WHEN wjl_status = ''G'' THEN ''F''
WS_JOB_STATUS,FUNCTION,448,             WHEN wjl_status = ''E'' THEN ''F''
WS_JOB_STATUS,FUNCTION,449,             ELSE ''0''
WS_JOB_STATUS,FUNCTION,450,           END),''0'') AS Job_Status_Simple
WS_JOB_STATUS,FUNCTION,451,         , NVL(MAX(wjl_status),''0'') AS Job_Status_Standard
WS_JOB_STATUS,FUNCTION,452,         , NVL(MAX(
WS_JOB_STATUS,FUNCTION,453,           CASE
WS_JOB_STATUS,FUNCTION,454,             WHEN wjl_status = ''H'' THEN ''1''
WS_JOB_STATUS,FUNCTION,455,             WHEN wjl_status = ''W'' THEN ''2''
WS_JOB_STATUS,FUNCTION,456,             WHEN wjl_status = ''B'' THEN ''3''
WS_JOB_STATUS,FUNCTION,457,             WHEN wjl_status = ''P'' THEN ''4''
WS_JOB_STATUS,FUNCTION,458,             WHEN wjl_status = ''R'' THEN ''5''
WS_JOB_STATUS,FUNCTION,459,             WHEN wjl_status = ''F'' THEN ''8''
WS_JOB_STATUS,FUNCTION,460,             WHEN wjl_status = ''C'' THEN ''9''
WS_JOB_STATUS,FUNCTION,461,             WHEN wjl_status = ''G'' THEN ''11''
WS_JOB_STATUS,FUNCTION,462,             WHEN wjl_status = ''E'' THEN ''12''
WS_JOB_STATUS,FUNCTION,463,             ELSE ''0''
WS_JOB_STATUS,FUNCTION,464,           END),''0'') AS Job_Status_Enhanced
WS_JOB_STATUS,FUNCTION,465,         , NVL(MAX(CASE
WS_JOB_STATUS,FUNCTION,466,             WHEN wjl_status = ''H'' THEN ''On Hold''
WS_JOB_STATUS,FUNCTION,467,             WHEN wjl_status = ''R'' THEN ''Running''
WS_JOB_STATUS,FUNCTION,468,             WHEN wjl_status = ''P'' THEN ''Pending''
WS_JOB_STATUS,FUNCTION,469,             WHEN wjl_status = ''W'' THEN ''Waiting''
WS_JOB_STATUS,FUNCTION,470,             WHEN wjl_status = ''C'' THEN ''Completed''
WS_JOB_STATUS,FUNCTION,471,             WHEN wjl_status = ''B'' THEN ''Blocked''
WS_JOB_STATUS,FUNCTION,472,             WHEN wjl_status = ''F'' THEN ''Failed''
WS_JOB_STATUS,FUNCTION,473,             WHEN wjl_status = ''G'' THEN ''Failed - Aborted''
WS_JOB_STATUS,FUNCTION,474,             WHEN wjl_status = ''E'' THEN ''Error Completion''
WS_JOB_STATUS,FUNCTION,475,             ELSE ''Unknown''
WS_JOB_STATUS,FUNCTION,476,           END),''Unknown'') AS Job_Status_Message
WS_JOB_STATUS,FUNCTION,477,    FROM   ws_wrk_job_log
WS_JOB_STATUS,FUNCTION,478,    WHERE  wjl_sequence = :b1'
WS_JOB_STATUS,FUNCTION,479, ;
WS_JOB_STATUS,FUNCTION,480,
WS_JOB_STATUS,FUNCTION,481, EXECUTE IMMEDIATE v_sql
WS_JOB_STATUS,FUNCTION,482, INTO v_job_status_simple
WS_JOB_STATUS,FUNCTION,483, , v_job_status_standard
WS_JOB_STATUS,FUNCTION,484, , v_job_status_enhanced
WS_JOB_STATUS,FUNCTION,485, , v_job_status_msg
WS_JOB_STATUS,FUNCTION,486, USING v_job_sequence;
WS_JOB_STATUS,FUNCTION,487,
WS_JOB_STATUS,FUNCTION,488, v_step := 2700;
WS_JOB_STATUS,FUNCTION,489,
WS_JOB_STATUS,FUNCTION,490, -- If the job completed successfully, check to see if there were
WS_JOB_STATUS,FUNCTION,491, -- any warnings. Then enhance the return message and status.
WS_JOB_STATUS,FUNCTION,492, IF ( v_job_status_enhanced = '9' ) THEN
WS_JOB_STATUS,FUNCTION,493,
WS_JOB_STATUS,FUNCTION,494, v_step := 2800;
WS_JOB_STATUS,FUNCTION,495,
WS_JOB_STATUS,FUNCTION,496, SELECT COUNT(*)
WS_JOB_STATUS,FUNCTION,497, INTO v_task_count
WS_JOB_STATUS,FUNCTION,498, FROM ws_wrk_task_log
WS_JOB_STATUS,FUNCTION,499, WHERE wtl_sequence = v_job_sequence
WS_JOB_STATUS,FUNCTION,500, AND wtl_audit_status = 'W'
WS_JOB_STATUS,FUNCTION,501, ;
WS_JOB_STATUS,FUNCTION,502,
WS_JOB_STATUS,FUNCTION,503, v_step := 2900;
WS_JOB_STATUS,FUNCTION,504,
WS_JOB_STATUS,FUNCTION,505, IF ( v_task_count > 0 ) THEN
WS_JOB_STATUS,FUNCTION,506,
WS_JOB_STATUS,FUNCTION,507, v_step := 3000;
WS_JOB_STATUS,FUNCTION,508,
WS_JOB_STATUS,FUNCTION,509, v_job_status_enhanced := '10';
WS_JOB_STATUS,FUNCTION,510, v_job_status_msg := 'Completed with Warnings';
WS_JOB_STATUS,FUNCTION,511,
WS_JOB_STATUS,FUNCTION,512, END IF;
WS_JOB_STATUS,FUNCTION,513,
WS_JOB_STATUS,FUNCTION,514, END IF;
WS_JOB_STATUS,FUNCTION,515,
WS_JOB_STATUS,FUNCTION,516, -- If the job was found and has not yet run, get its details.
WS_JOB_STATUS,FUNCTION,517, ELSIF ( v_job_state IN ('0','3') ) THEN
WS_JOB_STATUS,FUNCTION,518,
WS_JOB_STATUS,FUNCTION,519, v_step := 3100;
WS_JOB_STATUS,FUNCTION,520,
WS_JOB_STATUS,FUNCTION,521, v_sql := '
WS_JOB_STATUS,FUNCTION,522,    SELECT NVL(MAX(
WS_JOB_STATUS,FUNCTION,523,           CASE
WS_JOB_STATUS,FUNCTION,524,             WHEN wjc_status = ''H'' THEN ''N''
WS_JOB_STATUS,FUNCTION,525,             WHEN wjc_status = ''W'' THEN ''N''
WS_JOB_STATUS,FUNCTION,526,             WHEN wjc_status = ''B'' THEN ''N''
WS_JOB_STATUS,FUNCTION,527,             WHEN wjc_status = ''P'' THEN ''N''
WS_JOB_STATUS,FUNCTION,528,             WHEN wjc_status = ''R'' THEN ''R''
WS_JOB_STATUS,FUNCTION,529,             WHEN wjc_status = ''F'' THEN ''F''
WS_JOB_STATUS,FUNCTION,530,             WHEN wjc_status = ''C'' THEN ''C''
WS_JOB_STATUS,FUNCTION,531,             WHEN wjc_status = ''G'' THEN ''F''
WS_JOB_STATUS,FUNCTION,532,             WHEN wjc_status = ''E'' THEN ''F''
WS_JOB_STATUS,FUNCTION,533,             ELSE ''0''
WS_JOB_STATUS,FUNCTION,534,           END),''0'') AS Job_Status_Simple
WS_JOB_STATUS,FUNCTION,535,         , NVL(MAX(wjc_status),''0'') AS Job_Status_Standard
WS_JOB_STATUS,FUNCTION,536,         , NVL(MAX(
WS_JOB_STATUS,FUNCTION,537,           CASE
WS_JOB_STATUS,FUNCTION,538,             WHEN wjc_status = ''H'' THEN ''1''
WS_JOB_STATUS,FUNCTION,539,             WHEN wjc_status = ''W'' THEN ''2''
WS_JOB_STATUS,FUNCTION,540,             WHEN wjc_status = ''B'' THEN ''3''
WS_JOB_STATUS,FUNCTION,541,             WHEN wjc_status = ''P'' THEN ''4''
WS_JOB_STATUS,FUNCTION,542,             WHEN wjc_status = ''R'' THEN ''5''
WS_JOB_STATUS,FUNCTION,543,             WHEN wjc_status = ''F'' THEN ''8''
WS_JOB_STATUS,FUNCTION,544,             WHEN wjc_status = ''C'' THEN ''9''
WS_JOB_STATUS,FUNCTION,545,             WHEN wjc_status = ''G'' THEN ''11''
WS_JOB_STATUS,FUNCTION,546,             WHEN wjc_status = ''E'' THEN ''12''
WS_JOB_STATUS,FUNCTION,547,             ELSE ''0''
WS_JOB_STATUS,FUNCTION,548,           END),''0'') AS Job_Status_Enhanced
WS_JOB_STATUS,FUNCTION,549,         , NVL(MAX(CASE
WS_JOB_STATUS,FUNCTION,550,             WHEN wjc_status = ''H'' THEN ''On Hold''
WS_JOB_STATUS,FUNCTION,551,             WHEN wjc_status = ''R'' THEN ''Running''
WS_JOB_STATUS,FUNCTION,552,             WHEN wjc_status = ''P'' THEN ''Pending''
WS_JOB_STATUS,FUNCTION,553,             WHEN wjc_status = ''W'' THEN ''Waiting''
WS_JOB_STATUS,FUNCTION,554,             WHEN wjc_status = ''C'' THEN ''Completed''
WS_JOB_STATUS,FUNCTION,555,             WHEN wjc_status = ''B'' THEN ''Blocked''
WS_JOB_STATUS,FUNCTION,556,             WHEN wjc_status = ''F'' THEN ''Failed''
WS_JOB_STATUS,FUNCTION,557,             WHEN wjc_status = ''G'' THEN ''Failed - Aborted''
WS_JOB_STATUS,FUNCTION,558,             WHEN wjc_status = ''E'' THEN ''Error Completion''
WS_JOB_STATUS,FUNCTION,559,             ELSE ''Unknown''
WS_JOB_STATUS,FUNCTION,560,           END),''Unknown'') AS Job_Status_Message
WS_JOB_STATUS,FUNCTION,561,    FROM   ws_wrk_job_ctrl
WS_JOB_STATUS,FUNCTION,562,    WHERE  wjc_sequence = :b1'
WS_JOB_STATUS,FUNCTION,563, ;
WS_JOB_STATUS,FUNCTION,564,
WS_JOB_STATUS,FUNCTION,565, v_step := 3200;
WS_JOB_STATUS,FUNCTION,566,
WS_JOB_STATUS,FUNCTION,567, EXECUTE IMMEDIATE v_sql
WS_JOB_STATUS,FUNCTION,568, INTO v_job_status_simple
WS_JOB_STATUS,FUNCTION,569, , v_job_status_standard
WS_JOB_STATUS,FUNCTION,570, , v_job_status_enhanced
WS_JOB_STATUS,FUNCTION,571, , v_job_status_msg
WS_JOB_STATUS,FUNCTION,572, USING v_job_sequence;
WS_JOB_STATUS,FUNCTION,573,
WS_JOB_STATUS,FUNCTION,574, END IF;
WS_JOB_STATUS,FUNCTION,575,
WS_JOB_STATUS,FUNCTION,576, v_step := 3300;
WS_JOB_STATUS,FUNCTION,577,
WS_JOB_STATUS,FUNCTION,578, p_job_status_simple := v_job_status_simple;
WS_JOB_STATUS,FUNCTION,579, p_job_status_standard := v_job_status_standard;
WS_JOB_STATUS,FUNCTION,580, p_job_status_enhanced := v_job_status_enhanced;
WS_JOB_STATUS,FUNCTION,581, p_return_msg := 'Job Sequence ' || TO_CHAR(v_job_sequence) || ' ' || v_job_status_msg;
WS_JOB_STATUS,FUNCTION,582,
WS_JOB_STATUS,FUNCTION,583, RETURN 1;
WS_JOB_STATUS,FUNCTION,584,
WS_JOB_STATUS,FUNCTION,585,EXCEPTION
WS_JOB_STATUS,FUNCTION,586, --=================================================================
WS_JOB_STATUS,FUNCTION,587, -- Unhandled Exception. Return with Fatal Error
WS_JOB_STATUS,FUNCTION,588, --=================================================================
WS_JOB_STATUS,FUNCTION,589, WHEN OTHERS THEN
WS_JOB_STATUS,FUNCTION,590, v_msgtext := SUBSTR('Unhandled Exception in Ws_Job_Status. '||
WS_JOB_STATUS,FUNCTION,591, ' Step ' || TO_CHAR(v_step) ||
WS_JOB_STATUS,FUNCTION,592, '   SQL Error Code: ' || SQLCODE || ' - ' || SQLERRM,1,1023);
WS_JOB_STATUS,FUNCTION,593, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence
WS_JOB_STATUS,FUNCTION,594, , v_MsgText, SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_JOB_STATUS,FUNCTION,595, p_job_status_simple := '0';
WS_JOB_STATUS,FUNCTION,596, p_job_status_standard := '0';
WS_JOB_STATUS,FUNCTION,597, p_job_status_enhanced := '0';
WS_JOB_STATUS,FUNCTION,598, p_return_msg := v_msgtext;
WS_JOB_STATUS,FUNCTION,599, p_return_code := 'F';
WS_JOB_STATUS,FUNCTION,600, RETURN -3;
WS_JOB_STATUS,FUNCTION,601,
WS_JOB_STATUS,FUNCTION,602,END Ws_Job_Status;
WS_JOB_WAIT,FUNCTION,1,function ws_job_wait
WS_JOB_WAIT,FUNCTION,2, (
WS_JOB_WAIT,FUNCTION,3, v_sched_type IN varchar2,
WS_JOB_WAIT,FUNCTION,4, v_sched_name IN varchar2,
WS_JOB_WAIT,FUNCTION,5, v_job_name OUT varchar2,
WS_JOB_WAIT,FUNCTION,6, v_task_name OUT varchar2,
WS_JOB_WAIT,FUNCTION,7, v_restart_flag OUT varchar2,
WS_JOB_WAIT,FUNCTION,8, v_thread OUT number,
WS_JOB_WAIT,FUNCTION,9, v_sequence OUT number
WS_JOB_WAIT,FUNCTION,10, )
WS_JOB_WAIT,FUNCTION,11, Return integer
WS_JOB_WAIT,FUNCTION,12, AUTHID CURRENT_USER
WS_JOB_WAIT,FUNCTION,13, IS
WS_JOB_WAIT,FUNCTION,14,
WS_JOB_WAIT,FUNCTION,15, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_JOB_WAIT,FUNCTION,16,
WS_JOB_WAIT,FUNCTION,17, -- =============================================================================
WS_JOB_WAIT,FUNCTION,18, -- DBMS Name : Oracle
WS_JOB_WAIT,FUNCTION,19, -- Script Name : ws_job_wait
WS_JOB_WAIT,FUNCTION,20, -- Description : Look for a job to execute
WS_JOB_WAIT,FUNCTION,21, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_WAIT,FUNCTION,22, -- =============================================================================
WS_JOB_WAIT,FUNCTION,23,
WS_JOB_WAIT,FUNCTION,24, v_ws_pro_version constant varchar(15) := '(8.4.1.0)';
WS_JOB_WAIT,FUNCTION,25,
WS_JOB_WAIT,FUNCTION,26, --=====================================================
WS_JOB_WAIT,FUNCTION,27, -- Variables
WS_JOB_WAIT,FUNCTION,28, --=====================================================
WS_JOB_WAIT,FUNCTION,29, v_MsgText varchar2(1024); -- Text in audit_trail
WS_JOB_WAIT,FUNCTION,30, v_step integer := 0; -- return code
WS_JOB_WAIT,FUNCTION,31, v_result integer := 0; -- return code
WS_JOB_WAIT,FUNCTION,32, v_status integer := 0; -- return code
WS_JOB_WAIT,FUNCTION,33, v_thread_count integer := 0; -- return code
WS_JOB_WAIT,FUNCTION,34, v_unix integer := 0; -- UNIX scheduler flag
WS_JOB_WAIT,FUNCTION,35, v_windows integer := 0; -- win scheduler flag
WS_JOB_WAIT,FUNCTION,36, v_poll integer := 0; -- status poll request
WS_JOB_WAIT,FUNCTION,37, v_shut integer := 0; -- shutdown request
WS_JOB_WAIT,FUNCTION,38, v_okay integer := 0;
WS_JOB_WAIT,FUNCTION,39, v_parent_okay integer := 0;
WS_JOB_WAIT,FUNCTION,40, v_fail_job integer := 0;
WS_JOB_WAIT,FUNCTION,41, v_fail_cmd integer := 0;
WS_JOB_WAIT,FUNCTION,42, v_waited integer := 0;
WS_JOB_WAIT,FUNCTION,43, v_job_id integer := 0;
WS_JOB_WAIT,FUNCTION,44, v_child_job_name varchar2(64);
WS_JOB_WAIT,FUNCTION,45, v_parent_job_name varchar2(64);
WS_JOB_WAIT,FUNCTION,46,
WS_JOB_WAIT,FUNCTION,47, v_start_hh integer;
WS_JOB_WAIT,FUNCTION,48, v_start_mi integer;
WS_JOB_WAIT,FUNCTION,49, v_start_day integer;
WS_JOB_WAIT,FUNCTION,50, v_cust_sa_hh integer;
WS_JOB_WAIT,FUNCTION,51, v_cust_sa_mm integer;
WS_JOB_WAIT,FUNCTION,52, v_cust_sb_hh integer;
WS_JOB_WAIT,FUNCTION,53, v_cust_sb_mm integer;
WS_JOB_WAIT,FUNCTION,54, v_cust_min integer;
WS_JOB_WAIT,FUNCTION,55, v_cust_days integer;
WS_JOB_WAIT,FUNCTION,56, v_cust_sb integer;
WS_JOB_WAIT,FUNCTION,57, v_cust_sa integer;
WS_JOB_WAIT,FUNCTION,58, v_more integer;
WS_JOB_WAIT,FUNCTION,59, v_AddDays integer;
WS_JOB_WAIT,FUNCTION,60, v_wait_HH integer;
WS_JOB_WAIT,FUNCTION,61, v_wait_MM integer;
WS_JOB_WAIT,FUNCTION,62, v_cur_HH integer;
WS_JOB_WAIT,FUNCTION,63, v_cur_MM integer;
WS_JOB_WAIT,FUNCTION,64, v_cur_HHMM integer;
WS_JOB_WAIT,FUNCTION,65, v_cur_day_name varchar(3);
WS_JOB_WAIT,FUNCTION,66, v_Monday integer;
WS_JOB_WAIT,FUNCTION,67, v_Tuesday integer;
WS_JOB_WAIT,FUNCTION,68, v_Wednesday integer;
WS_JOB_WAIT,FUNCTION,69, v_Thursday integer;
WS_JOB_WAIT,FUNCTION,70, v_Friday integer;
WS_JOB_WAIT,FUNCTION,71, v_Saturday integer;
WS_JOB_WAIT,FUNCTION,72, v_Sunday integer;
WS_JOB_WAIT,FUNCTION,73, v_log_keep integer;
WS_JOB_WAIT,FUNCTION,74, v_job_count integer := 0;
WS_JOB_WAIT,FUNCTION,75,
WS_JOB_WAIT,FUNCTION,76, v_start_after date;
WS_JOB_WAIT,FUNCTION,77, v_job_status varchar2(1);
WS_JOB_WAIT,FUNCTION,78, v_status_code integer;
WS_JOB_WAIT,FUNCTION,79,
WS_JOB_WAIT,FUNCTION,80, --=====================================================
WS_JOB_WAIT,FUNCTION,81, -- Cursor for all ready jobs
WS_JOB_WAIT,FUNCTION,82, --=====================================================
WS_JOB_WAIT,FUNCTION,83, Cursor c_Job is
WS_JOB_WAIT,FUNCTION,84, select wjc_name, wjc_max_threads, wjc_job_key, wjc_sequence,
WS_JOB_WAIT,FUNCTION,85, wjc_start_after, sysdate now_time, wjc_scheduler, wjc_type,
WS_JOB_WAIT,FUNCTION,86, wjc_start_hour, wjc_start_minute,
WS_JOB_WAIT,FUNCTION,87, nvl(wjc_cust_sa_hh,0) cust_sa_hh,
WS_JOB_WAIT,FUNCTION,88, nvl(wjc_cust_sa_mm,0) cust_sa_mm,
WS_JOB_WAIT,FUNCTION,89, nvl(wjc_cust_sb_hh,0) cust_sb_hh,
WS_JOB_WAIT,FUNCTION,90, nvl(wjc_cust_sb_mm,0) cust_sb_mm,
WS_JOB_WAIT,FUNCTION,91, nvl(wjc_cust_min,0) cust_min,
WS_JOB_WAIT,FUNCTION,92, nvl(wjc_cust_days,0) cust_days
WS_JOB_WAIT,FUNCTION,93, from ws_wrk_job_ctrl
WS_JOB_WAIT,FUNCTION,94, where wjc_status = 'W'
WS_JOB_WAIT,FUNCTION,95, and wjc_start_after < sysdate
WS_JOB_WAIT,FUNCTION,96, order by wjc_priority, wjc_start_after
WS_JOB_WAIT,FUNCTION,97, for update; -- This provides the suitable locking and also means cant commit within loop
WS_JOB_WAIT,FUNCTION,98,
WS_JOB_WAIT,FUNCTION,99, --=====================================================
WS_JOB_WAIT,FUNCTION,100, -- Cursor for all restarted jobs
WS_JOB_WAIT,FUNCTION,101, --=====================================================
WS_JOB_WAIT,FUNCTION,102, Cursor c_Restart is
WS_JOB_WAIT,FUNCTION,103, Select wjr_name, wjr_max_threads, wjr_sequence, wjr_job_key,
WS_JOB_WAIT,FUNCTION,104, wjr_scheduler
WS_JOB_WAIT,FUNCTION,105, from ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,106, where wjr_status = 'W'
WS_JOB_WAIT,FUNCTION,107, for update;-- This provides the suitable locking and also means cant commit within loop
WS_JOB_WAIT,FUNCTION,108,
WS_JOB_WAIT,FUNCTION,109, --=====================================================
WS_JOB_WAIT,FUNCTION,110, -- Cursor to check for dependent jobs
WS_JOB_WAIT,FUNCTION,111, --=====================================================
WS_JOB_WAIT,FUNCTION,112, Cursor c_DepJob is
WS_JOB_WAIT,FUNCTION,113, select *
WS_JOB_WAIT,FUNCTION,114, from ws_wrk_job_dependency
WS_JOB_WAIT,FUNCTION,115, where wjd_child_job_name = v_child_job_name;
WS_JOB_WAIT,FUNCTION,116,
WS_JOB_WAIT,FUNCTION,117, --=====================================================
WS_JOB_WAIT,FUNCTION,118, -- Cursor to check dependent job status
WS_JOB_WAIT,FUNCTION,119, --=====================================================
WS_JOB_WAIT,FUNCTION,120, Cursor c_JobLog is
WS_JOB_WAIT,FUNCTION,121, select (sysdate-wjl_completed)*1440 minutes, wjl_status, wjl_completed
WS_JOB_WAIT,FUNCTION,122, from ws_wrk_job_log
WS_JOB_WAIT,FUNCTION,123, where wjl_name = v_parent_job_name
WS_JOB_WAIT,FUNCTION,124, and wjl_status = 'C'
WS_JOB_WAIT,FUNCTION,125, order by wjl_completed desc;
WS_JOB_WAIT,FUNCTION,126,
WS_JOB_WAIT,FUNCTION,127, --=====================================================
WS_JOB_WAIT,FUNCTION,128, -- Cursor for all the task control records to be added to a failed job
WS_JOB_WAIT,FUNCTION,129, --=====================================================
WS_JOB_WAIT,FUNCTION,130, Cursor c_TaskCtrl is
WS_JOB_WAIT,FUNCTION,131, Select *
WS_JOB_WAIT,FUNCTION,132, from ws_wrk_task_ctrl
WS_JOB_WAIT,FUNCTION,133, Where wtc_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,134,
WS_JOB_WAIT,FUNCTION,135,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_JOB_WAIT,FUNCTION,136,BEGIN
WS_JOB_WAIT,FUNCTION,137, --=====================================================
WS_JOB_WAIT,FUNCTION,138, -- See what schedulers we have available
WS_JOB_WAIT,FUNCTION,139, --=====================================================
WS_JOB_WAIT,FUNCTION,140, BEGIN
WS_JOB_WAIT,FUNCTION,141, v_step := 100;
WS_JOB_WAIT,FUNCTION,142, Select count(1)
WS_JOB_WAIT,FUNCTION,143, into v_unix
WS_JOB_WAIT,FUNCTION,144, From ws_wrk_scheduler
WS_JOB_WAIT,FUNCTION,145, Where ws_type_ind = 'U'
WS_JOB_WAIT,FUNCTION,146, And ws_stop_date is null
WS_JOB_WAIT,FUNCTION,147, And to_number(sysdate-ws_active_date) < 0.01;
WS_JOB_WAIT,FUNCTION,148, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,149, v_unix := 0;
WS_JOB_WAIT,FUNCTION,150, END;
WS_JOB_WAIT,FUNCTION,151,
WS_JOB_WAIT,FUNCTION,152, BEGIN
WS_JOB_WAIT,FUNCTION,153, v_step := 200;
WS_JOB_WAIT,FUNCTION,154, Select count(1)
WS_JOB_WAIT,FUNCTION,155, into v_windows
WS_JOB_WAIT,FUNCTION,156, From ws_wrk_scheduler
WS_JOB_WAIT,FUNCTION,157, Where ws_type_ind = 'W'
WS_JOB_WAIT,FUNCTION,158, And ws_stop_date is null
WS_JOB_WAIT,FUNCTION,159, And to_number(sysdate-ws_active_date) < 0.01;
WS_JOB_WAIT,FUNCTION,160, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,161, v_windows := 0;
WS_JOB_WAIT,FUNCTION,162, END;
WS_JOB_WAIT,FUNCTION,163,
WS_JOB_WAIT,FUNCTION,164, --=====================================================
WS_JOB_WAIT,FUNCTION,165, -- See if a poll or shutdown requested for this scheduler
WS_JOB_WAIT,FUNCTION,166, --=====================================================
WS_JOB_WAIT,FUNCTION,167, BEGIN
WS_JOB_WAIT,FUNCTION,168, v_step := 300;
WS_JOB_WAIT,FUNCTION,169, Select ws_poll_flag, ws_shut_flag
WS_JOB_WAIT,FUNCTION,170, Into v_poll, v_shut
WS_JOB_WAIT,FUNCTION,171, From ws_wrk_scheduler
WS_JOB_WAIT,FUNCTION,172, Where ws_name = v_sched_name;
WS_JOB_WAIT,FUNCTION,173, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,174, v_poll := 0;
WS_JOB_WAIT,FUNCTION,175, v_shut := 0;
WS_JOB_WAIT,FUNCTION,176, END;
WS_JOB_WAIT,FUNCTION,177,
WS_JOB_WAIT,FUNCTION,178, --=====================================================
WS_JOB_WAIT,FUNCTION,179, -- If a shutdown or poll then the appropriate codes
WS_JOB_WAIT,FUNCTION,180, -- to tell the scheduler to action
WS_JOB_WAIT,FUNCTION,181, --=====================================================
WS_JOB_WAIT,FUNCTION,182, v_result := 2; -- default to no job to run
WS_JOB_WAIT,FUNCTION,183, If v_poll <> 0 Or v_shut <> 0 Then
WS_JOB_WAIT,FUNCTION,184,
WS_JOB_WAIT,FUNCTION,185, v_step := 400;
WS_JOB_WAIT,FUNCTION,186, If v_poll <> 0 Then
WS_JOB_WAIT,FUNCTION,187, v_result := 5;
WS_JOB_WAIT,FUNCTION,188, End If;
WS_JOB_WAIT,FUNCTION,189,
WS_JOB_WAIT,FUNCTION,190, If v_shut <> 0 Then
WS_JOB_WAIT,FUNCTION,191, v_result := 9;
WS_JOB_WAIT,FUNCTION,192, BEGIN
WS_JOB_WAIT,FUNCTION,193, v_step := 500;
WS_JOB_WAIT,FUNCTION,194, Update ws_wrk_scheduler
WS_JOB_WAIT,FUNCTION,195, set ws_shut_flag = 0
WS_JOB_WAIT,FUNCTION,196, Where ws_name = v_sched_name;
WS_JOB_WAIT,FUNCTION,197, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,198, v_shut := 1;
WS_JOB_WAIT,FUNCTION,199, END;
WS_JOB_WAIT,FUNCTION,200, End If;
WS_JOB_WAIT,FUNCTION,201,
WS_JOB_WAIT,FUNCTION,202, RETURN v_result;
WS_JOB_WAIT,FUNCTION,203, End If;
WS_JOB_WAIT,FUNCTION,204,
WS_JOB_WAIT,FUNCTION,205, --=====================================================
WS_JOB_WAIT,FUNCTION,206, -- Loop through the ready jobs
WS_JOB_WAIT,FUNCTION,207, -- We will just take the first one
WS_JOB_WAIT,FUNCTION,208, --=====================================================
WS_JOB_WAIT,FUNCTION,209, FOR v_JobRec in c_Job LOOP
WS_JOB_WAIT,FUNCTION,210,
WS_JOB_WAIT,FUNCTION,211, v_step := 600;
WS_JOB_WAIT,FUNCTION,212, --=====================================================
WS_JOB_WAIT,FUNCTION,213, -- See if we match on the requested scheduler
WS_JOB_WAIT,FUNCTION,214, --=====================================================
WS_JOB_WAIT,FUNCTION,215, If ( v_JobRec.wjc_scheduler is NULL )
WS_JOB_WAIT,FUNCTION,216, Or ( v_JobRec.wjc_scheduler = v_sched_type )
WS_JOB_WAIT,FUNCTION,217, Or ( v_JobRec.wjc_scheduler = v_sched_name )
WS_JOB_WAIT,FUNCTION,218, Or ( v_JobRec.wjc_scheduler = 'WANY' And v_sched_type = 'WIN' )
WS_JOB_WAIT,FUNCTION,219, Or ( v_JobRec.wjc_scheduler = 'UANY' And v_sched_type = 'UNIX' )
WS_JOB_WAIT,FUNCTION,220, Or ( v_JobRec.wjc_scheduler = 'WANY' And v_windows = 0 )
WS_JOB_WAIT,FUNCTION,221, Or ( v_JobRec.wjc_scheduler = 'UANY' And v_unix = 0 )
WS_JOB_WAIT,FUNCTION,222, Then
WS_JOB_WAIT,FUNCTION,223, v_step := 700;
WS_JOB_WAIT,FUNCTION,224, v_job_name := v_JobRec.wjc_name;
WS_JOB_WAIT,FUNCTION,225, v_task_name := 'NO+JOB';
WS_JOB_WAIT,FUNCTION,226, v_restart_flag := 'NEW';
WS_JOB_WAIT,FUNCTION,227, v_thread := v_JobRec.wjc_max_threads;
WS_JOB_WAIT,FUNCTION,228, v_okay := 1;
WS_JOB_WAIT,FUNCTION,229,
WS_JOB_WAIT,FUNCTION,230, --=====================================================
WS_JOB_WAIT,FUNCTION,231, -- See if the job has any job dependencies
WS_JOB_WAIT,FUNCTION,232, --=====================================================
WS_JOB_WAIT,FUNCTION,233, v_child_job_name := v_JobRec.wjc_name;
WS_JOB_WAIT,FUNCTION,234, v_fail_job := 0;
WS_JOB_WAIT,FUNCTION,235, v_fail_cmd := 0;
WS_JOB_WAIT,FUNCTION,236, v_waited := (sysdate - v_JobRec.wjc_start_after)*1440;
WS_JOB_WAIT,FUNCTION,237,
WS_JOB_WAIT,FUNCTION,238, FOR v_DepRec in c_DepJob LOOP
WS_JOB_WAIT,FUNCTION,239, v_step := 800;
WS_JOB_WAIT,FUNCTION,240, v_parent_job_name := v_DepRec.wjd_parent_job_name;
WS_JOB_WAIT,FUNCTION,241, v_parent_okay := 0;
WS_JOB_WAIT,FUNCTION,242,
WS_JOB_WAIT,FUNCTION,243, -- Loop through the logs for the parent job.
WS_JOB_WAIT,FUNCTION,244, -- If one has finished within our lookback period then all okay.
WS_JOB_WAIT,FUNCTION,245, FOR v_LogRec in c_JobLog LOOP
WS_JOB_WAIT,FUNCTION,246, v_step := 900;
WS_JOB_WAIT,FUNCTION,247, If (sysdate - v_LogRec.wjl_completed)*1440 < v_DepRec.wjd_first_check_lag then
WS_JOB_WAIT,FUNCTION,248, v_parent_okay := 1;
WS_JOB_WAIT,FUNCTION,249, End If;
WS_JOB_WAIT,FUNCTION,250, END LOOP;
WS_JOB_WAIT,FUNCTION,251,
WS_JOB_WAIT,FUNCTION,252, -- If parent not okay then see if we are past our wait time
WS_JOB_WAIT,FUNCTION,253, -- limit. If not past the limit then keep waiting
WS_JOB_WAIT,FUNCTION,254, -- If the parent is not required and past the wait limit
WS_JOB_WAIT,FUNCTION,255, -- then we will accept it as okay else fail it
WS_JOB_WAIT,FUNCTION,256, If v_parent_okay = 0 Then
WS_JOB_WAIT,FUNCTION,257, v_step := 1000;
WS_JOB_WAIT,FUNCTION,258, If v_waited > v_DepRec.wjd_wait_interval Then
WS_JOB_WAIT,FUNCTION,259, If v_DepRec.wjd_require_parent IN ('Y','F') Then
WS_JOB_WAIT,FUNCTION,260, v_fail_job := 1;
WS_JOB_WAIT,FUNCTION,261, v_okay := 0;
WS_JOB_WAIT,FUNCTION,262, If v_DepRec.wjd_require_parent = 'F' Then
WS_JOB_WAIT,FUNCTION,263, v_fail_cmd := 1;
WS_JOB_WAIT,FUNCTION,264, End If;
WS_JOB_WAIT,FUNCTION,265, EXIT; -- Stop here to report the first failed parent job
WS_JOB_WAIT,FUNCTION,266, End If;
WS_JOB_WAIT,FUNCTION,267, Else
WS_JOB_WAIT,FUNCTION,268, v_okay := 0;
WS_JOB_WAIT,FUNCTION,269, End If;
WS_JOB_WAIT,FUNCTION,270, End If;
WS_JOB_WAIT,FUNCTION,271,
WS_JOB_WAIT,FUNCTION,272, END LOOP;
WS_JOB_WAIT,FUNCTION,273,
WS_JOB_WAIT,FUNCTION,274, --=====================================================
WS_JOB_WAIT,FUNCTION,275, -- OKAY to RUN
WS_JOB_WAIT,FUNCTION,276, --=====================================================
WS_JOB_WAIT,FUNCTION,277, If v_okay = 1 Then
WS_JOB_WAIT,FUNCTION,278, v_step := 1100;
WS_JOB_WAIT,FUNCTION,279, Select ws_job_seq.nextval
WS_JOB_WAIT,FUNCTION,280, into v_sequence
WS_JOB_WAIT,FUNCTION,281, from sys.dual;
WS_JOB_WAIT,FUNCTION,282,
WS_JOB_WAIT,FUNCTION,283, -- Set the job to pending if we plan to run it
WS_JOB_WAIT,FUNCTION,284, Update ws_wrk_job_ctrl
WS_JOB_WAIT,FUNCTION,285, Set wjc_status = 'P',
WS_JOB_WAIT,FUNCTION,286, wjc_sequence = v_sequence
WS_JOB_WAIT,FUNCTION,287, Where wjc_job_key = v_JobRec.wjc_job_key;
WS_JOB_WAIT,FUNCTION,288,
WS_JOB_WAIT,FUNCTION,289, v_result := 1;
WS_JOB_WAIT,FUNCTION,290, COMMIT;
WS_JOB_WAIT,FUNCTION,291, RETURN v_result;
WS_JOB_WAIT,FUNCTION,292, End If;
WS_JOB_WAIT,FUNCTION,293,
WS_JOB_WAIT,FUNCTION,294, --=====================================================
WS_JOB_WAIT,FUNCTION,295, -- JOB needs to be FAILED
WS_JOB_WAIT,FUNCTION,296, --=====================================================
WS_JOB_WAIT,FUNCTION,297, If v_fail_job = 1 Then
WS_JOB_WAIT,FUNCTION,298,
WS_JOB_WAIT,FUNCTION,299, v_step := 1200;
WS_JOB_WAIT,FUNCTION,300, Select ws_job_seq.nextval
WS_JOB_WAIT,FUNCTION,301, into v_sequence
WS_JOB_WAIT,FUNCTION,302, from sys.dual;
WS_JOB_WAIT,FUNCTION,303,
WS_JOB_WAIT,FUNCTION,304, v_job_id := v_JobRec.wjc_job_key;
WS_JOB_WAIT,FUNCTION,305,
WS_JOB_WAIT,FUNCTION,306, -- Now either modify or delete the control record
WS_JOB_WAIT,FUNCTION,307, -- and if required delete the task records
WS_JOB_WAIT,FUNCTION,308, -- If it is a once only job then delete it from job control
WS_JOB_WAIT,FUNCTION,309, -- If a once and hold then set its status to Hold
WS_JOB_WAIT,FUNCTION,310, -- In all other cases work out when it will next run
WS_JOB_WAIT,FUNCTION,311, -- and put it in a wait state.
WS_JOB_WAIT,FUNCTION,312, BEGIN
WS_JOB_WAIT,FUNCTION,313, v_step := 1300;
WS_JOB_WAIT,FUNCTION,314, -- The delete of the Once-only Job Control record
WS_JOB_WAIT,FUNCTION,315, -- has been moved down to occur last before exiting, so that
WS_JOB_WAIT,FUNCTION,316, -- a Job Run record can be added for this failed job.
WS_JOB_WAIT,FUNCTION,317,
WS_JOB_WAIT,FUNCTION,318, --============= New code by Chris for ws_job_starttime ===================
WS_JOB_WAIT,FUNCTION,319, If v_JobRec.wjc_type <> 'O' Then
WS_JOB_WAIT,FUNCTION,320,
WS_JOB_WAIT,FUNCTION,321, -- Retrieve the next valid starttime for this job.
WS_JOB_WAIT,FUNCTION,322, v_result := ws_job_get_start(v_job_id, v_start_after, v_job_status, v_status_code, v_MsgText);
WS_JOB_WAIT,FUNCTION,323,
WS_JOB_WAIT,FUNCTION,324, IF v_result <> 1 THEN
WS_JOB_WAIT,FUNCTION,325, v_result := WsWrkAudit('E',v_job_name, v_task_name, v_sequence,
WS_JOB_WAIT,FUNCTION,326, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_WAIT,FUNCTION,327, END IF;
WS_JOB_WAIT,FUNCTION,328,
WS_JOB_WAIT,FUNCTION,329, -- Set new job status and starttime.
WS_JOB_WAIT,FUNCTION,330, -- If in error, then correct values already passed back from Ws_Job_Starttime
WS_JOB_WAIT,FUNCTION,331, UPDATE ws_wrk_job_ctrl
WS_JOB_WAIT,FUNCTION,332, SET wjc_status = v_job_status
WS_JOB_WAIT,FUNCTION,333, , wjc_start_after = v_start_after
WS_JOB_WAIT,FUNCTION,334, WHERE wjc_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,335,
WS_JOB_WAIT,FUNCTION,336, END IF;
WS_JOB_WAIT,FUNCTION,337, --============= End of New code by Chris for ws_job_starttime ===================
WS_JOB_WAIT,FUNCTION,338, -- removed this commit 5.1.0.1
WS_JOB_WAIT,FUNCTION,339, --COMMIT;
WS_JOB_WAIT,FUNCTION,340, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,341, v_MsgText := 'Failure to re-appoint scheduled job ' || v_job_name;
WS_JOB_WAIT,FUNCTION,342, --Ver 5.1.0.1 change to go to v_status not v_result
WS_JOB_WAIT,FUNCTION,343, v_status := WsWrkAudit('E',v_job_name, v_job_name, v_sequence,
WS_JOB_WAIT,FUNCTION,344, v_MsgText,SQLCODE,SQLERRM,0,v_job_id);
WS_JOB_WAIT,FUNCTION,345, END;
WS_JOB_WAIT,FUNCTION,346,
WS_JOB_WAIT,FUNCTION,347, -- 5.1.0.1
WS_JOB_WAIT,FUNCTION,348, -- CHECK if any JOBS already flagged failed and therefore need aborting
WS_JOB_WAIT,FUNCTION,349, -- normally processed in ws_job_exec if able to run
WS_JOB_WAIT,FUNCTION,350, BEGIN
WS_JOB_WAIT,FUNCTION,351, select count(1)
WS_JOB_WAIT,FUNCTION,352, into v_job_count
WS_JOB_WAIT,FUNCTION,353, from ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,354, where wjr_job_key = v_job_id
WS_JOB_WAIT,FUNCTION,355, and wjr_status = 'F';
WS_JOB_WAIT,FUNCTION,356, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,357, v_job_count := 0;
WS_JOB_WAIT,FUNCTION,358, END;
WS_JOB_WAIT,FUNCTION,359,
WS_JOB_WAIT,FUNCTION,360, If v_job_count <> 0 THEN
WS_JOB_WAIT,FUNCTION,361,
WS_JOB_WAIT,FUNCTION,362, v_MsgText := 'Job '||v_job_name||' has a previously Failed (incomplete) sequence. Now Aborted';
WS_JOB_WAIT,FUNCTION,363, v_status := WsWrkAudit('W',v_job_name,v_task_name, v_sequence,
WS_JOB_WAIT,FUNCTION,364, v_MsgText,NULL,NULL,0,0);
WS_JOB_WAIT,FUNCTION,365,
WS_JOB_WAIT,FUNCTION,366, -- Update the job run record to be completed (Failed-Aborted)
WS_JOB_WAIT,FUNCTION,367, -- and set the completion date if it is null
WS_JOB_WAIT,FUNCTION,368, -- Move the job run record to the log record
WS_JOB_WAIT,FUNCTION,369, BEGIN
WS_JOB_WAIT,FUNCTION,370, update ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,371, set wjr_status = 'G'
WS_JOB_WAIT,FUNCTION,372, where wjr_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,373,
WS_JOB_WAIT,FUNCTION,374, update ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,375, set wjr_completed = sysdate
WS_JOB_WAIT,FUNCTION,376, where wjr_job_key = v_job_id
WS_JOB_WAIT,FUNCTION,377, and wjr_completed is NULL;
WS_JOB_WAIT,FUNCTION,378,
WS_JOB_WAIT,FUNCTION,379, insert into ws_wrk_job_log
WS_JOB_WAIT,FUNCTION,380, select *
WS_JOB_WAIT,FUNCTION,381, from ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,382, where wjr_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,383,
WS_JOB_WAIT,FUNCTION,384, delete
WS_JOB_WAIT,FUNCTION,385, from ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,386, where wjr_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,387,
WS_JOB_WAIT,FUNCTION,388, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,389, v_MsgText := 'Ws_Job_Wait'|| v_ws_pro_version ||' Job '||v_job_name||
WS_JOB_WAIT,FUNCTION,390, ' failed in xfer to aborted job to ws_wrk_job_log. '||
WS_JOB_WAIT,FUNCTION,391, ' No Action !!!';
WS_JOB_WAIT,FUNCTION,392, v_status := WsWrkAudit('F',v_job_name,v_task_name, v_sequence,
WS_JOB_WAIT,FUNCTION,393, v_MsgText,SQLCODE,SQLERRM,0,0);
WS_JOB_WAIT,FUNCTION,394, v_result := -1;
WS_JOB_WAIT,FUNCTION,395, RETURN v_result;
WS_JOB_WAIT,FUNCTION,396, END;
WS_JOB_WAIT,FUNCTION,397, -- Move the task run records to the log record
WS_JOB_WAIT,FUNCTION,398, BEGIN
WS_JOB_WAIT,FUNCTION,399, insert into ws_wrk_task_log
WS_JOB_WAIT,FUNCTION,400, select *
WS_JOB_WAIT,FUNCTION,401, from ws_wrk_task_run
WS_JOB_WAIT,FUNCTION,402, where wtr_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,403,
WS_JOB_WAIT,FUNCTION,404, delete
WS_JOB_WAIT,FUNCTION,405, from ws_wrk_task_run
WS_JOB_WAIT,FUNCTION,406, where wtr_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,407,
WS_JOB_WAIT,FUNCTION,408, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,409, v_MsgText := 'Ws_Job_Wait'|| v_ws_pro_version ||' Job '||v_job_name||
WS_JOB_WAIT,FUNCTION,410, ' failed in xfer of aborted jobs tasks to ws_wrk_task_log. '||
WS_JOB_WAIT,FUNCTION,411, ' No Action !!!';
WS_JOB_WAIT,FUNCTION,412, v_status := WsWrkAudit('F',v_job_name,v_task_name, v_sequence,
WS_JOB_WAIT,FUNCTION,413, v_MsgText,SQLCODE,SQLERRM,0,0);
WS_JOB_WAIT,FUNCTION,414, v_result := -1;
WS_JOB_WAIT,FUNCTION,415, RETURN v_result;
WS_JOB_WAIT,FUNCTION,416, END;
WS_JOB_WAIT,FUNCTION,417, END IF; -- old failed jobs to abort
WS_JOB_WAIT,FUNCTION,418,
WS_JOB_WAIT,FUNCTION,419, -- Create the failure Job record
WS_JOB_WAIT,FUNCTION,420, BEGIN
WS_JOB_WAIT,FUNCTION,421, v_step := 2200;
WS_JOB_WAIT,FUNCTION,422, Insert into ws_wrk_job_run (
WS_JOB_WAIT,FUNCTION,423, wjr_job_key, wjr_sequence, wjr_restart, wjr_status, wjr_scheduled,
WS_JOB_WAIT,FUNCTION,424, wjr_started, wjr_completed, wjr_elapsed_hh, wjr_elapsed_mi,
WS_JOB_WAIT,FUNCTION,425, wjr_okay_count, wjr_info_count, wjr_warning_count, wjr_error_count,
WS_JOB_WAIT,FUNCTION,426, wjr_detail_count, wjr_chkp_count, wjr_chkp_number, wjr_name, wjr_user_key,
WS_JOB_WAIT,FUNCTION,427, wjr_max_threads, wjr_publish_okay, wjr_publish_fail, wjr_scheduler)
WS_JOB_WAIT,FUNCTION,428, Select
WS_JOB_WAIT,FUNCTION,429, wjc_job_key, v_sequence, 0, 'F', sysdate,
WS_JOB_WAIT,FUNCTION,430, sysdate, sysdate, 0,0,
WS_JOB_WAIT,FUNCTION,431, 0,0,0,0,
WS_JOB_WAIT,FUNCTION,432, 0,wjc_chkp_count,0, wjc_name, wjc_user_key,
WS_JOB_WAIT,FUNCTION,433, wjc_max_threads,wjc_publish_okay, wjc_publish_fail, wjc_scheduler
WS_JOB_WAIT,FUNCTION,434, from ws_wrk_job_ctrl
WS_JOB_WAIT,FUNCTION,435, where wjc_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,436, -- removed this commit 5.1.0.1
WS_JOB_WAIT,FUNCTION,437, --COMMIT;
WS_JOB_WAIT,FUNCTION,438, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,439, v_MsgText := 'Ws_Job_Wait'|| v_ws_pro_version ||' Job '||v_job_name||
WS_JOB_WAIT,FUNCTION,440, ' unable to create failure record in ws_wrk_job_run table. ';
WS_JOB_WAIT,FUNCTION,441, v_status := WsWrkAudit('F',v_job_name, v_job_name, v_sequence,
WS_JOB_WAIT,FUNCTION,442, v_MsgText,SQLCODE,SQLERRM,0,v_job_id);
WS_JOB_WAIT,FUNCTION,443, v_result := -1;
WS_JOB_WAIT,FUNCTION,444, RETURN v_result;
WS_JOB_WAIT,FUNCTION,445, END;
WS_JOB_WAIT,FUNCTION,446,
WS_JOB_WAIT,FUNCTION,447, -- Create All the Task records.
WS_JOB_WAIT,FUNCTION,448, -- Loop through all the tasks and add them. Initial state is Held
WS_JOB_WAIT,FUNCTION,449, FOR v_TaskCtrlRec in c_TaskCtrl LOOP
WS_JOB_WAIT,FUNCTION,450, BEGIN
WS_JOB_WAIT,FUNCTION,451, v_step := 2300;
WS_JOB_WAIT,FUNCTION,452, Insert into ws_wrk_task_run (
WS_JOB_WAIT,FUNCTION,453, wtr_task_key, wtr_job_key, wtr_sequence, wtr_restart, wtr_run_status,
WS_JOB_WAIT,FUNCTION,454, wtr_audit_status, wtr_started, wtr_completed, wtr_elapsed_hh, wtr_elapsed_mi,
WS_JOB_WAIT,FUNCTION,455, wtr_info_count, wtr_warning_count, wtr_detail_count, wtr_return_msg, wtr_type,
WS_JOB_WAIT,FUNCTION,456, wtr_abort_level, wtr_chkp_number, wtr_name,
WS_JOB_WAIT,FUNCTION,457, wtr_obj_type, wtr_action_type,wtr_obj_key)
WS_JOB_WAIT,FUNCTION,458, Values (
WS_JOB_WAIT,FUNCTION,459, v_TaskCtrlRec.wtc_task_key,v_TaskCtrlRec.wtc_job_key,v_sequence,0,'H',
WS_JOB_WAIT,FUNCTION,460, NULL,NULL,NULL,0,0,
WS_JOB_WAIT,FUNCTION,461, 0,0,0,'Failed dependency on job '||v_parent_job_name,v_TaskCtrlRec.wtc_type,
WS_JOB_WAIT,FUNCTION,462, v_TaskCtrlRec.wtc_abort_level,v_TaskCtrlRec.wtc_chkp_number, v_TaskCtrlRec.wtc_name,
WS_JOB_WAIT,FUNCTION,463, v_TaskCtrlRec.wtc_obj_type, v_TaskCtrlRec.wtc_action_type, v_TaskCtrlRec.wtc_obj_key
WS_JOB_WAIT,FUNCTION,464, );
WS_JOB_WAIT,FUNCTION,465, -- removed this commit 5.1.0.1
WS_JOB_WAIT,FUNCTION,466, --COMMIT;
WS_JOB_WAIT,FUNCTION,467, EXCEPTION WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,468, v_MsgText := 'Ws_Job_Wait'|| v_ws_pro_version ||' Job '||v_job_name||
WS_JOB_WAIT,FUNCTION,469, ' failed creating records in ws_wrk_task_run table. ';
WS_JOB_WAIT,FUNCTION,470, v_status := WsWrkAudit('F',v_job_name, v_job_name, v_sequence,
WS_JOB_WAIT,FUNCTION,471, v_MsgText,SQLCODE,SQLERRM,0,v_job_id);
WS_JOB_WAIT,FUNCTION,472, v_result := -1;
WS_JOB_WAIT,FUNCTION,473, RETURN v_result;
WS_JOB_WAIT,FUNCTION,474, END;
WS_JOB_WAIT,FUNCTION,475,
WS_JOB_WAIT,FUNCTION,476, END LOOP;
WS_JOB_WAIT,FUNCTION,477,
WS_JOB_WAIT,FUNCTION,478, If v_JobRec.wjc_type = 'O' Then
WS_JOB_WAIT,FUNCTION,479, v_step := 2350;
WS_JOB_WAIT,FUNCTION,480, delete
WS_JOB_WAIT,FUNCTION,481, from ws_wrk_job_ctrl
WS_JOB_WAIT,FUNCTION,482, where wjc_job_key = v_JobRec.wjc_job_key;
WS_JOB_WAIT,FUNCTION,483, -- removed this commit 5.1.0.1
WS_JOB_WAIT,FUNCTION,484, --COMMIT;
WS_JOB_WAIT,FUNCTION,485, delete
WS_JOB_WAIT,FUNCTION,486, from ws_wrk_task_ctrl
WS_JOB_WAIT,FUNCTION,487, where wtc_job_key = v_job_id;
WS_JOB_WAIT,FUNCTION,488, End If;
WS_JOB_WAIT,FUNCTION,489,
WS_JOB_WAIT,FUNCTION,490, -- Provide a failure message
WS_JOB_WAIT,FUNCTION,491, v_MsgText := 'Job '||v_job_name||' failed dependency on job '||v_parent_job_name;
WS_JOB_WAIT,FUNCTION,492, v_status := WsWrkAudit('F',v_job_name, v_job_name, v_sequence,
WS_JOB_WAIT,FUNCTION,493, v_MsgText,NULL,NULL,0,v_job_id);
WS_JOB_WAIT,FUNCTION,494,
WS_JOB_WAIT,FUNCTION,495, --5.1.0.1 Changed from a return 0 to this valid return 2. Have to have this return due to the
WS_JOB_WAIT,FUNCTION,496, -- cursor being for update which you cant fetch next after doing a commit
WS_JOB_WAIT,FUNCTION,497, COMMIT;
WS_JOB_WAIT,FUNCTION,498, v_result := 2;
WS_JOB_WAIT,FUNCTION,499, If v_fail_cmd = 1 Then
WS_JOB_WAIT,FUNCTION,500, v_result := -98;
WS_JOB_WAIT,FUNCTION,501, End If;
WS_JOB_WAIT,FUNCTION,502, RETURN v_result;
WS_JOB_WAIT,FUNCTION,503, End If;
WS_JOB_WAIT,FUNCTION,504,
WS_JOB_WAIT,FUNCTION,505, End If;
WS_JOB_WAIT,FUNCTION,506,
WS_JOB_WAIT,FUNCTION,507, END LOOP;
WS_JOB_WAIT,FUNCTION,508,
WS_JOB_WAIT,FUNCTION,509, -- inserted commit here 5.1.0.1 after all records updated and outside loop due to cursor mode
WS_JOB_WAIT,FUNCTION,510, COMMIT;
WS_JOB_WAIT,FUNCTION,511,
WS_JOB_WAIT,FUNCTION,512, v_step := 2400;
WS_JOB_WAIT,FUNCTION,513, --=====================================================
WS_JOB_WAIT,FUNCTION,514, -- Loop through any potential restart jobs
WS_JOB_WAIT,FUNCTION,515, -- We will just take the first one
WS_JOB_WAIT,FUNCTION,516, --=====================================================
WS_JOB_WAIT,FUNCTION,517, FOR v_RunRec in c_Restart LOOP
WS_JOB_WAIT,FUNCTION,518,
WS_JOB_WAIT,FUNCTION,519, v_step := 2500;
WS_JOB_WAIT,FUNCTION,520, --=====================================================
WS_JOB_WAIT,FUNCTION,521, -- See if we match on the requested scheduler
WS_JOB_WAIT,FUNCTION,522, --=====================================================
WS_JOB_WAIT,FUNCTION,523, If ( v_RunRec.wjr_scheduler is NULL )
WS_JOB_WAIT,FUNCTION,524, Or ( v_RunRec.wjr_scheduler = v_sched_type )
WS_JOB_WAIT,FUNCTION,525, Or ( v_RunRec.wjr_scheduler = v_sched_name )
WS_JOB_WAIT,FUNCTION,526, Or ( v_RunRec.wjr_scheduler = 'WANY' And v_sched_type = 'WIN' )
WS_JOB_WAIT,FUNCTION,527, Or ( v_RunRec.wjr_scheduler = 'UANY' And v_sched_type = 'UNIX' )
WS_JOB_WAIT,FUNCTION,528, Or ( v_RunRec.wjr_scheduler = 'WANY' And v_windows = 0 )
WS_JOB_WAIT,FUNCTION,529, Or ( v_RunRec.wjr_scheduler = 'UANY' And v_unix = 0 )
WS_JOB_WAIT,FUNCTION,530, Then
WS_JOB_WAIT,FUNCTION,531, v_step := 2600;
WS_JOB_WAIT,FUNCTION,532, Select count(1) into v_thread_count
WS_JOB_WAIT,FUNCTION,533, from ws_wrk_job_thread
WS_JOB_WAIT,FUNCTION,534, where wjt_job_key = v_RunRec.wjr_job_key
WS_JOB_WAIT,FUNCTION,535, and wjt_sequence = v_RunRec.wjr_sequence;
WS_JOB_WAIT,FUNCTION,536,
WS_JOB_WAIT,FUNCTION,537, if v_thread_count = 0 Then
WS_JOB_WAIT,FUNCTION,538, v_job_name := v_RunRec.wjr_name;
WS_JOB_WAIT,FUNCTION,539, v_task_name := 'NO+JOB';
WS_JOB_WAIT,FUNCTION,540, v_restart_flag := 'RESTART';
WS_JOB_WAIT,FUNCTION,541, v_thread := v_RunRec.wjr_max_threads;
WS_JOB_WAIT,FUNCTION,542, v_sequence := v_RunRec.wjr_sequence;
WS_JOB_WAIT,FUNCTION,543,
WS_JOB_WAIT,FUNCTION,544, v_step := 2700;
WS_JOB_WAIT,FUNCTION,545, -- Set the job to pending if we plan to run it
WS_JOB_WAIT,FUNCTION,546, Update ws_wrk_job_run
WS_JOB_WAIT,FUNCTION,547, Set wjr_status = 'P'
WS_JOB_WAIT,FUNCTION,548, Where wjr_job_key = v_RunRec.wjr_job_key
WS_JOB_WAIT,FUNCTION,549, --Ver 5.1.0.1 added sequence criteria
WS_JOB_WAIT,FUNCTION,550, AND wjr_sequence = v_RunRec.wjr_sequence;
WS_JOB_WAIT,FUNCTION,551,
WS_JOB_WAIT,FUNCTION,552, v_result := 1;
WS_JOB_WAIT,FUNCTION,553, COMMIT;
WS_JOB_WAIT,FUNCTION,554, RETURN v_result;
WS_JOB_WAIT,FUNCTION,555, End If;
WS_JOB_WAIT,FUNCTION,556, End If;
WS_JOB_WAIT,FUNCTION,557,
WS_JOB_WAIT,FUNCTION,558, END LOOP;
WS_JOB_WAIT,FUNCTION,559,
WS_JOB_WAIT,FUNCTION,560, COMMIT;
WS_JOB_WAIT,FUNCTION,561, RETURN v_result;
WS_JOB_WAIT,FUNCTION,562,
WS_JOB_WAIT,FUNCTION,563,EXCEPTION
WS_JOB_WAIT,FUNCTION,564, WHEN OTHERS THEN
WS_JOB_WAIT,FUNCTION,565, v_MsgText := 'Unhandled Exception in ws_job_wait '|| v_ws_pro_version ||
WS_JOB_WAIT,FUNCTION,566, ' Step ' ||v_step;
WS_JOB_WAIT,FUNCTION,567, v_result := WsWrkAudit('F', v_job_name, v_job_name, v_sequence,
WS_JOB_WAIT,FUNCTION,568, v_MsgText,SQLCODE, SQLERRM, 0,0);
WS_JOB_WAIT,FUNCTION,569, v_job_name := substr(sqlerrm,1,63);
WS_JOB_WAIT,FUNCTION,570, RETURN -3;
WS_JOB_WAIT,FUNCTION,571,
WS_JOB_WAIT,FUNCTION,572,END ws_job_wait;
WS_JOB_WAIT,FUNCTION,573,
WS_LOAD_CHANGE,FUNCTION,1,function ws_load_change
WS_LOAD_CHANGE,FUNCTION,2, (
WS_LOAD_CHANGE,FUNCTION,3, p_sequence IN number,
WS_LOAD_CHANGE,FUNCTION,4, p_job_name IN varchar2,
WS_LOAD_CHANGE,FUNCTION,5, p_task_name IN varchar2,
WS_LOAD_CHANGE,FUNCTION,6, p_job_id IN number,
WS_LOAD_CHANGE,FUNCTION,7, p_task_id IN number,
WS_LOAD_CHANGE,FUNCTION,8, p_action IN varchar2,
WS_LOAD_CHANGE,FUNCTION,9, p_table IN varchar2,
WS_LOAD_CHANGE,FUNCTION,10, p_new_value IN varchar2,
WS_LOAD_CHANGE,FUNCTION,11, p_return_code OUT varchar2,
WS_LOAD_CHANGE,FUNCTION,12, p_return_msg OUT varchar2
WS_LOAD_CHANGE,FUNCTION,13, )
WS_LOAD_CHANGE,FUNCTION,14, Return integer
WS_LOAD_CHANGE,FUNCTION,15, AUTHID CURRENT_USER
WS_LOAD_CHANGE,FUNCTION,16, IS
WS_LOAD_CHANGE,FUNCTION,17,
WS_LOAD_CHANGE,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_LOAD_CHANGE,FUNCTION,19,
WS_LOAD_CHANGE,FUNCTION,20, -- =============================================================================
WS_LOAD_CHANGE,FUNCTION,21, -- DBMS Name : Oracle
WS_LOAD_CHANGE,FUNCTION,22, -- Script Name : ws_load_change
WS_LOAD_CHANGE,FUNCTION,23, -- Description : Changes the connection or schema of a load table
WS_LOAD_CHANGE,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_LOAD_CHANGE,FUNCTION,25, -- =============================================================================
WS_LOAD_CHANGE,FUNCTION,26,
WS_LOAD_CHANGE,FUNCTION,27, --=====================================================
WS_LOAD_CHANGE,FUNCTION,28, -- Variables
WS_LOAD_CHANGE,FUNCTION,29, --=====================================================
WS_LOAD_CHANGE,FUNCTION,30, v_MsgText varchar2(1024); -- Text in audit_trail
WS_LOAD_CHANGE,FUNCTION,31, v_step integer := 0; -- return code
WS_LOAD_CHANGE,FUNCTION,32, v_result integer := 0; -- return code
WS_LOAD_CHANGE,FUNCTION,33, v_count integer := 0;
WS_LOAD_CHANGE,FUNCTION,34, v_part_count integer := 0;
WS_LOAD_CHANGE,FUNCTION,35, v_specific_index integer := 0;
WS_LOAD_CHANGE,FUNCTION,36, v_specific_part integer := 0;
WS_LOAD_CHANGE,FUNCTION,37, v_status number := 0;
WS_LOAD_CHANGE,FUNCTION,38, v_status_code number := 0;
WS_LOAD_CHANGE,FUNCTION,39, v_msg varchar2(4000);
WS_LOAD_CHANGE,FUNCTION,40, v_job_sequence integer;
WS_LOAD_CHANGE,FUNCTION,41, v_job_key integer;
WS_LOAD_CHANGE,FUNCTION,42, v_job_status varchar2(1);
WS_LOAD_CHANGE,FUNCTION,43, v_action integer := 0;
WS_LOAD_CHANGE,FUNCTION,44, v_load_obj_key integer := 0;
WS_LOAD_CHANGE,FUNCTION,45, v_old_connect_key integer := 0;
WS_LOAD_CHANGE,FUNCTION,46, v_new_connect_key integer := 0;
WS_LOAD_CHANGE,FUNCTION,47, v_old_connect varchar2(256);
WS_LOAD_CHANGE,FUNCTION,48, v_old_schema varchar2(256);
WS_LOAD_CHANGE,FUNCTION,49, v_new_schema varchar2(256);
WS_LOAD_CHANGE,FUNCTION,50, v_source_table varchar2(4000);
WS_LOAD_CHANGE,FUNCTION,51, v_view_tables varchar2(4000);
WS_LOAD_CHANGE,FUNCTION,52, v_from_tables varchar2(4000);
WS_LOAD_CHANGE,FUNCTION,53, v_work varchar2(4000);
WS_LOAD_CHANGE,FUNCTION,54, v_view_name varchar2(256);
WS_LOAD_CHANGE,FUNCTION,55, v_old_load_type varchar2(1);
WS_LOAD_CHANGE,FUNCTION,56, v_new_load_type varchar2(1);
WS_LOAD_CHANGE,FUNCTION,57, v_old_transform varchar2(1);
WS_LOAD_CHANGE,FUNCTION,58, v_new_transform varchar2(1);
WS_LOAD_CHANGE,FUNCTION,59, v_old_dblink varchar2(256);
WS_LOAD_CHANGE,FUNCTION,60, v_new_dblink varchar2(256);
WS_LOAD_CHANGE,FUNCTION,61, v_old_database varchar2(256);
WS_LOAD_CHANGE,FUNCTION,62, v_new_database varchar2(256);
WS_LOAD_CHANGE,FUNCTION,63, v_old_host varchar2(256);
WS_LOAD_CHANGE,FUNCTION,64, v_new_host varchar2(256);
WS_LOAD_CHANGE,FUNCTION,65, v_old_value varchar2(256);
WS_LOAD_CHANGE,FUNCTION,66, v_load_options varchar2(4000); -- RED-2175
WS_LOAD_CHANGE,FUNCTION,67, v_work_schema varchar2(256); -- RED-2175
WS_LOAD_CHANGE,FUNCTION,68, v_work_table varchar2(4000); -- RED-2175
WS_LOAD_CHANGE,FUNCTION,69, v_work_alias varchar2(4000); -- RED-2175
WS_LOAD_CHANGE,FUNCTION,70, v_encap_start varchar2(1); -- RED-2175
WS_LOAD_CHANGE,FUNCTION,71, v_encap_end varchar2(1); -- RED-2175
WS_LOAD_CHANGE,FUNCTION,72, v_tables integer := 0;
WS_LOAD_CHANGE,FUNCTION,73, v_spos integer := 0;
WS_LOAD_CHANGE,FUNCTION,74, v_cpos integer := 0;
WS_LOAD_CHANGE,FUNCTION,75, v_ppos integer := 0;
WS_LOAD_CHANGE,FUNCTION,76, v_bpos integer := 0; -- RED-2175
WS_LOAD_CHANGE,FUNCTION,77,
WS_LOAD_CHANGE,FUNCTION,78,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_LOAD_CHANGE,FUNCTION,79,BEGIN
WS_LOAD_CHANGE,FUNCTION,80,
WS_LOAD_CHANGE,FUNCTION,81, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,82, -- Ensure a valid action entered
WS_LOAD_CHANGE,FUNCTION,83, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,84, v_step := 100;
WS_LOAD_CHANGE,FUNCTION,85, IF UPPER(p_action) = 'SCHEMA' THEN
WS_LOAD_CHANGE,FUNCTION,86, v_action := 1;
WS_LOAD_CHANGE,FUNCTION,87, ELSIF UPPER(p_action) = 'CONNECTION' THEN
WS_LOAD_CHANGE,FUNCTION,88, v_action := 2;
WS_LOAD_CHANGE,FUNCTION,89, ELSE
WS_LOAD_CHANGE,FUNCTION,90, p_return_code := 'E';
WS_LOAD_CHANGE,FUNCTION,91, p_return_msg := 'Invalid action code. Valid actions are Schema and Connection.';
WS_LOAD_CHANGE,FUNCTION,92, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_LOAD_CHANGE,FUNCTION,93, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_LOAD_CHANGE,FUNCTION,94, RETURN -2;
WS_LOAD_CHANGE,FUNCTION,95, END IF;
WS_LOAD_CHANGE,FUNCTION,96,
WS_LOAD_CHANGE,FUNCTION,97, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,98, -- Get the info for the load table
WS_LOAD_CHANGE,FUNCTION,99, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,100, v_step := 200;
WS_LOAD_CHANGE,FUNCTION,101, BEGIN
WS_LOAD_CHANGE,FUNCTION,102, SELECT
WS_LOAD_CHANGE,FUNCTION,103, lt_obj_key,
WS_LOAD_CHANGE,FUNCTION,104, lt_connect_key, lt_source_schema,
WS_LOAD_CHANGE,FUNCTION,105, lt_source_table, lt_view_name,
WS_LOAD_CHANGE,FUNCTION,106, lt_type, lt_transform_ind,
WS_LOAD_CHANGE,FUNCTION,107, dc_dblink_id, dc_name,
WS_LOAD_CHANGE,FUNCTION,108, dc_database_id, dc_host_id,
WS_LOAD_CHANGE,FUNCTION,109, lt_load_options -- RED-2175
WS_LOAD_CHANGE,FUNCTION,110, INTO
WS_LOAD_CHANGE,FUNCTION,111, v_load_obj_key,
WS_LOAD_CHANGE,FUNCTION,112, v_old_connect_key, v_old_schema,
WS_LOAD_CHANGE,FUNCTION,113, v_source_table, v_view_name,
WS_LOAD_CHANGE,FUNCTION,114, v_old_load_type, v_old_transform,
WS_LOAD_CHANGE,FUNCTION,115, v_old_dblink, v_old_connect,
WS_LOAD_CHANGE,FUNCTION,116, v_old_database, v_old_host,
WS_LOAD_CHANGE,FUNCTION,117, v_load_options -- RED-2175
WS_LOAD_CHANGE,FUNCTION,118, FROM
WS_LOAD_CHANGE,FUNCTION,119, ws_load_tab, ws_dbc_connect
WS_LOAD_CHANGE,FUNCTION,120, WHERE
WS_LOAD_CHANGE,FUNCTION,121, UPPER(lt_table_name) = UPPER(p_table)
WS_LOAD_CHANGE,FUNCTION,122, AND
WS_LOAD_CHANGE,FUNCTION,123, lt_connect_key = dc_obj_key (+);
WS_LOAD_CHANGE,FUNCTION,124,
WS_LOAD_CHANGE,FUNCTION,125, EXCEPTION WHEN OTHERS THEN
WS_LOAD_CHANGE,FUNCTION,126, p_return_code := 'E';
WS_LOAD_CHANGE,FUNCTION,127, v_msg := 'Failed to get info for load table '||p_table||' '||SQLERRM;
WS_LOAD_CHANGE,FUNCTION,128, p_return_msg := substr(v_msg,1,1023);
WS_LOAD_CHANGE,FUNCTION,129, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_LOAD_CHANGE,FUNCTION,130, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_LOAD_CHANGE,FUNCTION,131, RETURN -2;
WS_LOAD_CHANGE,FUNCTION,132, END;
WS_LOAD_CHANGE,FUNCTION,133,
WS_LOAD_CHANGE,FUNCTION,134,
WS_LOAD_CHANGE,FUNCTION,135, IF v_load_obj_key <= 0 THEN
WS_LOAD_CHANGE,FUNCTION,136, p_return_code := 'E';
WS_LOAD_CHANGE,FUNCTION,137, p_return_msg := 'Failed to find load table '||p_table;
WS_LOAD_CHANGE,FUNCTION,138, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_LOAD_CHANGE,FUNCTION,139, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_LOAD_CHANGE,FUNCTION,140, RETURN -2;
WS_LOAD_CHANGE,FUNCTION,141, END IF;
WS_LOAD_CHANGE,FUNCTION,142,
WS_LOAD_CHANGE,FUNCTION,143, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,144, -- If a connection change then get the new connect info
WS_LOAD_CHANGE,FUNCTION,145, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,146, v_step := 300;
WS_LOAD_CHANGE,FUNCTION,147, IF v_action = 2 THEN
WS_LOAD_CHANGE,FUNCTION,148, BEGIN
WS_LOAD_CHANGE,FUNCTION,149, SELECT
WS_LOAD_CHANGE,FUNCTION,150, dc_obj_key, dc_type, dc_dblink_id,
WS_LOAD_CHANGE,FUNCTION,151, dc_database_id, dc_host_id
WS_LOAD_CHANGE,FUNCTION,152, INTO
WS_LOAD_CHANGE,FUNCTION,153, v_new_connect_key,
WS_LOAD_CHANGE,FUNCTION,154, v_new_load_type, v_new_dblink,
WS_LOAD_CHANGE,FUNCTION,155, v_new_database, v_new_host
WS_LOAD_CHANGE,FUNCTION,156, FROM
WS_LOAD_CHANGE,FUNCTION,157, ws_dbc_connect
WS_LOAD_CHANGE,FUNCTION,158, WHERE
WS_LOAD_CHANGE,FUNCTION,159, UPPER(dc_name) = UPPER(p_new_value);
WS_LOAD_CHANGE,FUNCTION,160,
WS_LOAD_CHANGE,FUNCTION,161, -- RED-2175
WS_LOAD_CHANGE,FUNCTION,162, -- assign a default type of load if the old one is no longer valid
WS_LOAD_CHANGE,FUNCTION,163, IF v_new_load_type = 'U' OR v_new_load_type = 'W' THEN
WS_LOAD_CHANGE,FUNCTION,164, IF v_old_load_type <> 'F' AND v_old_load_type <> 'S' AND v_old_load_type <> 'E' THEN
WS_LOAD_CHANGE,FUNCTION,165, v_new_load_type := 'F';
WS_LOAD_CHANGE,FUNCTION,166, ELSE
WS_LOAD_CHANGE,FUNCTION,167, v_new_load_type := v_old_load_type;
WS_LOAD_CHANGE,FUNCTION,168, END IF;
WS_LOAD_CHANGE,FUNCTION,169, ELSIF v_new_load_type = 'O' THEN
WS_LOAD_CHANGE,FUNCTION,170, IF v_old_load_type <> 'O' AND v_old_load_type <> 'E' AND v_old_load_type <> 'I' THEN
WS_LOAD_CHANGE,FUNCTION,171, v_new_load_type := 'O';
WS_LOAD_CHANGE,FUNCTION,172, ELSE
WS_LOAD_CHANGE,FUNCTION,173, v_new_load_type := v_old_load_type;
WS_LOAD_CHANGE,FUNCTION,174, END IF;
WS_LOAD_CHANGE,FUNCTION,175, ELSIF v_new_load_type = 'D' THEN
WS_LOAD_CHANGE,FUNCTION,176, IF v_old_load_type <> 'D' AND v_old_load_type <> 'E' AND v_old_load_type <> 'I' THEN
WS_LOAD_CHANGE,FUNCTION,177, v_new_load_type := 'D';
WS_LOAD_CHANGE,FUNCTION,178, ELSE
WS_LOAD_CHANGE,FUNCTION,179, v_new_load_type := v_old_load_type;
WS_LOAD_CHANGE,FUNCTION,180, END IF;
WS_LOAD_CHANGE,FUNCTION,181, ELSE
WS_LOAD_CHANGE,FUNCTION,182, v_new_load_type := v_old_load_type;
WS_LOAD_CHANGE,FUNCTION,183, END IF;
WS_LOAD_CHANGE,FUNCTION,184,
WS_LOAD_CHANGE,FUNCTION,185, IF v_new_load_type = 'O' THEN
WS_LOAD_CHANGE,FUNCTION,186, v_new_transform := 'Y';
WS_LOAD_CHANGE,FUNCTION,187, ELSE
WS_LOAD_CHANGE,FUNCTION,188, v_new_transform := v_old_transform;
WS_LOAD_CHANGE,FUNCTION,189, END IF;
WS_LOAD_CHANGE,FUNCTION,190,
WS_LOAD_CHANGE,FUNCTION,191, EXCEPTION WHEN OTHERS THEN
WS_LOAD_CHANGE,FUNCTION,192, p_return_code := 'E';
WS_LOAD_CHANGE,FUNCTION,193, v_msg := 'Failed to get info for connection '||p_new_value||' '||SQLERRM;
WS_LOAD_CHANGE,FUNCTION,194, p_return_msg := substr(v_msg,1,1023);
WS_LOAD_CHANGE,FUNCTION,195, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_LOAD_CHANGE,FUNCTION,196, p_return_msg,SQLCODE,SQLERRM, p_task_id, p_job_id);
WS_LOAD_CHANGE,FUNCTION,197, RETURN -2;
WS_LOAD_CHANGE,FUNCTION,198, END;
WS_LOAD_CHANGE,FUNCTION,199, ELSE
WS_LOAD_CHANGE,FUNCTION,200, v_new_connect_key := v_old_connect_key;
WS_LOAD_CHANGE,FUNCTION,201, v_new_load_type := v_old_load_type;
WS_LOAD_CHANGE,FUNCTION,202, v_new_dblink := v_old_dblink;
WS_LOAD_CHANGE,FUNCTION,203, v_new_database := v_old_database;
WS_LOAD_CHANGE,FUNCTION,204, v_new_host := v_old_host;
WS_LOAD_CHANGE,FUNCTION,205, v_new_transform := v_old_transform;
WS_LOAD_CHANGE,FUNCTION,206, END IF;
WS_LOAD_CHANGE,FUNCTION,207,
WS_LOAD_CHANGE,FUNCTION,208, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,209, -- If a schema change then get ready for it
WS_LOAD_CHANGE,FUNCTION,210, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,211, v_step := 400;
WS_LOAD_CHANGE,FUNCTION,212, IF v_action = 1 THEN
WS_LOAD_CHANGE,FUNCTION,213, v_new_schema := p_new_value;
WS_LOAD_CHANGE,FUNCTION,214, v_old_value := v_old_schema;
WS_LOAD_CHANGE,FUNCTION,215, ELSE
WS_LOAD_CHANGE,FUNCTION,216, v_new_schema := v_old_schema;
WS_LOAD_CHANGE,FUNCTION,217, v_old_value := v_old_connect;
WS_LOAD_CHANGE,FUNCTION,218, END IF;
WS_LOAD_CHANGE,FUNCTION,219,
WS_LOAD_CHANGE,FUNCTION,220,
WS_LOAD_CHANGE,FUNCTION,221, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,222, -- If a remote view is used and we have a schema change then fix the view
WS_LOAD_CHANGE,FUNCTION,223, -- This logic is sourced from LoaReconnect in the med application
WS_LOAD_CHANGE,FUNCTION,224, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,225, v_step := 500;
WS_LOAD_CHANGE,FUNCTION,226, IF v_action = 1 THEN
WS_LOAD_CHANGE,FUNCTION,227, IF v_view_name IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,228, IF v_new_schema IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,229, v_view_tables := '';
WS_LOAD_CHANGE,FUNCTION,230, v_work := v_source_table;
WS_LOAD_CHANGE,FUNCTION,231, v_cpos := INSTR(v_work,',');
WS_LOAD_CHANGE,FUNCTION,232, WHILE v_cpos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,233, v_cpos := INSTR(v_work,',');
WS_LOAD_CHANGE,FUNCTION,234, IF v_cpos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,235,
WS_LOAD_CHANGE,FUNCTION,236, v_tables := v_tables + 1;
WS_LOAD_CHANGE,FUNCTION,237, IF v_tables > 1 THEN
WS_LOAD_CHANGE,FUNCTION,238, v_view_tables := v_view_tables || ',';
WS_LOAD_CHANGE,FUNCTION,239, END IF;
WS_LOAD_CHANGE,FUNCTION,240,
WS_LOAD_CHANGE,FUNCTION,241, v_spos := INSTR(v_work,'.');
WS_LOAD_CHANGE,FUNCTION,242, IF v_spos < v_cpos AND v_spos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,243, v_step := 530;
WS_LOAD_CHANGE,FUNCTION,244, ELSE
WS_LOAD_CHANGE,FUNCTION,245, v_view_tables := v_view_tables || v_new_schema || '.';
WS_LOAD_CHANGE,FUNCTION,246, END IF;
WS_LOAD_CHANGE,FUNCTION,247, v_view_tables := v_view_tables || SUBSTR(v_work,1,v_cpos-1);
WS_LOAD_CHANGE,FUNCTION,248, v_work := SUBSTR(v_work,v_cpos+1);
WS_LOAD_CHANGE,FUNCTION,249, END IF;
WS_LOAD_CHANGE,FUNCTION,250, END LOOP;
WS_LOAD_CHANGE,FUNCTION,251,
WS_LOAD_CHANGE,FUNCTION,252, IF v_work IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,253, v_tables := v_tables + 1;
WS_LOAD_CHANGE,FUNCTION,254, IF v_tables > 1 THEN
WS_LOAD_CHANGE,FUNCTION,255, v_view_tables := v_view_tables || ',';
WS_LOAD_CHANGE,FUNCTION,256, END IF;
WS_LOAD_CHANGE,FUNCTION,257,
WS_LOAD_CHANGE,FUNCTION,258, v_spos := INSTR(v_work,'.');
WS_LOAD_CHANGE,FUNCTION,259, IF v_spos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,260, v_step := 570;
WS_LOAD_CHANGE,FUNCTION,261, ELSE
WS_LOAD_CHANGE,FUNCTION,262, v_view_tables := v_view_tables || v_new_schema || '.';
WS_LOAD_CHANGE,FUNCTION,263, END IF;
WS_LOAD_CHANGE,FUNCTION,264, v_view_tables := v_view_tables || v_work;
WS_LOAD_CHANGE,FUNCTION,265, END IF;
WS_LOAD_CHANGE,FUNCTION,266, ELSE
WS_LOAD_CHANGE,FUNCTION,267, v_view_tables := v_source_table;
WS_LOAD_CHANGE,FUNCTION,268, END IF;
WS_LOAD_CHANGE,FUNCTION,269, END IF;
WS_LOAD_CHANGE,FUNCTION,270, END IF;
WS_LOAD_CHANGE,FUNCTION,271,
WS_LOAD_CHANGE,FUNCTION,272, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,273, -- Now fix up the from tables
WS_LOAD_CHANGE,FUNCTION,274, -- Code logic acquired from med application in LoaReconnect
WS_LOAD_CHANGE,FUNCTION,275, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,276, v_step := 600;
WS_LOAD_CHANGE,FUNCTION,277, IF v_new_schema IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,278, IF v_new_load_type = 'I' THEN -- RED-2175
WS_LOAD_CHANGE,FUNCTION,279, v_step := 650;
WS_LOAD_CHANGE,FUNCTION,280, v_encap_start := '';
WS_LOAD_CHANGE,FUNCTION,281, v_encap_end := '';
WS_LOAD_CHANGE,FUNCTION,282,
WS_LOAD_CHANGE,FUNCTION,283, v_cpos := INSTR(v_load_options,'COL_ENCAP=')+10;
WS_LOAD_CHANGE,FUNCTION,284, IF v_cpos > 10 THEN
WS_LOAD_CHANGE,FUNCTION,285, v_bpos := CAST(SUBSTR(v_load_options,v_cpos,4) AS integer);
WS_LOAD_CHANGE,FUNCTION,286, IF v_bpos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,287, v_cpos := v_cpos + 5;
WS_LOAD_CHANGE,FUNCTION,288, v_encap_start := SUBSTR(v_load_options,v_cpos,1);
WS_LOAD_CHANGE,FUNCTION,289, v_encap_end := SUBSTR(v_load_options,v_cpos+v_bpos-1,1);
WS_LOAD_CHANGE,FUNCTION,290, END IF;
WS_LOAD_CHANGE,FUNCTION,291, END IF;
WS_LOAD_CHANGE,FUNCTION,292,
WS_LOAD_CHANGE,FUNCTION,293, v_from_tables := '';
WS_LOAD_CHANGE,FUNCTION,294, v_work := LTRIM(v_source_table);
WS_LOAD_CHANGE,FUNCTION,295, v_tables := 0;
WS_LOAD_CHANGE,FUNCTION,296,
WS_LOAD_CHANGE,FUNCTION,297, v_cpos := INSTR(v_work,',');
WS_LOAD_CHANGE,FUNCTION,298, WHILE v_cpos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,299, v_spos := INSTR(v_work,v_encap_start);
WS_LOAD_CHANGE,FUNCTION,300, v_bpos := INSTR(v_work,v_encap_end,v_spos+1);
WS_LOAD_CHANGE,FUNCTION,301,
WS_LOAD_CHANGE,FUNCTION,302, IF v_spos <= 0 OR v_bpos <= v_spos OR v_spos >= v_cpos OR v_bpos <= v_cpos THEN
WS_LOAD_CHANGE,FUNCTION,303, v_cpos := v_cpos-1;
WS_LOAD_CHANGE,FUNCTION,304, EXIT;
WS_LOAD_CHANGE,FUNCTION,305, END IF;
WS_LOAD_CHANGE,FUNCTION,306,
WS_LOAD_CHANGE,FUNCTION,307, v_cpos := INSTR(v_work,',',v_bpos+1);
WS_LOAD_CHANGE,FUNCTION,308, END LOOP;
WS_LOAD_CHANGE,FUNCTION,309,
WS_LOAD_CHANGE,FUNCTION,310, IF v_cpos = 0 THEN
WS_LOAD_CHANGE,FUNCTION,311, v_cpos := LENGTH(v_work);
WS_LOAD_CHANGE,FUNCTION,312, END IF;
WS_LOAD_CHANGE,FUNCTION,313,
WS_LOAD_CHANGE,FUNCTION,314, WHILE v_cpos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,315, v_step := 660;
WS_LOAD_CHANGE,FUNCTION,316, v_work_schema := LTRIM(v_new_schema);
WS_LOAD_CHANGE,FUNCTION,317, v_work_table := LTRIM(SUBSTR(v_work,1,v_cpos));
WS_LOAD_CHANGE,FUNCTION,318, v_work_alias := '';
WS_LOAD_CHANGE,FUNCTION,319,
WS_LOAD_CHANGE,FUNCTION,320, IF LENGTH(v_work_table) > 0 THEN
WS_LOAD_CHANGE,FUNCTION,321, v_step := 670;
WS_LOAD_CHANGE,FUNCTION,322, v_tables := v_tables + 1;
WS_LOAD_CHANGE,FUNCTION,323, IF v_tables > 1 THEN
WS_LOAD_CHANGE,FUNCTION,324, v_from_tables := v_from_tables || ',';
WS_LOAD_CHANGE,FUNCTION,325, END IF;
WS_LOAD_CHANGE,FUNCTION,326,
WS_LOAD_CHANGE,FUNCTION,327, v_bpos := 0;
WS_LOAD_CHANGE,FUNCTION,328, v_ppos := INSTR(v_work_table,'.');
WS_LOAD_CHANGE,FUNCTION,329, WHILE v_ppos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,330, v_spos := INSTR(v_work_table,v_encap_start,v_bpos+1);
WS_LOAD_CHANGE,FUNCTION,331, v_bpos := INSTR(v_work_table,v_encap_end,v_spos+1);
WS_LOAD_CHANGE,FUNCTION,332,
WS_LOAD_CHANGE,FUNCTION,333, EXIT WHEN v_spos <= 0 OR v_bpos <= v_spos OR v_spos >= v_ppos OR v_bpos <= v_ppos;
WS_LOAD_CHANGE,FUNCTION,334,
WS_LOAD_CHANGE,FUNCTION,335, v_ppos := INSTR(v_work_table,'.',v_bpos+1);
WS_LOAD_CHANGE,FUNCTION,336, END LOOP;
WS_LOAD_CHANGE,FUNCTION,337,
WS_LOAD_CHANGE,FUNCTION,338, IF v_ppos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,339, v_work_schema := SUBSTR(v_work_table,1,v_ppos-1);
WS_LOAD_CHANGE,FUNCTION,340, v_work_table := SUBSTR(v_work_table,v_ppos+1,LENGTH(v_work_table)-v_ppos);
WS_LOAD_CHANGE,FUNCTION,341, END IF;
WS_LOAD_CHANGE,FUNCTION,342,
WS_LOAD_CHANGE,FUNCTION,343, v_work_schema := LTRIM(RTRIM(v_work_schema));
WS_LOAD_CHANGE,FUNCTION,344, v_work_table := LTRIM(RTRIM(v_work_table));
WS_LOAD_CHANGE,FUNCTION,345,
WS_LOAD_CHANGE,FUNCTION,346, IF LENGTH(v_work_schema) > 0 THEN
WS_LOAD_CHANGE,FUNCTION,347, IF SUBSTR(v_work_schema,1,1) = v_encap_start THEN
WS_LOAD_CHANGE,FUNCTION,348, v_from_tables := v_from_tables || v_work_schema || '.';
WS_LOAD_CHANGE,FUNCTION,349, ELSE
WS_LOAD_CHANGE,FUNCTION,350, v_from_tables := v_from_tables || v_encap_start || v_work_schema || v_encap_end || '.';
WS_LOAD_CHANGE,FUNCTION,351, END IF;
WS_LOAD_CHANGE,FUNCTION,352, END IF;
WS_LOAD_CHANGE,FUNCTION,353,
WS_LOAD_CHANGE,FUNCTION,354, v_bpos := 0;
WS_LOAD_CHANGE,FUNCTION,355, v_ppos := INSTR(v_work_table,' ');
WS_LOAD_CHANGE,FUNCTION,356, WHILE v_ppos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,357, v_spos := INSTR(v_work_table,v_encap_start,v_bpos+1);
WS_LOAD_CHANGE,FUNCTION,358, v_bpos := INSTR(v_work_table,v_encap_end,v_spos+1);
WS_LOAD_CHANGE,FUNCTION,359,
WS_LOAD_CHANGE,FUNCTION,360, EXIT WHEN v_spos <= 0 OR v_bpos <= v_spos OR v_spos >= v_ppos OR v_bpos <= v_ppos;
WS_LOAD_CHANGE,FUNCTION,361,
WS_LOAD_CHANGE,FUNCTION,362, v_ppos := INSTR(v_work_table,' ',v_bpos+1);
WS_LOAD_CHANGE,FUNCTION,363, END LOOP;
WS_LOAD_CHANGE,FUNCTION,364,
WS_LOAD_CHANGE,FUNCTION,365, IF v_ppos = 0 THEN
WS_LOAD_CHANGE,FUNCTION,366, v_work_alias := v_work_table;
WS_LOAD_CHANGE,FUNCTION,367, ELSE
WS_LOAD_CHANGE,FUNCTION,368, v_work_alias := SUBSTR(v_work_table,v_ppos+1,LENGTH(v_work_table)-v_ppos);
WS_LOAD_CHANGE,FUNCTION,369, v_work_table := SUBSTR(v_work_table,1,v_ppos);
WS_LOAD_CHANGE,FUNCTION,370, END IF;
WS_LOAD_CHANGE,FUNCTION,371,
WS_LOAD_CHANGE,FUNCTION,372, v_work_alias := LTRIM(RTRIM(v_work_alias));
WS_LOAD_CHANGE,FUNCTION,373, v_work_table := LTRIM(RTRIM(v_work_table));
WS_LOAD_CHANGE,FUNCTION,374,
WS_LOAD_CHANGE,FUNCTION,375, IF SUBSTR(v_work_table,1,1) = v_encap_start THEN
WS_LOAD_CHANGE,FUNCTION,376, v_from_tables := v_from_tables || v_work_table || ' ';
WS_LOAD_CHANGE,FUNCTION,377, ELSE
WS_LOAD_CHANGE,FUNCTION,378, v_from_tables := v_from_tables || v_encap_start || v_work_table || v_encap_end || ' ';
WS_LOAD_CHANGE,FUNCTION,379, END IF;
WS_LOAD_CHANGE,FUNCTION,380,
WS_LOAD_CHANGE,FUNCTION,381, IF SUBSTR(v_work_alias,1,1) = v_encap_start THEN
WS_LOAD_CHANGE,FUNCTION,382, v_from_tables := v_from_tables || v_work_alias || ' ';
WS_LOAD_CHANGE,FUNCTION,383, ELSE
WS_LOAD_CHANGE,FUNCTION,384, v_from_tables := v_from_tables || v_encap_start || v_work_alias || v_encap_end || ' ';
WS_LOAD_CHANGE,FUNCTION,385, END IF;
WS_LOAD_CHANGE,FUNCTION,386, END IF;
WS_LOAD_CHANGE,FUNCTION,387,
WS_LOAD_CHANGE,FUNCTION,388, v_work := SUBSTR(v_work,v_cpos+1,LENGTH(v_work)-v_cpos);
WS_LOAD_CHANGE,FUNCTION,389, IF LENGTH(v_work) > 1 AND LTRIM(SUBSTR(v_work,1,1)) = ',' THEN
WS_LOAD_CHANGE,FUNCTION,390, v_work := SUBSTR(v_work,2,LENGTH(v_work)-1);
WS_LOAD_CHANGE,FUNCTION,391, END IF;
WS_LOAD_CHANGE,FUNCTION,392, v_cpos := INSTR(v_work,',');
WS_LOAD_CHANGE,FUNCTION,393,
WS_LOAD_CHANGE,FUNCTION,394, WHILE v_cpos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,395, v_spos := INSTR(v_work,v_encap_start);
WS_LOAD_CHANGE,FUNCTION,396, v_bpos := INSTR(v_work,v_encap_end,v_spos+1);
WS_LOAD_CHANGE,FUNCTION,397,
WS_LOAD_CHANGE,FUNCTION,398, IF v_spos <= 0 OR v_spos <= 0 OR v_spos >= v_cpos OR v_bpos <= v_cpos THEN
WS_LOAD_CHANGE,FUNCTION,399, v_cpos := v_cpos-1;
WS_LOAD_CHANGE,FUNCTION,400, EXIT;
WS_LOAD_CHANGE,FUNCTION,401, END IF;
WS_LOAD_CHANGE,FUNCTION,402,
WS_LOAD_CHANGE,FUNCTION,403, v_cpos := INSTR(v_work,',',v_bpos+1);
WS_LOAD_CHANGE,FUNCTION,404, END LOOP;
WS_LOAD_CHANGE,FUNCTION,405,
WS_LOAD_CHANGE,FUNCTION,406, IF v_cpos = 0 THEN
WS_LOAD_CHANGE,FUNCTION,407, v_cpos := LENGTH(v_work);
WS_LOAD_CHANGE,FUNCTION,408, END IF;
WS_LOAD_CHANGE,FUNCTION,409, END LOOP;
WS_LOAD_CHANGE,FUNCTION,410, ELSE
WS_LOAD_CHANGE,FUNCTION,411, v_from_tables := '';
WS_LOAD_CHANGE,FUNCTION,412, v_work := LTRIM(v_source_table);
WS_LOAD_CHANGE,FUNCTION,413, v_tables := 0;
WS_LOAD_CHANGE,FUNCTION,414, v_cpos := INSTR(v_work,',');
WS_LOAD_CHANGE,FUNCTION,415, WHILE v_cpos > 0 LOOP
WS_LOAD_CHANGE,FUNCTION,416, v_cpos := INSTR(v_work,',');
WS_LOAD_CHANGE,FUNCTION,417, IF v_cpos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,418, v_tables := v_tables + 1;
WS_LOAD_CHANGE,FUNCTION,419, IF v_tables > 1 THEN
WS_LOAD_CHANGE,FUNCTION,420, v_from_tables := v_from_tables || ',';
WS_LOAD_CHANGE,FUNCTION,421, END IF;
WS_LOAD_CHANGE,FUNCTION,422,
WS_LOAD_CHANGE,FUNCTION,423, v_spos := INSTR(v_work,'.');
WS_LOAD_CHANGE,FUNCTION,424, IF v_spos < v_cpos AND v_spos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,425, v_step := 630;
WS_LOAD_CHANGE,FUNCTION,426, ELSE
WS_LOAD_CHANGE,FUNCTION,427, v_from_tables := v_from_tables || v_new_schema || '.';
WS_LOAD_CHANGE,FUNCTION,428, END IF;
WS_LOAD_CHANGE,FUNCTION,429,
WS_LOAD_CHANGE,FUNCTION,430, IF v_new_dblink IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,431, v_ppos := INSTR(v_work,' ');
WS_LOAD_CHANGE,FUNCTION,432, IF v_ppos < v_cpos AND v_ppos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,433, v_from_tables := v_from_tables || SUBSTR(v_work,1,v_ppos-1) ||
WS_LOAD_CHANGE,FUNCTION,434, '@' || v_new_dblink || SUBSTR(v_work,v_ppos,v_cpos-v_ppos);
WS_LOAD_CHANGE,FUNCTION,435, ELSE
WS_LOAD_CHANGE,FUNCTION,436, v_from_tables := v_from_tables || SUBSTR(v_work,1,v_cpos-1) ||
WS_LOAD_CHANGE,FUNCTION,437, '@' || v_new_dblink;
WS_LOAD_CHANGE,FUNCTION,438, END IF;
WS_LOAD_CHANGE,FUNCTION,439, ELSE
WS_LOAD_CHANGE,FUNCTION,440, v_from_tables := v_from_tables || SUBSTR(v_work,1,v_cpos-1);
WS_LOAD_CHANGE,FUNCTION,441, END IF;
WS_LOAD_CHANGE,FUNCTION,442,
WS_LOAD_CHANGE,FUNCTION,443, -- RED-1242: Add source table alias
WS_LOAD_CHANGE,FUNCTION,444, IF INSTR(RTRIM(LTRIM(SUBSTR(v_work,1,v_cpos-1))),' ') <= 0 THEN
WS_LOAD_CHANGE,FUNCTION,445, v_from_tables := v_from_tables || ' ' || SUBSTR(v_work,1,v_cpos-1);
WS_LOAD_CHANGE,FUNCTION,446, END IF;
WS_LOAD_CHANGE,FUNCTION,447,
WS_LOAD_CHANGE,FUNCTION,448, v_work := LTRIM(SUBSTR(v_work,v_cpos+1));
WS_LOAD_CHANGE,FUNCTION,449,
WS_LOAD_CHANGE,FUNCTION,450, END IF;
WS_LOAD_CHANGE,FUNCTION,451, END LOOP;
WS_LOAD_CHANGE,FUNCTION,452,
WS_LOAD_CHANGE,FUNCTION,453, IF v_work IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,454, v_tables := v_tables + 1;
WS_LOAD_CHANGE,FUNCTION,455, IF v_tables > 1 THEN
WS_LOAD_CHANGE,FUNCTION,456, v_from_tables := v_from_tables || ',';
WS_LOAD_CHANGE,FUNCTION,457, END IF;
WS_LOAD_CHANGE,FUNCTION,458,
WS_LOAD_CHANGE,FUNCTION,459, v_spos := INSTR(v_work,'.');
WS_LOAD_CHANGE,FUNCTION,460, IF v_spos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,461, v_step := 670;
WS_LOAD_CHANGE,FUNCTION,462, ELSE
WS_LOAD_CHANGE,FUNCTION,463, v_from_tables := v_from_tables || v_new_schema || '.';
WS_LOAD_CHANGE,FUNCTION,464, END IF;
WS_LOAD_CHANGE,FUNCTION,465,
WS_LOAD_CHANGE,FUNCTION,466, v_cpos := LENGTH(v_work);
WS_LOAD_CHANGE,FUNCTION,467, IF v_new_dblink IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,468, v_ppos := INSTR(v_work,' ');
WS_LOAD_CHANGE,FUNCTION,469, IF v_ppos < v_cpos AND v_ppos > 0 THEN
WS_LOAD_CHANGE,FUNCTION,470, v_from_tables := v_from_tables || SUBSTR(v_work,1,v_ppos-1) ||
WS_LOAD_CHANGE,FUNCTION,471, '@' || v_new_dblink || SUBSTR(v_work,v_ppos,(v_cpos-v_ppos)+1);
WS_LOAD_CHANGE,FUNCTION,472, ELSE
WS_LOAD_CHANGE,FUNCTION,473, v_from_tables := v_from_tables || SUBSTR(v_work,1,v_cpos) ||
WS_LOAD_CHANGE,FUNCTION,474, '@' || v_new_dblink;
WS_LOAD_CHANGE,FUNCTION,475, END IF;
WS_LOAD_CHANGE,FUNCTION,476, ELSE
WS_LOAD_CHANGE,FUNCTION,477, v_from_tables := v_from_tables || v_work;
WS_LOAD_CHANGE,FUNCTION,478, -- RED-1242: Add source table alias
WS_LOAD_CHANGE,FUNCTION,479, IF INSTR(RTRIM(LTRIM(v_work)),' ') <= 0 THEN
WS_LOAD_CHANGE,FUNCTION,480, v_from_tables := v_from_tables || ' ' || v_work;
WS_LOAD_CHANGE,FUNCTION,481, END IF;
WS_LOAD_CHANGE,FUNCTION,482, END IF;
WS_LOAD_CHANGE,FUNCTION,483, END IF;
WS_LOAD_CHANGE,FUNCTION,484, END IF;
WS_LOAD_CHANGE,FUNCTION,485, ELSE
WS_LOAD_CHANGE,FUNCTION,486, v_from_tables := v_source_table;
WS_LOAD_CHANGE,FUNCTION,487, IF v_new_dblink IS NOT NULL THEN
WS_LOAD_CHANGE,FUNCTION,488, v_from_tables := v_from_tables || '@' || v_new_dblink;
WS_LOAD_CHANGE,FUNCTION,489, END IF;
WS_LOAD_CHANGE,FUNCTION,490, END IF;
WS_LOAD_CHANGE,FUNCTION,491,
WS_LOAD_CHANGE,FUNCTION,492, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,493, -- Update the load table
WS_LOAD_CHANGE,FUNCTION,494, --***********************************************************************
WS_LOAD_CHANGE,FUNCTION,495, v_step := 700;
WS_LOAD_CHANGE,FUNCTION,496, UPDATE ws_load_tab
WS_LOAD_CHANGE,FUNCTION,497, SET
WS_LOAD_CHANGE,FUNCTION,498, lt_connect_key = v_new_connect_key,
WS_LOAD_CHANGE,FUNCTION,499, lt_source_schema = v_new_schema,
WS_LOAD_CHANGE,FUNCTION,500, lt_view_table = v_view_tables,
WS_LOAD_CHANGE,FUNCTION,501, lt_from_table = v_from_tables,
WS_LOAD_CHANGE,FUNCTION,502, lt_transform_ind = v_new_transform,
WS_LOAD_CHANGE,FUNCTION,503, lt_type = v_new_load_type
WS_LOAD_CHANGE,FUNCTION,504, WHERE
WS_LOAD_CHANGE,FUNCTION,505, lt_obj_key = v_load_obj_key;
WS_LOAD_CHANGE,FUNCTION,506,
WS_LOAD_CHANGE,FUNCTION,507, COMMIT;
WS_LOAD_CHANGE,FUNCTION,508,
WS_LOAD_CHANGE,FUNCTION,509, p_return_code := 'S';
WS_LOAD_CHANGE,FUNCTION,510, p_return_msg := p_action || ' changed from '||v_old_value||' to '||p_new_value||
WS_LOAD_CHANGE,FUNCTION,511, ' for load table '||p_table;
WS_LOAD_CHANGE,FUNCTION,512, v_result := WsWrkAudit('I', p_job_name, p_job_name, p_sequence,
WS_LOAD_CHANGE,FUNCTION,513, p_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_LOAD_CHANGE,FUNCTION,514,
WS_LOAD_CHANGE,FUNCTION,515, RETURN 1;
WS_LOAD_CHANGE,FUNCTION,516,
WS_LOAD_CHANGE,FUNCTION,517,EXCEPTION
WS_LOAD_CHANGE,FUNCTION,518, WHEN OTHERS THEN
WS_LOAD_CHANGE,FUNCTION,519, p_return_code := 'F';
WS_LOAD_CHANGE,FUNCTION,520, v_MsgText := 'Unhandled Exception in ws_load_change. '||
WS_LOAD_CHANGE,FUNCTION,521, ' Step ' ||v_step;
WS_LOAD_CHANGE,FUNCTION,522, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_LOAD_CHANGE,FUNCTION,523, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_LOAD_CHANGE,FUNCTION,524, p_return_msg := substr(v_MsgText,1,1023);
WS_LOAD_CHANGE,FUNCTION,525, RETURN -3;
WS_LOAD_CHANGE,FUNCTION,526,
WS_LOAD_CHANGE,FUNCTION,527,END ws_load_change;
WS_LOAD_CHANGE,FUNCTION,528,
WS_MAINTAIN_INDEXES,FUNCTION,1,function ws_maintain_indexes
WS_MAINTAIN_INDEXES,FUNCTION,2, (
WS_MAINTAIN_INDEXES,FUNCTION,3, p_sequence IN number,
WS_MAINTAIN_INDEXES,FUNCTION,4, p_job_name IN varchar2,
WS_MAINTAIN_INDEXES,FUNCTION,5, p_task_name IN varchar2,
WS_MAINTAIN_INDEXES,FUNCTION,6, p_job_id IN number,
WS_MAINTAIN_INDEXES,FUNCTION,7, p_task_id IN number,
WS_MAINTAIN_INDEXES,FUNCTION,8, p_table_name IN varchar2,
WS_MAINTAIN_INDEXES,FUNCTION,9, p_parameter IN varchar2,
WS_MAINTAIN_INDEXES,FUNCTION,10, p_index_name IN varchar2,
WS_MAINTAIN_INDEXES,FUNCTION,11, p_option IN varchar2
WS_MAINTAIN_INDEXES,FUNCTION,12, )
WS_MAINTAIN_INDEXES,FUNCTION,13, Return integer
WS_MAINTAIN_INDEXES,FUNCTION,14, AUTHID CURRENT_USER
WS_MAINTAIN_INDEXES,FUNCTION,15, IS
WS_MAINTAIN_INDEXES,FUNCTION,16,
WS_MAINTAIN_INDEXES,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_MAINTAIN_INDEXES,FUNCTION,18,
WS_MAINTAIN_INDEXES,FUNCTION,19, -- =============================================================================
WS_MAINTAIN_INDEXES,FUNCTION,20, -- DBMS Name : Oracle
WS_MAINTAIN_INDEXES,FUNCTION,21, -- Script Name : ws_maintain_indexes
WS_MAINTAIN_INDEXES,FUNCTION,22, -- Description : Drop or create one or a group of indexes
WS_MAINTAIN_INDEXES,FUNCTION,23, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_MAINTAIN_INDEXES,FUNCTION,24, -- =============================================================================
WS_MAINTAIN_INDEXES,FUNCTION,25,
WS_MAINTAIN_INDEXES,FUNCTION,26, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,27, -- Constants
WS_MAINTAIN_INDEXES,FUNCTION,28, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,29, v_ws_obj_procedure constant number := 1;
WS_MAINTAIN_INDEXES,FUNCTION,30, v_ws_obj_directive constant number := 2;
WS_MAINTAIN_INDEXES,FUNCTION,31, v_ws_obj_script constant number := 3;
WS_MAINTAIN_INDEXES,FUNCTION,32, v_ws_obj_template constant number := 4;
WS_MAINTAIN_INDEXES,FUNCTION,33, v_ws_obj_fact constant number := 5;
WS_MAINTAIN_INDEXES,FUNCTION,34, v_ws_obj_dim constant number := 6;
WS_MAINTAIN_INDEXES,FUNCTION,35, v_ws_obj_stage constant number := 7;
WS_MAINTAIN_INDEXES,FUNCTION,36, v_ws_obj_load constant number := 8;
WS_MAINTAIN_INDEXES,FUNCTION,37, v_ws_obj_agg constant number := 9;
WS_MAINTAIN_INDEXES,FUNCTION,38, v_ws_obj_index constant number := 10;
WS_MAINTAIN_INDEXES,FUNCTION,39, v_ws_obj_connect constant number := 11;
WS_MAINTAIN_INDEXES,FUNCTION,40, v_ws_obj_dim_view constant number := 12;
WS_MAINTAIN_INDEXES,FUNCTION,41,
WS_MAINTAIN_INDEXES,FUNCTION,42, v_ws_act_drop constant number := 1;
WS_MAINTAIN_INDEXES,FUNCTION,43, v_ws_act_create constant number := 2;
WS_MAINTAIN_INDEXES,FUNCTION,44, v_ws_act_drop_all constant number := 3;
WS_MAINTAIN_INDEXES,FUNCTION,45, v_ws_act_pre_drop constant number := 4;
WS_MAINTAIN_INDEXES,FUNCTION,46, v_ws_act_load constant number := 5;
WS_MAINTAIN_INDEXES,FUNCTION,47, v_ws_act_update constant number := 6;
WS_MAINTAIN_INDEXES,FUNCTION,48, v_ws_act_execute constant number := 7;
WS_MAINTAIN_INDEXES,FUNCTION,49, v_ws_act_process constant number := 8;
WS_MAINTAIN_INDEXES,FUNCTION,50, v_ws_act_build constant number := 9;
WS_MAINTAIN_INDEXES,FUNCTION,51, v_ws_act_build_all constant number := 10;
WS_MAINTAIN_INDEXES,FUNCTION,52, v_ws_act_analyze constant number := 11;
WS_MAINTAIN_INDEXES,FUNCTION,53, v_ws_act_quick_analyze constant number := 12;
WS_MAINTAIN_INDEXES,FUNCTION,54, v_ws_act_statistics constant number := 13;
WS_MAINTAIN_INDEXES,FUNCTION,55, v_ws_act_quick_statistics constant number := 14;
WS_MAINTAIN_INDEXES,FUNCTION,56,
WS_MAINTAIN_INDEXES,FUNCTION,57, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,58, -- Variables
WS_MAINTAIN_INDEXES,FUNCTION,59, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,60, v_MsgText varchar2(1024); -- Text in audit_trail
WS_MAINTAIN_INDEXES,FUNCTION,61, v_step integer := 0; -- return code
WS_MAINTAIN_INDEXES,FUNCTION,62, v_result integer := 0; -- return code
WS_MAINTAIN_INDEXES,FUNCTION,63, v_count integer := 0;
WS_MAINTAIN_INDEXES,FUNCTION,64, v_part_count integer := 0;
WS_MAINTAIN_INDEXES,FUNCTION,65, v_specific_index integer := 0;
WS_MAINTAIN_INDEXES,FUNCTION,66, v_specific_part integer := 0;
WS_MAINTAIN_INDEXES,FUNCTION,67, v_status number := 0;
WS_MAINTAIN_INDEXES,FUNCTION,68, v_status_code number := 0;
WS_MAINTAIN_INDEXES,FUNCTION,69, v_return_msg varchar2(1024);
WS_MAINTAIN_INDEXES,FUNCTION,70, v_obj_type integer;
WS_MAINTAIN_INDEXES,FUNCTION,71, v_obj_key integer;
WS_MAINTAIN_INDEXES,FUNCTION,72,
WS_MAINTAIN_INDEXES,FUNCTION,73,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_MAINTAIN_INDEXES,FUNCTION,74,BEGIN
WS_MAINTAIN_INDEXES,FUNCTION,75,
WS_MAINTAIN_INDEXES,FUNCTION,76, v_step := 10;
WS_MAINTAIN_INDEXES,FUNCTION,77, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,78, -- See if an index name has been specified
WS_MAINTAIN_INDEXES,FUNCTION,79, -- and if so look up the object key for that index
WS_MAINTAIN_INDEXES,FUNCTION,80, -- otherwise Look up the object key for our table
WS_MAINTAIN_INDEXES,FUNCTION,81, -- If we cant find it then we have an error
WS_MAINTAIN_INDEXES,FUNCTION,82, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,83,
WS_MAINTAIN_INDEXES,FUNCTION,84, If p_index_name is not null Then
WS_MAINTAIN_INDEXES,FUNCTION,85, v_specific_index := 1;
WS_MAINTAIN_INDEXES,FUNCTION,86, BEGIN
WS_MAINTAIN_INDEXES,FUNCTION,87, Select oo_obj_key, oo_type_key into v_obj_key, v_obj_type
WS_MAINTAIN_INDEXES,FUNCTION,88, From ws_obj_object
WS_MAINTAIN_INDEXES,FUNCTION,89, Where upper(oo_name) = upper(p_index_name);
WS_MAINTAIN_INDEXES,FUNCTION,90, EXCEPTION WHEN OTHERS THEN
WS_MAINTAIN_INDEXES,FUNCTION,91, v_MsgText := 'Invalid index name '|| p_index_name||
WS_MAINTAIN_INDEXES,FUNCTION,92, ' in call to Ws_Maintain_Index';
WS_MAINTAIN_INDEXES,FUNCTION,93, v_result := WsWrkAudit('E', p_job_name, p_job_name, p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,94, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_MAINTAIN_INDEXES,FUNCTION,95, RETURN -2;
WS_MAINTAIN_INDEXES,FUNCTION,96, END;
WS_MAINTAIN_INDEXES,FUNCTION,97, Else
WS_MAINTAIN_INDEXES,FUNCTION,98, BEGIN
WS_MAINTAIN_INDEXES,FUNCTION,99, Select oo_obj_key, oo_type_key into v_obj_key, v_obj_type
WS_MAINTAIN_INDEXES,FUNCTION,100, From ws_obj_object
WS_MAINTAIN_INDEXES,FUNCTION,101, Where upper(oo_name) = upper(p_table_name);
WS_MAINTAIN_INDEXES,FUNCTION,102, EXCEPTION WHEN OTHERS THEN
WS_MAINTAIN_INDEXES,FUNCTION,103, v_MsgText := 'Invalid table name '|| p_table_name||
WS_MAINTAIN_INDEXES,FUNCTION,104, ' in call to Ws_Maintain_Index';
WS_MAINTAIN_INDEXES,FUNCTION,105, v_result := WsWrkAudit('E', p_job_name, p_job_name, p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,106, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_MAINTAIN_INDEXES,FUNCTION,107, RETURN -2;
WS_MAINTAIN_INDEXES,FUNCTION,108, END;
WS_MAINTAIN_INDEXES,FUNCTION,109, End If;
WS_MAINTAIN_INDEXES,FUNCTION,110,
WS_MAINTAIN_INDEXES,FUNCTION,111,
WS_MAINTAIN_INDEXES,FUNCTION,112,
WS_MAINTAIN_INDEXES,FUNCTION,113, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,114, -- Process depending on the option selected.
WS_MAINTAIN_INDEXES,FUNCTION,115, -- DROP, DROP ALL, BUILD, BUILD ALL
WS_MAINTAIN_INDEXES,FUNCTION,116, --=====================================================
WS_MAINTAIN_INDEXES,FUNCTION,117, If upper(p_option) = 'DROP' And v_obj_type = v_ws_obj_index Then
WS_MAINTAIN_INDEXES,FUNCTION,118, v_status := Ws_Act_Drop(p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,119, v_obj_type,
WS_MAINTAIN_INDEXES,FUNCTION,120, v_ws_act_drop,
WS_MAINTAIN_INDEXES,FUNCTION,121, v_obj_key,
WS_MAINTAIN_INDEXES,FUNCTION,122, p_job_name,
WS_MAINTAIN_INDEXES,FUNCTION,123, p_task_name,
WS_MAINTAIN_INDEXES,FUNCTION,124, p_job_id,
WS_MAINTAIN_INDEXES,FUNCTION,125, p_task_id,
WS_MAINTAIN_INDEXES,FUNCTION,126, v_return_msg,
WS_MAINTAIN_INDEXES,FUNCTION,127, v_status_code);
WS_MAINTAIN_INDEXES,FUNCTION,128, ElsIf upper(p_option) = 'DROP ALL' Then
WS_MAINTAIN_INDEXES,FUNCTION,129, v_status := Ws_Act_Drop_All(p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,130, v_obj_type,
WS_MAINTAIN_INDEXES,FUNCTION,131, v_ws_act_drop,
WS_MAINTAIN_INDEXES,FUNCTION,132, v_obj_key,
WS_MAINTAIN_INDEXES,FUNCTION,133, p_job_name,
WS_MAINTAIN_INDEXES,FUNCTION,134, p_task_name,
WS_MAINTAIN_INDEXES,FUNCTION,135, p_job_id,
WS_MAINTAIN_INDEXES,FUNCTION,136, p_task_id,
WS_MAINTAIN_INDEXES,FUNCTION,137, v_return_msg,
WS_MAINTAIN_INDEXES,FUNCTION,138, v_status_code);
WS_MAINTAIN_INDEXES,FUNCTION,139, ElsIf upper(p_option) = 'PRE DROP' Then
WS_MAINTAIN_INDEXES,FUNCTION,140, v_status := Ws_Act_Pre_Drop(p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,141, v_obj_type,
WS_MAINTAIN_INDEXES,FUNCTION,142, v_ws_act_drop,
WS_MAINTAIN_INDEXES,FUNCTION,143, v_obj_key,
WS_MAINTAIN_INDEXES,FUNCTION,144, p_job_name,
WS_MAINTAIN_INDEXES,FUNCTION,145, p_task_name,
WS_MAINTAIN_INDEXES,FUNCTION,146, p_job_id,
WS_MAINTAIN_INDEXES,FUNCTION,147, p_task_id,
WS_MAINTAIN_INDEXES,FUNCTION,148, v_return_msg,
WS_MAINTAIN_INDEXES,FUNCTION,149, v_status_code);
WS_MAINTAIN_INDEXES,FUNCTION,150, ElsIf upper(p_option) = 'BUILD' Then
WS_MAINTAIN_INDEXES,FUNCTION,151, v_status := Ws_Act_Build(p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,152, v_obj_type,
WS_MAINTAIN_INDEXES,FUNCTION,153, v_ws_act_drop,
WS_MAINTAIN_INDEXES,FUNCTION,154, v_obj_key,
WS_MAINTAIN_INDEXES,FUNCTION,155, p_job_name,
WS_MAINTAIN_INDEXES,FUNCTION,156, p_task_name,
WS_MAINTAIN_INDEXES,FUNCTION,157, p_job_id,
WS_MAINTAIN_INDEXES,FUNCTION,158, p_task_id,
WS_MAINTAIN_INDEXES,FUNCTION,159, p_parameter,
WS_MAINTAIN_INDEXES,FUNCTION,160, v_return_msg,
WS_MAINTAIN_INDEXES,FUNCTION,161, v_status_code);
WS_MAINTAIN_INDEXES,FUNCTION,162, ElsIf upper(p_option) = 'BUILD ALL' Then
WS_MAINTAIN_INDEXES,FUNCTION,163, v_status := Ws_Act_Build_All(p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,164, v_obj_type,
WS_MAINTAIN_INDEXES,FUNCTION,165, v_ws_act_drop,
WS_MAINTAIN_INDEXES,FUNCTION,166, v_obj_key,
WS_MAINTAIN_INDEXES,FUNCTION,167, p_job_name,
WS_MAINTAIN_INDEXES,FUNCTION,168, p_task_name,
WS_MAINTAIN_INDEXES,FUNCTION,169, p_job_id,
WS_MAINTAIN_INDEXES,FUNCTION,170, p_task_id,
WS_MAINTAIN_INDEXES,FUNCTION,171, p_parameter,
WS_MAINTAIN_INDEXES,FUNCTION,172, v_return_msg,
WS_MAINTAIN_INDEXES,FUNCTION,173, v_status_code);
WS_MAINTAIN_INDEXES,FUNCTION,174, Else
WS_MAINTAIN_INDEXES,FUNCTION,175, v_MsgText := 'Invalid option '|| p_option||
WS_MAINTAIN_INDEXES,FUNCTION,176, ' in call to Ws_Maintain_Index. '||
WS_MAINTAIN_INDEXES,FUNCTION,177, 'Valid options are DROP (index specified) , DROP ALL, PRE DROP, BUILD, and BUILD ALL';
WS_MAINTAIN_INDEXES,FUNCTION,178, v_result := WsWrkAudit('E', p_job_name, p_job_name, p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,179, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_MAINTAIN_INDEXES,FUNCTION,180, RETURN -2;
WS_MAINTAIN_INDEXES,FUNCTION,181, End If;
WS_MAINTAIN_INDEXES,FUNCTION,182,
WS_MAINTAIN_INDEXES,FUNCTION,183, If v_status_code < 1 Then
WS_MAINTAIN_INDEXES,FUNCTION,184, v_result := WsWrkAudit('W', p_job_name, p_job_name, p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,185, v_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_MAINTAIN_INDEXES,FUNCTION,186,-- Else
WS_MAINTAIN_INDEXES,FUNCTION,187,-- v_result := WsWrkAudit(I, p_job_name, p_job_name, p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,188,-- v_return_msg,NULL,NULL, p_task_id, p_job_id);
WS_MAINTAIN_INDEXES,FUNCTION,189, End If;
WS_MAINTAIN_INDEXES,FUNCTION,190,
WS_MAINTAIN_INDEXES,FUNCTION,191, COMMIT;
WS_MAINTAIN_INDEXES,FUNCTION,192, RETURN 1;
WS_MAINTAIN_INDEXES,FUNCTION,193,
WS_MAINTAIN_INDEXES,FUNCTION,194,EXCEPTION
WS_MAINTAIN_INDEXES,FUNCTION,195, WHEN OTHERS THEN
WS_MAINTAIN_INDEXES,FUNCTION,196, v_MsgText := 'Unhandled Exception in ws_maintain_indexes. '||
WS_MAINTAIN_INDEXES,FUNCTION,197, ' Step ' ||v_step;
WS_MAINTAIN_INDEXES,FUNCTION,198, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence,
WS_MAINTAIN_INDEXES,FUNCTION,199, v_MsgText,SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_MAINTAIN_INDEXES,FUNCTION,200, RETURN -3;
WS_MAINTAIN_INDEXES,FUNCTION,201,
WS_MAINTAIN_INDEXES,FUNCTION,202,END ws_maintain_indexes;
WS_MAINTAIN_INDEXES,FUNCTION,203,
WS_MON_JOB_CHECK,FUNCTION,1,function ws_mon_job_check
WS_MON_JOB_CHECK,FUNCTION,2, (
WS_MON_JOB_CHECK,FUNCTION,3, p_check_back_hh IN integer,
WS_MON_JOB_CHECK,FUNCTION,4, p_check_back_mm IN integer,
WS_MON_JOB_CHECK,FUNCTION,5, p_poll_interval IN integer,
WS_MON_JOB_CHECK,FUNCTION,6, p_log_level IN integer,
WS_MON_JOB_CHECK,FUNCTION,7, p_job_count OUT integer
WS_MON_JOB_CHECK,FUNCTION,8, )
WS_MON_JOB_CHECK,FUNCTION,9, Return integer
WS_MON_JOB_CHECK,FUNCTION,10, AUTHID CURRENT_USER
WS_MON_JOB_CHECK,FUNCTION,11, IS
WS_MON_JOB_CHECK,FUNCTION,12,
WS_MON_JOB_CHECK,FUNCTION,13, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_MON_JOB_CHECK,FUNCTION,14,
WS_MON_JOB_CHECK,FUNCTION,15, -- =============================================================================
WS_MON_JOB_CHECK,FUNCTION,16, -- DBMS Name : Oracle
WS_MON_JOB_CHECK,FUNCTION,17, -- Script Name : ws_mon_job_check
WS_MON_JOB_CHECK,FUNCTION,18, -- Description : Checks for jobs that need notifications
WS_MON_JOB_CHECK,FUNCTION,19, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_MON_JOB_CHECK,FUNCTION,20, -- =============================================================================
WS_MON_JOB_CHECK,FUNCTION,21,
WS_MON_JOB_CHECK,FUNCTION,22, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,23, -- Variables
WS_MON_JOB_CHECK,FUNCTION,24, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,25, v_MsgText varchar2(2048); -- Text in audit_trail
WS_MON_JOB_CHECK,FUNCTION,26, v_step integer := 0; -- return code
WS_MON_JOB_CHECK,FUNCTION,27, v_result integer := 0; -- return code
WS_MON_JOB_CHECK,FUNCTION,28, v_last_start_time date; -- time job last started
WS_MON_JOB_CHECK,FUNCTION,29, v_last_stop_time date; -- time job last finished
WS_MON_JOB_CHECK,FUNCTION,30, v_current_start_time date; -- time job started if running
WS_MON_JOB_CHECK,FUNCTION,31, v_next_start_time date; -- time job scheduled to next start
WS_MON_JOB_CHECK,FUNCTION,32, v_valid integer; -- flag to indicate a valid job
WS_MON_JOB_CHECK,FUNCTION,33, v_running integer; -- flag to indicate a running job record
WS_MON_JOB_CHECK,FUNCTION,34, v_completed integer; -- flag to indicate a completed job record
WS_MON_JOB_CHECK,FUNCTION,35, v_check_hh integer; -- hour this check is running in
WS_MON_JOB_CHECK,FUNCTION,36, v_check_mm integer; -- minutes past the hour of this check
WS_MON_JOB_CHECK,FUNCTION,37, v_skip_check integer; -- flag to indicate outside check time
WS_MON_JOB_CHECK,FUNCTION,38, v_hh_last integer; -- last check time (hour)
WS_MON_JOB_CHECK,FUNCTION,39, v_mm_last integer; -- last check time (minute)
WS_MON_JOB_CHECK,FUNCTION,40, v_hh_next integer; -- next check time (hour)
WS_MON_JOB_CHECK,FUNCTION,41, v_mm_next integer; -- next check time (minute)
WS_MON_JOB_CHECK,FUNCTION,42, v_hh_diff integer; -- difference (hour)
WS_MON_JOB_CHECK,FUNCTION,43, v_mm_diff integer; -- difference (minute)
WS_MON_JOB_CHECK,FUNCTION,44, v_notify_key integer := 0; -- key for notify records
WS_MON_JOB_CHECK,FUNCTION,45, v_notify integer := 0; -- flag to indicate a notification
WS_MON_JOB_CHECK,FUNCTION,46, v_day_of_week integer; -- day of the week 1-7
WS_MON_JOB_CHECK,FUNCTION,47, v_day_of_month integer; -- day of the month 1-31
WS_MON_JOB_CHECK,FUNCTION,48, v_next_day_of_month integer; -- tomorrow day of the month 1-31
WS_MON_JOB_CHECK,FUNCTION,49, v_skip_day integer; -- flag to indicate that this day is not checked
WS_MON_JOB_CHECK,FUNCTION,50, v_required_start date; -- date time we need to start by
WS_MON_JOB_CHECK,FUNCTION,51, v_required_finish date; -- date time we need to finish by
WS_MON_JOB_CHECK,FUNCTION,52, v_required_cpoint date; -- date time of checkpoint
WS_MON_JOB_CHECK,FUNCTION,53, v_required_check date; -- date time we need to check for
WS_MON_JOB_CHECK,FUNCTION,54, v_work integer;
WS_MON_JOB_CHECK,FUNCTION,55, v_work2 integer;
WS_MON_JOB_CHECK,FUNCTION,56, v_start_hh integer; -- hour the job must start by
WS_MON_JOB_CHECK,FUNCTION,57, v_start_mm integer; -- minute the job must start by
WS_MON_JOB_CHECK,FUNCTION,58, v_finish_hh integer; -- hour the job must finish by
WS_MON_JOB_CHECK,FUNCTION,59, v_finish_mm integer; -- minute the job must finish by
WS_MON_JOB_CHECK,FUNCTION,60, v_abs_hh integer; -- absolute minimum start hour
WS_MON_JOB_CHECK,FUNCTION,61, v_abs_mm integer; -- absolute minimum start minute
WS_MON_JOB_CHECK,FUNCTION,62, v_abs_day integer; -- contains -1 if our absolute start time was yesterday
WS_MON_JOB_CHECK,FUNCTION,63, v_abs_start date; -- absolute start/date time before which the job could not have started
WS_MON_JOB_CHECK,FUNCTION,64, v_cp_hh integer; -- checkpoint hour
WS_MON_JOB_CHECK,FUNCTION,65, v_cp_mm integer; -- checkpoint minute
WS_MON_JOB_CHECK,FUNCTION,66, v_cp_found integer; -- flag to indicate a checkpoint to test
WS_MON_JOB_CHECK,FUNCTION,67, v_check_date date; -- datetime of the check we are running
WS_MON_JOB_CHECK,FUNCTION,68, v_start_date date; -- datetime of the must start by time.
WS_MON_JOB_CHECK,FUNCTION,69, v_finish_date date; -- datetime of the must finish by time.
WS_MON_JOB_CHECK,FUNCTION,70, v_cp_date date; -- datetime of the checkpoint.
WS_MON_JOB_CHECK,FUNCTION,71, v_start_day integer; -- increment of days past check day
WS_MON_JOB_CHECK,FUNCTION,72, v_finish_day integer; -- increment of days past check day
WS_MON_JOB_CHECK,FUNCTION,73, v_cp_day integer; -- increment of days past check day
WS_MON_JOB_CHECK,FUNCTION,74, v_prev_day integer; -- flag to indicate a previous day
WS_MON_JOB_CHECK,FUNCTION,75, v_info_count integer; -- number of info messages to check for
WS_MON_JOB_CHECK,FUNCTION,76, v_task_count integer; -- number of completed tasks to check for
WS_MON_JOB_CHECK,FUNCTION,77, v_notify_type varchar2(64); -- type of notification message
WS_MON_JOB_CHECK,FUNCTION,78, v_finish_status varchar2(1); -- finish status code of a job
WS_MON_JOB_CHECK,FUNCTION,79, v_warn_count integer; -- number of warnings in job
WS_MON_JOB_CHECK,FUNCTION,80, v_error_count integer; -- number of errors in job
WS_MON_JOB_CHECK,FUNCTION,81, v_failed_job integer; -- flag to indicate that the job failed
WS_MON_JOB_CHECK,FUNCTION,82, v_cp_script_key integer; -- notification script key for a checkpoint
WS_MON_JOB_CHECK,FUNCTION,83, v_cp_param varchar2(4000); -- notification parameter for a checkpoint
WS_MON_JOB_CHECK,FUNCTION,84,
WS_MON_JOB_CHECK,FUNCTION,85, v_CtrlRec ws_wrk_job_ctrl%ROWTYPE;
WS_MON_JOB_CHECK,FUNCTION,86, v_RunRec ws_wrk_job_run%ROWTYPE;
WS_MON_JOB_CHECK,FUNCTION,87, v_LogRec ws_wrk_job_log%ROWTYPE;
WS_MON_JOB_CHECK,FUNCTION,88, v_tasks_completed integer;
WS_MON_JOB_CHECK,FUNCTION,89, v_info_messages integer;
WS_MON_JOB_CHECK,FUNCTION,90,
WS_MON_JOB_CHECK,FUNCTION,91, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,92, -- Cursor for all jobs to be checked
WS_MON_JOB_CHECK,FUNCTION,93, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,94, CURSOR c_JobMon IS
WS_MON_JOB_CHECK,FUNCTION,95, SELECT *
WS_MON_JOB_CHECK,FUNCTION,96, FROM ws_wrk_mon_job
WS_MON_JOB_CHECK,FUNCTION,97, WHERE NVL(wmj_start_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,98, OR NVL(wmj_finish_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,99, OR NVL(wmj_run_warn_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,100, OR NVL(wmj_run_err_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,101, OR NVL(wmj_fin_warn_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,102, OR NVL(wmj_fin_err_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,103, OR NVL(wmj_fin_ok_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,104, OR NVL(wmj_cp1_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,105, OR NVL(wmj_cp2_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,106, OR NVL(wmj_cp3_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,107, ;
WS_MON_JOB_CHECK,FUNCTION,108,
WS_MON_JOB_CHECK,FUNCTION,109,
WS_MON_JOB_CHECK,FUNCTION,110,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_MON_JOB_CHECK,FUNCTION,111,BEGIN
WS_MON_JOB_CHECK,FUNCTION,112,
WS_MON_JOB_CHECK,FUNCTION,113, v_result := 1;
WS_MON_JOB_CHECK,FUNCTION,114, v_check_date := sysdate;
WS_MON_JOB_CHECK,FUNCTION,115, v_check_hh := to_number(to_char(v_check_date,'HH24'));
WS_MON_JOB_CHECK,FUNCTION,116, v_check_mm := to_number(to_char(v_check_date,'MI'));
WS_MON_JOB_CHECK,FUNCTION,117,
WS_MON_JOB_CHECK,FUNCTION,118, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,119, -- If Debug set then log the start of this check
WS_MON_JOB_CHECK,FUNCTION,120, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,121, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,122, v_MsgText := 'Job Monitoring commenced at ' || LPAD(v_check_hh,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,123, ':'||LPAD(v_check_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,124, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,125, ( wml_time_stamp, wml_status, wml_message, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,126, VALUES
WS_MON_JOB_CHECK,FUNCTION,127, ( sysdate, 'I', v_MsgText, 'N');
WS_MON_JOB_CHECK,FUNCTION,128, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,129, END IF;
WS_MON_JOB_CHECK,FUNCTION,130,
WS_MON_JOB_CHECK,FUNCTION,131, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,132, -- Loop through the jobs checking each one
WS_MON_JOB_CHECK,FUNCTION,133, -- If a notification required then insert
WS_MON_JOB_CHECK,FUNCTION,134, -- a record into the notification table
WS_MON_JOB_CHECK,FUNCTION,135, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,136, FOR v_MonRec in c_JobMon LOOP
WS_MON_JOB_CHECK,FUNCTION,137, v_skip_day := 0;
WS_MON_JOB_CHECK,FUNCTION,138, v_notify := 0;
WS_MON_JOB_CHECK,FUNCTION,139, v_valid := 1;
WS_MON_JOB_CHECK,FUNCTION,140, v_running := 1;
WS_MON_JOB_CHECK,FUNCTION,141, v_completed := 1;
WS_MON_JOB_CHECK,FUNCTION,142,
WS_MON_JOB_CHECK,FUNCTION,143, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,144, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,145, -- last nominal last start time for the job
WS_MON_JOB_CHECK,FUNCTION,146, -- need to know if the nominal start time was yesterday.
WS_MON_JOB_CHECK,FUNCTION,147, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,148, IF v_check_hh > v_MonRec.wmj_nominal_hh
WS_MON_JOB_CHECK,FUNCTION,149, OR ( v_check_hh = v_MonRec.wmj_nominal_hh
WS_MON_JOB_CHECK,FUNCTION,150, AND v_check_mm > v_MonRec.wmj_nominal_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,151, -- ahead of the check start time, so must be today
WS_MON_JOB_CHECK,FUNCTION,152, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,153, ELSE
WS_MON_JOB_CHECK,FUNCTION,154, -- before the check start time, so last one was yesterday
WS_MON_JOB_CHECK,FUNCTION,155, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,156, END IF;
WS_MON_JOB_CHECK,FUNCTION,157,
WS_MON_JOB_CHECK,FUNCTION,158, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,159, -- Work out the absolulte minimum start time for this job
WS_MON_JOB_CHECK,FUNCTION,160, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,161, v_abs_day := 0;
WS_MON_JOB_CHECK,FUNCTION,162, v_abs_mm := v_MonRec.wmj_nominal_mm - v_MonRec.wmj_prior_start_elapsed;
WS_MON_JOB_CHECK,FUNCTION,163, v_abs_hh := v_MonRec.wmj_nominal_hh;
WS_MON_JOB_CHECK,FUNCTION,164, WHILE v_abs_mm < 0 LOOP
WS_MON_JOB_CHECK,FUNCTION,165, v_abs_hh := v_abs_hh - 1;
WS_MON_JOB_CHECK,FUNCTION,166, v_abs_mm := v_abs_mm + 60;
WS_MON_JOB_CHECK,FUNCTION,167, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,168, WHILE v_abs_hh < 0 LOOP
WS_MON_JOB_CHECK,FUNCTION,169, v_abs_hh := v_abs_hh + 24;
WS_MON_JOB_CHECK,FUNCTION,170, v_abs_day := v_abs_day - 1;
WS_MON_JOB_CHECK,FUNCTION,171, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,172, v_abs_day := v_abs_day + v_prev_day;
WS_MON_JOB_CHECK,FUNCTION,173, v_work := to_number(to_char(sysdate-v_abs_day,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,174, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,175, v_work := v_work + ( v_abs_hh * 100 );
WS_MON_JOB_CHECK,FUNCTION,176, v_work := v_work + v_abs_mm;
WS_MON_JOB_CHECK,FUNCTION,177, v_abs_start := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,178,
WS_MON_JOB_CHECK,FUNCTION,179, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,180, -- Check to see if monitoring requested for this day
WS_MON_JOB_CHECK,FUNCTION,181, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,182, v_day_of_week := to_number(to_char(sysdate-v_prev_day,'D'));
WS_MON_JOB_CHECK,FUNCTION,183, v_day_of_month := to_number(to_char(sysdate-v_prev_day,'DD'));
WS_MON_JOB_CHECK,FUNCTION,184, v_next_day_of_month := to_number(to_char(sysdate-v_prev_day+1,'DD'));
WS_MON_JOB_CHECK,FUNCTION,185, IF v_day_of_week = 2 AND NVL(v_MonRec.wmj_mon,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,186, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,187, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,188, END IF;
WS_MON_JOB_CHECK,FUNCTION,189, IF v_day_of_week = 3 AND NVL(v_MonRec.wmj_tue,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,190, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,191, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,192, END IF;
WS_MON_JOB_CHECK,FUNCTION,193, IF v_day_of_week = 4 AND NVL(v_MonRec.wmj_wed,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,194, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,195, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,196, END IF;
WS_MON_JOB_CHECK,FUNCTION,197, IF v_day_of_week = 5 AND NVL(v_MonRec.wmj_thu,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,198, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,199, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,200, END IF;
WS_MON_JOB_CHECK,FUNCTION,201, IF v_day_of_week = 6 AND NVL(v_MonRec.wmj_fri,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,202, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,203, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,204, END IF;
WS_MON_JOB_CHECK,FUNCTION,205, IF v_day_of_week = 7 AND NVL(v_MonRec.wmj_sat,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,206, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,207, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,208, END IF;
WS_MON_JOB_CHECK,FUNCTION,209, IF v_day_of_week = 1 AND NVL(v_MonRec.wmj_sun,'N') = 'N' THEN
WS_MON_JOB_CHECK,FUNCTION,210, v_skip_day := 1;
WS_MON_JOB_CHECK,FUNCTION,211, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,212, END IF;
WS_MON_JOB_CHECK,FUNCTION,213, -- if the first of the month and checking on the first
WS_MON_JOB_CHECK,FUNCTION,214, -- then re-set the flags so we proceed
WS_MON_JOB_CHECK,FUNCTION,215, IF v_day_of_month = 1 AND NVL(v_MonRec.wmj_first_day,'Y') = 'Y' THEN
WS_MON_JOB_CHECK,FUNCTION,216, v_skip_day := 0;
WS_MON_JOB_CHECK,FUNCTION,217, v_valid := 1;
WS_MON_JOB_CHECK,FUNCTION,218, END IF;
WS_MON_JOB_CHECK,FUNCTION,219, -- if tomorrow is the the first of the month and checking for the last
WS_MON_JOB_CHECK,FUNCTION,220, -- of the month then re-set the flags so we proceed
WS_MON_JOB_CHECK,FUNCTION,221, IF v_next_day_of_month = 1 AND NVL(v_MonRec.wmj_last_day,'Y') = 'Y' THEN
WS_MON_JOB_CHECK,FUNCTION,222, v_skip_day := 0;
WS_MON_JOB_CHECK,FUNCTION,223, v_valid := 1;
WS_MON_JOB_CHECK,FUNCTION,224, END IF;
WS_MON_JOB_CHECK,FUNCTION,225,
WS_MON_JOB_CHECK,FUNCTION,226, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,227, -- If Debug set then log the start of this job check
WS_MON_JOB_CHECK,FUNCTION,228, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,229, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,230, IF v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,231, v_MsgText := 'Job Monitoring of Job '|| v_MonRec.wmj_job_name||
WS_MON_JOB_CHECK,FUNCTION,232, ' commenced at ' || LPAD(v_check_hh,2,'0')|| ':'||LPAD(v_check_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,233, ELSE
WS_MON_JOB_CHECK,FUNCTION,234, v_MsgText := 'Job Monitoring of Job '|| v_MonRec.wmj_job_name||
WS_MON_JOB_CHECK,FUNCTION,235, ' skipped. No checking for this day of the week.month.';
WS_MON_JOB_CHECK,FUNCTION,236, END IF;
WS_MON_JOB_CHECK,FUNCTION,237, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,238, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,239, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,240, VALUES
WS_MON_JOB_CHECK,FUNCTION,241, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,242, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,243, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,244, END IF;
WS_MON_JOB_CHECK,FUNCTION,245,
WS_MON_JOB_CHECK,FUNCTION,246, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,247, -- Get information about this job
WS_MON_JOB_CHECK,FUNCTION,248, -- If the job not found then issue a message and skip
WS_MON_JOB_CHECK,FUNCTION,249, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,250, IF v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,251, BEGIN
WS_MON_JOB_CHECK,FUNCTION,252, SELECT * INTO v_CtrlRec
WS_MON_JOB_CHECK,FUNCTION,253, FROM ws_wrk_job_ctrl
WS_MON_JOB_CHECK,FUNCTION,254, WHERE wjc_job_key = v_MonRec.wmj_job_key;
WS_MON_JOB_CHECK,FUNCTION,255, v_valid := 1;
WS_MON_JOB_CHECK,FUNCTION,256, EXCEPTION WHEN OTHERS THEN
WS_MON_JOB_CHECK,FUNCTION,257, v_valid := 0;
WS_MON_JOB_CHECK,FUNCTION,258, v_MsgText := 'Job ' || v_MonRec.wmj_job_name||
WS_MON_JOB_CHECK,FUNCTION,259, ' not found. Monitoring setup for an invalid job.';
WS_MON_JOB_CHECK,FUNCTION,260, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,261, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,262, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,263, VALUES
WS_MON_JOB_CHECK,FUNCTION,264, ( sysdate, 'E', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,265, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,266, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,267, END;
WS_MON_JOB_CHECK,FUNCTION,268, END IF;
WS_MON_JOB_CHECK,FUNCTION,269,
WS_MON_JOB_CHECK,FUNCTION,270, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,271, -- Get information about any running iterations of the job
WS_MON_JOB_CHECK,FUNCTION,272, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,273, IF v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,274, BEGIN
WS_MON_JOB_CHECK,FUNCTION,275, SELECT * INTO v_RunRec
WS_MON_JOB_CHECK,FUNCTION,276, FROM ws_wrk_job_run
WS_MON_JOB_CHECK,FUNCTION,277, WHERE wjr_job_key = v_MonRec.wmj_job_key;
WS_MON_JOB_CHECK,FUNCTION,278, v_running := 1;
WS_MON_JOB_CHECK,FUNCTION,279, EXCEPTION WHEN OTHERS THEN
WS_MON_JOB_CHECK,FUNCTION,280, v_running := 0;
WS_MON_JOB_CHECK,FUNCTION,281, v_RunRec.wjr_status := 'X';
WS_MON_JOB_CHECK,FUNCTION,282, END;
WS_MON_JOB_CHECK,FUNCTION,283, IF v_running = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,284, BEGIN
WS_MON_JOB_CHECK,FUNCTION,285, SELECT count(1) INTO v_tasks_completed
WS_MON_JOB_CHECK,FUNCTION,286, FROM ws_wrk_task_run
WS_MON_JOB_CHECK,FUNCTION,287, WHERE wtr_job_key = v_MonRec.wmj_job_key
WS_MON_JOB_CHECK,FUNCTION,288, AND wtr_run_status = 'C';
WS_MON_JOB_CHECK,FUNCTION,289, EXCEPTION WHEN OTHERS THEN
WS_MON_JOB_CHECK,FUNCTION,290, v_tasks_completed := 0;
WS_MON_JOB_CHECK,FUNCTION,291, END;
WS_MON_JOB_CHECK,FUNCTION,292, END IF;
WS_MON_JOB_CHECK,FUNCTION,293, END IF;
WS_MON_JOB_CHECK,FUNCTION,294,
WS_MON_JOB_CHECK,FUNCTION,295, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,296, -- Get information from the latest completed version
WS_MON_JOB_CHECK,FUNCTION,297, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,298, IF v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,299, BEGIN
WS_MON_JOB_CHECK,FUNCTION,300, SELECT * INTO v_LogRec
WS_MON_JOB_CHECK,FUNCTION,301, FROM ws_wrk_job_log
WS_MON_JOB_CHECK,FUNCTION,302, WHERE wjl_job_key = v_MonRec.wmj_job_key
WS_MON_JOB_CHECK,FUNCTION,303, AND wjl_sequence =
WS_MON_JOB_CHECK,FUNCTION,304, ( SELECT max(wjl_sequence) FROM ws_wrk_job_log
WS_MON_JOB_CHECK,FUNCTION,305, WHERE wjl_job_key = v_MonRec.wmj_job_key );
WS_MON_JOB_CHECK,FUNCTION,306, v_completed := 1;
WS_MON_JOB_CHECK,FUNCTION,307, EXCEPTION WHEN OTHERS THEN
WS_MON_JOB_CHECK,FUNCTION,308, v_completed := 0;
WS_MON_JOB_CHECK,FUNCTION,309, END;
WS_MON_JOB_CHECK,FUNCTION,310, END IF;
WS_MON_JOB_CHECK,FUNCTION,311,
WS_MON_JOB_CHECK,FUNCTION,312, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,313, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,314, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,315, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,316, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,317, -- F I N I S H S T A T U S C H E C K S
WS_MON_JOB_CHECK,FUNCTION,318, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,319, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,320, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,321, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,322, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,323, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,324, -- If FINISH status checks are active check the jobs
WS_MON_JOB_CHECK,FUNCTION,325, -- finish status.
WS_MON_JOB_CHECK,FUNCTION,326, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,327, IF v_valid = 1
WS_MON_JOB_CHECK,FUNCTION,328, AND ( NVL(v_MonRec.wmj_fin_ok_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,329, OR NVL(v_MonRec.wmj_fin_warn_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,330, OR NVL(v_MonRec.wmj_fin_err_active,'N') = 'Y' ) THEN
WS_MON_JOB_CHECK,FUNCTION,331,
WS_MON_JOB_CHECK,FUNCTION,332, v_step := 100;
WS_MON_JOB_CHECK,FUNCTION,333,
WS_MON_JOB_CHECK,FUNCTION,334, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,335, -- If we have a completed job or a running job that
WS_MON_JOB_CHECK,FUNCTION,336, -- has failed, we will check the lookback time.
WS_MON_JOB_CHECK,FUNCTION,337, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,338, IF v_completed = 1
WS_MON_JOB_CHECK,FUNCTION,339, OR ( v_running = 1 AND v_RunRec.wjr_status = 'F' ) THEN
WS_MON_JOB_CHECK,FUNCTION,340,
WS_MON_JOB_CHECK,FUNCTION,341, v_failed_job := 0;
WS_MON_JOB_CHECK,FUNCTION,342, -- get the finish time of any completed job
WS_MON_JOB_CHECK,FUNCTION,343, IF v_completed = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,344, v_finish_hh := to_number(to_char(v_LogRec.wjl_completed,'HH24'));
WS_MON_JOB_CHECK,FUNCTION,345, v_finish_mm := to_number(to_char(v_LogRec.wjl_completed,'MI'));
WS_MON_JOB_CHECK,FUNCTION,346, v_start_date := v_LogRec.wjl_started;
WS_MON_JOB_CHECK,FUNCTION,347, END IF;
WS_MON_JOB_CHECK,FUNCTION,348,
WS_MON_JOB_CHECK,FUNCTION,349, -- If we have a running job that has a failed status then
WS_MON_JOB_CHECK,FUNCTION,350, -- that is more current than the completed job so use that time
WS_MON_JOB_CHECK,FUNCTION,351, -- and flag that we are using a failed job
WS_MON_JOB_CHECK,FUNCTION,352, IF v_running = 1 AND v_RunRec.wjr_status = 'F' THEN
WS_MON_JOB_CHECK,FUNCTION,353, v_finish_hh := TO_NUMBER(TO_CHAR(NVL(v_RunRec.wjr_completed,v_RunRec.wjr_started),'HH24'));
WS_MON_JOB_CHECK,FUNCTION,354, v_finish_mm := TO_NUMBER(TO_CHAR(NVL(v_RunRec.wjr_completed,v_RunRec.wjr_started),'MI'));
WS_MON_JOB_CHECK,FUNCTION,355, v_start_date := v_RunRec.wjr_started;
WS_MON_JOB_CHECK,FUNCTION,356, v_failed_job := 1;
WS_MON_JOB_CHECK,FUNCTION,357, END IF;
WS_MON_JOB_CHECK,FUNCTION,358,
WS_MON_JOB_CHECK,FUNCTION,359, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,360, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,361, -- finish time
WS_MON_JOB_CHECK,FUNCTION,362, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,363, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,364, IF v_check_hh > v_finish_hh
WS_MON_JOB_CHECK,FUNCTION,365, OR ( v_check_hh = v_finish_hh
WS_MON_JOB_CHECK,FUNCTION,366, AND v_check_mm > v_finish_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,367, -- ahead of the check finish time
WS_MON_JOB_CHECK,FUNCTION,368, -- get the last start time (same day)
WS_MON_JOB_CHECK,FUNCTION,369, v_hh_last := v_check_hh - v_finish_hh;
WS_MON_JOB_CHECK,FUNCTION,370, v_mm_last := v_check_mm - v_finish_mm;
WS_MON_JOB_CHECK,FUNCTION,371, IF v_mm_last < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,372, v_mm_last := v_mm_last + 60;
WS_MON_JOB_CHECK,FUNCTION,373, v_hh_last := v_hh_last - 1;
WS_MON_JOB_CHECK,FUNCTION,374, END IF;
WS_MON_JOB_CHECK,FUNCTION,375, -- get the next finish time (next day)
WS_MON_JOB_CHECK,FUNCTION,376, v_hh_next := 23 - v_hh_last;
WS_MON_JOB_CHECK,FUNCTION,377, v_mm_next := 60 - v_mm_last;
WS_MON_JOB_CHECK,FUNCTION,378, IF v_mm_next = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,379, v_mm_next := 0;
WS_MON_JOB_CHECK,FUNCTION,380, v_hh_next := v_hh_next + 1;
WS_MON_JOB_CHECK,FUNCTION,381, END If;
WS_MON_JOB_CHECK,FUNCTION,382, ELSE
WS_MON_JOB_CHECK,FUNCTION,383, -- before the check finish time
WS_MON_JOB_CHECK,FUNCTION,384, -- get the next start time (same day)
WS_MON_JOB_CHECK,FUNCTION,385, v_hh_next := v_finish_hh - v_check_hh;
WS_MON_JOB_CHECK,FUNCTION,386, v_mm_next := v_finish_mm - v_check_mm;
WS_MON_JOB_CHECK,FUNCTION,387, IF v_mm_next < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,388, v_mm_next := v_mm_next + 60;
WS_MON_JOB_CHECK,FUNCTION,389, v_hh_next := v_hh_next - 1;
WS_MON_JOB_CHECK,FUNCTION,390, END IF;
WS_MON_JOB_CHECK,FUNCTION,391, -- get the last finish time (previous day)
WS_MON_JOB_CHECK,FUNCTION,392, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,393, v_hh_last := 23 - v_hh_next;
WS_MON_JOB_CHECK,FUNCTION,394, v_mm_last := 60 - v_mm_next;
WS_MON_JOB_CHECK,FUNCTION,395, IF v_mm_last = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,396, v_mm_last := 0;
WS_MON_JOB_CHECK,FUNCTION,397, v_hh_last := v_hh_last + 1;
WS_MON_JOB_CHECK,FUNCTION,398, END IF;
WS_MON_JOB_CHECK,FUNCTION,399,
WS_MON_JOB_CHECK,FUNCTION,400, END IF;
WS_MON_JOB_CHECK,FUNCTION,401,
WS_MON_JOB_CHECK,FUNCTION,402, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,403, -- See if we are within our check range
WS_MON_JOB_CHECK,FUNCTION,404, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,405, v_hh_diff := v_hh_last - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,406, v_mm_diff := v_mm_last - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,407, IF v_mm_diff < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,408, v_hh_diff := v_hh_diff - 1;
WS_MON_JOB_CHECK,FUNCTION,409, v_mm_diff := v_mm_diff + 60;
WS_MON_JOB_CHECK,FUNCTION,410, END IF;
WS_MON_JOB_CHECK,FUNCTION,411, IF v_hh_diff > 0
WS_MON_JOB_CHECK,FUNCTION,412, OR ( v_hh_diff = 0
WS_MON_JOB_CHECK,FUNCTION,413, AND v_mm_diff > 0 ) THEN
WS_MON_JOB_CHECK,FUNCTION,414, v_skip_check := 1;
WS_MON_JOB_CHECK,FUNCTION,415, ELSE
WS_MON_JOB_CHECK,FUNCTION,416, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,417, END IF;
WS_MON_JOB_CHECK,FUNCTION,418,
WS_MON_JOB_CHECK,FUNCTION,419, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,420, -- Make sure that this is the current job.
WS_MON_JOB_CHECK,FUNCTION,421, -- If not the current job then do not report it
WS_MON_JOB_CHECK,FUNCTION,422, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,423, IF v_start_date < v_abs_start THEN
WS_MON_JOB_CHECK,FUNCTION,424, v_skip_check := 1; -- not the latest job so skip it
WS_MON_JOB_CHECK,FUNCTION,425, END IF; -- end of check that we are looking at the latest job
WS_MON_JOB_CHECK,FUNCTION,426,
WS_MON_JOB_CHECK,FUNCTION,427, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,428, -- If we have a check to do then perform it.
WS_MON_JOB_CHECK,FUNCTION,429, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,430, IF v_skip_check = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,431, v_step := 200;
WS_MON_JOB_CHECK,FUNCTION,432, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,433, -- Log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,434, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,435, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,436, v_MsgText := 'Finish status check actioned. Current time '||
WS_MON_JOB_CHECK,FUNCTION,437, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,438, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,439, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is less than look back of '||
WS_MON_JOB_CHECK,FUNCTION,440, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,441, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,442, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,443, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,444, VALUES
WS_MON_JOB_CHECK,FUNCTION,445, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,446, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,447, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,448, END IF;
WS_MON_JOB_CHECK,FUNCTION,449,
WS_MON_JOB_CHECK,FUNCTION,450, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,451, -- Perform the check
WS_MON_JOB_CHECK,FUNCTION,452, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,453, IF v_failed_job = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,454, v_finish_status := v_LogRec.wjl_status;
WS_MON_JOB_CHECK,FUNCTION,455, v_warn_count := v_LogRec.wjl_warning_count;
WS_MON_JOB_CHECK,FUNCTION,456, v_error_count := v_LogRec.wjl_error_count;
WS_MON_JOB_CHECK,FUNCTION,457, ELSE
WS_MON_JOB_CHECK,FUNCTION,458, v_finish_status := v_RunRec.wjr_status;
WS_MON_JOB_CHECK,FUNCTION,459, v_warn_count := v_RunRec.wjr_warning_count;
WS_MON_JOB_CHECK,FUNCTION,460, v_error_count := v_RunRec.wjr_error_count;
WS_MON_JOB_CHECK,FUNCTION,461, END IF;
WS_MON_JOB_CHECK,FUNCTION,462,
WS_MON_JOB_CHECK,FUNCTION,463, v_notify := 0;
WS_MON_JOB_CHECK,FUNCTION,464, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,465, -- Check if a finish error notify required
WS_MON_JOB_CHECK,FUNCTION,466, -- If we have finish completed and have errors that
WS_MON_JOB_CHECK,FUNCTION,467, -- means the job has been restarted and run to completion
WS_MON_JOB_CHECK,FUNCTION,468, -- we will not consider that a finish failure.
WS_MON_JOB_CHECK,FUNCTION,469, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,470, IF NVL(v_MonRec.wmj_fin_err_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,471, AND v_error_count > NVL(v_MonRec.wmj_fin_err_count,0)
WS_MON_JOB_CHECK,FUNCTION,472, AND v_finish_status <> 'C' THEN
WS_MON_JOB_CHECK,FUNCTION,473, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,474, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,475, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,476, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,477, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,478, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,479, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,480, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,481, END IF;
WS_MON_JOB_CHECK,FUNCTION,482, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,483, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,484, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,485, ELSE
WS_MON_JOB_CHECK,FUNCTION,486, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,487, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,488, END IF;
WS_MON_JOB_CHECK,FUNCTION,489, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,490, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,491, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,492,
WS_MON_JOB_CHECK,FUNCTION,493,
WS_MON_JOB_CHECK,FUNCTION,494, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH_ERROR'
WS_MON_JOB_CHECK,FUNCTION,495, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,496, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,497, v_MsgText := 'Notification of finish in error Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,498, ' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,499, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,500, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,501, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,502, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,503, VALUES
WS_MON_JOB_CHECK,FUNCTION,504, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,505, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,506, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,507, END IF;
WS_MON_JOB_CHECK,FUNCTION,508, ELSE
WS_MON_JOB_CHECK,FUNCTION,509, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,510, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,511, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,512, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,513, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,514, wmn_notify_type = 'FINISH_ERROR',
WS_MON_JOB_CHECK,FUNCTION,515, wmn_script_key = v_MonRec.wmj_fin_err_script_key,
WS_MON_JOB_CHECK,FUNCTION,516, wmn_parameter = v_MonRec.wmj_fin_err_param
WS_MON_JOB_CHECK,FUNCTION,517, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,518,
WS_MON_JOB_CHECK,FUNCTION,519, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,520, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,521, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,522, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,523, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,524, VALUES
WS_MON_JOB_CHECK,FUNCTION,525, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,526, v_MonRec.wmj_job_name, 'FINISH_ERROR', v_MonRec.wmj_fin_err_script_key,
WS_MON_JOB_CHECK,FUNCTION,527, v_MonRec.wmj_fin_err_param);
WS_MON_JOB_CHECK,FUNCTION,528, END IF;
WS_MON_JOB_CHECK,FUNCTION,529, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,530, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,531, v_MsgText := 'Notification of finish with errors. '||
WS_MON_JOB_CHECK,FUNCTION,532, v_error_count||' errors detected.';
WS_MON_JOB_CHECK,FUNCTION,533, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,534, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,535, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,536, VALUES
WS_MON_JOB_CHECK,FUNCTION,537, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,538, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,539, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,540, END IF;
WS_MON_JOB_CHECK,FUNCTION,541, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,542, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,543, END IF;
WS_MON_JOB_CHECK,FUNCTION,544, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,545, END IF;
WS_MON_JOB_CHECK,FUNCTION,546, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,547, -- Check if a finish warning notify required
WS_MON_JOB_CHECK,FUNCTION,548, -- and we have not done an error notification
WS_MON_JOB_CHECK,FUNCTION,549, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,550, IF NVL(v_MonRec.wmj_fin_warn_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,551, AND v_warn_count > NVL(v_MonRec.wmj_fin_warn_count,0)
WS_MON_JOB_CHECK,FUNCTION,552, AND v_notify = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,553, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,554, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,555, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,556, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,557, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,558, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,559, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,560, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,561, END IF;
WS_MON_JOB_CHECK,FUNCTION,562, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,563, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,564, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,565, ELSE
WS_MON_JOB_CHECK,FUNCTION,566, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,567, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,568, END IF;
WS_MON_JOB_CHECK,FUNCTION,569, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,570, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,571, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,572,
WS_MON_JOB_CHECK,FUNCTION,573,
WS_MON_JOB_CHECK,FUNCTION,574, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH_WARNING'
WS_MON_JOB_CHECK,FUNCTION,575, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,576, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,577, v_MsgText := 'Notification of finish with warnings Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,578, ' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,579, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,580, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,581, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,582, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,583, VALUES
WS_MON_JOB_CHECK,FUNCTION,584, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,585, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,586, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,587, END IF;
WS_MON_JOB_CHECK,FUNCTION,588, ELSE
WS_MON_JOB_CHECK,FUNCTION,589, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,590, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,591, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,592, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,593, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,594, wmn_notify_type = 'FINISH_WARNING',
WS_MON_JOB_CHECK,FUNCTION,595, wmn_script_key = v_MonRec.wmj_fin_warn_script_key,
WS_MON_JOB_CHECK,FUNCTION,596, wmn_parameter = v_MonRec.wmj_fin_warn_param
WS_MON_JOB_CHECK,FUNCTION,597, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,598,
WS_MON_JOB_CHECK,FUNCTION,599, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,600, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,601, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,602, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,603, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,604, VALUES
WS_MON_JOB_CHECK,FUNCTION,605, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,606, v_MonRec.wmj_job_name, 'FINISH_WARNING', v_MonRec.wmj_fin_warn_script_key,
WS_MON_JOB_CHECK,FUNCTION,607, v_MonRec.wmj_fin_warn_param);
WS_MON_JOB_CHECK,FUNCTION,608, END IF;
WS_MON_JOB_CHECK,FUNCTION,609, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,610, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,611, v_MsgText := 'Notification of finish with warnings. '||
WS_MON_JOB_CHECK,FUNCTION,612, v_warn_count||' warnings produced.';
WS_MON_JOB_CHECK,FUNCTION,613, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,614, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,615, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,616, VALUES
WS_MON_JOB_CHECK,FUNCTION,617, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,618, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,619, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,620, END IF;
WS_MON_JOB_CHECK,FUNCTION,621, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,622, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,623, END IF;
WS_MON_JOB_CHECK,FUNCTION,624, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,625, END IF;
WS_MON_JOB_CHECK,FUNCTION,626, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,627, -- Check if a finish okay notify required
WS_MON_JOB_CHECK,FUNCTION,628, -- and we havent had a finish error or warning notification
WS_MON_JOB_CHECK,FUNCTION,629, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,630, IF NVL(v_MonRec.wmj_fin_ok_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,631, AND v_finish_status = 'C'
WS_MON_JOB_CHECK,FUNCTION,632, AND v_notify = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,633, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,634, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,635, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,636, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,637, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,638, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,639, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,640, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,641, END IF;
WS_MON_JOB_CHECK,FUNCTION,642, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,643, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,644, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,645, ELSE
WS_MON_JOB_CHECK,FUNCTION,646, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,647, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,648, END IF;
WS_MON_JOB_CHECK,FUNCTION,649, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,650, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,651, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,652,
WS_MON_JOB_CHECK,FUNCTION,653,
WS_MON_JOB_CHECK,FUNCTION,654, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH_OKAY'
WS_MON_JOB_CHECK,FUNCTION,655, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,656, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,657, v_MsgText := 'Notification of finish okay Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,658, ' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,659, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,660, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,661, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,662, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,663, VALUES
WS_MON_JOB_CHECK,FUNCTION,664, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,665, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,666, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,667, END IF;
WS_MON_JOB_CHECK,FUNCTION,668, ELSE
WS_MON_JOB_CHECK,FUNCTION,669, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,670, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,671, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,672, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,673, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,674, wmn_notify_type = 'FINISH_OKAY',
WS_MON_JOB_CHECK,FUNCTION,675, wmn_script_key = v_MonRec.wmj_fin_ok_script_key,
WS_MON_JOB_CHECK,FUNCTION,676, wmn_parameter = v_MonRec.wmj_fin_ok_param
WS_MON_JOB_CHECK,FUNCTION,677, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,678,
WS_MON_JOB_CHECK,FUNCTION,679, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,680, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,681, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,682, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,683, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,684, VALUES
WS_MON_JOB_CHECK,FUNCTION,685, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,686, v_MonRec.wmj_job_name, 'FINISH_OKAY', v_MonRec.wmj_fin_ok_script_key,
WS_MON_JOB_CHECK,FUNCTION,687, v_MonRec.wmj_fin_ok_param);
WS_MON_JOB_CHECK,FUNCTION,688, END IF;
WS_MON_JOB_CHECK,FUNCTION,689, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,690, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,691, v_MsgText := 'Notification of finish okay.';
WS_MON_JOB_CHECK,FUNCTION,692, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,693, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,694, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,695, VALUES
WS_MON_JOB_CHECK,FUNCTION,696, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,697, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,698, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,699, END IF;
WS_MON_JOB_CHECK,FUNCTION,700, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,701, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,702, END IF;
WS_MON_JOB_CHECK,FUNCTION,703, END IF;
WS_MON_JOB_CHECK,FUNCTION,704,
WS_MON_JOB_CHECK,FUNCTION,705,
WS_MON_JOB_CHECK,FUNCTION,706, ELSE -- check skipped last job too far back
WS_MON_JOB_CHECK,FUNCTION,707, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,708, v_MsgText := 'Finish status check skipped. Current time '||
WS_MON_JOB_CHECK,FUNCTION,709, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,710, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,711, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is more than look back of '||
WS_MON_JOB_CHECK,FUNCTION,712, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,713, ' or this job ran before the latest iteration';
WS_MON_JOB_CHECK,FUNCTION,714, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,715, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,716, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,717, VALUES
WS_MON_JOB_CHECK,FUNCTION,718, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,719, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,720, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,721, END IF;
WS_MON_JOB_CHECK,FUNCTION,722,
WS_MON_JOB_CHECK,FUNCTION,723, END IF; -- End of skip check test
WS_MON_JOB_CHECK,FUNCTION,724,
WS_MON_JOB_CHECK,FUNCTION,725, ELSE -- no completed jobs so skip the test. Log if level 9
WS_MON_JOB_CHECK,FUNCTION,726, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,727, v_MsgText := 'Finish status check found no completed or failed jobs.'||
WS_MON_JOB_CHECK,FUNCTION,728, ' The current time is '||
WS_MON_JOB_CHECK,FUNCTION,729, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,730, ' All Okay.';
WS_MON_JOB_CHECK,FUNCTION,731, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,732, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,733, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,734, VALUES
WS_MON_JOB_CHECK,FUNCTION,735, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,736, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,737, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,738, END IF;
WS_MON_JOB_CHECK,FUNCTION,739, END IF; -- end of have a completed job to test
WS_MON_JOB_CHECK,FUNCTION,740,
WS_MON_JOB_CHECK,FUNCTION,741,
WS_MON_JOB_CHECK,FUNCTION,742,
WS_MON_JOB_CHECK,FUNCTION,743,
WS_MON_JOB_CHECK,FUNCTION,744, END IF; -- END of FINISH STATUS CHECKS
WS_MON_JOB_CHECK,FUNCTION,745,
WS_MON_JOB_CHECK,FUNCTION,746,
WS_MON_JOB_CHECK,FUNCTION,747,
WS_MON_JOB_CHECK,FUNCTION,748,
WS_MON_JOB_CHECK,FUNCTION,749, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,750, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,751, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,752, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,753, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,754, -- F I N I S H B Y
WS_MON_JOB_CHECK,FUNCTION,755, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,756, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,757, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,758, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,759, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,760, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,761, -- If FINISH time check is active check that the job
WS_MON_JOB_CHECK,FUNCTION,762, -- finished on time today.
WS_MON_JOB_CHECK,FUNCTION,763, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,764, IF NVL(v_MonRec.wmj_finish_active,'N') = 'Y' AND v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,765, v_step := 300;
WS_MON_JOB_CHECK,FUNCTION,766, v_finish_mm := v_MonRec.wmj_nominal_mm + v_MonRec.wmj_finish_elapsed;
WS_MON_JOB_CHECK,FUNCTION,767, v_finish_hh := v_MonRec.wmj_nominal_hh;
WS_MON_JOB_CHECK,FUNCTION,768, WHILE v_finish_mm >= 60 LOOP
WS_MON_JOB_CHECK,FUNCTION,769, v_finish_hh := v_finish_hh + 1;
WS_MON_JOB_CHECK,FUNCTION,770, v_finish_mm := v_finish_mm - 60;
WS_MON_JOB_CHECK,FUNCTION,771, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,772, WHILE v_finish_hh > 23 LOOP
WS_MON_JOB_CHECK,FUNCTION,773, v_finish_hh := v_finish_hh - 24;
WS_MON_JOB_CHECK,FUNCTION,774, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,775,
WS_MON_JOB_CHECK,FUNCTION,776, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,777, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,778, -- last must start by time and the next must start by time
WS_MON_JOB_CHECK,FUNCTION,779, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,780, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,781, IF v_check_hh > v_finish_hh
WS_MON_JOB_CHECK,FUNCTION,782, OR ( v_check_hh = v_finish_hh
WS_MON_JOB_CHECK,FUNCTION,783, AND v_check_mm > v_finish_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,784, -- ahead of the check finish time
WS_MON_JOB_CHECK,FUNCTION,785, -- get the last start time (same day)
WS_MON_JOB_CHECK,FUNCTION,786, v_hh_last := v_check_hh - v_finish_hh;
WS_MON_JOB_CHECK,FUNCTION,787, v_mm_last := v_check_mm - v_finish_mm;
WS_MON_JOB_CHECK,FUNCTION,788, IF v_mm_last < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,789, v_mm_last := v_mm_last + 60;
WS_MON_JOB_CHECK,FUNCTION,790, v_hh_last := v_hh_last - 1;
WS_MON_JOB_CHECK,FUNCTION,791, END IF;
WS_MON_JOB_CHECK,FUNCTION,792, -- get the next finish time (next day)
WS_MON_JOB_CHECK,FUNCTION,793, v_hh_next := 23 - v_hh_last;
WS_MON_JOB_CHECK,FUNCTION,794, v_mm_next := 60 - v_mm_last;
WS_MON_JOB_CHECK,FUNCTION,795, IF v_mm_next = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,796, v_mm_next := 0;
WS_MON_JOB_CHECK,FUNCTION,797, v_hh_next := v_hh_next + 1;
WS_MON_JOB_CHECK,FUNCTION,798, END If;
WS_MON_JOB_CHECK,FUNCTION,799, ELSE
WS_MON_JOB_CHECK,FUNCTION,800, -- before the check finish time
WS_MON_JOB_CHECK,FUNCTION,801, -- get the next start time (same day)
WS_MON_JOB_CHECK,FUNCTION,802, v_hh_next := v_finish_hh - v_check_hh;
WS_MON_JOB_CHECK,FUNCTION,803, v_mm_next := v_finish_mm - v_check_mm;
WS_MON_JOB_CHECK,FUNCTION,804, IF v_mm_next < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,805, v_mm_next := v_mm_next + 60;
WS_MON_JOB_CHECK,FUNCTION,806, v_hh_next := v_hh_next - 1;
WS_MON_JOB_CHECK,FUNCTION,807, END IF;
WS_MON_JOB_CHECK,FUNCTION,808, -- get the last finish time (previous day)
WS_MON_JOB_CHECK,FUNCTION,809, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,810, v_hh_last := 23 - v_hh_next;
WS_MON_JOB_CHECK,FUNCTION,811, v_mm_last := 60 - v_mm_next;
WS_MON_JOB_CHECK,FUNCTION,812, IF v_mm_last = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,813, v_mm_last := 0;
WS_MON_JOB_CHECK,FUNCTION,814, v_hh_last := v_hh_last + 1;
WS_MON_JOB_CHECK,FUNCTION,815, END IF;
WS_MON_JOB_CHECK,FUNCTION,816,
WS_MON_JOB_CHECK,FUNCTION,817, END IF;
WS_MON_JOB_CHECK,FUNCTION,818,
WS_MON_JOB_CHECK,FUNCTION,819, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,820, -- See if we are within our check range
WS_MON_JOB_CHECK,FUNCTION,821, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,822, v_hh_diff := v_hh_last - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,823, v_mm_diff := v_mm_last - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,824, IF v_mm_diff < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,825, v_hh_diff := v_hh_diff - 1;
WS_MON_JOB_CHECK,FUNCTION,826, v_mm_diff := v_mm_diff + 60;
WS_MON_JOB_CHECK,FUNCTION,827, END IF;
WS_MON_JOB_CHECK,FUNCTION,828, IF v_hh_diff > 0
WS_MON_JOB_CHECK,FUNCTION,829, OR ( v_hh_diff = 0
WS_MON_JOB_CHECK,FUNCTION,830, AND v_mm_diff > 0 ) THEN
WS_MON_JOB_CHECK,FUNCTION,831, v_skip_check := 1;
WS_MON_JOB_CHECK,FUNCTION,832, ELSE
WS_MON_JOB_CHECK,FUNCTION,833, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,834, END IF;
WS_MON_JOB_CHECK,FUNCTION,835,
WS_MON_JOB_CHECK,FUNCTION,836, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,837, -- work out the required start date
WS_MON_JOB_CHECK,FUNCTION,838, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,839, v_work := to_number(to_char(v_check_date-v_prev_day,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,840, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,841, v_work := v_work + ( v_finish_hh * 100 );
WS_MON_JOB_CHECK,FUNCTION,842, v_work := v_work + v_finish_mm;
WS_MON_JOB_CHECK,FUNCTION,843, v_finish_date := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,844,
WS_MON_JOB_CHECK,FUNCTION,845, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,846, -- If we have a check to do then perform it.
WS_MON_JOB_CHECK,FUNCTION,847, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,848, IF v_skip_check = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,849, v_step := 400;
WS_MON_JOB_CHECK,FUNCTION,850, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,851, -- Log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,852, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,853, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,854, v_MsgText := 'Must finish by check actioned. Current time '||
WS_MON_JOB_CHECK,FUNCTION,855, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,856, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,857, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is less than look back of '||
WS_MON_JOB_CHECK,FUNCTION,858, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,859, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,860, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,861, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,862, VALUES
WS_MON_JOB_CHECK,FUNCTION,863, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,864, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,865, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,866, END IF;
WS_MON_JOB_CHECK,FUNCTION,867,
WS_MON_JOB_CHECK,FUNCTION,868, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,869, -- If we are running then check the finish time to ensure
WS_MON_JOB_CHECK,FUNCTION,870, -- we havent been running for more than 24 hours.
WS_MON_JOB_CHECK,FUNCTION,871, -- Also check we havent gone past the finish time.
WS_MON_JOB_CHECK,FUNCTION,872, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,873, IF v_running = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,874, v_step := 500;
WS_MON_JOB_CHECK,FUNCTION,875, -- been running since before the absolute start time
WS_MON_JOB_CHECK,FUNCTION,876, IF v_RunRec.wjr_started < v_abs_start THEN
WS_MON_JOB_CHECK,FUNCTION,877,
WS_MON_JOB_CHECK,FUNCTION,878, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,879, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,880, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,881, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,882, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,883, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,884, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,885, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,886, END IF;
WS_MON_JOB_CHECK,FUNCTION,887, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,888, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,889, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,890, ELSE
WS_MON_JOB_CHECK,FUNCTION,891, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,892, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,893, END IF;
WS_MON_JOB_CHECK,FUNCTION,894, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,895, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,896, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,897,
WS_MON_JOB_CHECK,FUNCTION,898,
WS_MON_JOB_CHECK,FUNCTION,899, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH'
WS_MON_JOB_CHECK,FUNCTION,900, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,901, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,902, v_MsgText := 'Notification for failure to finish on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,903, ' Job still running previous iteration.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,904, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,905, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,906, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,907, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,908, VALUES
WS_MON_JOB_CHECK,FUNCTION,909, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,910, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,911, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,912, END IF;
WS_MON_JOB_CHECK,FUNCTION,913, ELSE
WS_MON_JOB_CHECK,FUNCTION,914, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,915, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,916, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,917, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,918, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,919, wmn_notify_type = 'FINISH',
WS_MON_JOB_CHECK,FUNCTION,920, wmn_script_key = v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,921, wmn_parameter = v_MonRec.wmj_finish_param
WS_MON_JOB_CHECK,FUNCTION,922, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,923,
WS_MON_JOB_CHECK,FUNCTION,924, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,925, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,926, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,927, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,928, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,929, VALUES
WS_MON_JOB_CHECK,FUNCTION,930, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,931, v_MonRec.wmj_job_name, 'FINISH', v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,932, v_MonRec.wmj_finish_param);
WS_MON_JOB_CHECK,FUNCTION,933, END IF;
WS_MON_JOB_CHECK,FUNCTION,934, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,935, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,936, v_MsgText := 'Notification for failure to finish on time.'||
WS_MON_JOB_CHECK,FUNCTION,937, ' Job still running previous iteration.';
WS_MON_JOB_CHECK,FUNCTION,938, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,939, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,940, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,941, VALUES
WS_MON_JOB_CHECK,FUNCTION,942, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,943, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,944, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,945, END IF;
WS_MON_JOB_CHECK,FUNCTION,946, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,947, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,948, END IF;
WS_MON_JOB_CHECK,FUNCTION,949, -- Running for less than 24 hours.
WS_MON_JOB_CHECK,FUNCTION,950, -- See if we have gone past our required finish time.
WS_MON_JOB_CHECK,FUNCTION,951, ELSE
WS_MON_JOB_CHECK,FUNCTION,952, -- past the required finish by time so notify
WS_MON_JOB_CHECK,FUNCTION,953, IF v_check_date > v_finish_date THEN
WS_MON_JOB_CHECK,FUNCTION,954, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,955, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,956, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,957, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,958, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,959, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,960, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,961, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,962, END IF;
WS_MON_JOB_CHECK,FUNCTION,963, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,964, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,965, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,966, ELSE
WS_MON_JOB_CHECK,FUNCTION,967, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,968, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,969, END IF;
WS_MON_JOB_CHECK,FUNCTION,970, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,971, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,972, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,973,
WS_MON_JOB_CHECK,FUNCTION,974,
WS_MON_JOB_CHECK,FUNCTION,975, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH'
WS_MON_JOB_CHECK,FUNCTION,976, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,977, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,978, v_MsgText := 'Notification for failure to finish on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,979, ' No running job.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,980, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,981, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,982, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,983, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,984, VALUES
WS_MON_JOB_CHECK,FUNCTION,985, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,986, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,987, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,988, END IF;
WS_MON_JOB_CHECK,FUNCTION,989, ELSE
WS_MON_JOB_CHECK,FUNCTION,990, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,991, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,992, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,993, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,994, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,995, wmn_notify_type = 'FINISH',
WS_MON_JOB_CHECK,FUNCTION,996, wmn_script_key = v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,997, wmn_parameter = v_MonRec.wmj_finish_param
WS_MON_JOB_CHECK,FUNCTION,998, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,999,
WS_MON_JOB_CHECK,FUNCTION,1000, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1001, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1002, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1003, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1004, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1005, VALUES
WS_MON_JOB_CHECK,FUNCTION,1006, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1007, v_MonRec.wmj_job_name, 'FINISH', v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1008, v_MonRec.wmj_finish_param);
WS_MON_JOB_CHECK,FUNCTION,1009, END IF;
WS_MON_JOB_CHECK,FUNCTION,1010, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1011, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1012, v_MsgText := 'Notification for failure to finish on time.'||
WS_MON_JOB_CHECK,FUNCTION,1013, ' Running job, not completed on time. Started '||
WS_MON_JOB_CHECK,FUNCTION,1014, to_char(v_RunRec.wjr_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,1015, ' and completion required by '||
WS_MON_JOB_CHECK,FUNCTION,1016, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||'. Current time '||
WS_MON_JOB_CHECK,FUNCTION,1017, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'.';
WS_MON_JOB_CHECK,FUNCTION,1018, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1019, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1020, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1021, VALUES
WS_MON_JOB_CHECK,FUNCTION,1022, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1023, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1024, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1025, END IF;
WS_MON_JOB_CHECK,FUNCTION,1026, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1027, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1028, END IF;
WS_MON_JOB_CHECK,FUNCTION,1029,
WS_MON_JOB_CHECK,FUNCTION,1030, -- running but not past the required finish by time yet. so OKAY.
WS_MON_JOB_CHECK,FUNCTION,1031, ELSE
WS_MON_JOB_CHECK,FUNCTION,1032, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1033, v_MsgText := 'Must finish by check found running job. The current time is '||
WS_MON_JOB_CHECK,FUNCTION,1034, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,1035, ' which is before the required finish time of '||
WS_MON_JOB_CHECK,FUNCTION,1036, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,1037, '. Job started at '||to_char(v_RunRec.wjr_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,1038, ' which is after the minimum start of '||
WS_MON_JOB_CHECK,FUNCTION,1039, LPAD(v_abs_hh,2,'0')||':'||LPAD(v_abs_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,1040, ' All Okay.';
WS_MON_JOB_CHECK,FUNCTION,1041, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1042, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1043, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1044, VALUES
WS_MON_JOB_CHECK,FUNCTION,1045, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1046, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1047, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1048, END IF;
WS_MON_JOB_CHECK,FUNCTION,1049, END IF;
WS_MON_JOB_CHECK,FUNCTION,1050, END IF;
WS_MON_JOB_CHECK,FUNCTION,1051, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1052, -- If not running then if we have a completed entry
WS_MON_JOB_CHECK,FUNCTION,1053, -- check to see if it completed on time.
WS_MON_JOB_CHECK,FUNCTION,1054, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1055, ELSIF v_completed = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,1056, -- completed after the required finish time so notify
WS_MON_JOB_CHECK,FUNCTION,1057, IF v_LogRec.wjl_completed > v_finish_date THEN
WS_MON_JOB_CHECK,FUNCTION,1058, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1059, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1060, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1061, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1062, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1063, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1064, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1065, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1066, END IF;
WS_MON_JOB_CHECK,FUNCTION,1067, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1068, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1069, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1070, ELSE
WS_MON_JOB_CHECK,FUNCTION,1071, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1072, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1073, END IF;
WS_MON_JOB_CHECK,FUNCTION,1074, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1075, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1076, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1077,
WS_MON_JOB_CHECK,FUNCTION,1078,
WS_MON_JOB_CHECK,FUNCTION,1079, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH'
WS_MON_JOB_CHECK,FUNCTION,1080, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,1081, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,1082, v_MsgText := 'Notification for failure to finish on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,1083, ' Job finished late.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,1084, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,1085, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1086, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1087, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1088, VALUES
WS_MON_JOB_CHECK,FUNCTION,1089, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1090, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1091, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1092, END IF;
WS_MON_JOB_CHECK,FUNCTION,1093, ELSE
WS_MON_JOB_CHECK,FUNCTION,1094, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,1095, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,1096, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,1097, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1098, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,1099, wmn_notify_type = 'FINISH',
WS_MON_JOB_CHECK,FUNCTION,1100, wmn_script_key = v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1101, wmn_parameter = v_MonRec.wmj_finish_param
WS_MON_JOB_CHECK,FUNCTION,1102, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,1103,
WS_MON_JOB_CHECK,FUNCTION,1104, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1105, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1106, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1107, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1108, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1109, VALUES
WS_MON_JOB_CHECK,FUNCTION,1110, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1111, v_MonRec.wmj_job_name, 'FINISH', v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1112, v_MonRec.wmj_finish_param);
WS_MON_JOB_CHECK,FUNCTION,1113, END IF;
WS_MON_JOB_CHECK,FUNCTION,1114, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1115, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1116, v_MsgText := 'Notification for failure to finish on time.'||
WS_MON_JOB_CHECK,FUNCTION,1117, ' Job completed after required finish time. Started '||
WS_MON_JOB_CHECK,FUNCTION,1118, to_char(v_LogRec.wjl_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,1119, ' and completed '||
WS_MON_JOB_CHECK,FUNCTION,1120, to_char(v_LogRec.wjl_completed,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,1121, '. required finish time was '||
WS_MON_JOB_CHECK,FUNCTION,1122, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||'.';
WS_MON_JOB_CHECK,FUNCTION,1123, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1124, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1125, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1126, VALUES
WS_MON_JOB_CHECK,FUNCTION,1127, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1128, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1129, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1130, END IF;
WS_MON_JOB_CHECK,FUNCTION,1131, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1132, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1133, END IF;
WS_MON_JOB_CHECK,FUNCTION,1134,
WS_MON_JOB_CHECK,FUNCTION,1135, ELSE -- completed in time
WS_MON_JOB_CHECK,FUNCTION,1136, v_step := 600;
WS_MON_JOB_CHECK,FUNCTION,1137, -- check that we are not a previous iteration
WS_MON_JOB_CHECK,FUNCTION,1138, IF v_LogRec.wjl_started < v_abs_start THEN
WS_MON_JOB_CHECK,FUNCTION,1139, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1140, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1141, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1142, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1143, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1144, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1145, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1146, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1147, END IF;
WS_MON_JOB_CHECK,FUNCTION,1148, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1149, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1150, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1151, ELSE
WS_MON_JOB_CHECK,FUNCTION,1152, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1153, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1154, END IF;
WS_MON_JOB_CHECK,FUNCTION,1155, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1156, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1157, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1158,
WS_MON_JOB_CHECK,FUNCTION,1159,
WS_MON_JOB_CHECK,FUNCTION,1160, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH'
WS_MON_JOB_CHECK,FUNCTION,1161, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,1162, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,1163, v_MsgText := 'Notification for failure to finish on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,1164, ' Not started.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,1165, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,1166, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1167, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1168, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1169, VALUES
WS_MON_JOB_CHECK,FUNCTION,1170, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1171, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1172, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1173, END IF;
WS_MON_JOB_CHECK,FUNCTION,1174, ELSE
WS_MON_JOB_CHECK,FUNCTION,1175, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,1176, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,1177, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,1178, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1179, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,1180, wmn_notify_type = 'FINISH',
WS_MON_JOB_CHECK,FUNCTION,1181, wmn_script_key = v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1182, wmn_parameter = v_MonRec.wmj_finish_param
WS_MON_JOB_CHECK,FUNCTION,1183, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,1184,
WS_MON_JOB_CHECK,FUNCTION,1185, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1186, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1187, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1188, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1189, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1190, VALUES
WS_MON_JOB_CHECK,FUNCTION,1191, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1192, v_MonRec.wmj_job_name, 'FINISH', v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1193, v_MonRec.wmj_finish_param);
WS_MON_JOB_CHECK,FUNCTION,1194, END IF;
WS_MON_JOB_CHECK,FUNCTION,1195, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1196, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1197, v_MsgText := 'Notification for failure to finish on time.'||
WS_MON_JOB_CHECK,FUNCTION,1198, ' Job not started, no running jobs. Last known finish was '||
WS_MON_JOB_CHECK,FUNCTION,1199, to_char(v_LogRec.wjl_completed,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,1200, '.';
WS_MON_JOB_CHECK,FUNCTION,1201, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1202, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1203, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1204, VALUES
WS_MON_JOB_CHECK,FUNCTION,1205, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1206, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1207, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1208, END IF;
WS_MON_JOB_CHECK,FUNCTION,1209, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1210, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1211, END IF; -- end of notify request not run today
WS_MON_JOB_CHECK,FUNCTION,1212, ELSE -- completed on time today
WS_MON_JOB_CHECK,FUNCTION,1213, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1214, v_MsgText := 'Must finish by check found completed job. Current time is '||
WS_MON_JOB_CHECK,FUNCTION,1215, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,1216, '. Job finished at '||to_char(v_LogRec.wjl_completed,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,1217, ' which is before the required finish time of '||
WS_MON_JOB_CHECK,FUNCTION,1218, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,1219, ' All Okay.';
WS_MON_JOB_CHECK,FUNCTION,1220, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1221, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1222, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1223, VALUES
WS_MON_JOB_CHECK,FUNCTION,1224, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1225, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1226, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1227, END IF;
WS_MON_JOB_CHECK,FUNCTION,1228, END IF; -- end of completed on time, but was it today check.
WS_MON_JOB_CHECK,FUNCTION,1229, END IF; -- end of completed job found
WS_MON_JOB_CHECK,FUNCTION,1230, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1231, -- Not running and no completed entries therefore
WS_MON_JOB_CHECK,FUNCTION,1232, -- we havent started so notify of a problem
WS_MON_JOB_CHECK,FUNCTION,1233, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1234, ELSE
WS_MON_JOB_CHECK,FUNCTION,1235, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1236, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1237, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1238, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1239, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1240, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1241, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1242, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1243, END IF;
WS_MON_JOB_CHECK,FUNCTION,1244, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1245, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1246, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1247, ELSE
WS_MON_JOB_CHECK,FUNCTION,1248, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1249, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1250, END IF;
WS_MON_JOB_CHECK,FUNCTION,1251, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1252, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1253, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1254,
WS_MON_JOB_CHECK,FUNCTION,1255,
WS_MON_JOB_CHECK,FUNCTION,1256, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'FINISH'
WS_MON_JOB_CHECK,FUNCTION,1257, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,1258, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,1259, v_MsgText := 'Notification for failure to finish on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,1260, ' No running or completed jobs.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,1261, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,1262, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1263, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1264, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1265, VALUES
WS_MON_JOB_CHECK,FUNCTION,1266, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1267, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1268, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1269, END IF;
WS_MON_JOB_CHECK,FUNCTION,1270, ELSE
WS_MON_JOB_CHECK,FUNCTION,1271, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,1272, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,1273, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,1274, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1275, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,1276, wmn_notify_type = 'FINISH',
WS_MON_JOB_CHECK,FUNCTION,1277, wmn_script_key = v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1278, wmn_parameter = v_MonRec.wmj_finish_param
WS_MON_JOB_CHECK,FUNCTION,1279, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,1280,
WS_MON_JOB_CHECK,FUNCTION,1281, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1282, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1283, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1284, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1285, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1286, VALUES
WS_MON_JOB_CHECK,FUNCTION,1287, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1288, v_MonRec.wmj_job_name, 'FINISH', v_MonRec.wmj_finish_script_key,
WS_MON_JOB_CHECK,FUNCTION,1289, v_MonRec.wmj_finish_param);
WS_MON_JOB_CHECK,FUNCTION,1290, END IF;
WS_MON_JOB_CHECK,FUNCTION,1291, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1292, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1293, v_MsgText := 'Notification for failure to finish on time. No Running or completed jobs';
WS_MON_JOB_CHECK,FUNCTION,1294, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1295, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1296, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1297, VALUES
WS_MON_JOB_CHECK,FUNCTION,1298, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1299, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1300, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1301, END IF;
WS_MON_JOB_CHECK,FUNCTION,1302, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1303, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1304, END IF;
WS_MON_JOB_CHECK,FUNCTION,1305, END IF;
WS_MON_JOB_CHECK,FUNCTION,1306,
WS_MON_JOB_CHECK,FUNCTION,1307,
WS_MON_JOB_CHECK,FUNCTION,1308,
WS_MON_JOB_CHECK,FUNCTION,1309, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1310, -- If Skipping the check log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,1311, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1312, ELSE
WS_MON_JOB_CHECK,FUNCTION,1313, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1314, v_MsgText := 'Must finish by check skipped. Current time '||
WS_MON_JOB_CHECK,FUNCTION,1315, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,1316, LPAD(v_finish_hh,2,'0')||':'||LPAD(v_finish_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,1317, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is more than look back of '||
WS_MON_JOB_CHECK,FUNCTION,1318, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,1319, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1320, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1321, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1322, VALUES
WS_MON_JOB_CHECK,FUNCTION,1323, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1324, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1325, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1326, END IF;
WS_MON_JOB_CHECK,FUNCTION,1327, END IF;
WS_MON_JOB_CHECK,FUNCTION,1328,
WS_MON_JOB_CHECK,FUNCTION,1329,
WS_MON_JOB_CHECK,FUNCTION,1330, END IF; -- End of FINISH BY check
WS_MON_JOB_CHECK,FUNCTION,1331,
WS_MON_JOB_CHECK,FUNCTION,1332, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1333, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1334, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1335, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1336, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1337, -- R U N S T A T U S C H E C K S
WS_MON_JOB_CHECK,FUNCTION,1338, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1339, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1340, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1341, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1342, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1343, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1344, -- If RUN status checks are active check the jobs
WS_MON_JOB_CHECK,FUNCTION,1345, -- run status.
WS_MON_JOB_CHECK,FUNCTION,1346, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1347, IF v_valid = 1
WS_MON_JOB_CHECK,FUNCTION,1348, AND ( NVL(v_MonRec.wmj_run_warn_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1349, OR NVL(v_MonRec.wmj_run_err_active,'N') = 'Y' ) THEN
WS_MON_JOB_CHECK,FUNCTION,1350, v_step := 700;
WS_MON_JOB_CHECK,FUNCTION,1351,
WS_MON_JOB_CHECK,FUNCTION,1352, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1353, -- If we have a completed job or a running job that
WS_MON_JOB_CHECK,FUNCTION,1354, -- has failed, we will check the lookback time.
WS_MON_JOB_CHECK,FUNCTION,1355, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1356, IF v_running = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,1357,
WS_MON_JOB_CHECK,FUNCTION,1358, v_start_date := v_RunRec.wjr_started;
WS_MON_JOB_CHECK,FUNCTION,1359, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1360, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1361, -- Make sure that this is the current job.
WS_MON_JOB_CHECK,FUNCTION,1362, -- If not the current job then do not report it
WS_MON_JOB_CHECK,FUNCTION,1363, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1364,-- IF v_start_date < v_abs_start THEN
WS_MON_JOB_CHECK,FUNCTION,1365,-- v_skip_check := 1; -- not the latest job so skip it
WS_MON_JOB_CHECK,FUNCTION,1366,-- END IF; -- end of check that we are looking at the latest job
WS_MON_JOB_CHECK,FUNCTION,1367,
WS_MON_JOB_CHECK,FUNCTION,1368, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1369, -- If we have a check to do then perform it.
WS_MON_JOB_CHECK,FUNCTION,1370, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1371, IF v_skip_check = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1372, v_step := 800;
WS_MON_JOB_CHECK,FUNCTION,1373, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1374, -- Log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,1375, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1376, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1377, v_MsgText := 'Run status check actioned. Current time '||
WS_MON_JOB_CHECK,FUNCTION,1378, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,1379, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1380, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1381, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1382, VALUES
WS_MON_JOB_CHECK,FUNCTION,1383, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1384, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1385, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1386, END IF;
WS_MON_JOB_CHECK,FUNCTION,1387,
WS_MON_JOB_CHECK,FUNCTION,1388, v_warn_count := v_RunRec.wjr_warning_count;
WS_MON_JOB_CHECK,FUNCTION,1389, v_error_count := v_RunRec.wjr_error_count;
WS_MON_JOB_CHECK,FUNCTION,1390,
WS_MON_JOB_CHECK,FUNCTION,1391, v_notify := 0;
WS_MON_JOB_CHECK,FUNCTION,1392, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1393, -- Check if a run error notify required
WS_MON_JOB_CHECK,FUNCTION,1394, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1395, IF NVL(v_MonRec.wmj_run_err_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1396, AND v_error_count > NVL(v_MonRec.wmj_run_err_count,0) THEN
WS_MON_JOB_CHECK,FUNCTION,1397, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1398, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1399, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1400, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1401, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1402, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1403, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1404, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1405, END IF;
WS_MON_JOB_CHECK,FUNCTION,1406, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1407, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1408, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1409, ELSE
WS_MON_JOB_CHECK,FUNCTION,1410, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1411, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1412, END IF;
WS_MON_JOB_CHECK,FUNCTION,1413, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1414, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1415, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1416,
WS_MON_JOB_CHECK,FUNCTION,1417,
WS_MON_JOB_CHECK,FUNCTION,1418, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'RUN_ERROR'
WS_MON_JOB_CHECK,FUNCTION,1419, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,1420, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,1421, v_MsgText := 'Notification of error during run Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,1422, ' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,1423, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,1424, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1425, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1426, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1427, VALUES
WS_MON_JOB_CHECK,FUNCTION,1428, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1429, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1430, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1431, END IF;
WS_MON_JOB_CHECK,FUNCTION,1432, ELSE
WS_MON_JOB_CHECK,FUNCTION,1433, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,1434, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,1435, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,1436, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1437, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,1438, wmn_notify_type = 'RUN_ERROR',
WS_MON_JOB_CHECK,FUNCTION,1439, wmn_script_key = v_MonRec.wmj_run_err_script_key,
WS_MON_JOB_CHECK,FUNCTION,1440, wmn_parameter = v_MonRec.wmj_run_err_param
WS_MON_JOB_CHECK,FUNCTION,1441, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,1442,
WS_MON_JOB_CHECK,FUNCTION,1443, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1444, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1445, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1446, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1447, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1448, VALUES
WS_MON_JOB_CHECK,FUNCTION,1449, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1450, v_MonRec.wmj_job_name, 'RUN_ERROR', v_MonRec.wmj_run_err_script_key,
WS_MON_JOB_CHECK,FUNCTION,1451, v_MonRec.wmj_run_err_param);
WS_MON_JOB_CHECK,FUNCTION,1452, END IF;
WS_MON_JOB_CHECK,FUNCTION,1453, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1454, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1455, v_MsgText := 'Notification of errors while running. '||
WS_MON_JOB_CHECK,FUNCTION,1456, v_error_count||' errors detected.';
WS_MON_JOB_CHECK,FUNCTION,1457, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1458, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1459, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1460, VALUES
WS_MON_JOB_CHECK,FUNCTION,1461, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1462, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1463, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1464, END IF;
WS_MON_JOB_CHECK,FUNCTION,1465, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1466, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1467, END IF;
WS_MON_JOB_CHECK,FUNCTION,1468, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1469, END IF;
WS_MON_JOB_CHECK,FUNCTION,1470,
WS_MON_JOB_CHECK,FUNCTION,1471, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1472, -- Check if a run warning notify required
WS_MON_JOB_CHECK,FUNCTION,1473, -- and we have not done an error notification
WS_MON_JOB_CHECK,FUNCTION,1474, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1475, IF NVL(v_MonRec.wmj_run_warn_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1476, AND v_warn_count > NVL(v_MonRec.wmj_run_warn_count,0)
WS_MON_JOB_CHECK,FUNCTION,1477, AND v_notify = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1478, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1479, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1480, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1481, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1482, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1483, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1484, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1485, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1486, END IF;
WS_MON_JOB_CHECK,FUNCTION,1487, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1488, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1489, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1490, ELSE
WS_MON_JOB_CHECK,FUNCTION,1491, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1492, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1493, END IF;
WS_MON_JOB_CHECK,FUNCTION,1494, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1495, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1496, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1497,
WS_MON_JOB_CHECK,FUNCTION,1498,
WS_MON_JOB_CHECK,FUNCTION,1499, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'RUN_WARNING'
WS_MON_JOB_CHECK,FUNCTION,1500, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,1501, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,1502, v_MsgText := 'Notification of running with warnings Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,1503, ' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,1504, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,1505, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1506, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1507, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1508, VALUES
WS_MON_JOB_CHECK,FUNCTION,1509, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1510, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1511, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1512, END IF;
WS_MON_JOB_CHECK,FUNCTION,1513, ELSE
WS_MON_JOB_CHECK,FUNCTION,1514, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,1515, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,1516, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,1517, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1518, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,1519, wmn_notify_type = 'RUN_WARNING',
WS_MON_JOB_CHECK,FUNCTION,1520, wmn_script_key = v_MonRec.wmj_run_warn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1521, wmn_parameter = v_MonRec.wmj_run_warn_param
WS_MON_JOB_CHECK,FUNCTION,1522, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,1523,
WS_MON_JOB_CHECK,FUNCTION,1524, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1525, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1526, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1527, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1528, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1529, VALUES
WS_MON_JOB_CHECK,FUNCTION,1530, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1531, v_MonRec.wmj_job_name, 'RUN_WARNING', v_MonRec.wmj_run_warn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1532, v_MonRec.wmj_run_warn_param);
WS_MON_JOB_CHECK,FUNCTION,1533, END IF;
WS_MON_JOB_CHECK,FUNCTION,1534, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1535, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1536, v_MsgText := 'Notification of running with warnings. '||
WS_MON_JOB_CHECK,FUNCTION,1537, v_warn_count||' warnings produced.';
WS_MON_JOB_CHECK,FUNCTION,1538, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1539, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1540, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1541, VALUES
WS_MON_JOB_CHECK,FUNCTION,1542, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1543, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1544, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1545, END IF;
WS_MON_JOB_CHECK,FUNCTION,1546, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1547, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1548, END IF;
WS_MON_JOB_CHECK,FUNCTION,1549, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1550, END IF;
WS_MON_JOB_CHECK,FUNCTION,1551,
WS_MON_JOB_CHECK,FUNCTION,1552,
WS_MON_JOB_CHECK,FUNCTION,1553, END IF; -- End of skip check test
WS_MON_JOB_CHECK,FUNCTION,1554,
WS_MON_JOB_CHECK,FUNCTION,1555, ELSE -- no running jobs so skip the test. Log if level 9
WS_MON_JOB_CHECK,FUNCTION,1556, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1557, v_MsgText := 'Finish status check found no completed or failed jobs.'||
WS_MON_JOB_CHECK,FUNCTION,1558, ' The current time is '||
WS_MON_JOB_CHECK,FUNCTION,1559, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,1560, ' All Okay.';
WS_MON_JOB_CHECK,FUNCTION,1561, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1562, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1563, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1564, VALUES
WS_MON_JOB_CHECK,FUNCTION,1565, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1566, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1567, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1568, END IF;
WS_MON_JOB_CHECK,FUNCTION,1569, END IF; -- end of have a completed job to test
WS_MON_JOB_CHECK,FUNCTION,1570,
WS_MON_JOB_CHECK,FUNCTION,1571,
WS_MON_JOB_CHECK,FUNCTION,1572,
WS_MON_JOB_CHECK,FUNCTION,1573,
WS_MON_JOB_CHECK,FUNCTION,1574, END IF; -- END of RUN STATUS CHECKS
WS_MON_JOB_CHECK,FUNCTION,1575,
WS_MON_JOB_CHECK,FUNCTION,1576,
WS_MON_JOB_CHECK,FUNCTION,1577, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1578, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1579, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1580, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1581, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1582, -- C H E C K P O I N T
WS_MON_JOB_CHECK,FUNCTION,1583, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1584, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1585, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1586, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1587, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,1588,
WS_MON_JOB_CHECK,FUNCTION,1589, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1590, -- If CHECKPOINT check is active, check that checkpoint hit
WS_MON_JOB_CHECK,FUNCTION,1591, -- We will only consider running jobs. completed or not
WS_MON_JOB_CHECK,FUNCTION,1592, -- started jobs are not considered
WS_MON_JOB_CHECK,FUNCTION,1593, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1594, IF v_valid = 1
WS_MON_JOB_CHECK,FUNCTION,1595, AND v_running = 1
WS_MON_JOB_CHECK,FUNCTION,1596, AND ( NVL(v_MonRec.wmj_cp1_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1597, OR NVL(v_MonRec.wmj_cp2_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1598, OR NVL(v_MonRec.wmj_cp3_active,'N') = 'Y' ) THEN
WS_MON_JOB_CHECK,FUNCTION,1599,
WS_MON_JOB_CHECK,FUNCTION,1600, v_step := 900;
WS_MON_JOB_CHECK,FUNCTION,1601, v_cp_found := 0;
WS_MON_JOB_CHECK,FUNCTION,1602, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1603,
WS_MON_JOB_CHECK,FUNCTION,1604, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1605, -- We will use the last active checkpoint
WS_MON_JOB_CHECK,FUNCTION,1606, -- So start with 3 and if okay use that
WS_MON_JOB_CHECK,FUNCTION,1607, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1608, IF ( NVL(v_MonRec.wmj_cp3_active,'N') = 'Y' ) THEN
WS_MON_JOB_CHECK,FUNCTION,1609, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1610, -- Get the checkpoint time and see if we are within range
WS_MON_JOB_CHECK,FUNCTION,1611, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1612, v_cp_mm := v_MonRec.wmj_nominal_mm + v_MonRec.wmj_cp3_elapsed;
WS_MON_JOB_CHECK,FUNCTION,1613, v_cp_hh := v_MonRec.wmj_nominal_hh;
WS_MON_JOB_CHECK,FUNCTION,1614, WHILE v_cp_mm >= 60 LOOP
WS_MON_JOB_CHECK,FUNCTION,1615, v_cp_hh := v_cp_hh + 1;
WS_MON_JOB_CHECK,FUNCTION,1616, v_cp_mm := v_cp_mm - 60;
WS_MON_JOB_CHECK,FUNCTION,1617, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,1618, WHILE v_cp_hh > 23 LOOP
WS_MON_JOB_CHECK,FUNCTION,1619, v_cp_hh := v_cp_hh - 24;
WS_MON_JOB_CHECK,FUNCTION,1620, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,1621,
WS_MON_JOB_CHECK,FUNCTION,1622, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1623, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,1624, -- checkpoint time
WS_MON_JOB_CHECK,FUNCTION,1625, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1626, IF v_check_hh > v_cp_hh
WS_MON_JOB_CHECK,FUNCTION,1627, OR ( v_check_hh = v_cp_hh
WS_MON_JOB_CHECK,FUNCTION,1628, AND v_check_mm > v_cp_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,1629, -- after the check point time
WS_MON_JOB_CHECK,FUNCTION,1630, -- get the last checkpoint time
WS_MON_JOB_CHECK,FUNCTION,1631, v_hh_last := v_check_hh - v_cp_hh;
WS_MON_JOB_CHECK,FUNCTION,1632, v_mm_last := v_check_mm - v_cp_mm;
WS_MON_JOB_CHECK,FUNCTION,1633, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,1634, IF v_mm_last < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1635, v_mm_last := v_mm_last + 60;
WS_MON_JOB_CHECK,FUNCTION,1636, v_hh_last := v_hh_last - 1;
WS_MON_JOB_CHECK,FUNCTION,1637, END IF;
WS_MON_JOB_CHECK,FUNCTION,1638, ELSE
WS_MON_JOB_CHECK,FUNCTION,1639, -- before the check finish time
WS_MON_JOB_CHECK,FUNCTION,1640, -- get the next start time (same day)
WS_MON_JOB_CHECK,FUNCTION,1641, v_hh_next := v_cp_hh - v_check_hh;
WS_MON_JOB_CHECK,FUNCTION,1642, v_mm_next := v_cp_mm - v_check_mm;
WS_MON_JOB_CHECK,FUNCTION,1643, IF v_mm_next < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1644, v_mm_next := v_mm_next + 60;
WS_MON_JOB_CHECK,FUNCTION,1645, v_hh_next := v_hh_next - 1;
WS_MON_JOB_CHECK,FUNCTION,1646, END IF;
WS_MON_JOB_CHECK,FUNCTION,1647, -- get the last finish time (previous day)
WS_MON_JOB_CHECK,FUNCTION,1648, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,1649, v_hh_last := 23 - v_hh_next;
WS_MON_JOB_CHECK,FUNCTION,1650, v_mm_last := 60 - v_mm_next;
WS_MON_JOB_CHECK,FUNCTION,1651, IF v_mm_last = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,1652, v_mm_last := 0;
WS_MON_JOB_CHECK,FUNCTION,1653, v_hh_last := v_hh_last + 1;
WS_MON_JOB_CHECK,FUNCTION,1654, END IF;
WS_MON_JOB_CHECK,FUNCTION,1655, END IF;
WS_MON_JOB_CHECK,FUNCTION,1656,
WS_MON_JOB_CHECK,FUNCTION,1657, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1658, -- See if we are within our check range
WS_MON_JOB_CHECK,FUNCTION,1659, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1660, v_hh_diff := v_hh_last - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1661, v_mm_diff := v_mm_last - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1662, IF v_mm_diff < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1663, v_hh_diff := v_hh_diff - 1;
WS_MON_JOB_CHECK,FUNCTION,1664, v_mm_diff := v_mm_diff + 60;
WS_MON_JOB_CHECK,FUNCTION,1665, END IF;
WS_MON_JOB_CHECK,FUNCTION,1666, IF v_hh_diff > 0
WS_MON_JOB_CHECK,FUNCTION,1667, OR ( v_hh_diff = 0
WS_MON_JOB_CHECK,FUNCTION,1668, AND v_mm_diff > 0 ) THEN
WS_MON_JOB_CHECK,FUNCTION,1669, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1670, ELSE
WS_MON_JOB_CHECK,FUNCTION,1671, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1672, v_cp_found := 3;
WS_MON_JOB_CHECK,FUNCTION,1673, END IF;
WS_MON_JOB_CHECK,FUNCTION,1674,
WS_MON_JOB_CHECK,FUNCTION,1675, END IF; -- End of checkpoint 3 test
WS_MON_JOB_CHECK,FUNCTION,1676,
WS_MON_JOB_CHECK,FUNCTION,1677, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1678, -- If no checkpoint found and not skipping then try 2
WS_MON_JOB_CHECK,FUNCTION,1679, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1680, IF NVL(v_MonRec.wmj_cp2_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1681, AND v_cp_found = 0
WS_MON_JOB_CHECK,FUNCTION,1682, AND v_skip_check = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1683, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1684, -- Get the checkpoint time and see if we are within range
WS_MON_JOB_CHECK,FUNCTION,1685, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1686, v_cp_mm := v_MonRec.wmj_nominal_mm + v_MonRec.wmj_cp2_elapsed;
WS_MON_JOB_CHECK,FUNCTION,1687, v_cp_hh := v_MonRec.wmj_nominal_hh;
WS_MON_JOB_CHECK,FUNCTION,1688, WHILE v_cp_mm >= 60 LOOP
WS_MON_JOB_CHECK,FUNCTION,1689, v_cp_hh := v_cp_hh + 1;
WS_MON_JOB_CHECK,FUNCTION,1690, v_cp_mm := v_cp_mm - 60;
WS_MON_JOB_CHECK,FUNCTION,1691, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,1692, WHILE v_cp_hh > 23 LOOP
WS_MON_JOB_CHECK,FUNCTION,1693, v_cp_hh := v_cp_hh - 24;
WS_MON_JOB_CHECK,FUNCTION,1694, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,1695,
WS_MON_JOB_CHECK,FUNCTION,1696, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1697, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,1698, -- checkpoint time
WS_MON_JOB_CHECK,FUNCTION,1699, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1700, IF v_check_hh > v_cp_hh
WS_MON_JOB_CHECK,FUNCTION,1701, OR ( v_check_hh = v_cp_hh
WS_MON_JOB_CHECK,FUNCTION,1702, AND v_check_mm > v_cp_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,1703, -- after the check point time
WS_MON_JOB_CHECK,FUNCTION,1704, -- get the last checkpoint time
WS_MON_JOB_CHECK,FUNCTION,1705, v_hh_last := v_check_hh - v_cp_hh;
WS_MON_JOB_CHECK,FUNCTION,1706, v_mm_last := v_check_mm - v_cp_mm;
WS_MON_JOB_CHECK,FUNCTION,1707, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,1708, IF v_mm_last < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1709, v_mm_last := v_mm_last + 60;
WS_MON_JOB_CHECK,FUNCTION,1710, v_hh_last := v_hh_last - 1;
WS_MON_JOB_CHECK,FUNCTION,1711, END IF;
WS_MON_JOB_CHECK,FUNCTION,1712, ELSE
WS_MON_JOB_CHECK,FUNCTION,1713, -- before the check finish time
WS_MON_JOB_CHECK,FUNCTION,1714, -- get the next start time (same day)
WS_MON_JOB_CHECK,FUNCTION,1715, v_hh_next := v_cp_hh - v_check_hh;
WS_MON_JOB_CHECK,FUNCTION,1716, v_mm_next := v_cp_mm - v_check_mm;
WS_MON_JOB_CHECK,FUNCTION,1717, IF v_mm_next < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1718, v_mm_next := v_mm_next + 60;
WS_MON_JOB_CHECK,FUNCTION,1719, v_hh_next := v_hh_next - 1;
WS_MON_JOB_CHECK,FUNCTION,1720, END IF;
WS_MON_JOB_CHECK,FUNCTION,1721, -- get the last finish time (previous day)
WS_MON_JOB_CHECK,FUNCTION,1722, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,1723, v_hh_last := 23 - v_hh_next;
WS_MON_JOB_CHECK,FUNCTION,1724, v_mm_last := 60 - v_mm_next;
WS_MON_JOB_CHECK,FUNCTION,1725, IF v_mm_last = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,1726, v_mm_last := 0;
WS_MON_JOB_CHECK,FUNCTION,1727, v_hh_last := v_hh_last + 1;
WS_MON_JOB_CHECK,FUNCTION,1728, END IF;
WS_MON_JOB_CHECK,FUNCTION,1729, END IF;
WS_MON_JOB_CHECK,FUNCTION,1730,
WS_MON_JOB_CHECK,FUNCTION,1731, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1732, -- See if we are within our check range
WS_MON_JOB_CHECK,FUNCTION,1733, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1734, v_hh_diff := v_hh_last - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1735, v_mm_diff := v_mm_last - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1736, IF v_mm_diff < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1737, v_hh_diff := v_hh_diff - 1;
WS_MON_JOB_CHECK,FUNCTION,1738, v_mm_diff := v_mm_diff + 60;
WS_MON_JOB_CHECK,FUNCTION,1739, END IF;
WS_MON_JOB_CHECK,FUNCTION,1740, IF v_hh_diff > 0
WS_MON_JOB_CHECK,FUNCTION,1741, OR ( v_hh_diff = 0
WS_MON_JOB_CHECK,FUNCTION,1742, AND v_mm_diff > 0 ) THEN
WS_MON_JOB_CHECK,FUNCTION,1743, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1744, ELSE
WS_MON_JOB_CHECK,FUNCTION,1745, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1746, v_cp_found := 2;
WS_MON_JOB_CHECK,FUNCTION,1747, END IF;
WS_MON_JOB_CHECK,FUNCTION,1748, END IF; -- End of checkpoint 2 test
WS_MON_JOB_CHECK,FUNCTION,1749,
WS_MON_JOB_CHECK,FUNCTION,1750, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1751, -- If no checkpoint found and not skipping then try 1
WS_MON_JOB_CHECK,FUNCTION,1752, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1753, IF NVL(v_MonRec.wmj_cp1_active,'N') = 'Y'
WS_MON_JOB_CHECK,FUNCTION,1754, AND v_cp_found = 0
WS_MON_JOB_CHECK,FUNCTION,1755, AND v_skip_check = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1756, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1757, -- Get the checkpoint time and see if we are within range
WS_MON_JOB_CHECK,FUNCTION,1758, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1759, v_cp_mm := v_MonRec.wmj_nominal_mm + v_MonRec.wmj_cp1_elapsed;
WS_MON_JOB_CHECK,FUNCTION,1760, v_cp_hh := v_MonRec.wmj_nominal_hh;
WS_MON_JOB_CHECK,FUNCTION,1761, WHILE v_cp_mm >= 60 LOOP
WS_MON_JOB_CHECK,FUNCTION,1762, v_cp_hh := v_cp_hh + 1;
WS_MON_JOB_CHECK,FUNCTION,1763, v_cp_mm := v_cp_mm - 60;
WS_MON_JOB_CHECK,FUNCTION,1764, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,1765, WHILE v_cp_hh > 23 LOOP
WS_MON_JOB_CHECK,FUNCTION,1766, v_cp_hh := v_cp_hh - 24;
WS_MON_JOB_CHECK,FUNCTION,1767, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,1768,
WS_MON_JOB_CHECK,FUNCTION,1769, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1770, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,1771, -- checkpoint time
WS_MON_JOB_CHECK,FUNCTION,1772, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1773, IF v_check_hh > v_cp_hh
WS_MON_JOB_CHECK,FUNCTION,1774, OR ( v_check_hh = v_cp_hh
WS_MON_JOB_CHECK,FUNCTION,1775, AND v_check_mm > v_cp_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,1776, -- after the check point time
WS_MON_JOB_CHECK,FUNCTION,1777, -- get the last checkpoint time
WS_MON_JOB_CHECK,FUNCTION,1778, v_hh_last := v_check_hh - v_cp_hh;
WS_MON_JOB_CHECK,FUNCTION,1779, v_mm_last := v_check_mm - v_cp_mm;
WS_MON_JOB_CHECK,FUNCTION,1780, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,1781, IF v_mm_last < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1782, v_mm_last := v_mm_last + 60;
WS_MON_JOB_CHECK,FUNCTION,1783, v_hh_last := v_hh_last - 1;
WS_MON_JOB_CHECK,FUNCTION,1784, END IF;
WS_MON_JOB_CHECK,FUNCTION,1785, ELSE
WS_MON_JOB_CHECK,FUNCTION,1786, -- before the check finish time
WS_MON_JOB_CHECK,FUNCTION,1787, -- get the next start time (same day)
WS_MON_JOB_CHECK,FUNCTION,1788, v_hh_next := v_cp_hh - v_check_hh;
WS_MON_JOB_CHECK,FUNCTION,1789, v_mm_next := v_cp_mm - v_check_mm;
WS_MON_JOB_CHECK,FUNCTION,1790, IF v_mm_next < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1791, v_mm_next := v_mm_next + 60;
WS_MON_JOB_CHECK,FUNCTION,1792, v_hh_next := v_hh_next - 1;
WS_MON_JOB_CHECK,FUNCTION,1793, END IF;
WS_MON_JOB_CHECK,FUNCTION,1794, -- get the last finish time (previous day)
WS_MON_JOB_CHECK,FUNCTION,1795, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,1796, v_hh_last := 23 - v_hh_next;
WS_MON_JOB_CHECK,FUNCTION,1797, v_mm_last := 60 - v_mm_next;
WS_MON_JOB_CHECK,FUNCTION,1798, IF v_mm_last = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,1799, v_mm_last := 0;
WS_MON_JOB_CHECK,FUNCTION,1800, v_hh_last := v_hh_last + 1;
WS_MON_JOB_CHECK,FUNCTION,1801, END IF;
WS_MON_JOB_CHECK,FUNCTION,1802, END IF;
WS_MON_JOB_CHECK,FUNCTION,1803,
WS_MON_JOB_CHECK,FUNCTION,1804, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1805, -- See if we are within our check range
WS_MON_JOB_CHECK,FUNCTION,1806, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1807, v_hh_diff := v_hh_last - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1808, v_mm_diff := v_mm_last - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1809, IF v_mm_diff < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1810, v_hh_diff := v_hh_diff - 1;
WS_MON_JOB_CHECK,FUNCTION,1811, v_mm_diff := v_mm_diff + 60;
WS_MON_JOB_CHECK,FUNCTION,1812, END IF;
WS_MON_JOB_CHECK,FUNCTION,1813, IF v_hh_diff > 0
WS_MON_JOB_CHECK,FUNCTION,1814, OR ( v_hh_diff = 0
WS_MON_JOB_CHECK,FUNCTION,1815, AND v_mm_diff > 0 ) THEN
WS_MON_JOB_CHECK,FUNCTION,1816, v_skip_check := 1; -- no more to test
WS_MON_JOB_CHECK,FUNCTION,1817, ELSE
WS_MON_JOB_CHECK,FUNCTION,1818, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,1819, v_cp_found := 1;
WS_MON_JOB_CHECK,FUNCTION,1820, END IF;
WS_MON_JOB_CHECK,FUNCTION,1821, END IF; -- End of checkpoint 1 test
WS_MON_JOB_CHECK,FUNCTION,1822,
WS_MON_JOB_CHECK,FUNCTION,1823, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1824, -- If we have an active checkpoint then process it
WS_MON_JOB_CHECK,FUNCTION,1825, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1826, IF v_cp_found <> 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1827, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1828, -- work out the required checkpoint date
WS_MON_JOB_CHECK,FUNCTION,1829, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1830, v_work := to_number(to_char(v_check_date-v_prev_day,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1831, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1832, v_work := v_work + ( v_cp_hh * 100 );
WS_MON_JOB_CHECK,FUNCTION,1833, v_work := v_work + v_cp_mm;
WS_MON_JOB_CHECK,FUNCTION,1834, v_cp_date := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1835,
WS_MON_JOB_CHECK,FUNCTION,1836, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1837, -- In range for the checkpoint so see if we meet
WS_MON_JOB_CHECK,FUNCTION,1838, -- The checkpoint criteria
WS_MON_JOB_CHECK,FUNCTION,1839, -- First get the criteria for the appropriate checkpoint
WS_MON_JOB_CHECK,FUNCTION,1840, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1841, IF v_cp_found = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,1842, v_task_count := v_MonRec.wmj_cp1_task_count;
WS_MON_JOB_CHECK,FUNCTION,1843, v_info_count := v_MonRec.wmj_cp1_info_count;
WS_MON_JOB_CHECK,FUNCTION,1844, v_cp_script_key := v_MonRec.wmj_cp1_script_key;
WS_MON_JOB_CHECK,FUNCTION,1845, v_cp_param := v_MonRec.wmj_cp1_param;
WS_MON_JOB_CHECK,FUNCTION,1846, ELSIF v_cp_found = 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1847, v_task_count := v_MonRec.wmj_cp2_task_count;
WS_MON_JOB_CHECK,FUNCTION,1848, v_info_count := v_MonRec.wmj_cp2_info_count;
WS_MON_JOB_CHECK,FUNCTION,1849, v_cp_script_key := v_MonRec.wmj_cp2_script_key;
WS_MON_JOB_CHECK,FUNCTION,1850, v_cp_param := v_MonRec.wmj_cp2_param;
WS_MON_JOB_CHECK,FUNCTION,1851, ELSE
WS_MON_JOB_CHECK,FUNCTION,1852, v_task_count := v_MonRec.wmj_cp3_task_count;
WS_MON_JOB_CHECK,FUNCTION,1853, v_info_count := v_MonRec.wmj_cp3_info_count;
WS_MON_JOB_CHECK,FUNCTION,1854, v_cp_script_key := v_MonRec.wmj_cp3_script_key;
WS_MON_JOB_CHECK,FUNCTION,1855, v_cp_param := v_MonRec.wmj_cp3_param;
WS_MON_JOB_CHECK,FUNCTION,1856, END IF;
WS_MON_JOB_CHECK,FUNCTION,1857,
WS_MON_JOB_CHECK,FUNCTION,1858, v_notify_type := 'CHECKPOINT'||to_char(v_cp_found);
WS_MON_JOB_CHECK,FUNCTION,1859, v_info_messages := NVL(v_RunRec.wjr_okay_count,0) + NVL(v_RunRec.wjr_info_count,0);
WS_MON_JOB_CHECK,FUNCTION,1860,
WS_MON_JOB_CHECK,FUNCTION,1861, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1862, -- Log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,1863, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1864, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1865, v_MsgText := lower(v_notify_type)||' actioned. Current time '||
WS_MON_JOB_CHECK,FUNCTION,1866, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,1867, LPAD(v_cp_hh,2,'0')||':'||LPAD(v_cp_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,1868, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is less than look back of '||
WS_MON_JOB_CHECK,FUNCTION,1869, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,1870, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1871, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1872, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1873, VALUES
WS_MON_JOB_CHECK,FUNCTION,1874, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1875, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1876, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1877, END IF;
WS_MON_JOB_CHECK,FUNCTION,1878,
WS_MON_JOB_CHECK,FUNCTION,1879, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1880, -- If task count not set to zero then check the number
WS_MON_JOB_CHECK,FUNCTION,1881, -- of completed tasks
WS_MON_JOB_CHECK,FUNCTION,1882, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1883, IF v_task_count > 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1884, -- If fewer than the required number of tasks have
WS_MON_JOB_CHECK,FUNCTION,1885, -- completed then page
WS_MON_JOB_CHECK,FUNCTION,1886, IF v_tasks_completed < v_task_count THEN
WS_MON_JOB_CHECK,FUNCTION,1887, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1888, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1889, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1890, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1891, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1892, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1893, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1894, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1895, END IF;
WS_MON_JOB_CHECK,FUNCTION,1896, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1897, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1898, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1899, ELSE
WS_MON_JOB_CHECK,FUNCTION,1900, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1901, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,1902, END IF;
WS_MON_JOB_CHECK,FUNCTION,1903, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,1904, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1905, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,1906,
WS_MON_JOB_CHECK,FUNCTION,1907,
WS_MON_JOB_CHECK,FUNCTION,1908, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = v_notify_type
WS_MON_JOB_CHECK,FUNCTION,1909, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,1910, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,1911, v_MsgText := 'Notification for failure of '||v_notify_type||
WS_MON_JOB_CHECK,FUNCTION,1912, ' Skipped. Found only '||v_tasks_completed||' completed tasks, checkpoint required '||
WS_MON_JOB_CHECK,FUNCTION,1913, v_task_count||'. Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,1914, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,1915, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1916, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1917, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1918, VALUES
WS_MON_JOB_CHECK,FUNCTION,1919, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1920, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1921, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1922, END IF;
WS_MON_JOB_CHECK,FUNCTION,1923, ELSE
WS_MON_JOB_CHECK,FUNCTION,1924, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,1925, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,1926, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,1927, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1928, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,1929, wmn_notify_type = v_notify_type,
WS_MON_JOB_CHECK,FUNCTION,1930, wmn_script_key = v_cp_script_key,
WS_MON_JOB_CHECK,FUNCTION,1931, wmn_parameter = v_cp_param
WS_MON_JOB_CHECK,FUNCTION,1932, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,1933,
WS_MON_JOB_CHECK,FUNCTION,1934, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,1935, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,1936, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,1937, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,1938, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,1939, VALUES
WS_MON_JOB_CHECK,FUNCTION,1940, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1941, v_MonRec.wmj_job_name, v_notify_type, v_cp_script_key,
WS_MON_JOB_CHECK,FUNCTION,1942, v_cp_param);
WS_MON_JOB_CHECK,FUNCTION,1943, END IF;
WS_MON_JOB_CHECK,FUNCTION,1944, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1945, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,1946, v_MsgText := 'Notification for failure of '||v_notify_type||
WS_MON_JOB_CHECK,FUNCTION,1947, '. Found only '||v_tasks_completed||' completed tasks, checkpoint required '||
WS_MON_JOB_CHECK,FUNCTION,1948, v_task_count||'.';
WS_MON_JOB_CHECK,FUNCTION,1949, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1950, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1951, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1952, VALUES
WS_MON_JOB_CHECK,FUNCTION,1953, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1954, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,1955, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1956, END IF;
WS_MON_JOB_CHECK,FUNCTION,1957, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,1958, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,1959, END IF;
WS_MON_JOB_CHECK,FUNCTION,1960, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1961, -- If Skipping the check (found enough) log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,1962, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1963, ELSE
WS_MON_JOB_CHECK,FUNCTION,1964, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,1965, v_MsgText := 'Checkpoint check '||v_notify_type||
WS_MON_JOB_CHECK,FUNCTION,1966, '. Found  '||v_tasks_completed||' completed tasks, checkpoint required '||
WS_MON_JOB_CHECK,FUNCTION,1967, v_task_count||'. All Okay. ';
WS_MON_JOB_CHECK,FUNCTION,1968, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,1969, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,1970, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,1971, VALUES
WS_MON_JOB_CHECK,FUNCTION,1972, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,1973, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,1974, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,1975, END IF;
WS_MON_JOB_CHECK,FUNCTION,1976, END IF; -- end of not enough tasks
WS_MON_JOB_CHECK,FUNCTION,1977, END IF; -- End of completed task check
WS_MON_JOB_CHECK,FUNCTION,1978,
WS_MON_JOB_CHECK,FUNCTION,1979, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1980, -- If info count not set to zero then check the number
WS_MON_JOB_CHECK,FUNCTION,1981, -- of completed tasks, unless we have already notified
WS_MON_JOB_CHECK,FUNCTION,1982, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,1983, IF v_info_count > 0 AND v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,1984, -- If we have fewer than the required number of info
WS_MON_JOB_CHECK,FUNCTION,1985, -- messages then page
WS_MON_JOB_CHECK,FUNCTION,1986, IF v_info_messages < v_info_count THEN
WS_MON_JOB_CHECK,FUNCTION,1987,
WS_MON_JOB_CHECK,FUNCTION,1988, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,1989, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,1990, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,1991, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,1992, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,1993, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1994, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,1995, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,1996, END IF;
WS_MON_JOB_CHECK,FUNCTION,1997, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,1998, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,1999, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2000, ELSE
WS_MON_JOB_CHECK,FUNCTION,2001, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2002, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2003, END IF;
WS_MON_JOB_CHECK,FUNCTION,2004, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2005, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2006, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2007,
WS_MON_JOB_CHECK,FUNCTION,2008,
WS_MON_JOB_CHECK,FUNCTION,2009, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = v_notify_type
WS_MON_JOB_CHECK,FUNCTION,2010, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,2011, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,2012, v_MsgText := 'Notification for failure of '||v_notify_type||
WS_MON_JOB_CHECK,FUNCTION,2013, ' Skipped. Found only '||v_info_messages||
WS_MON_JOB_CHECK,FUNCTION,2014, ' okay and info messages, checkpoint required '||
WS_MON_JOB_CHECK,FUNCTION,2015, v_info_count||'. Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,2016, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2017, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2018, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2019, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2020, VALUES
WS_MON_JOB_CHECK,FUNCTION,2021, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2022, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2023, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2024, END IF;
WS_MON_JOB_CHECK,FUNCTION,2025, ELSE
WS_MON_JOB_CHECK,FUNCTION,2026, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,2027, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,2028, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,2029, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2030, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,2031, wmn_notify_type = v_notify_type,
WS_MON_JOB_CHECK,FUNCTION,2032, wmn_script_key = v_cp_script_key,
WS_MON_JOB_CHECK,FUNCTION,2033, wmn_parameter = v_cp_param
WS_MON_JOB_CHECK,FUNCTION,2034, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2035,
WS_MON_JOB_CHECK,FUNCTION,2036, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,2037, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,2038, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,2039, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,2040, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,2041, VALUES
WS_MON_JOB_CHECK,FUNCTION,2042, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2043, v_MonRec.wmj_job_name, v_notify_type, v_cp_script_key,
WS_MON_JOB_CHECK,FUNCTION,2044, v_cp_param);
WS_MON_JOB_CHECK,FUNCTION,2045, END IF;
WS_MON_JOB_CHECK,FUNCTION,2046, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2047, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,2048, v_MsgText := 'Notification for failure of '||v_notify_type||
WS_MON_JOB_CHECK,FUNCTION,2049, '. Found only '||v_info_messages||
WS_MON_JOB_CHECK,FUNCTION,2050, ' okay and info messages, checkpoint required '||
WS_MON_JOB_CHECK,FUNCTION,2051, v_info_count||'.';
WS_MON_JOB_CHECK,FUNCTION,2052, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2053, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2054, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2055, VALUES
WS_MON_JOB_CHECK,FUNCTION,2056, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2057, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,2058, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2059, END IF;
WS_MON_JOB_CHECK,FUNCTION,2060, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,2061, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,2062, END IF;
WS_MON_JOB_CHECK,FUNCTION,2063, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2064, -- If Skipping the check (found enough) log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,2065, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2066, ELSE
WS_MON_JOB_CHECK,FUNCTION,2067, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2068, v_MsgText := 'Checkpoint check '||v_notify_type||
WS_MON_JOB_CHECK,FUNCTION,2069, '. Found  '||v_info_messages||
WS_MON_JOB_CHECK,FUNCTION,2070, ' okay and info messages, checkpoint required '||
WS_MON_JOB_CHECK,FUNCTION,2071, v_info_count||'. All Okay. ';
WS_MON_JOB_CHECK,FUNCTION,2072, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2073, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2074, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2075, VALUES
WS_MON_JOB_CHECK,FUNCTION,2076, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2077, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2078, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2079, END IF;
WS_MON_JOB_CHECK,FUNCTION,2080, END IF; -- end of not enough messages
WS_MON_JOB_CHECK,FUNCTION,2081, END IF; -- End of information message count check
WS_MON_JOB_CHECK,FUNCTION,2082,
WS_MON_JOB_CHECK,FUNCTION,2083, -- No checkpoints to be checked so if logging level 9 tell them we skipped
WS_MON_JOB_CHECK,FUNCTION,2084, ELSE
WS_MON_JOB_CHECK,FUNCTION,2085, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2086, v_MsgText := 'Checkpoint checks skipped. Current time '||
WS_MON_JOB_CHECK,FUNCTION,2087, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,2088, LPAD(v_cp_hh,2,'0')||':'||LPAD(v_cp_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,2089, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is more than look back of '||
WS_MON_JOB_CHECK,FUNCTION,2090, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,2091, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2092, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2093, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2094, VALUES
WS_MON_JOB_CHECK,FUNCTION,2095, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2096, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2097, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2098, END IF;
WS_MON_JOB_CHECK,FUNCTION,2099, END IF; -- End of a checkpoint to be checked
WS_MON_JOB_CHECK,FUNCTION,2100, END IF; -- ENd of checkpoint checks
WS_MON_JOB_CHECK,FUNCTION,2101,
WS_MON_JOB_CHECK,FUNCTION,2102, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2103, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2104, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2105, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2106, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2107, -- S T A R T
WS_MON_JOB_CHECK,FUNCTION,2108, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2109, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2110, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2111, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2112, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2113, --*************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2114, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2115, -- If START time check is active check that the job
WS_MON_JOB_CHECK,FUNCTION,2116, -- started on time.
WS_MON_JOB_CHECK,FUNCTION,2117, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2118, IF NVL(v_MonRec.wmj_start_active,'N') = 'Y' AND v_valid = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,2119, v_step := 1000;
WS_MON_JOB_CHECK,FUNCTION,2120, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,2121,
WS_MON_JOB_CHECK,FUNCTION,2122, v_start_mm := v_MonRec.wmj_nominal_mm + v_MonRec.wmj_start_elapsed;
WS_MON_JOB_CHECK,FUNCTION,2123, v_start_hh := v_MonRec.wmj_nominal_hh;
WS_MON_JOB_CHECK,FUNCTION,2124, WHILE v_start_mm >= 60 LOOP
WS_MON_JOB_CHECK,FUNCTION,2125, v_start_hh := v_start_hh + 1;
WS_MON_JOB_CHECK,FUNCTION,2126, v_start_mm := v_start_mm - 60;
WS_MON_JOB_CHECK,FUNCTION,2127, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,2128, WHILE v_start_hh > 23 LOOP
WS_MON_JOB_CHECK,FUNCTION,2129, v_start_hh := v_start_hh - 24;
WS_MON_JOB_CHECK,FUNCTION,2130, END LOOP;
WS_MON_JOB_CHECK,FUNCTION,2131,
WS_MON_JOB_CHECK,FUNCTION,2132,
WS_MON_JOB_CHECK,FUNCTION,2133, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2134, -- Get the difference between our check time and the
WS_MON_JOB_CHECK,FUNCTION,2135, -- last must start by time and the next must start by time
WS_MON_JOB_CHECK,FUNCTION,2136, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2137, v_prev_day := 0;
WS_MON_JOB_CHECK,FUNCTION,2138, IF v_check_hh > v_start_hh
WS_MON_JOB_CHECK,FUNCTION,2139, OR ( v_check_hh = v_start_hh
WS_MON_JOB_CHECK,FUNCTION,2140, AND v_check_mm > v_start_mm ) THEN
WS_MON_JOB_CHECK,FUNCTION,2141, -- ahead of the check start time
WS_MON_JOB_CHECK,FUNCTION,2142, -- get the last start time (same day)
WS_MON_JOB_CHECK,FUNCTION,2143, v_hh_last := v_check_hh - v_start_hh;
WS_MON_JOB_CHECK,FUNCTION,2144, v_mm_last := v_check_mm - v_start_mm;
WS_MON_JOB_CHECK,FUNCTION,2145, IF v_mm_last < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2146, v_mm_last := v_mm_last + 60;
WS_MON_JOB_CHECK,FUNCTION,2147, v_hh_last := v_hh_last - 1;
WS_MON_JOB_CHECK,FUNCTION,2148, END IF;
WS_MON_JOB_CHECK,FUNCTION,2149, -- get the next start time (next day)
WS_MON_JOB_CHECK,FUNCTION,2150, v_hh_next := 23 - v_hh_last;
WS_MON_JOB_CHECK,FUNCTION,2151, v_mm_next := 60 - v_mm_last;
WS_MON_JOB_CHECK,FUNCTION,2152, IF v_mm_next = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,2153, v_mm_next := 0;
WS_MON_JOB_CHECK,FUNCTION,2154, v_hh_next := v_hh_next + 1;
WS_MON_JOB_CHECK,FUNCTION,2155, END If;
WS_MON_JOB_CHECK,FUNCTION,2156, ELSE
WS_MON_JOB_CHECK,FUNCTION,2157, -- before the check start time
WS_MON_JOB_CHECK,FUNCTION,2158, -- get the next start time (same day)
WS_MON_JOB_CHECK,FUNCTION,2159, v_hh_next := v_start_hh - v_check_hh;
WS_MON_JOB_CHECK,FUNCTION,2160, v_mm_next := v_start_mm - v_check_mm;
WS_MON_JOB_CHECK,FUNCTION,2161, IF v_mm_next < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2162, v_mm_next := v_mm_next + 60;
WS_MON_JOB_CHECK,FUNCTION,2163, v_hh_next := v_hh_next - 1;
WS_MON_JOB_CHECK,FUNCTION,2164, END IF;
WS_MON_JOB_CHECK,FUNCTION,2165, -- get the last start time (previous day)
WS_MON_JOB_CHECK,FUNCTION,2166, v_prev_day := 1;
WS_MON_JOB_CHECK,FUNCTION,2167, v_hh_last := 23 - v_hh_next;
WS_MON_JOB_CHECK,FUNCTION,2168, v_mm_last := 60 - v_mm_next;
WS_MON_JOB_CHECK,FUNCTION,2169, IF v_mm_last = 60 THEN
WS_MON_JOB_CHECK,FUNCTION,2170, v_mm_last := 0;
WS_MON_JOB_CHECK,FUNCTION,2171, v_hh_last := v_hh_last + 1;
WS_MON_JOB_CHECK,FUNCTION,2172, END If;
WS_MON_JOB_CHECK,FUNCTION,2173,
WS_MON_JOB_CHECK,FUNCTION,2174, END IF;
WS_MON_JOB_CHECK,FUNCTION,2175,
WS_MON_JOB_CHECK,FUNCTION,2176, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2177, -- See if we are within our check range
WS_MON_JOB_CHECK,FUNCTION,2178, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2179, v_hh_diff := v_hh_last - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,2180, v_mm_diff := v_mm_last - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,2181, IF v_mm_diff < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2182, v_hh_diff := v_hh_diff - 1;
WS_MON_JOB_CHECK,FUNCTION,2183, v_mm_diff := v_mm_diff + 60;
WS_MON_JOB_CHECK,FUNCTION,2184, END IF;
WS_MON_JOB_CHECK,FUNCTION,2185, IF v_hh_diff > 0
WS_MON_JOB_CHECK,FUNCTION,2186, OR ( v_hh_diff = 0
WS_MON_JOB_CHECK,FUNCTION,2187, AND v_mm_diff > 0 ) THEN
WS_MON_JOB_CHECK,FUNCTION,2188, v_skip_check := 1;
WS_MON_JOB_CHECK,FUNCTION,2189, ELSE
WS_MON_JOB_CHECK,FUNCTION,2190, v_skip_check := 0;
WS_MON_JOB_CHECK,FUNCTION,2191, END IF;
WS_MON_JOB_CHECK,FUNCTION,2192,
WS_MON_JOB_CHECK,FUNCTION,2193, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2194, -- work out the required start date
WS_MON_JOB_CHECK,FUNCTION,2195, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2196, v_work := to_number(to_char(v_check_date-v_prev_day,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2197, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2198, v_work := v_work + ( v_start_hh * 100 );
WS_MON_JOB_CHECK,FUNCTION,2199, v_work := v_work + v_start_mm;
WS_MON_JOB_CHECK,FUNCTION,2200, v_start_date := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2201,
WS_MON_JOB_CHECK,FUNCTION,2202, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2203, -- If we have a check to do then perform it.
WS_MON_JOB_CHECK,FUNCTION,2204, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2205, IF v_skip_check = 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2206, v_step := 1100;
WS_MON_JOB_CHECK,FUNCTION,2207, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2208, -- Log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,2209, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2210, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2211, v_MsgText := 'Must start by check actioned. Current time '||
WS_MON_JOB_CHECK,FUNCTION,2212, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,2213, LPAD(v_start_hh,2,'0')||':'||LPAD(v_start_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,2214, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is less than look back of '||
WS_MON_JOB_CHECK,FUNCTION,2215, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,2216, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2217, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2218, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2219, VALUES
WS_MON_JOB_CHECK,FUNCTION,2220, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2221, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2222, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2223, END IF;
WS_MON_JOB_CHECK,FUNCTION,2224,
WS_MON_JOB_CHECK,FUNCTION,2225, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2226, -- If we are running then check the start time to ensure
WS_MON_JOB_CHECK,FUNCTION,2227, -- this is not an old iteration
WS_MON_JOB_CHECK,FUNCTION,2228, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2229, IF v_running = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,2230, v_step := 1200;
WS_MON_JOB_CHECK,FUNCTION,2231,
WS_MON_JOB_CHECK,FUNCTION,2232, -- Started after required start time
WS_MON_JOB_CHECK,FUNCTION,2233, IF v_RunRec.wjr_started > v_start_date THEN
WS_MON_JOB_CHECK,FUNCTION,2234, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,2235, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,2236, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,2237, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,2238, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,2239, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2240, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,2241, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,2242, END IF;
WS_MON_JOB_CHECK,FUNCTION,2243, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2244, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2245, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2246, ELSE
WS_MON_JOB_CHECK,FUNCTION,2247, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2248, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2249, END IF;
WS_MON_JOB_CHECK,FUNCTION,2250, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2251, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2252, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2253,
WS_MON_JOB_CHECK,FUNCTION,2254,
WS_MON_JOB_CHECK,FUNCTION,2255, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'START'
WS_MON_JOB_CHECK,FUNCTION,2256, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,2257, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,2258, v_MsgText := 'Notification for failure to start on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,2259, ' Job started late.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,2260, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2261, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2262, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2263, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2264, VALUES
WS_MON_JOB_CHECK,FUNCTION,2265, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2266, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2267, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2268, END IF;
WS_MON_JOB_CHECK,FUNCTION,2269, ELSE
WS_MON_JOB_CHECK,FUNCTION,2270, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,2271, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,2272, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,2273, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2274, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,2275, wmn_notify_type = 'START',
WS_MON_JOB_CHECK,FUNCTION,2276, wmn_script_key = v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2277, wmn_parameter = v_MonRec.wmj_start_param
WS_MON_JOB_CHECK,FUNCTION,2278, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2279,
WS_MON_JOB_CHECK,FUNCTION,2280, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,2281, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,2282, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,2283, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,2284, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,2285, VALUES
WS_MON_JOB_CHECK,FUNCTION,2286, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2287, v_MonRec.wmj_job_name, 'START', v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2288, v_MonRec.wmj_start_param);
WS_MON_JOB_CHECK,FUNCTION,2289, END IF;
WS_MON_JOB_CHECK,FUNCTION,2290, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2291, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,2292, v_MsgText := 'Notification for failure to start on time.'||
WS_MON_JOB_CHECK,FUNCTION,2293, ' Job started late at ' ||
WS_MON_JOB_CHECK,FUNCTION,2294, to_char(v_RunRec.wjr_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2295, '. Start was required by '||
WS_MON_JOB_CHECK,FUNCTION,2296, LPAD(v_start_hh,2,'0')||':'||LPAD(v_start_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,2297, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2298, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2299, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2300, VALUES
WS_MON_JOB_CHECK,FUNCTION,2301, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2302, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,2303, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2304, END IF;
WS_MON_JOB_CHECK,FUNCTION,2305, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,2306, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,2307, END IF; -- end of prior notification test
WS_MON_JOB_CHECK,FUNCTION,2308,
WS_MON_JOB_CHECK,FUNCTION,2309, -- Ensure that this is a current iteration
WS_MON_JOB_CHECK,FUNCTION,2310, -- i.e. that it didnt start before the absolute start time
WS_MON_JOB_CHECK,FUNCTION,2311, ELSIF v_RunRec.wjr_started < v_abs_start THEN
WS_MON_JOB_CHECK,FUNCTION,2312,
WS_MON_JOB_CHECK,FUNCTION,2313, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,2314, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,2315, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,2316, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,2317, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,2318, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2319, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,2320, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,2321, END IF;
WS_MON_JOB_CHECK,FUNCTION,2322, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2323, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2324, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2325, ELSE
WS_MON_JOB_CHECK,FUNCTION,2326, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2327, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2328, END IF;
WS_MON_JOB_CHECK,FUNCTION,2329, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2330, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2331, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2332,
WS_MON_JOB_CHECK,FUNCTION,2333,
WS_MON_JOB_CHECK,FUNCTION,2334, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'START'
WS_MON_JOB_CHECK,FUNCTION,2335, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,2336, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,2337, v_MsgText := 'Notification for failure to start on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,2338, ' Job running previous iteration.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,2339, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2340, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2341, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2342, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2343, VALUES
WS_MON_JOB_CHECK,FUNCTION,2344, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2345, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2346, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2347, END IF;
WS_MON_JOB_CHECK,FUNCTION,2348, ELSE
WS_MON_JOB_CHECK,FUNCTION,2349, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,2350, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,2351, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,2352, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2353, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,2354, wmn_notify_type = 'START',
WS_MON_JOB_CHECK,FUNCTION,2355, wmn_script_key = v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2356, wmn_parameter = v_MonRec.wmj_start_param
WS_MON_JOB_CHECK,FUNCTION,2357, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2358,
WS_MON_JOB_CHECK,FUNCTION,2359, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,2360, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,2361, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,2362, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,2363, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,2364, VALUES
WS_MON_JOB_CHECK,FUNCTION,2365, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2366, v_MonRec.wmj_job_name, 'START', v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2367, v_MonRec.wmj_start_param);
WS_MON_JOB_CHECK,FUNCTION,2368, END IF;
WS_MON_JOB_CHECK,FUNCTION,2369, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2370, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,2371, v_MsgText := 'Notification for failure to start on time.'||
WS_MON_JOB_CHECK,FUNCTION,2372, ' Job still running prior invocation which started at ' ||
WS_MON_JOB_CHECK,FUNCTION,2373, to_char(v_RunRec.wjr_started,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2374, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2375, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2376, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2377, VALUES
WS_MON_JOB_CHECK,FUNCTION,2378, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2379, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,2380, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2381, END IF;
WS_MON_JOB_CHECK,FUNCTION,2382, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,2383, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,2384, END IF;
WS_MON_JOB_CHECK,FUNCTION,2385,
WS_MON_JOB_CHECK,FUNCTION,2386, ELSE
WS_MON_JOB_CHECK,FUNCTION,2387, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2388, v_MsgText := 'Must start by check found running job. '||
WS_MON_JOB_CHECK,FUNCTION,2389, 'Job started at '||to_char(v_RunRec.wjr_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2390, ' which is before the required start of '||
WS_MON_JOB_CHECK,FUNCTION,2391, LPAD(v_start_hh,2,'0')||':'||LPAD(v_start_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,2392, ' and after the absolute minimum start of '||
WS_MON_JOB_CHECK,FUNCTION,2393, LPAD(v_abs_hh,2,'0')||':'||LPAD(v_abs_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,2394, ' All Okay.';
WS_MON_JOB_CHECK,FUNCTION,2395, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2396, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2397, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2398, VALUES
WS_MON_JOB_CHECK,FUNCTION,2399, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2400, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2401, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2402, END IF;
WS_MON_JOB_CHECK,FUNCTION,2403, END IF;
WS_MON_JOB_CHECK,FUNCTION,2404, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2405, -- If not running then if we have a completed entry
WS_MON_JOB_CHECK,FUNCTION,2406, -- check to see if it started after the absolute min start
WS_MON_JOB_CHECK,FUNCTION,2407, -- time. If prior to that then an earlier version.
WS_MON_JOB_CHECK,FUNCTION,2408, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2409, ELSIF v_completed = 1 THEN
WS_MON_JOB_CHECK,FUNCTION,2410, v_step := 1300;
WS_MON_JOB_CHECK,FUNCTION,2411, -- Ensure not a previous iteration
WS_MON_JOB_CHECK,FUNCTION,2412, IF v_LogRec.wjl_started < v_abs_start THEN
WS_MON_JOB_CHECK,FUNCTION,2413, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,2414, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,2415, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,2416, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,2417, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,2418, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2419, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,2420, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,2421, END IF;
WS_MON_JOB_CHECK,FUNCTION,2422, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2423, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2424, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2425, ELSE
WS_MON_JOB_CHECK,FUNCTION,2426, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2427, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2428, END IF;
WS_MON_JOB_CHECK,FUNCTION,2429, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2430, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2431, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2432,
WS_MON_JOB_CHECK,FUNCTION,2433,
WS_MON_JOB_CHECK,FUNCTION,2434, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'START'
WS_MON_JOB_CHECK,FUNCTION,2435, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,2436, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,2437, v_MsgText := 'Notification for failure to start on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,2438, ' No running job.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,2439, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2440, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2441, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2442, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2443, VALUES
WS_MON_JOB_CHECK,FUNCTION,2444, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2445, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2446, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2447, END IF;
WS_MON_JOB_CHECK,FUNCTION,2448, ELSE
WS_MON_JOB_CHECK,FUNCTION,2449, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,2450, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,2451, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,2452, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2453, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,2454, wmn_notify_type = 'START',
WS_MON_JOB_CHECK,FUNCTION,2455, wmn_script_key = v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2456, wmn_parameter = v_MonRec.wmj_start_param
WS_MON_JOB_CHECK,FUNCTION,2457, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2458,
WS_MON_JOB_CHECK,FUNCTION,2459, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,2460, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,2461, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,2462, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,2463, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,2464, VALUES
WS_MON_JOB_CHECK,FUNCTION,2465, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2466, v_MonRec.wmj_job_name, 'START', v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2467, v_MonRec.wmj_start_param);
WS_MON_JOB_CHECK,FUNCTION,2468, END IF;
WS_MON_JOB_CHECK,FUNCTION,2469, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2470, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,2471, v_MsgText := 'Notification for failure to start on time.'||
WS_MON_JOB_CHECK,FUNCTION,2472, ' No running jobs and previous job started '||
WS_MON_JOB_CHECK,FUNCTION,2473, to_char(v_LogRec.wjl_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2474, ' and completed '||
WS_MON_JOB_CHECK,FUNCTION,2475, to_char(v_LogRec.wjl_completed,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2476, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2477, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2478, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2479, VALUES
WS_MON_JOB_CHECK,FUNCTION,2480, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2481, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,2482, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2483, END IF;
WS_MON_JOB_CHECK,FUNCTION,2484, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,2485, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,2486, END IF;
WS_MON_JOB_CHECK,FUNCTION,2487,
WS_MON_JOB_CHECK,FUNCTION,2488, ELSE -- current iteration, now check to see if started on time
WS_MON_JOB_CHECK,FUNCTION,2489,
WS_MON_JOB_CHECK,FUNCTION,2490, IF v_LogRec.wjl_started > v_start_date THEN
WS_MON_JOB_CHECK,FUNCTION,2491, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,2492, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,2493, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,2494, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,2495, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,2496, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2497, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,2498, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,2499, END IF;
WS_MON_JOB_CHECK,FUNCTION,2500, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2501, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2502, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2503, ELSE
WS_MON_JOB_CHECK,FUNCTION,2504, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2505, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2506, END IF;
WS_MON_JOB_CHECK,FUNCTION,2507, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2508, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2509, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2510,
WS_MON_JOB_CHECK,FUNCTION,2511,
WS_MON_JOB_CHECK,FUNCTION,2512, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'START'
WS_MON_JOB_CHECK,FUNCTION,2513, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,2514, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,2515, v_MsgText := 'Notification for failure to start on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,2516, ' Started late.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,2517, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2518, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2519, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2520, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2521, VALUES
WS_MON_JOB_CHECK,FUNCTION,2522, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2523, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2524, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2525, END IF;
WS_MON_JOB_CHECK,FUNCTION,2526, ELSE
WS_MON_JOB_CHECK,FUNCTION,2527, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,2528, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,2529, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,2530, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2531, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,2532, wmn_notify_type = 'START',
WS_MON_JOB_CHECK,FUNCTION,2533, wmn_script_key = v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2534, wmn_parameter = v_MonRec.wmj_start_param
WS_MON_JOB_CHECK,FUNCTION,2535, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2536,
WS_MON_JOB_CHECK,FUNCTION,2537, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,2538, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,2539, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,2540, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,2541, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,2542, VALUES
WS_MON_JOB_CHECK,FUNCTION,2543, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2544, v_MonRec.wmj_job_name, 'START', v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2545, v_MonRec.wmj_start_param);
WS_MON_JOB_CHECK,FUNCTION,2546, END IF;
WS_MON_JOB_CHECK,FUNCTION,2547, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2548, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,2549, v_MsgText := 'Notification for failure to start on time.'||
WS_MON_JOB_CHECK,FUNCTION,2550, ' Job started late at '||
WS_MON_JOB_CHECK,FUNCTION,2551, to_char(v_LogRec.wjl_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2552, ' and completed '||
WS_MON_JOB_CHECK,FUNCTION,2553, to_char(v_LogRec.wjl_completed,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2554, '. Start was required by '||
WS_MON_JOB_CHECK,FUNCTION,2555, LPAD(v_start_hh,2,'0')||':'||LPAD(v_start_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,2556, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2557, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2558, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2559, VALUES
WS_MON_JOB_CHECK,FUNCTION,2560, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2561, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,2562, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2563, END IF;
WS_MON_JOB_CHECK,FUNCTION,2564, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,2565, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,2566, END IF;
WS_MON_JOB_CHECK,FUNCTION,2567,
WS_MON_JOB_CHECK,FUNCTION,2568, ELSE -- all okay
WS_MON_JOB_CHECK,FUNCTION,2569, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2570, v_MsgText := 'Must start by check found completed job. '||
WS_MON_JOB_CHECK,FUNCTION,2571, 'Job started at '||to_char(v_LogRec.wjl_started,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2572, ' and completed '||
WS_MON_JOB_CHECK,FUNCTION,2573, to_char(v_LogRec.wjl_completed,'DD-MON-YYYY HH24:MI')||
WS_MON_JOB_CHECK,FUNCTION,2574, ' which is before the must start by time of '||
WS_MON_JOB_CHECK,FUNCTION,2575, LPAD(v_start_hh,2,'0')||':'||LPAD(v_start_mm,2,'0')||
WS_MON_JOB_CHECK,FUNCTION,2576, '. All Okay.';
WS_MON_JOB_CHECK,FUNCTION,2577, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2578, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2579, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2580, VALUES
WS_MON_JOB_CHECK,FUNCTION,2581, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2582, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2583, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2584, END IF;
WS_MON_JOB_CHECK,FUNCTION,2585, END IF; -- end of did it start on time
WS_MON_JOB_CHECK,FUNCTION,2586, END IF; -- end of completed job
WS_MON_JOB_CHECK,FUNCTION,2587, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2588, -- Not running and no completed entries therefore
WS_MON_JOB_CHECK,FUNCTION,2589, -- we havent started so notify of a problem
WS_MON_JOB_CHECK,FUNCTION,2590, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2591, ELSE
WS_MON_JOB_CHECK,FUNCTION,2592, -- About to notify, so check to see if we have already
WS_MON_JOB_CHECK,FUNCTION,2593, -- sent a notification for this problem in our lookback
WS_MON_JOB_CHECK,FUNCTION,2594, -- period. If we have then skip the notification
WS_MON_JOB_CHECK,FUNCTION,2595, v_work := v_check_hh - p_check_back_hh;
WS_MON_JOB_CHECK,FUNCTION,2596, v_work2 := v_check_mm - p_check_back_mm;
WS_MON_JOB_CHECK,FUNCTION,2597, IF v_work2 < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2598, v_work2 := v_work2 + 60;
WS_MON_JOB_CHECK,FUNCTION,2599, v_work := v_work -1;
WS_MON_JOB_CHECK,FUNCTION,2600, END IF;
WS_MON_JOB_CHECK,FUNCTION,2601, IF v_work < 0 THEN
WS_MON_JOB_CHECK,FUNCTION,2602, v_work2 := ((v_work+24) * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2603, v_work := to_number(to_char(sysdate-1,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2604, ELSE
WS_MON_JOB_CHECK,FUNCTION,2605, v_work2 := (v_work * 100) + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2606, v_work := to_number(to_char(sysdate,'YYYYMMDD'));
WS_MON_JOB_CHECK,FUNCTION,2607, END IF;
WS_MON_JOB_CHECK,FUNCTION,2608, v_work := v_work * 10000;
WS_MON_JOB_CHECK,FUNCTION,2609, v_work := v_work + v_work2;
WS_MON_JOB_CHECK,FUNCTION,2610, v_required_check := to_date(v_work,'YYYYMMDDHH24MI');
WS_MON_JOB_CHECK,FUNCTION,2611,
WS_MON_JOB_CHECK,FUNCTION,2612,
WS_MON_JOB_CHECK,FUNCTION,2613, IF NVL(v_MonRec.wmj_last_notify_type,'XX') = 'START'
WS_MON_JOB_CHECK,FUNCTION,2614, AND NVL(v_MonRec.wmj_last_notify_date,sysdate-10) > v_required_check THEN
WS_MON_JOB_CHECK,FUNCTION,2615, IF p_log_level >= 3 THEN
WS_MON_JOB_CHECK,FUNCTION,2616, v_MsgText := 'Notification for failure to start on time Skipped.'||
WS_MON_JOB_CHECK,FUNCTION,2617, ' No running or completed jobs.'||' Notification already sent at '||
WS_MON_JOB_CHECK,FUNCTION,2618, to_char(v_MonRec.wmj_last_notify_date,'DD-MON-YYYY HH24:MI');
WS_MON_JOB_CHECK,FUNCTION,2619, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2620, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2621, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2622, VALUES
WS_MON_JOB_CHECK,FUNCTION,2623, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2624, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2625, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2626, END IF;
WS_MON_JOB_CHECK,FUNCTION,2627, ELSE
WS_MON_JOB_CHECK,FUNCTION,2628, v_notify_key := v_notify_key + 1;
WS_MON_JOB_CHECK,FUNCTION,2629, UPDATE ws_wrk_mon_notify SET
WS_MON_JOB_CHECK,FUNCTION,2630, wmn_time_stamp = sysdate,
WS_MON_JOB_CHECK,FUNCTION,2631, wmn_job_key = v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2632, wmn_job_name = v_MonRec.wmj_job_name,
WS_MON_JOB_CHECK,FUNCTION,2633, wmn_notify_type = 'START',
WS_MON_JOB_CHECK,FUNCTION,2634, wmn_script_key = v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2635, wmn_parameter = v_MonRec.wmj_start_param
WS_MON_JOB_CHECK,FUNCTION,2636, WHERE wmn_notify_number = v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2637,
WS_MON_JOB_CHECK,FUNCTION,2638, IF SQL%NOTFOUND THEN
WS_MON_JOB_CHECK,FUNCTION,2639, INSERT INTO ws_wrk_mon_notify
WS_MON_JOB_CHECK,FUNCTION,2640, ( wmn_notify_number, wmn_time_stamp, wmn_job_key,
WS_MON_JOB_CHECK,FUNCTION,2641, wmn_job_name, wmn_notify_type, wmn_script_key,
WS_MON_JOB_CHECK,FUNCTION,2642, wmn_parameter)
WS_MON_JOB_CHECK,FUNCTION,2643, VALUES
WS_MON_JOB_CHECK,FUNCTION,2644, ( v_notify_key, sysdate, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2645, v_MonRec.wmj_job_name, 'START', v_MonRec.wmj_start_script_key,
WS_MON_JOB_CHECK,FUNCTION,2646, v_MonRec.wmj_start_param);
WS_MON_JOB_CHECK,FUNCTION,2647, END IF;
WS_MON_JOB_CHECK,FUNCTION,2648, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2649, IF p_log_level >= 2 THEN
WS_MON_JOB_CHECK,FUNCTION,2650, v_MsgText := 'Notification for failure to start on time. No Running or completed jobs';
WS_MON_JOB_CHECK,FUNCTION,2651, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2652, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2653, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2654, VALUES
WS_MON_JOB_CHECK,FUNCTION,2655, ( sysdate, 'W', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2656, v_MonRec.wmj_job_name, 'Y');
WS_MON_JOB_CHECK,FUNCTION,2657, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2658, END IF;
WS_MON_JOB_CHECK,FUNCTION,2659, v_valid := 0; -- skip the rest of the checks
WS_MON_JOB_CHECK,FUNCTION,2660, v_notify := 1;
WS_MON_JOB_CHECK,FUNCTION,2661, END IF;
WS_MON_JOB_CHECK,FUNCTION,2662, END IF;
WS_MON_JOB_CHECK,FUNCTION,2663,
WS_MON_JOB_CHECK,FUNCTION,2664,
WS_MON_JOB_CHECK,FUNCTION,2665,
WS_MON_JOB_CHECK,FUNCTION,2666, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2667, -- If Skipping the check log a message if log level 9
WS_MON_JOB_CHECK,FUNCTION,2668, --=====================================================
WS_MON_JOB_CHECK,FUNCTION,2669, ELSE
WS_MON_JOB_CHECK,FUNCTION,2670, IF p_log_level >= 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2671, v_MsgText := 'Must start by check skipped. Current time '||
WS_MON_JOB_CHECK,FUNCTION,2672, LPAD(v_check_hh,2,'0')||':'||LPAD(v_check_mm,2,'0')||'. Check was for '||
WS_MON_JOB_CHECK,FUNCTION,2673, LPAD(v_start_hh,2,'0')||':'||LPAD(v_start_mm,2,'0')||' back '||
WS_MON_JOB_CHECK,FUNCTION,2674, LPAD(v_hh_last,2,'0')||':'||LPAD(v_mm_last,2,'0')||' which is more than look back of '||
WS_MON_JOB_CHECK,FUNCTION,2675, LPAD(p_check_back_hh,2,'0')||':'||LPAD(p_check_back_mm,2,'0');
WS_MON_JOB_CHECK,FUNCTION,2676, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2677, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2678, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2679, VALUES
WS_MON_JOB_CHECK,FUNCTION,2680, ( sysdate, 'I', v_MsgText, v_MonRec.wmj_job_key,
WS_MON_JOB_CHECK,FUNCTION,2681, v_MonRec.wmj_job_name, 'N');
WS_MON_JOB_CHECK,FUNCTION,2682, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2683, END IF;
WS_MON_JOB_CHECK,FUNCTION,2684, END IF;
WS_MON_JOB_CHECK,FUNCTION,2685,
WS_MON_JOB_CHECK,FUNCTION,2686,
WS_MON_JOB_CHECK,FUNCTION,2687, END IF; -- End of Start Check
WS_MON_JOB_CHECK,FUNCTION,2688,
WS_MON_JOB_CHECK,FUNCTION,2689,
WS_MON_JOB_CHECK,FUNCTION,2690,
WS_MON_JOB_CHECK,FUNCTION,2691,
WS_MON_JOB_CHECK,FUNCTION,2692, --**************************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2693, -- END OF CHECKS
WS_MON_JOB_CHECK,FUNCTION,2694, --**************************************************************************************************************
WS_MON_JOB_CHECK,FUNCTION,2695,
WS_MON_JOB_CHECK,FUNCTION,2696, END LOOP; -- End of Jobs to check
WS_MON_JOB_CHECK,FUNCTION,2697,
WS_MON_JOB_CHECK,FUNCTION,2698,
WS_MON_JOB_CHECK,FUNCTION,2699, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2700, -- Maximum of 9 notifies
WS_MON_JOB_CHECK,FUNCTION,2701, IF v_notify_key > 9 THEN
WS_MON_JOB_CHECK,FUNCTION,2702, v_notify_key := 9;
WS_MON_JOB_CHECK,FUNCTION,2703, END IF;
WS_MON_JOB_CHECK,FUNCTION,2704, p_job_count := v_notify_key;
WS_MON_JOB_CHECK,FUNCTION,2705, RETURN 1;
WS_MON_JOB_CHECK,FUNCTION,2706,
WS_MON_JOB_CHECK,FUNCTION,2707,EXCEPTION
WS_MON_JOB_CHECK,FUNCTION,2708, WHEN OTHERS THEN
WS_MON_JOB_CHECK,FUNCTION,2709, v_MsgText := 'Unhandled Exception in ws_mon_job_check. '||
WS_MON_JOB_CHECK,FUNCTION,2710, ' Step ' ||v_step;
WS_MON_JOB_CHECK,FUNCTION,2711, INSERT INTO ws_wrk_mon_log
WS_MON_JOB_CHECK,FUNCTION,2712, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_JOB_CHECK,FUNCTION,2713, wml_job_name, wml_notify_ind )
WS_MON_JOB_CHECK,FUNCTION,2714, VALUES
WS_MON_JOB_CHECK,FUNCTION,2715, ( sysdate, 'E', v_MsgText, NULL,
WS_MON_JOB_CHECK,FUNCTION,2716, NULL, 'N');
WS_MON_JOB_CHECK,FUNCTION,2717, COMMIT;
WS_MON_JOB_CHECK,FUNCTION,2718, p_job_count := 0;
WS_MON_JOB_CHECK,FUNCTION,2719, RETURN -3;
WS_MON_JOB_CHECK,FUNCTION,2720,
WS_MON_JOB_CHECK,FUNCTION,2721,END ws_mon_job_check;
WS_MON_JOB_CHECK,FUNCTION,2722,
WS_MON_STATUS,FUNCTION,1,function Ws_Mon_Status
WS_MON_STATUS,FUNCTION,2, (
WS_MON_STATUS,FUNCTION,3, p_option IN varchar2,
WS_MON_STATUS,FUNCTION,4, p_host IN varchar2,
WS_MON_STATUS,FUNCTION,5, p_version IN varchar2,
WS_MON_STATUS,FUNCTION,6, p_os_type IN varchar2,
WS_MON_STATUS,FUNCTION,7, p_back_hh IN number,
WS_MON_STATUS,FUNCTION,8, p_back_mm IN number,
WS_MON_STATUS,FUNCTION,9, p_log_level IN number,
WS_MON_STATUS,FUNCTION,10, p_job_interval IN number,
WS_MON_STATUS,FUNCTION,11, p_db_interval IN number,
WS_MON_STATUS,FUNCTION,12, p_unix_scheduler OUT number,
WS_MON_STATUS,FUNCTION,13, p_win_scheduler OUT number
WS_MON_STATUS,FUNCTION,14, )
WS_MON_STATUS,FUNCTION,15, Return integer
WS_MON_STATUS,FUNCTION,16, AUTHID CURRENT_USER
WS_MON_STATUS,FUNCTION,17, IS
WS_MON_STATUS,FUNCTION,18,
WS_MON_STATUS,FUNCTION,19, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_MON_STATUS,FUNCTION,20,
WS_MON_STATUS,FUNCTION,21, -- ==============================================================================
WS_MON_STATUS,FUNCTION,22, -- DBMS Name : Oracle
WS_MON_STATUS,FUNCTION,23, -- Script Name : Ws_Mon_Status
WS_MON_STATUS,FUNCTION,24, -- Description : Updates the monitor status
WS_MON_STATUS,FUNCTION,25, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_MON_STATUS,FUNCTION,26, -- ==============================================================================
WS_MON_STATUS,FUNCTION,27,
WS_MON_STATUS,FUNCTION,28, --=====================================================
WS_MON_STATUS,FUNCTION,29, -- Control variables used in most programs
WS_MON_STATUS,FUNCTION,30, --=====================================================
WS_MON_STATUS,FUNCTION,31, v_MsgText varchar2(2048); -- Text for audit_trail
WS_MON_STATUS,FUNCTION,32, v_step integer := 0; -- return code
WS_MON_STATUS,FUNCTION,33, v_count integer := 0; -- General counter;
WS_MON_STATUS,FUNCTION,34, v_return_status integer := 0; -- value returned by this function
WS_MON_STATUS,FUNCTION,35, v_last_update date; -- date time the database monitoring parameters where last changed
WS_MON_STATUS,FUNCTION,36, v_last_script_update date; -- datetime the monitoring info was last retrieved by the monitor
WS_MON_STATUS,FUNCTION,37, v_db_mon_ind varchar2(1); -- indicator to show if we have database monitoring
WS_MON_STATUS,FUNCTION,38, v_active_date date; -- date scheduler last active
WS_MON_STATUS,FUNCTION,39,
WS_MON_STATUS,FUNCTION,40,BEGIN
WS_MON_STATUS,FUNCTION,41,
WS_MON_STATUS,FUNCTION,42, v_step :=100;
WS_MON_STATUS,FUNCTION,43,
WS_MON_STATUS,FUNCTION,44, --=====================================================
WS_MON_STATUS,FUNCTION,45, -- Get the time the db monitoring info was last updated
WS_MON_STATUS,FUNCTION,46, --=====================================================
WS_MON_STATUS,FUNCTION,47, BEGIN
WS_MON_STATUS,FUNCTION,48, SELECT NVL(wmd_last_updated,sysdate-100) INTO v_last_update
WS_MON_STATUS,FUNCTION,49, FROM ws_wrk_mon_db;
WS_MON_STATUS,FUNCTION,50, v_db_mon_ind := 'Y';
WS_MON_STATUS,FUNCTION,51, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_MON_STATUS,FUNCTION,52, v_last_update := to_date('19010101','YYYYMMDD');
WS_MON_STATUS,FUNCTION,53, v_db_mon_ind := 'N';
WS_MON_STATUS,FUNCTION,54, WHEN OTHERS THEN
WS_MON_STATUS,FUNCTION,55, v_MsgText := SUBSTR('Unhandled Exception in ws_mon_status reading ws_wrk_mon_db. '||
WS_MON_STATUS,FUNCTION,56, SQLERRM,1,2047);
WS_MON_STATUS,FUNCTION,57, INSERT INTO ws_wrk_mon_log
WS_MON_STATUS,FUNCTION,58, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_STATUS,FUNCTION,59, wml_job_name, wml_notify_ind )
WS_MON_STATUS,FUNCTION,60, VALUES
WS_MON_STATUS,FUNCTION,61, ( sysdate, 'F', v_MsgText, NULL,
WS_MON_STATUS,FUNCTION,62, NULL, 'N');
WS_MON_STATUS,FUNCTION,63, COMMIT;
WS_MON_STATUS,FUNCTION,64, RETURN -3;
WS_MON_STATUS,FUNCTION,65, END;
WS_MON_STATUS,FUNCTION,66,
WS_MON_STATUS,FUNCTION,67, --=====================================================
WS_MON_STATUS,FUNCTION,68, -- Get the time the external monitor routine last
WS_MON_STATUS,FUNCTION,69, -- refreshed its scripts and commands from the
WS_MON_STATUS,FUNCTION,70, -- monitoring information.
WS_MON_STATUS,FUNCTION,71, --=====================================================
WS_MON_STATUS,FUNCTION,72, BEGIN
WS_MON_STATUS,FUNCTION,73, SELECT NVL(wms_last_script_update,sysdate-1000) INTO v_last_script_update
WS_MON_STATUS,FUNCTION,74, FROM ws_wrk_mon_status;
WS_MON_STATUS,FUNCTION,75, EXCEPTION WHEN NO_DATA_FOUND THEN
WS_MON_STATUS,FUNCTION,76, v_last_script_update := sysdate;
WS_MON_STATUS,FUNCTION,77, WHEN OTHERS THEN
WS_MON_STATUS,FUNCTION,78, v_MsgText := SUBSTR('Unhandled Exception in ws_mon_status reading ws_wrk_mon_status. '||
WS_MON_STATUS,FUNCTION,79, SQLERRM,1,2047);
WS_MON_STATUS,FUNCTION,80, INSERT INTO ws_wrk_mon_log
WS_MON_STATUS,FUNCTION,81, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_STATUS,FUNCTION,82, wml_job_name, wml_notify_ind )
WS_MON_STATUS,FUNCTION,83, VALUES
WS_MON_STATUS,FUNCTION,84, ( sysdate, 'F', v_MsgText, NULL,
WS_MON_STATUS,FUNCTION,85, NULL, 'N');
WS_MON_STATUS,FUNCTION,86, COMMIT;
WS_MON_STATUS,FUNCTION,87, RETURN -3;
WS_MON_STATUS,FUNCTION,88, END;
WS_MON_STATUS,FUNCTION,89,
WS_MON_STATUS,FUNCTION,90, --=====================================================
WS_MON_STATUS,FUNCTION,91, -- If the monitoring information has been changed then
WS_MON_STATUS,FUNCTION,92, -- set the return status so that we pick up the new
WS_MON_STATUS,FUNCTION,93, -- information
WS_MON_STATUS,FUNCTION,94, --=====================================================
WS_MON_STATUS,FUNCTION,95, IF v_last_update > v_last_script_update THEN
WS_MON_STATUS,FUNCTION,96, v_return_status := 2;
WS_MON_STATUS,FUNCTION,97, ELSE
WS_MON_STATUS,FUNCTION,98, v_return_status := 1;
WS_MON_STATUS,FUNCTION,99, END IF;
WS_MON_STATUS,FUNCTION,100,
WS_MON_STATUS,FUNCTION,101, --=====================================================
WS_MON_STATUS,FUNCTION,102, -- Update the status table to show that we are active
WS_MON_STATUS,FUNCTION,103, -- If a status update requested
WS_MON_STATUS,FUNCTION,104, --=====================================================
WS_MON_STATUS,FUNCTION,105, IF p_option = 'STATUS' THEN
WS_MON_STATUS,FUNCTION,106, UPDATE ws_wrk_mon_status
WS_MON_STATUS,FUNCTION,107, SET
WS_MON_STATUS,FUNCTION,108, wms_time_stamp = sysdate,
WS_MON_STATUS,FUNCTION,109, wms_host = p_host,
WS_MON_STATUS,FUNCTION,110, wms_version = p_version,
WS_MON_STATUS,FUNCTION,111, wms_os_type = p_os_type,
WS_MON_STATUS,FUNCTION,112, wms_db_mon_ind = v_db_mon_ind,
WS_MON_STATUS,FUNCTION,113, wms_lookback_hours = p_back_hh,
WS_MON_STATUS,FUNCTION,114, wms_lookback_mins = p_back_mm,
WS_MON_STATUS,FUNCTION,115, wms_log_level = p_log_level,
WS_MON_STATUS,FUNCTION,116, wms_job_poll_interval = p_job_interval,
WS_MON_STATUS,FUNCTION,117, wms_db_poll_interval = p_db_interval;
WS_MON_STATUS,FUNCTION,118, IF SQL%NOTFOUND THEN
WS_MON_STATUS,FUNCTION,119, INSERT INTO ws_wrk_mon_status (
WS_MON_STATUS,FUNCTION,120, wms_time_stamp,
WS_MON_STATUS,FUNCTION,121, wms_host ,
WS_MON_STATUS,FUNCTION,122, wms_version,
WS_MON_STATUS,FUNCTION,123, wms_os_type,
WS_MON_STATUS,FUNCTION,124, wms_db_mon_ind,
WS_MON_STATUS,FUNCTION,125, wms_lookback_hours,
WS_MON_STATUS,FUNCTION,126, wms_lookback_mins,
WS_MON_STATUS,FUNCTION,127, wms_log_level,
WS_MON_STATUS,FUNCTION,128, wms_job_poll_interval,
WS_MON_STATUS,FUNCTION,129, wms_db_poll_interval
WS_MON_STATUS,FUNCTION,130, ) VALUES (
WS_MON_STATUS,FUNCTION,131, sysdate,
WS_MON_STATUS,FUNCTION,132, p_host,
WS_MON_STATUS,FUNCTION,133, p_version,
WS_MON_STATUS,FUNCTION,134, p_os_type,
WS_MON_STATUS,FUNCTION,135, v_db_mon_ind,
WS_MON_STATUS,FUNCTION,136, p_back_hh,
WS_MON_STATUS,FUNCTION,137, p_back_mm,
WS_MON_STATUS,FUNCTION,138, p_log_level,
WS_MON_STATUS,FUNCTION,139, p_job_interval,
WS_MON_STATUS,FUNCTION,140, p_db_interval
WS_MON_STATUS,FUNCTION,141, );
WS_MON_STATUS,FUNCTION,142, END IF;
WS_MON_STATUS,FUNCTION,143, END IF; -- end of status update requested
WS_MON_STATUS,FUNCTION,144,
WS_MON_STATUS,FUNCTION,145, --=====================================================
WS_MON_STATUS,FUNCTION,146, -- Get the scheduler status
WS_MON_STATUS,FUNCTION,147, --=====================================================
WS_MON_STATUS,FUNCTION,148, p_unix_scheduler := 0;
WS_MON_STATUS,FUNCTION,149, p_win_scheduler := 0;
WS_MON_STATUS,FUNCTION,150,
WS_MON_STATUS,FUNCTION,151, --=====================================================
WS_MON_STATUS,FUNCTION,152, -- Unix scheduler
WS_MON_STATUS,FUNCTION,153, --=====================================================
WS_MON_STATUS,FUNCTION,154, SELECT MAX(ws_active_date) INTO v_active_date
WS_MON_STATUS,FUNCTION,155, FROM ws_wrk_scheduler
WS_MON_STATUS,FUNCTION,156, WHERE ws_type_ind = 'U';
WS_MON_STATUS,FUNCTION,157,
WS_MON_STATUS,FUNCTION,158, --=====================================================
WS_MON_STATUS,FUNCTION,159, -- If no scheduler then indicate 0
WS_MON_STATUS,FUNCTION,160, -- If scheduler not active in the last 1 hour then
WS_MON_STATUS,FUNCTION,161, -- its down
WS_MON_STATUS,FUNCTION,162, --=====================================================
WS_MON_STATUS,FUNCTION,163, IF v_active_date IS NULL THEN
WS_MON_STATUS,FUNCTION,164, p_unix_scheduler := 0;
WS_MON_STATUS,FUNCTION,165, ELSIF v_active_date < sysdate-0.0417 THEN
WS_MON_STATUS,FUNCTION,166, p_unix_scheduler := 0;
WS_MON_STATUS,FUNCTION,167, ELSE
WS_MON_STATUS,FUNCTION,168, p_unix_scheduler := 1;
WS_MON_STATUS,FUNCTION,169, END IF;
WS_MON_STATUS,FUNCTION,170,
WS_MON_STATUS,FUNCTION,171, --=====================================================
WS_MON_STATUS,FUNCTION,172, -- Windows scheduler
WS_MON_STATUS,FUNCTION,173, --=====================================================
WS_MON_STATUS,FUNCTION,174, SELECT MAX(ws_active_date) INTO v_active_date
WS_MON_STATUS,FUNCTION,175, FROM ws_wrk_scheduler
WS_MON_STATUS,FUNCTION,176, WHERE ws_type_ind = 'W';
WS_MON_STATUS,FUNCTION,177,
WS_MON_STATUS,FUNCTION,178, --=====================================================
WS_MON_STATUS,FUNCTION,179, -- If no scheduler then indicate 0
WS_MON_STATUS,FUNCTION,180, -- If scheduler not active in the last 1 hour then
WS_MON_STATUS,FUNCTION,181, -- its down
WS_MON_STATUS,FUNCTION,182, --=====================================================
WS_MON_STATUS,FUNCTION,183, IF v_active_date IS NULL THEN
WS_MON_STATUS,FUNCTION,184, p_win_scheduler := 0;
WS_MON_STATUS,FUNCTION,185, ELSIF v_active_date < sysdate-0.0417 THEN
WS_MON_STATUS,FUNCTION,186, p_win_scheduler := 0;
WS_MON_STATUS,FUNCTION,187, ELSE
WS_MON_STATUS,FUNCTION,188, p_win_scheduler := 1;
WS_MON_STATUS,FUNCTION,189, END IF;
WS_MON_STATUS,FUNCTION,190,
WS_MON_STATUS,FUNCTION,191, --=====================================================
WS_MON_STATUS,FUNCTION,192, --All Done report the results and return.
WS_MON_STATUS,FUNCTION,193, --=====================================================
WS_MON_STATUS,FUNCTION,194, COMMIT;
WS_MON_STATUS,FUNCTION,195, v_step := 200;
WS_MON_STATUS,FUNCTION,196,
WS_MON_STATUS,FUNCTION,197, RETURN v_return_status;
WS_MON_STATUS,FUNCTION,198,
WS_MON_STATUS,FUNCTION,199,EXCEPTION
WS_MON_STATUS,FUNCTION,200, --=====================================================
WS_MON_STATUS,FUNCTION,201, -- Unhandled Exception. Return with Fatal Error
WS_MON_STATUS,FUNCTION,202, --=====================================================
WS_MON_STATUS,FUNCTION,203, WHEN OTHERS THEN
WS_MON_STATUS,FUNCTION,204, v_MsgText := SUBSTR('Unhandled Exception in ws_mon_status. '||
WS_MON_STATUS,FUNCTION,205, ' Step ' ||v_step||' '|| SQLERRM,1,2047);
WS_MON_STATUS,FUNCTION,206, INSERT INTO ws_wrk_mon_log
WS_MON_STATUS,FUNCTION,207, ( wml_time_stamp, wml_status, wml_message, wml_job_key,
WS_MON_STATUS,FUNCTION,208, wml_job_name, wml_notify_ind )
WS_MON_STATUS,FUNCTION,209, VALUES
WS_MON_STATUS,FUNCTION,210, ( sysdate, 'F', v_MsgText, NULL,
WS_MON_STATUS,FUNCTION,211, NULL, 'N');
WS_MON_STATUS,FUNCTION,212, COMMIT;
WS_MON_STATUS,FUNCTION,213, RETURN -3;
WS_MON_STATUS,FUNCTION,214,END Ws_Mon_Status;
WS_MON_STATUS,FUNCTION,215,
WS_OBJECT_INFO,FUNCTION,1,FUNCTION Ws_Object_Info
WS_OBJECT_INFO,FUNCTION,2, ( p_sequence IN integer
WS_OBJECT_INFO,FUNCTION,3, , p_job_name IN varchar2
WS_OBJECT_INFO,FUNCTION,4, , p_task_name IN varchar2
WS_OBJECT_INFO,FUNCTION,5, , p_job_id IN integer
WS_OBJECT_INFO,FUNCTION,6, , p_task_id IN integer
WS_OBJECT_INFO,FUNCTION,7, , p_obj_key IN integer
WS_OBJECT_INFO,FUNCTION,8, , p_obj_name IN varchar2
WS_OBJECT_INFO,FUNCTION,9, , p_info_type IN varchar2
WS_OBJECT_INFO,FUNCTION,10, , p_return_code OUT varchar2
WS_OBJECT_INFO,FUNCTION,11, , p_return_msg OUT varchar2
WS_OBJECT_INFO,FUNCTION,12, , p_result OUT integer
WS_OBJECT_INFO,FUNCTION,13, )
WS_OBJECT_INFO,FUNCTION,14,RETURN VARCHAR2
WS_OBJECT_INFO,FUNCTION,15,AUTHID CURRENT_USER
WS_OBJECT_INFO,FUNCTION,16,IS
WS_OBJECT_INFO,FUNCTION,17,
WS_OBJECT_INFO,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_OBJECT_INFO,FUNCTION,19,
WS_OBJECT_INFO,FUNCTION,20, -- =============================================================================
WS_OBJECT_INFO,FUNCTION,21, -- DBMS Name : Oracle
WS_OBJECT_INFO,FUNCTION,22, -- Script Name : Ws_Object_Info
WS_OBJECT_INFO,FUNCTION,23, -- Description : Returns requested information regarding an object
WS_OBJECT_INFO,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_OBJECT_INFO,FUNCTION,25, -- =============================================================================
WS_OBJECT_INFO,FUNCTION,26,
WS_OBJECT_INFO,FUNCTION,27, --=====================================================
WS_OBJECT_INFO,FUNCTION,28, -- Constants
WS_OBJECT_INFO,FUNCTION,29, --=====================================================
WS_OBJECT_INFO,FUNCTION,30, v_ws_pro_version constant varchar2(15) := '(8.4.1.0)';
WS_OBJECT_INFO,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_OBJECT_INFO,FUNCTION,32, v_ws_obj_fact_kpi constant number := 2;
WS_OBJECT_INFO,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_OBJECT_INFO,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_OBJECT_INFO,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_OBJECT_INFO,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_OBJECT_INFO,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_OBJECT_INFO,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_OBJECT_INFO,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_OBJECT_INFO,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_OBJECT_INFO,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_OBJECT_INFO,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_OBJECT_INFO,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_OBJECT_INFO,FUNCTION,44, v_ws_obj_cube constant number := 15;
WS_OBJECT_INFO,FUNCTION,45, v_ws_obj_cube_virtual constant number := 16;
WS_OBJECT_INFO,FUNCTION,46, v_ws_obj_report constant number := 17;
WS_OBJECT_INFO,FUNCTION,47, v_ws_obj_view constant number := 18;
WS_OBJECT_INFO,FUNCTION,48, v_ws_obj_file constant number := 19;
WS_OBJECT_INFO,FUNCTION,49, v_ws_obj_join constant number := 20;
WS_OBJECT_INFO,FUNCTION,50, v_ws_obj_retro constant number := 21;
WS_OBJECT_INFO,FUNCTION,51, v_ws_obj_retro_copy constant number := 22;
WS_OBJECT_INFO,FUNCTION,52, v_ws_obj_olap_cube constant number := 23;
WS_OBJECT_INFO,FUNCTION,53, v_ws_obj_olap_dim constant number := 24;
WS_OBJECT_INFO,FUNCTION,54, v_ws_obj_olap_role constant number := 25;
WS_OBJECT_INFO,FUNCTION,55, v_ws_obj_ods constant number := 26;
WS_OBJECT_INFO,FUNCTION,56, v_ws_obj_normal constant number := 27;
WS_OBJECT_INFO,FUNCTION,57, v_ws_obj_hub constant number := 28;
WS_OBJECT_INFO,FUNCTION,58, v_ws_obj_satellite constant number := 29;
WS_OBJECT_INFO,FUNCTION,59, v_ws_obj_link constant number := 30;
WS_OBJECT_INFO,FUNCTION,60, v_ws_obj_custom1 constant number := 31;
WS_OBJECT_INFO,FUNCTION,61, v_ws_obj_custom2 constant number := 32;
WS_OBJECT_INFO,FUNCTION,62, v_ws_obj_max constant number := 32;
WS_OBJECT_INFO,FUNCTION,63,
WS_OBJECT_INFO,FUNCTION,64, v_ws_obj_job constant number := 50;
WS_OBJECT_INFO,FUNCTION,65,
WS_OBJECT_INFO,FUNCTION,66, v_ws_act_drop constant number := 1;
WS_OBJECT_INFO,FUNCTION,67, v_ws_act_create constant number := 2;
WS_OBJECT_INFO,FUNCTION,68, v_ws_act_drop_all constant number := 3;
WS_OBJECT_INFO,FUNCTION,69, v_ws_act_pre_drop constant number := 4;
WS_OBJECT_INFO,FUNCTION,70, v_ws_act_load constant number := 5;
WS_OBJECT_INFO,FUNCTION,71, v_ws_act_update constant number := 6;
WS_OBJECT_INFO,FUNCTION,72, v_ws_act_execute constant number := 7;
WS_OBJECT_INFO,FUNCTION,73, v_ws_act_process constant number := 8;
WS_OBJECT_INFO,FUNCTION,74, v_ws_act_build constant number := 9;
WS_OBJECT_INFO,FUNCTION,75, v_ws_act_build_all constant number := 10;
WS_OBJECT_INFO,FUNCTION,76, v_ws_act_analyze constant number := 11;
WS_OBJECT_INFO,FUNCTION,77, v_ws_act_quick_analyze constant number := 12;
WS_OBJECT_INFO,FUNCTION,78, v_ws_act_statistics constant number := 13;
WS_OBJECT_INFO,FUNCTION,79, v_ws_act_quick_statistics constant number := 14;
WS_OBJECT_INFO,FUNCTION,80, v_ws_act_initial constant number := 15;
WS_OBJECT_INFO,FUNCTION,81, v_ws_act_cube_dim constant number := 16;
WS_OBJECT_INFO,FUNCTION,82, v_ws_act_db_dim constant number := 17;
WS_OBJECT_INFO,FUNCTION,83, v_ws_act_custom constant number := 18;
WS_OBJECT_INFO,FUNCTION,84, v_ws_act_truncate constant number := 19;
WS_OBJECT_INFO,FUNCTION,85,
WS_OBJECT_INFO,FUNCTION,86, --=====================================================
WS_OBJECT_INFO,FUNCTION,87, -- Variables
WS_OBJECT_INFO,FUNCTION,88, --=====================================================
WS_OBJECT_INFO,FUNCTION,89, v_msgtext VARCHAR2(1024); -- Text for audit_trail
WS_OBJECT_INFO,FUNCTION,90, v_set INTEGER; -- commit set
WS_OBJECT_INFO,FUNCTION,91, v_analyze_flag INTEGER; -- analyze flag
WS_OBJECT_INFO,FUNCTION,92, v_step INTEGER; -- step number
WS_OBJECT_INFO,FUNCTION,93, v_update_count INTEGER; -- no of records updated
WS_OBJECT_INFO,FUNCTION,94, v_insert_count INTEGER; -- no of records inserted
WS_OBJECT_INFO,FUNCTION,95, v_count INTEGER; -- General counter
WS_OBJECT_INFO,FUNCTION,96, v_result INTEGER; -- return code
WS_OBJECT_INFO,FUNCTION,97,
WS_OBJECT_INFO,FUNCTION,98, v_obj_count INTEGER;
WS_OBJECT_INFO,FUNCTION,99, v_obj_key INTEGER;
WS_OBJECT_INFO,FUNCTION,100, v_obj_name VARCHAR2(64);
WS_OBJECT_INFO,FUNCTION,101, v_obj_type INTEGER;
WS_OBJECT_INFO,FUNCTION,102, v_tablespace VARCHAR2(64);
WS_OBJECT_INFO,FUNCTION,103, v_short_name VARCHAR2(64);
WS_OBJECT_INFO,FUNCTION,104, v_info_type VARCHAR2(64);
WS_OBJECT_INFO,FUNCTION,105, v_value VARCHAR2(4000);
WS_OBJECT_INFO,FUNCTION,106,
WS_OBJECT_INFO,FUNCTION,107,BEGIN
WS_OBJECT_INFO,FUNCTION,108,
WS_OBJECT_INFO,FUNCTION,109, v_step := 100;
WS_OBJECT_INFO,FUNCTION,110,
WS_OBJECT_INFO,FUNCTION,111, IF ( p_obj_key IS NOT NULL AND p_obj_name IS NOT NULL ) THEN
WS_OBJECT_INFO,FUNCTION,112,
WS_OBJECT_INFO,FUNCTION,113, p_return_code := 'E';
WS_OBJECT_INFO,FUNCTION,114, p_return_msg := 'Unable to get info as a maximum of one of p_obj_key and p_obj_name can be specified.';
WS_OBJECT_INFO,FUNCTION,115, p_result := -2;
WS_OBJECT_INFO,FUNCTION,116, v_value := '';
WS_OBJECT_INFO,FUNCTION,117,
WS_OBJECT_INFO,FUNCTION,118, RETURN v_value;
WS_OBJECT_INFO,FUNCTION,119,
WS_OBJECT_INFO,FUNCTION,120, END IF;
WS_OBJECT_INFO,FUNCTION,121,
WS_OBJECT_INFO,FUNCTION,122, v_step := 200;
WS_OBJECT_INFO,FUNCTION,123,
WS_OBJECT_INFO,FUNCTION,124, IF ( p_obj_key IS NOT NULL ) THEN
WS_OBJECT_INFO,FUNCTION,125,
WS_OBJECT_INFO,FUNCTION,126, v_step := 300;
WS_OBJECT_INFO,FUNCTION,127,
WS_OBJECT_INFO,FUNCTION,128, SELECT COUNT(*)
WS_OBJECT_INFO,FUNCTION,129, , MAX(oo_name)
WS_OBJECT_INFO,FUNCTION,130, , MAX(oo_type_key)
WS_OBJECT_INFO,FUNCTION,131, INTO v_obj_count
WS_OBJECT_INFO,FUNCTION,132, , v_obj_name
WS_OBJECT_INFO,FUNCTION,133, , v_obj_type
WS_OBJECT_INFO,FUNCTION,134, FROM ws_obj_object
WS_OBJECT_INFO,FUNCTION,135, WHERE oo_obj_key = p_obj_key
WS_OBJECT_INFO,FUNCTION,136, ;
WS_OBJECT_INFO,FUNCTION,137,
WS_OBJECT_INFO,FUNCTION,138, v_step := 400;
WS_OBJECT_INFO,FUNCTION,139,
WS_OBJECT_INFO,FUNCTION,140, v_obj_key := p_obj_key;
WS_OBJECT_INFO,FUNCTION,141,
WS_OBJECT_INFO,FUNCTION,142, ELSIF ( TRIM(p_obj_name) IS NOT NULL ) THEN
WS_OBJECT_INFO,FUNCTION,143,
WS_OBJECT_INFO,FUNCTION,144, v_step := 500;
WS_OBJECT_INFO,FUNCTION,145,
WS_OBJECT_INFO,FUNCTION,146, SELECT COUNT(*)
WS_OBJECT_INFO,FUNCTION,147, , MAX(oo_obj_key)
WS_OBJECT_INFO,FUNCTION,148, , MAX(oo_type_key)
WS_OBJECT_INFO,FUNCTION,149, INTO v_obj_count
WS_OBJECT_INFO,FUNCTION,150, , v_obj_key
WS_OBJECT_INFO,FUNCTION,151, , v_obj_type
WS_OBJECT_INFO,FUNCTION,152, FROM ws_obj_object
WS_OBJECT_INFO,FUNCTION,153, WHERE LOWER(oo_name) = LOWER(p_obj_name)
WS_OBJECT_INFO,FUNCTION,154, ;
WS_OBJECT_INFO,FUNCTION,155,
WS_OBJECT_INFO,FUNCTION,156, v_step := 600;
WS_OBJECT_INFO,FUNCTION,157,
WS_OBJECT_INFO,FUNCTION,158, v_obj_name := p_obj_name;
WS_OBJECT_INFO,FUNCTION,159,
WS_OBJECT_INFO,FUNCTION,160, ELSE
WS_OBJECT_INFO,FUNCTION,161,
WS_OBJECT_INFO,FUNCTION,162, v_step := 700;
WS_OBJECT_INFO,FUNCTION,163,
WS_OBJECT_INFO,FUNCTION,164, p_return_code := 'E';
WS_OBJECT_INFO,FUNCTION,165, p_return_msg := 'Unable to check for object existance, either p_obj_key or p_obj_name must be specified.';
WS_OBJECT_INFO,FUNCTION,166, p_result := -2;
WS_OBJECT_INFO,FUNCTION,167, v_value := '';
WS_OBJECT_INFO,FUNCTION,168,
WS_OBJECT_INFO,FUNCTION,169, RETURN v_value;
WS_OBJECT_INFO,FUNCTION,170,
WS_OBJECT_INFO,FUNCTION,171, END IF;
WS_OBJECT_INFO,FUNCTION,172,
WS_OBJECT_INFO,FUNCTION,173, v_step := 800;
WS_OBJECT_INFO,FUNCTION,174,
WS_OBJECT_INFO,FUNCTION,175, IF ( v_obj_count = 1 ) THEN
WS_OBJECT_INFO,FUNCTION,176,
WS_OBJECT_INFO,FUNCTION,177, v_step := 900;
WS_OBJECT_INFO,FUNCTION,178,
WS_OBJECT_INFO,FUNCTION,179, IF ( UPPER(p_info_type) IN ('DATABASE','TABLESPACE','FILEGROUP','SHORTNAME') ) THEN
WS_OBJECT_INFO,FUNCTION,180,
WS_OBJECT_INFO,FUNCTION,181, v_step := 1000;
WS_OBJECT_INFO,FUNCTION,182,
WS_OBJECT_INFO,FUNCTION,183, v_info_type := p_info_type;
WS_OBJECT_INFO,FUNCTION,184,
WS_OBJECT_INFO,FUNCTION,185, v_step := 1100;
WS_OBJECT_INFO,FUNCTION,186,
WS_OBJECT_INFO,FUNCTION,187, IF ( v_obj_type = v_ws_obj_load ) THEN
WS_OBJECT_INFO,FUNCTION,188,
WS_OBJECT_INFO,FUNCTION,189, v_step := 1200;
WS_OBJECT_INFO,FUNCTION,190,
WS_OBJECT_INFO,FUNCTION,191, SELECT lt_tablespace
WS_OBJECT_INFO,FUNCTION,192, , lt_short_name
WS_OBJECT_INFO,FUNCTION,193, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,194, , v_short_name
WS_OBJECT_INFO,FUNCTION,195, FROM ws_load_tab
WS_OBJECT_INFO,FUNCTION,196, WHERE lt_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,197, ;
WS_OBJECT_INFO,FUNCTION,198,
WS_OBJECT_INFO,FUNCTION,199, ELSIF ( v_obj_type = v_ws_obj_dim ) THEN
WS_OBJECT_INFO,FUNCTION,200,
WS_OBJECT_INFO,FUNCTION,201, v_step := 1300;
WS_OBJECT_INFO,FUNCTION,202,
WS_OBJECT_INFO,FUNCTION,203, SELECT dt_tablespace
WS_OBJECT_INFO,FUNCTION,204, , dt_short_name
WS_OBJECT_INFO,FUNCTION,205, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,206, , v_short_name
WS_OBJECT_INFO,FUNCTION,207, FROM ws_dim_tab
WS_OBJECT_INFO,FUNCTION,208, WHERE dt_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,209, ;
WS_OBJECT_INFO,FUNCTION,210,
WS_OBJECT_INFO,FUNCTION,211, ELSIF ( v_obj_type = v_ws_obj_view ) THEN
WS_OBJECT_INFO,FUNCTION,212,
WS_OBJECT_INFO,FUNCTION,213, v_step := 1400;
WS_OBJECT_INFO,FUNCTION,214,
WS_OBJECT_INFO,FUNCTION,215, SELECT vt_tablespace
WS_OBJECT_INFO,FUNCTION,216, , vt_short_name
WS_OBJECT_INFO,FUNCTION,217, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,218, , v_short_name
WS_OBJECT_INFO,FUNCTION,219, FROM ws_view_tab
WS_OBJECT_INFO,FUNCTION,220, WHERE vt_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,221, ;
WS_OBJECT_INFO,FUNCTION,222,
WS_OBJECT_INFO,FUNCTION,223, ELSIF ( v_obj_type = v_ws_obj_fact ) THEN
WS_OBJECT_INFO,FUNCTION,224,
WS_OBJECT_INFO,FUNCTION,225, v_step := 1500;
WS_OBJECT_INFO,FUNCTION,226,
WS_OBJECT_INFO,FUNCTION,227, SELECT ft_tablespace
WS_OBJECT_INFO,FUNCTION,228, , ft_short_name
WS_OBJECT_INFO,FUNCTION,229, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,230, , v_short_name
WS_OBJECT_INFO,FUNCTION,231, FROM ws_fact_tab
WS_OBJECT_INFO,FUNCTION,232, WHERE ft_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,233, ;
WS_OBJECT_INFO,FUNCTION,234,
WS_OBJECT_INFO,FUNCTION,235, ELSIF ( v_obj_type = v_ws_obj_stage ) THEN
WS_OBJECT_INFO,FUNCTION,236,
WS_OBJECT_INFO,FUNCTION,237, v_step := 1600;
WS_OBJECT_INFO,FUNCTION,238,
WS_OBJECT_INFO,FUNCTION,239, SELECT st_tablespace
WS_OBJECT_INFO,FUNCTION,240, , st_short_name
WS_OBJECT_INFO,FUNCTION,241, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,242, , v_short_name
WS_OBJECT_INFO,FUNCTION,243, FROM ws_stage_tab
WS_OBJECT_INFO,FUNCTION,244, WHERE st_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,245, ;
WS_OBJECT_INFO,FUNCTION,246,
WS_OBJECT_INFO,FUNCTION,247, ELSIF ( v_obj_type = v_ws_obj_agg ) THEN
WS_OBJECT_INFO,FUNCTION,248,
WS_OBJECT_INFO,FUNCTION,249, v_step := 1700;
WS_OBJECT_INFO,FUNCTION,250,
WS_OBJECT_INFO,FUNCTION,251, SELECT at_tablespace
WS_OBJECT_INFO,FUNCTION,252, , at_short_name
WS_OBJECT_INFO,FUNCTION,253, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,254, , v_short_name
WS_OBJECT_INFO,FUNCTION,255, FROM ws_agg_tab
WS_OBJECT_INFO,FUNCTION,256, WHERE at_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,257, ;
WS_OBJECT_INFO,FUNCTION,258,
WS_OBJECT_INFO,FUNCTION,259, ELSIF ( v_obj_type = v_ws_obj_index ) THEN
WS_OBJECT_INFO,FUNCTION,260,
WS_OBJECT_INFO,FUNCTION,261, v_step := 1800;
WS_OBJECT_INFO,FUNCTION,262,
WS_OBJECT_INFO,FUNCTION,263, SELECT ih_tablespace
WS_OBJECT_INFO,FUNCTION,264, , ih_index_name
WS_OBJECT_INFO,FUNCTION,265, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,266, , v_short_name
WS_OBJECT_INFO,FUNCTION,267, FROM ws_index_header
WS_OBJECT_INFO,FUNCTION,268, WHERE ih_index_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,269, ;
WS_OBJECT_INFO,FUNCTION,270,
WS_OBJECT_INFO,FUNCTION,271, ELSIF ( v_obj_type = v_ws_obj_join ) THEN
WS_OBJECT_INFO,FUNCTION,272,
WS_OBJECT_INFO,FUNCTION,273, v_step := 1900;
WS_OBJECT_INFO,FUNCTION,274,
WS_OBJECT_INFO,FUNCTION,275, SELECT jt_tablespace
WS_OBJECT_INFO,FUNCTION,276, , jt_short_name
WS_OBJECT_INFO,FUNCTION,277, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,278, , v_short_name
WS_OBJECT_INFO,FUNCTION,279, FROM ws_join_tab
WS_OBJECT_INFO,FUNCTION,280, WHERE jt_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,281, ;
WS_OBJECT_INFO,FUNCTION,282,
WS_OBJECT_INFO,FUNCTION,283, ELSIF ( v_obj_type = v_ws_obj_export ) THEN
WS_OBJECT_INFO,FUNCTION,284,
WS_OBJECT_INFO,FUNCTION,285, v_step := 2000;
WS_OBJECT_INFO,FUNCTION,286,
WS_OBJECT_INFO,FUNCTION,287, SELECT et_tablespace
WS_OBJECT_INFO,FUNCTION,288, , et_short_name
WS_OBJECT_INFO,FUNCTION,289, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,290, , v_short_name
WS_OBJECT_INFO,FUNCTION,291, FROM ws_export_tab
WS_OBJECT_INFO,FUNCTION,292, WHERE et_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,293, ;
WS_OBJECT_INFO,FUNCTION,294,
WS_OBJECT_INFO,FUNCTION,295, ELSIF (( v_obj_type = v_ws_obj_retro ) OR ( v_obj_type = v_ws_obj_retro_copy )) THEN
WS_OBJECT_INFO,FUNCTION,296,
WS_OBJECT_INFO,FUNCTION,297, v_step := 2100;
WS_OBJECT_INFO,FUNCTION,298,
WS_OBJECT_INFO,FUNCTION,299, SELECT rt_tablespace
WS_OBJECT_INFO,FUNCTION,300, , rt_short_name
WS_OBJECT_INFO,FUNCTION,301, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,302, , v_short_name
WS_OBJECT_INFO,FUNCTION,303, FROM ws_retro_tab
WS_OBJECT_INFO,FUNCTION,304, WHERE rt_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,305, ;
WS_OBJECT_INFO,FUNCTION,306,
WS_OBJECT_INFO,FUNCTION,307, ELSIF ( v_obj_type = v_ws_obj_ods ) THEN
WS_OBJECT_INFO,FUNCTION,308,
WS_OBJECT_INFO,FUNCTION,309, v_step := 2000;
WS_OBJECT_INFO,FUNCTION,310,
WS_OBJECT_INFO,FUNCTION,311, SELECT ot_tablespace
WS_OBJECT_INFO,FUNCTION,312, , ot_short_name
WS_OBJECT_INFO,FUNCTION,313, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,314, , v_short_name
WS_OBJECT_INFO,FUNCTION,315, FROM ws_ods_tab
WS_OBJECT_INFO,FUNCTION,316, WHERE ot_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,317, ;
WS_OBJECT_INFO,FUNCTION,318,
WS_OBJECT_INFO,FUNCTION,319, ELSIF v_obj_type = v_ws_obj_normal
WS_OBJECT_INFO,FUNCTION,320, OR v_obj_type = v_ws_obj_hub
WS_OBJECT_INFO,FUNCTION,321, OR v_obj_type = v_ws_obj_satellite
WS_OBJECT_INFO,FUNCTION,322, OR v_obj_type = v_ws_obj_link
WS_OBJECT_INFO,FUNCTION,323, OR v_obj_type = v_ws_obj_custom1
WS_OBJECT_INFO,FUNCTION,324, OR v_obj_type = v_ws_obj_custom2
WS_OBJECT_INFO,FUNCTION,325, THEN
WS_OBJECT_INFO,FUNCTION,326,
WS_OBJECT_INFO,FUNCTION,327, v_step := 2000;
WS_OBJECT_INFO,FUNCTION,328,
WS_OBJECT_INFO,FUNCTION,329, SELECT nt_tablespace
WS_OBJECT_INFO,FUNCTION,330, , nt_short_name
WS_OBJECT_INFO,FUNCTION,331, INTO v_tablespace
WS_OBJECT_INFO,FUNCTION,332, , v_short_name
WS_OBJECT_INFO,FUNCTION,333, FROM ws_normal_tab
WS_OBJECT_INFO,FUNCTION,334, WHERE nt_obj_key = v_obj_key
WS_OBJECT_INFO,FUNCTION,335, ;
WS_OBJECT_INFO,FUNCTION,336,
WS_OBJECT_INFO,FUNCTION,337, ELSE
WS_OBJECT_INFO,FUNCTION,338,
WS_OBJECT_INFO,FUNCTION,339, v_step := 2200;
WS_OBJECT_INFO,FUNCTION,340,
WS_OBJECT_INFO,FUNCTION,341, p_return_code := 'E';
WS_OBJECT_INFO,FUNCTION,342, p_return_msg := 'Unable to find object''s database: unsupported object type.';
WS_OBJECT_INFO,FUNCTION,343, p_result := -2;
WS_OBJECT_INFO,FUNCTION,344, v_value := '';
WS_OBJECT_INFO,FUNCTION,345,
WS_OBJECT_INFO,FUNCTION,346, RETURN v_value;
WS_OBJECT_INFO,FUNCTION,347,
WS_OBJECT_INFO,FUNCTION,348, END IF;
WS_OBJECT_INFO,FUNCTION,349,
WS_OBJECT_INFO,FUNCTION,350, v_step := 2300;
WS_OBJECT_INFO,FUNCTION,351,
WS_OBJECT_INFO,FUNCTION,352, IF ( UPPER(p_info_type) = 'SHORTNAME' ) THEN
WS_OBJECT_INFO,FUNCTION,353,
WS_OBJECT_INFO,FUNCTION,354, v_step := 2400;
WS_OBJECT_INFO,FUNCTION,355,
WS_OBJECT_INFO,FUNCTION,356, v_value := v_short_name;
WS_OBJECT_INFO,FUNCTION,357,
WS_OBJECT_INFO,FUNCTION,358, v_step := 2500;
WS_OBJECT_INFO,FUNCTION,359,
WS_OBJECT_INFO,FUNCTION,360, p_return_code := 'S';
WS_OBJECT_INFO,FUNCTION,361, p_return_msg := 'Object ' || v_obj_name || ' (object key ' || TO_CHAR(v_obj_key) || ') is an object type ' || TO_CHAR(v_obj_type) || ' with a short name of ' || v_value;
WS_OBJECT_INFO,FUNCTION,362, p_result := 1;
WS_OBJECT_INFO,FUNCTION,363,
WS_OBJECT_INFO,FUNCTION,364, ELSE
WS_OBJECT_INFO,FUNCTION,365,
WS_OBJECT_INFO,FUNCTION,366, v_step := 2600;
WS_OBJECT_INFO,FUNCTION,367,
WS_OBJECT_INFO,FUNCTION,368, v_value := v_tablespace;
WS_OBJECT_INFO,FUNCTION,369,
WS_OBJECT_INFO,FUNCTION,370, v_step := 2700;
WS_OBJECT_INFO,FUNCTION,371,
WS_OBJECT_INFO,FUNCTION,372, p_return_code := 'S';
WS_OBJECT_INFO,FUNCTION,373, p_return_msg := 'Object ' || v_obj_name || ' (object key ' || TO_CHAR(v_obj_key) || ') is an object type ' || TO_CHAR(v_obj_type) || ' located in database ' || v_value;
WS_OBJECT_INFO,FUNCTION,374, p_result := 1;
WS_OBJECT_INFO,FUNCTION,375,
WS_OBJECT_INFO,FUNCTION,376, END IF;
WS_OBJECT_INFO,FUNCTION,377,
WS_OBJECT_INFO,FUNCTION,378, v_step := 2800;
WS_OBJECT_INFO,FUNCTION,379,
WS_OBJECT_INFO,FUNCTION,380, ELSIF ( UPPER(p_info_type) = 'NAME' ) THEN
WS_OBJECT_INFO,FUNCTION,381,
WS_OBJECT_INFO,FUNCTION,382, v_step := 2900;
WS_OBJECT_INFO,FUNCTION,383,
WS_OBJECT_INFO,FUNCTION,384, v_value := v_obj_name;
WS_OBJECT_INFO,FUNCTION,385,
WS_OBJECT_INFO,FUNCTION,386, v_step := 3000;
WS_OBJECT_INFO,FUNCTION,387,
WS_OBJECT_INFO,FUNCTION,388, p_return_code := 'S';
WS_OBJECT_INFO,FUNCTION,389, p_return_msg := 'Object with key ' || TO_CHAR(v_obj_key) || ' is called: ' || v_value;
WS_OBJECT_INFO,FUNCTION,390, p_result := 1;
WS_OBJECT_INFO,FUNCTION,391,
WS_OBJECT_INFO,FUNCTION,392, ELSIF ( UPPER(p_info_type) = 'KEY' ) THEN
WS_OBJECT_INFO,FUNCTION,393,
WS_OBJECT_INFO,FUNCTION,394, v_step := 3100;
WS_OBJECT_INFO,FUNCTION,395,
WS_OBJECT_INFO,FUNCTION,396, v_value := TO_CHAR(v_obj_key);
WS_OBJECT_INFO,FUNCTION,397,
WS_OBJECT_INFO,FUNCTION,398, v_step := 3200;
WS_OBJECT_INFO,FUNCTION,399,
WS_OBJECT_INFO,FUNCTION,400, p_return_code := 'S';
WS_OBJECT_INFO,FUNCTION,401, p_return_msg := 'Object ' || v_obj_name || ' has a key of: ' || TO_CHAR(v_obj_key);
WS_OBJECT_INFO,FUNCTION,402, p_result := 1;
WS_OBJECT_INFO,FUNCTION,403,
WS_OBJECT_INFO,FUNCTION,404, ELSIF ( UPPER(p_info_type) = 'TYPE' ) THEN
WS_OBJECT_INFO,FUNCTION,405,
WS_OBJECT_INFO,FUNCTION,406, v_step := 3300;
WS_OBJECT_INFO,FUNCTION,407,
WS_OBJECT_INFO,FUNCTION,408, SELECT ot_description
WS_OBJECT_INFO,FUNCTION,409, INTO v_value
WS_OBJECT_INFO,FUNCTION,410, FROM ws_obj_type
WS_OBJECT_INFO,FUNCTION,411, WHERE ot_type_key = v_obj_type
WS_OBJECT_INFO,FUNCTION,412, ;
WS_OBJECT_INFO,FUNCTION,413,
WS_OBJECT_INFO,FUNCTION,414, v_step := 3400;
WS_OBJECT_INFO,FUNCTION,415,
WS_OBJECT_INFO,FUNCTION,416, p_return_code := 'S';
WS_OBJECT_INFO,FUNCTION,417, p_return_msg := 'Object ' || v_obj_name || ' (object key ' || TO_CHAR(v_obj_key) || ') is an object type ' || v_value;
WS_OBJECT_INFO,FUNCTION,418, p_result := 1;
WS_OBJECT_INFO,FUNCTION,419,
WS_OBJECT_INFO,FUNCTION,420, ELSE
WS_OBJECT_INFO,FUNCTION,421,
WS_OBJECT_INFO,FUNCTION,422, v_step := 3500;
WS_OBJECT_INFO,FUNCTION,423,
WS_OBJECT_INFO,FUNCTION,424, v_info_type := p_info_type;
WS_OBJECT_INFO,FUNCTION,425, p_return_code := 'E';
WS_OBJECT_INFO,FUNCTION,426, p_return_msg := 'Object ' || v_obj_name || ' (object key ' || TO_CHAR(v_obj_key) || ') is an object type ' || TO_CHAR(v_obj_type) || ' located in tablespace ' || v_value;
WS_OBJECT_INFO,FUNCTION,427, p_result := -2;
WS_OBJECT_INFO,FUNCTION,428, v_value := '';
WS_OBJECT_INFO,FUNCTION,429,
WS_OBJECT_INFO,FUNCTION,430, RETURN v_value;
WS_OBJECT_INFO,FUNCTION,431,
WS_OBJECT_INFO,FUNCTION,432, END IF;
WS_OBJECT_INFO,FUNCTION,433,
WS_OBJECT_INFO,FUNCTION,434, ELSE
WS_OBJECT_INFO,FUNCTION,435,
WS_OBJECT_INFO,FUNCTION,436, v_step := 3600;
WS_OBJECT_INFO,FUNCTION,437,
WS_OBJECT_INFO,FUNCTION,438, p_return_code := 'E';
WS_OBJECT_INFO,FUNCTION,439,
WS_OBJECT_INFO,FUNCTION,440, IF ( TRIM(p_obj_name) IS NOT NULL ) THEN
WS_OBJECT_INFO,FUNCTION,441,
WS_OBJECT_INFO,FUNCTION,442, p_return_msg := 'The object ' || p_obj_name || ' does not exists.';
WS_OBJECT_INFO,FUNCTION,443,
WS_OBJECT_INFO,FUNCTION,444, ELSE
WS_OBJECT_INFO,FUNCTION,445,
WS_OBJECT_INFO,FUNCTION,446, p_return_msg := 'The object with key ' || TO_CHAR(p_obj_key) || ' does not exists.';
WS_OBJECT_INFO,FUNCTION,447,
WS_OBJECT_INFO,FUNCTION,448, END IF;
WS_OBJECT_INFO,FUNCTION,449,
WS_OBJECT_INFO,FUNCTION,450, p_result := -2;
WS_OBJECT_INFO,FUNCTION,451, v_value := '';
WS_OBJECT_INFO,FUNCTION,452,
WS_OBJECT_INFO,FUNCTION,453, END IF;
WS_OBJECT_INFO,FUNCTION,454,
WS_OBJECT_INFO,FUNCTION,455, v_step := 3700;
WS_OBJECT_INFO,FUNCTION,456,
WS_OBJECT_INFO,FUNCTION,457, RETURN v_value;
WS_OBJECT_INFO,FUNCTION,458,
WS_OBJECT_INFO,FUNCTION,459,EXCEPTION
WS_OBJECT_INFO,FUNCTION,460, --=================================================================
WS_OBJECT_INFO,FUNCTION,461, -- Unhandled Exception. Return with Fatal Error
WS_OBJECT_INFO,FUNCTION,462, --=================================================================
WS_OBJECT_INFO,FUNCTION,463, WHEN OTHERS THEN
WS_OBJECT_INFO,FUNCTION,464, v_msgtext := SUBSTR('Unhandled Exception in Ws_Object_Info. '||
WS_OBJECT_INFO,FUNCTION,465, ' Step ' || TO_CHAR(v_step) ||
WS_OBJECT_INFO,FUNCTION,466, '   SQL Error Code: ' || SQLCODE || ' - ' || SQLERRM,1,1023);
WS_OBJECT_INFO,FUNCTION,467, v_result := WsWrkAudit('F', p_job_name, p_job_name, p_sequence
WS_OBJECT_INFO,FUNCTION,468, , v_MsgText, SQLCODE, SQLERRM, p_task_id, p_job_id);
WS_OBJECT_INFO,FUNCTION,469, p_return_code := 'F';
WS_OBJECT_INFO,FUNCTION,470, p_return_msg := v_msgtext;
WS_OBJECT_INFO,FUNCTION,471, p_result := -2;
WS_OBJECT_INFO,FUNCTION,472, v_value := '';
WS_OBJECT_INFO,FUNCTION,473,
WS_OBJECT_INFO,FUNCTION,474, RETURN v_value;
WS_OBJECT_INFO,FUNCTION,475,
WS_OBJECT_INFO,FUNCTION,476,END Ws_Object_Info;
WS_OBJECT_INFO,FUNCTION,477,
WS_PROCEDURE_COMPILE,PROCEDURE,1,procedure Ws_Procedure_Compile
WS_PROCEDURE_COMPILE,PROCEDURE,2, (
WS_PROCEDURE_COMPILE,PROCEDURE,3, p_name IN varchar2,
WS_PROCEDURE_COMPILE,PROCEDURE,4, p_stmt IN varchar2,
WS_PROCEDURE_COMPILE,PROCEDURE,5, p_ret_msg OUT varchar2,
WS_PROCEDURE_COMPILE,PROCEDURE,6, p_result OUT number
WS_PROCEDURE_COMPILE,PROCEDURE,7, )
WS_PROCEDURE_COMPILE,PROCEDURE,8, AUTHID CURRENT_USER
WS_PROCEDURE_COMPILE,PROCEDURE,9, AS
WS_PROCEDURE_COMPILE,PROCEDURE,10,
WS_PROCEDURE_COMPILE,PROCEDURE,11, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_PROCEDURE_COMPILE,PROCEDURE,12,
WS_PROCEDURE_COMPILE,PROCEDURE,13, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,14, -- DBMS Name : Oracle
WS_PROCEDURE_COMPILE,PROCEDURE,15, -- Script Name : ws_procedure_copile
WS_PROCEDURE_COMPILE,PROCEDURE,16, -- Description : Compile a procedure/function or package
WS_PROCEDURE_COMPILE,PROCEDURE,17, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2016
WS_PROCEDURE_COMPILE,PROCEDURE,18, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,19,
WS_PROCEDURE_COMPILE,PROCEDURE,20, v_command varchar2(256);
WS_PROCEDURE_COMPILE,PROCEDURE,21, v_command_len integer;
WS_PROCEDURE_COMPILE,PROCEDURE,22, v_step integer;
WS_PROCEDURE_COMPILE,PROCEDURE,23, v_create_pos integer;
WS_PROCEDURE_COMPILE,PROCEDURE,24, v_name_pos integer;
WS_PROCEDURE_COMPILE,PROCEDURE,25, v_type_pos integer;
WS_PROCEDURE_COMPILE,PROCEDURE,26, v_body_start integer;
WS_PROCEDURE_COMPILE,PROCEDURE,27, v_body_end integer;
WS_PROCEDURE_COMPILE,PROCEDURE,28, v_body_size integer;
WS_PROCEDURE_COMPILE,PROCEDURE,29, v_head_start integer;
WS_PROCEDURE_COMPILE,PROCEDURE,30, v_head_end integer;
WS_PROCEDURE_COMPILE,PROCEDURE,31, v_head_size integer;
WS_PROCEDURE_COMPILE,PROCEDURE,32,
WS_PROCEDURE_COMPILE,PROCEDURE,33,
WS_PROCEDURE_COMPILE,PROCEDURE,34,BEGIN
WS_PROCEDURE_COMPILE,PROCEDURE,35,
WS_PROCEDURE_COMPILE,PROCEDURE,36, v_step := 10;
WS_PROCEDURE_COMPILE,PROCEDURE,37, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,38, -- Find the create command
WS_PROCEDURE_COMPILE,PROCEDURE,39, -- If we cant find the create command then just try and compile what we have
WS_PROCEDURE_COMPILE,PROCEDURE,40, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,41, v_step := 20;
WS_PROCEDURE_COMPILE,PROCEDURE,42, v_create_pos := instr(lower(p_stmt),'create',1,1);
WS_PROCEDURE_COMPILE,PROCEDURE,43,
WS_PROCEDURE_COMPILE,PROCEDURE,44, If v_create_pos = 0 Then
WS_PROCEDURE_COMPILE,PROCEDURE,45, v_step := 21;
WS_PROCEDURE_COMPILE,PROCEDURE,46, GoTo Execute;
WS_PROCEDURE_COMPILE,PROCEDURE,47, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,48,
WS_PROCEDURE_COMPILE,PROCEDURE,49, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,50, -- Find the function/procedure or package name
WS_PROCEDURE_COMPILE,PROCEDURE,51, -- If we cant find the name then just try and compile what we have
WS_PROCEDURE_COMPILE,PROCEDURE,52, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,53, v_step := 30;
WS_PROCEDURE_COMPILE,PROCEDURE,54, v_name_pos := instr(lower(p_stmt),lower(p_name),v_create_pos,1);
WS_PROCEDURE_COMPILE,PROCEDURE,55,
WS_PROCEDURE_COMPILE,PROCEDURE,56, If v_name_pos = 0 Then
WS_PROCEDURE_COMPILE,PROCEDURE,57, v_step := 31;
WS_PROCEDURE_COMPILE,PROCEDURE,58, GoTo Execute;
WS_PROCEDURE_COMPILE,PROCEDURE,59, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,60,
WS_PROCEDURE_COMPILE,PROCEDURE,61, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,62, -- Find out if this is a package
WS_PROCEDURE_COMPILE,PROCEDURE,63, -- If we cant find the type then just try and compile what we have
WS_PROCEDURE_COMPILE,PROCEDURE,64, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,65, v_step := 40;
WS_PROCEDURE_COMPILE,PROCEDURE,66, v_command_len := v_name_pos - v_create_pos;
WS_PROCEDURE_COMPILE,PROCEDURE,67, If v_command_len > 255 Then
WS_PROCEDURE_COMPILE,PROCEDURE,68, v_step := 41;
WS_PROCEDURE_COMPILE,PROCEDURE,69, GoTo Execute;
WS_PROCEDURE_COMPILE,PROCEDURE,70, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,71,
WS_PROCEDURE_COMPILE,PROCEDURE,72, v_command := substr(p_stmt,v_create_pos, v_command_len+1);
WS_PROCEDURE_COMPILE,PROCEDURE,73, v_type_pos := instr(lower(v_command),'package',1,1);
WS_PROCEDURE_COMPILE,PROCEDURE,74,
WS_PROCEDURE_COMPILE,PROCEDURE,75, If v_type_pos = 0 Then
WS_PROCEDURE_COMPILE,PROCEDURE,76, v_step := 45;
WS_PROCEDURE_COMPILE,PROCEDURE,77, GoTo Execute;
WS_PROCEDURE_COMPILE,PROCEDURE,78, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,79,
WS_PROCEDURE_COMPILE,PROCEDURE,80, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,81, -- P A C K A G E
WS_PROCEDURE_COMPILE,PROCEDURE,82, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,83,
WS_PROCEDURE_COMPILE,PROCEDURE,84, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,85, -- We have a package so work out where the header and body of the package start
WS_PROCEDURE_COMPILE,PROCEDURE,86, -- and end. Then compile the header and then the body
WS_PROCEDURE_COMPILE,PROCEDURE,87, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,88, v_step := 50;
WS_PROCEDURE_COMPILE,PROCEDURE,89, v_body_end := instr(lower(p_stmt),'package body',v_name_pos,1);
WS_PROCEDURE_COMPILE,PROCEDURE,90, If v_body_end = 0 Then
WS_PROCEDURE_COMPILE,PROCEDURE,91, v_step := 51;
WS_PROCEDURE_COMPILE,PROCEDURE,92, GoTo Execute;
WS_PROCEDURE_COMPILE,PROCEDURE,93, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,94,
WS_PROCEDURE_COMPILE,PROCEDURE,95, v_body_start := instr(lower(p_stmt),'create',v_body_end-25,1);
WS_PROCEDURE_COMPILE,PROCEDURE,96, If v_body_start = 0 Then
WS_PROCEDURE_COMPILE,PROCEDURE,97, v_step := 52;
WS_PROCEDURE_COMPILE,PROCEDURE,98, GoTo Execute;
WS_PROCEDURE_COMPILE,PROCEDURE,99, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,100,
WS_PROCEDURE_COMPILE,PROCEDURE,101, v_head_start := 1;
WS_PROCEDURE_COMPILE,PROCEDURE,102, v_head_end := v_body_start - 1;
WS_PROCEDURE_COMPILE,PROCEDURE,103, v_body_end := length(p_stmt);
WS_PROCEDURE_COMPILE,PROCEDURE,104, v_body_size := (v_body_end - v_body_start) + 1;
WS_PROCEDURE_COMPILE,PROCEDURE,105, v_head_size := (v_head_end - v_head_start) + 1;
WS_PROCEDURE_COMPILE,PROCEDURE,106,
WS_PROCEDURE_COMPILE,PROCEDURE,107, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,108, -- Compile the package head
WS_PROCEDURE_COMPILE,PROCEDURE,109, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,110, BEGIN
WS_PROCEDURE_COMPILE,PROCEDURE,111, execute immediate substr(p_stmt,v_head_start,v_head_size);
WS_PROCEDURE_COMPILE,PROCEDURE,112, EXCEPTION WHEN OTHERS THEN
WS_PROCEDURE_COMPILE,PROCEDURE,113, If SQLCODE = -24344 THEN
WS_PROCEDURE_COMPILE,PROCEDURE,114, p_ret_msg := 'Compilation Errors in Package Header';
WS_PROCEDURE_COMPILE,PROCEDURE,115, p_result := -1;
WS_PROCEDURE_COMPILE,PROCEDURE,116, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,117, Else
WS_PROCEDURE_COMPILE,PROCEDURE,118, p_ret_msg := 'Unexpected Error in Ws_Procedure_Compile, Package Header compile '||SQLERRM;
WS_PROCEDURE_COMPILE,PROCEDURE,119, p_result := -2;
WS_PROCEDURE_COMPILE,PROCEDURE,120, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,121, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,122, END;
WS_PROCEDURE_COMPILE,PROCEDURE,123,
WS_PROCEDURE_COMPILE,PROCEDURE,124, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,125, -- Compile the package body
WS_PROCEDURE_COMPILE,PROCEDURE,126, -- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,127, BEGIN
WS_PROCEDURE_COMPILE,PROCEDURE,128, execute immediate substr(p_stmt,v_body_start,v_body_size);
WS_PROCEDURE_COMPILE,PROCEDURE,129, EXCEPTION WHEN OTHERS THEN
WS_PROCEDURE_COMPILE,PROCEDURE,130, If SQLCODE = -24344 THEN
WS_PROCEDURE_COMPILE,PROCEDURE,131, p_ret_msg := 'Compilation Errors in Package Body';
WS_PROCEDURE_COMPILE,PROCEDURE,132, p_result := -1;
WS_PROCEDURE_COMPILE,PROCEDURE,133, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,134, Else
WS_PROCEDURE_COMPILE,PROCEDURE,135, p_ret_msg := 'Unexpected Error in Ws_Procedure_Compile, Package Body compile '||SQLERRM;
WS_PROCEDURE_COMPILE,PROCEDURE,136, p_result := -2;
WS_PROCEDURE_COMPILE,PROCEDURE,137, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,138, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,139, END;
WS_PROCEDURE_COMPILE,PROCEDURE,140,
WS_PROCEDURE_COMPILE,PROCEDURE,141, v_step := 900;
WS_PROCEDURE_COMPILE,PROCEDURE,142, p_result := 1;
WS_PROCEDURE_COMPILE,PROCEDURE,143, p_ret_msg := 'Compiled okay';
WS_PROCEDURE_COMPILE,PROCEDURE,144, COMMIT;
WS_PROCEDURE_COMPILE,PROCEDURE,145, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,146,
WS_PROCEDURE_COMPILE,PROCEDURE,147,-- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,148,-- Default compile if not a package
WS_PROCEDURE_COMPILE,PROCEDURE,149,-- or unable to ascertain
WS_PROCEDURE_COMPILE,PROCEDURE,150,-- =============================================================================
WS_PROCEDURE_COMPILE,PROCEDURE,151,<<Execute>>
WS_PROCEDURE_COMPILE,PROCEDURE,152, BEGIN
WS_PROCEDURE_COMPILE,PROCEDURE,153, execute immediate p_stmt;
WS_PROCEDURE_COMPILE,PROCEDURE,154, EXCEPTION WHEN OTHERS THEN
WS_PROCEDURE_COMPILE,PROCEDURE,155, If SQLCODE = -24344 THEN
WS_PROCEDURE_COMPILE,PROCEDURE,156, p_ret_msg := 'Compilation Errors';
WS_PROCEDURE_COMPILE,PROCEDURE,157, p_result := -1;
WS_PROCEDURE_COMPILE,PROCEDURE,158, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,159, Else
WS_PROCEDURE_COMPILE,PROCEDURE,160, p_ret_msg := 'Unexpected Error in Ws_Procedure_Compile '||SQLERRM;
WS_PROCEDURE_COMPILE,PROCEDURE,161, p_result := -2;
WS_PROCEDURE_COMPILE,PROCEDURE,162, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,163, End If;
WS_PROCEDURE_COMPILE,PROCEDURE,164, END;
WS_PROCEDURE_COMPILE,PROCEDURE,165,
WS_PROCEDURE_COMPILE,PROCEDURE,166,<<Compiled>>
WS_PROCEDURE_COMPILE,PROCEDURE,167, v_step := 900;
WS_PROCEDURE_COMPILE,PROCEDURE,168, p_result := 1;
WS_PROCEDURE_COMPILE,PROCEDURE,169, p_ret_msg := 'Compiled okay';
WS_PROCEDURE_COMPILE,PROCEDURE,170, COMMIT;
WS_PROCEDURE_COMPILE,PROCEDURE,171, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,172,
WS_PROCEDURE_COMPILE,PROCEDURE,173,EXCEPTION
WS_PROCEDURE_COMPILE,PROCEDURE,174, WHEN OTHERS THEN
WS_PROCEDURE_COMPILE,PROCEDURE,175, p_ret_msg := 'Unexpected Error in Ws_Procedure_Compile, step '||
WS_PROCEDURE_COMPILE,PROCEDURE,176, v_step||' '||SQLERRM;
WS_PROCEDURE_COMPILE,PROCEDURE,177, p_result := -3;
WS_PROCEDURE_COMPILE,PROCEDURE,178, ROLLBACK;
WS_PROCEDURE_COMPILE,PROCEDURE,179, RETURN;
WS_PROCEDURE_COMPILE,PROCEDURE,180,
WS_PROCEDURE_COMPILE,PROCEDURE,181,END Ws_Procedure_Compile;
WS_PROCEDURE_COMPILE,PROCEDURE,182,
WS_PROCEDURE_SAVE,PROCEDURE,1,procedure Ws_Procedure_Save
WS_PROCEDURE_SAVE,PROCEDURE,2, (
WS_PROCEDURE_SAVE,PROCEDURE,3, p_obj_key IN number,
WS_PROCEDURE_SAVE,PROCEDURE,4, p_lines0 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,5, p_lines1 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,6, p_lines2 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,7, p_lines3 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,8, p_lines4 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,9, p_lines5 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,10, p_lines6 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,11, p_lines7 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,12, p_lines8 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,13, p_lines9 IN varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,14, p_ret_msg OUT varchar2,
WS_PROCEDURE_SAVE,PROCEDURE,15, p_result OUT number
WS_PROCEDURE_SAVE,PROCEDURE,16, )
WS_PROCEDURE_SAVE,PROCEDURE,17, AUTHID CURRENT_USER
WS_PROCEDURE_SAVE,PROCEDURE,18, AS
WS_PROCEDURE_SAVE,PROCEDURE,19,
WS_PROCEDURE_SAVE,PROCEDURE,20, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_PROCEDURE_SAVE,PROCEDURE,21,
WS_PROCEDURE_SAVE,PROCEDURE,22, -- =============================================================================
WS_PROCEDURE_SAVE,PROCEDURE,23, -- DBMS Name : Oracle
WS_PROCEDURE_SAVE,PROCEDURE,24, -- Script Name : ws_procedure_save
WS_PROCEDURE_SAVE,PROCEDURE,25, -- Description : Save a procedure to ws_pro_line
WS_PROCEDURE_SAVE,PROCEDURE,26, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_PROCEDURE_SAVE,PROCEDURE,27, -- =============================================================================
WS_PROCEDURE_SAVE,PROCEDURE,28,
WS_PROCEDURE_SAVE,PROCEDURE,29, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,30, -- Variables
WS_PROCEDURE_SAVE,PROCEDURE,31, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,32, v_line_no integer := 0; -- line counter
WS_PROCEDURE_SAVE,PROCEDURE,33, v_stmt varchar2(4000);
WS_PROCEDURE_SAVE,PROCEDURE,34, v_lined varchar2(32767);
WS_PROCEDURE_SAVE,PROCEDURE,35, v_cursor number;
WS_PROCEDURE_SAVE,PROCEDURE,36, v_step number;
WS_PROCEDURE_SAVE,PROCEDURE,37, v_pos number;
WS_PROCEDURE_SAVE,PROCEDURE,38, v_loop integer;
WS_PROCEDURE_SAVE,PROCEDURE,39, v_start integer;
WS_PROCEDURE_SAVE,PROCEDURE,40, v_end integer;
WS_PROCEDURE_SAVE,PROCEDURE,41, v_size integer;
WS_PROCEDURE_SAVE,PROCEDURE,42,
WS_PROCEDURE_SAVE,PROCEDURE,43,
WS_PROCEDURE_SAVE,PROCEDURE,44,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_PROCEDURE_SAVE,PROCEDURE,45,BEGIN
WS_PROCEDURE_SAVE,PROCEDURE,46,
WS_PROCEDURE_SAVE,PROCEDURE,47, v_step := 10;
WS_PROCEDURE_SAVE,PROCEDURE,48, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,49, -- If a key of 0 and a string of CHECK is passed then
WS_PROCEDURE_SAVE,PROCEDURE,50, -- return -98 to indicate this procedure is incompatible
WS_PROCEDURE_SAVE,PROCEDURE,51, -- with the version of RED in use
WS_PROCEDURE_SAVE,PROCEDURE,52, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,53, If p_obj_key = 0 And p_lines0 = 'CHECK' Then
WS_PROCEDURE_SAVE,PROCEDURE,54, v_step := 20;
WS_PROCEDURE_SAVE,PROCEDURE,55, p_result := -98;
WS_PROCEDURE_SAVE,PROCEDURE,56, p_ret_msg := 'Please upgrade meta data';
WS_PROCEDURE_SAVE,PROCEDURE,57, RETURN;
WS_PROCEDURE_SAVE,PROCEDURE,58, End If;
WS_PROCEDURE_SAVE,PROCEDURE,59,
WS_PROCEDURE_SAVE,PROCEDURE,60, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,61, -- If a key of 0 and a string of CHECK is passed then
WS_PROCEDURE_SAVE,PROCEDURE,62, -- return -99 to indicate this procedure is active
WS_PROCEDURE_SAVE,PROCEDURE,63, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,64, If p_obj_key = 0 And p_lines0 = 'CHECKIT' Then
WS_PROCEDURE_SAVE,PROCEDURE,65, v_step := 21;
WS_PROCEDURE_SAVE,PROCEDURE,66, p_result := -99;
WS_PROCEDURE_SAVE,PROCEDURE,67, p_ret_msg := 'Ready';
WS_PROCEDURE_SAVE,PROCEDURE,68, RETURN;
WS_PROCEDURE_SAVE,PROCEDURE,69, End If;
WS_PROCEDURE_SAVE,PROCEDURE,70,
WS_PROCEDURE_SAVE,PROCEDURE,71, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,72, -- Delete the previous lines in this procedure
WS_PROCEDURE_SAVE,PROCEDURE,73, -- All treated as one transaction with a rollback
WS_PROCEDURE_SAVE,PROCEDURE,74, -- If the insert fails
WS_PROCEDURE_SAVE,PROCEDURE,75, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,76, Delete from ws_pro_line
WS_PROCEDURE_SAVE,PROCEDURE,77, Where pl_obj_key = p_obj_key;
WS_PROCEDURE_SAVE,PROCEDURE,78,
WS_PROCEDURE_SAVE,PROCEDURE,79, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,80, -- If a total delete
WS_PROCEDURE_SAVE,PROCEDURE,81, -- I.e. the new data is null then return
WS_PROCEDURE_SAVE,PROCEDURE,82, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,83, If p_lines0 is NULL Then
WS_PROCEDURE_SAVE,PROCEDURE,84, p_result := 0;
WS_PROCEDURE_SAVE,PROCEDURE,85, p_ret_msg := 'procedure deleted';
WS_PROCEDURE_SAVE,PROCEDURE,86, COMMIT;
WS_PROCEDURE_SAVE,PROCEDURE,87, RETURN;
WS_PROCEDURE_SAVE,PROCEDURE,88, End If;
WS_PROCEDURE_SAVE,PROCEDURE,89, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,90, -- Loop through the text passed
WS_PROCEDURE_SAVE,PROCEDURE,91, -- saving a line after each newline character
WS_PROCEDURE_SAVE,PROCEDURE,92, -- a line is a max of 4000 bytes long
WS_PROCEDURE_SAVE,PROCEDURE,93, --=====================================================
WS_PROCEDURE_SAVE,PROCEDURE,94, v_line_no := 0;
WS_PROCEDURE_SAVE,PROCEDURE,95, v_start := 0;
WS_PROCEDURE_SAVE,PROCEDURE,96, v_end := 0;
WS_PROCEDURE_SAVE,PROCEDURE,97, v_lined := '';
WS_PROCEDURE_SAVE,PROCEDURE,98, FOR v_stmt_no IN 0..9 LOOP
WS_PROCEDURE_SAVE,PROCEDURE,99, v_step := 30;
WS_PROCEDURE_SAVE,PROCEDURE,100,
WS_PROCEDURE_SAVE,PROCEDURE,101, If v_start < v_end Then
WS_PROCEDURE_SAVE,PROCEDURE,102, v_size := (v_end - v_start) + 1;
WS_PROCEDURE_SAVE,PROCEDURE,103, v_lined := substr(v_lined,v_start,v_size);
WS_PROCEDURE_SAVE,PROCEDURE,104, Else
WS_PROCEDURE_SAVE,PROCEDURE,105, v_lined := '';
WS_PROCEDURE_SAVE,PROCEDURE,106, End If;
WS_PROCEDURE_SAVE,PROCEDURE,107,
WS_PROCEDURE_SAVE,PROCEDURE,108, If v_stmt_no = 0 Then
WS_PROCEDURE_SAVE,PROCEDURE,109, v_lined := p_lines0;
WS_PROCEDURE_SAVE,PROCEDURE,110, ElsIf v_stmt_no = 1 Then
WS_PROCEDURE_SAVE,PROCEDURE,111, v_lined := v_lined||p_lines1;
WS_PROCEDURE_SAVE,PROCEDURE,112, ElsIf v_stmt_no = 2 Then
WS_PROCEDURE_SAVE,PROCEDURE,113, v_lined := v_lined||p_lines2;
WS_PROCEDURE_SAVE,PROCEDURE,114, ElsIf v_stmt_no = 3 Then
WS_PROCEDURE_SAVE,PROCEDURE,115, v_lined := v_lined||p_lines3;
WS_PROCEDURE_SAVE,PROCEDURE,116, ElsIf v_stmt_no = 4 Then
WS_PROCEDURE_SAVE,PROCEDURE,117, v_lined := v_lined||p_lines4;
WS_PROCEDURE_SAVE,PROCEDURE,118, ElsIf v_stmt_no = 5 Then
WS_PROCEDURE_SAVE,PROCEDURE,119, v_lined := v_lined||p_lines5;
WS_PROCEDURE_SAVE,PROCEDURE,120, ElsIf v_stmt_no = 6 Then
WS_PROCEDURE_SAVE,PROCEDURE,121, v_lined := v_lined||p_lines6;
WS_PROCEDURE_SAVE,PROCEDURE,122, ElsIf v_stmt_no = 7 Then
WS_PROCEDURE_SAVE,PROCEDURE,123, v_lined := v_lined||p_lines7;
WS_PROCEDURE_SAVE,PROCEDURE,124, ElsIf v_stmt_no = 8 Then
WS_PROCEDURE_SAVE,PROCEDURE,125, v_lined := v_lined||p_lines8;
WS_PROCEDURE_SAVE,PROCEDURE,126, ElsIf v_stmt_no = 9 Then
WS_PROCEDURE_SAVE,PROCEDURE,127, v_lined := v_lined||p_lines9;
WS_PROCEDURE_SAVE,PROCEDURE,128, End If;
WS_PROCEDURE_SAVE,PROCEDURE,129,
WS_PROCEDURE_SAVE,PROCEDURE,130, v_start := 1;
WS_PROCEDURE_SAVE,PROCEDURE,131, v_end := nvl(length(v_lined),0);
WS_PROCEDURE_SAVE,PROCEDURE,132, v_step := 40;
WS_PROCEDURE_SAVE,PROCEDURE,133, If v_end < v_start Then
WS_PROCEDURE_SAVE,PROCEDURE,134, v_loop := 0;
WS_PROCEDURE_SAVE,PROCEDURE,135, Else
WS_PROCEDURE_SAVE,PROCEDURE,136, v_loop := 1;
WS_PROCEDURE_SAVE,PROCEDURE,137, End If;
WS_PROCEDURE_SAVE,PROCEDURE,138,
WS_PROCEDURE_SAVE,PROCEDURE,139,
WS_PROCEDURE_SAVE,PROCEDURE,140, WHILE v_loop = 1 LOOP
WS_PROCEDURE_SAVE,PROCEDURE,141, v_step := 50;
WS_PROCEDURE_SAVE,PROCEDURE,142, v_pos := instr(v_lined,CHR(10),v_start,1);
WS_PROCEDURE_SAVE,PROCEDURE,143, v_step := 60;
WS_PROCEDURE_SAVE,PROCEDURE,144, If v_pos < 1 Then
WS_PROCEDURE_SAVE,PROCEDURE,145, v_loop := 0 ;
WS_PROCEDURE_SAVE,PROCEDURE,146, Else
WS_PROCEDURE_SAVE,PROCEDURE,147, v_step := 70;
WS_PROCEDURE_SAVE,PROCEDURE,148, v_size := (v_pos - v_start) + 1;
WS_PROCEDURE_SAVE,PROCEDURE,149, -- Maximum of 4000 characters in a line
WS_PROCEDURE_SAVE,PROCEDURE,150, If v_size > 4000 Then
WS_PROCEDURE_SAVE,PROCEDURE,151, v_size := 4000;
WS_PROCEDURE_SAVE,PROCEDURE,152, End If;
WS_PROCEDURE_SAVE,PROCEDURE,153, v_stmt := substr(v_lined,v_start,v_size);
WS_PROCEDURE_SAVE,PROCEDURE,154, v_step := 80;
WS_PROCEDURE_SAVE,PROCEDURE,155, v_line_no := v_line_no + 1;
WS_PROCEDURE_SAVE,PROCEDURE,156, v_step := 90;
WS_PROCEDURE_SAVE,PROCEDURE,157, Insert into ws_pro_line (
WS_PROCEDURE_SAVE,PROCEDURE,158, pl_obj_key,
WS_PROCEDURE_SAVE,PROCEDURE,159, pl_line_no,
WS_PROCEDURE_SAVE,PROCEDURE,160, pl_line
WS_PROCEDURE_SAVE,PROCEDURE,161, ) values (
WS_PROCEDURE_SAVE,PROCEDURE,162, p_obj_key,
WS_PROCEDURE_SAVE,PROCEDURE,163, v_line_no,
WS_PROCEDURE_SAVE,PROCEDURE,164, v_stmt
WS_PROCEDURE_SAVE,PROCEDURE,165, );
WS_PROCEDURE_SAVE,PROCEDURE,166, v_start := v_pos + 1;
WS_PROCEDURE_SAVE,PROCEDURE,167, v_step := 100;
WS_PROCEDURE_SAVE,PROCEDURE,168, If v_start >= v_end Then
WS_PROCEDURE_SAVE,PROCEDURE,169, v_loop := 0;
WS_PROCEDURE_SAVE,PROCEDURE,170, End If;
WS_PROCEDURE_SAVE,PROCEDURE,171, End If;
WS_PROCEDURE_SAVE,PROCEDURE,172, END LOOP;
WS_PROCEDURE_SAVE,PROCEDURE,173, END LOOP;
WS_PROCEDURE_SAVE,PROCEDURE,174,
WS_PROCEDURE_SAVE,PROCEDURE,175, v_step := 900;
WS_PROCEDURE_SAVE,PROCEDURE,176, p_result := v_line_no;
WS_PROCEDURE_SAVE,PROCEDURE,177, p_ret_msg := 'procedure saved';
WS_PROCEDURE_SAVE,PROCEDURE,178, COMMIT;
WS_PROCEDURE_SAVE,PROCEDURE,179, RETURN;
WS_PROCEDURE_SAVE,PROCEDURE,180,
WS_PROCEDURE_SAVE,PROCEDURE,181,EXCEPTION
WS_PROCEDURE_SAVE,PROCEDURE,182, WHEN OTHERS THEN
WS_PROCEDURE_SAVE,PROCEDURE,183, -- truncate SQL to leave space for db error message
WS_PROCEDURE_SAVE,PROCEDURE,184, p_ret_msg := substr('Unexpected Error in Ws_Procedure_Save, step '||
WS_PROCEDURE_SAVE,PROCEDURE,185, v_step||'\n'||substr(v_stmt,v_start,256)||'\n'||SQLERRM, 1, 1023);
WS_PROCEDURE_SAVE,PROCEDURE,186, p_result := -1;
WS_PROCEDURE_SAVE,PROCEDURE,187, ROLLBACK;
WS_PROCEDURE_SAVE,PROCEDURE,188, RETURN;
WS_PROCEDURE_SAVE,PROCEDURE,189,
WS_PROCEDURE_SAVE,PROCEDURE,190,END ws_procedure_save;
WS_PROCEDURE_SAVE,PROCEDURE,191,
WS_REP_DIAGRAM_BUILD,PROCEDURE,1,PROCEDURE ws_rep_diagram_build
WS_REP_DIAGRAM_BUILD,PROCEDURE,2,( p_top_table_name ws_rep_v_track_back.rb_table_name%TYPE
WS_REP_DIAGRAM_BUILD,PROCEDURE,3,, p_diagram_type ws_rep_diagram.rd_diagram_type%TYPE
WS_REP_DIAGRAM_BUILD,PROCEDURE,4,, p_user_key integer
WS_REP_DIAGRAM_BUILD,PROCEDURE,5,)
WS_REP_DIAGRAM_BUILD,PROCEDURE,6,IS
WS_REP_DIAGRAM_BUILD,PROCEDURE,7, v_index INTEGER := 0;
WS_REP_DIAGRAM_BUILD,PROCEDURE,8, v_level INTEGER := 0;
WS_REP_DIAGRAM_BUILD,PROCEDURE,9, v_max_level INTEGER := 0;
WS_REP_DIAGRAM_BUILD,PROCEDURE,10, i INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,11, v_return INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,12, v_obj_key INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,13, v_counter INTEGER := 0;
WS_REP_DIAGRAM_BUILD,PROCEDURE,14, v_src_loop_flag VARCHAR2(1);
WS_REP_DIAGRAM_BUILD,PROCEDURE,15,
WS_REP_DIAGRAM_BUILD,PROCEDURE,16, TYPE t_sources_tab IS TABLE OF ws_rep_v_track_back.rb_src_table%TYPE;
WS_REP_DIAGRAM_BUILD,PROCEDURE,17, TYPE t_sources_src IS TABLE OF ws_rep_v_track_back.rb_src_table%TYPE;
WS_REP_DIAGRAM_BUILD,PROCEDURE,18, TYPE t_sources_lev IS TABLE OF NUMBER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,19, TYPE t_sources_rmf IS TABLE OF ws_rep_v_track_back.rb_remote_flag%TYPE;
WS_REP_DIAGRAM_BUILD,PROCEDURE,20, TYPE t_sources_cnt IS TABLE OF NUMBER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,21,
WS_REP_DIAGRAM_BUILD,PROCEDURE,22, v_sources_tab t_sources_tab;
WS_REP_DIAGRAM_BUILD,PROCEDURE,23, v_sources_src t_sources_src;
WS_REP_DIAGRAM_BUILD,PROCEDURE,24, v_sources_lev t_sources_lev;
WS_REP_DIAGRAM_BUILD,PROCEDURE,25, v_sources_rmf t_sources_rmf;
WS_REP_DIAGRAM_BUILD,PROCEDURE,26, v_sources_cnt t_sources_cnt;
WS_REP_DIAGRAM_BUILD,PROCEDURE,27,
WS_REP_DIAGRAM_BUILD,PROCEDURE,28, FUNCTION ws_rep_diagram_build_source
WS_REP_DIAGRAM_BUILD,PROCEDURE,29, ( p_table_name ws_rep_v_track_back.rb_table_name%TYPE)
WS_REP_DIAGRAM_BUILD,PROCEDURE,30, RETURN NUMBER
WS_REP_DIAGRAM_BUILD,PROCEDURE,31, IS
WS_REP_DIAGRAM_BUILD,PROCEDURE,32,
WS_REP_DIAGRAM_BUILD,PROCEDURE,33, i INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,34, j INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,35, v_local_return INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,36, v_return_code INTEGER;
WS_REP_DIAGRAM_BUILD,PROCEDURE,37, v_found BOOLEAN;
WS_REP_DIAGRAM_BUILD,PROCEDURE,38, v_sources_tab_tmp t_sources_tab;
WS_REP_DIAGRAM_BUILD,PROCEDURE,39, v_sources_src_tmp t_sources_src;
WS_REP_DIAGRAM_BUILD,PROCEDURE,40, v_sources_lev_tmp t_sources_lev;
WS_REP_DIAGRAM_BUILD,PROCEDURE,41, v_sources_rmf_tmp t_sources_rmf;
WS_REP_DIAGRAM_BUILD,PROCEDURE,42,
WS_REP_DIAGRAM_BUILD,PROCEDURE,43, CURSOR c_sources IS
WS_REP_DIAGRAM_BUILD,PROCEDURE,44, SELECT rb_table_name
WS_REP_DIAGRAM_BUILD,PROCEDURE,45, , rb_src_table
WS_REP_DIAGRAM_BUILD,PROCEDURE,46, , v_level
WS_REP_DIAGRAM_BUILD,PROCEDURE,47, , rb_remote_flag
WS_REP_DIAGRAM_BUILD,PROCEDURE,48, FROM ws_rep_v_track_back
WS_REP_DIAGRAM_BUILD,PROCEDURE,49, WHERE rb_table_name = p_table_name;
WS_REP_DIAGRAM_BUILD,PROCEDURE,50,
WS_REP_DIAGRAM_BUILD,PROCEDURE,51, BEGIN
WS_REP_DIAGRAM_BUILD,PROCEDURE,52,
WS_REP_DIAGRAM_BUILD,PROCEDURE,53, v_level := v_level + 1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,54,
WS_REP_DIAGRAM_BUILD,PROCEDURE,55, IF (v_level > v_max_level) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,56, v_max_level := v_level;
WS_REP_DIAGRAM_BUILD,PROCEDURE,57, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,58,
WS_REP_DIAGRAM_BUILD,PROCEDURE,59, OPEN c_sources;
WS_REP_DIAGRAM_BUILD,PROCEDURE,60,
WS_REP_DIAGRAM_BUILD,PROCEDURE,61, FETCH c_sources BULK COLLECT INTO v_sources_tab_tmp
WS_REP_DIAGRAM_BUILD,PROCEDURE,62, , v_sources_src_tmp
WS_REP_DIAGRAM_BUILD,PROCEDURE,63, , v_sources_lev_tmp
WS_REP_DIAGRAM_BUILD,PROCEDURE,64, , v_sources_rmf_tmp;
WS_REP_DIAGRAM_BUILD,PROCEDURE,65,
WS_REP_DIAGRAM_BUILD,PROCEDURE,66, IF (c_sources%ROWCOUNT <= 0) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,67,
WS_REP_DIAGRAM_BUILD,PROCEDURE,68, v_return_code := 1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,69,
WS_REP_DIAGRAM_BUILD,PROCEDURE,70, ELSE
WS_REP_DIAGRAM_BUILD,PROCEDURE,71,
WS_REP_DIAGRAM_BUILD,PROCEDURE,72, FOR i IN v_sources_tab_tmp.FIRST..v_sources_tab_tmp.LAST LOOP
WS_REP_DIAGRAM_BUILD,PROCEDURE,73,
WS_REP_DIAGRAM_BUILD,PROCEDURE,74, v_sources_tab.EXTEND;
WS_REP_DIAGRAM_BUILD,PROCEDURE,75, v_sources_src.EXTEND;
WS_REP_DIAGRAM_BUILD,PROCEDURE,76, v_sources_lev.EXTEND;
WS_REP_DIAGRAM_BUILD,PROCEDURE,77, v_sources_rmf.EXTEND;
WS_REP_DIAGRAM_BUILD,PROCEDURE,78, v_sources_cnt.EXTEND;
WS_REP_DIAGRAM_BUILD,PROCEDURE,79,
WS_REP_DIAGRAM_BUILD,PROCEDURE,80, v_index := v_index + 1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,81, v_counter := v_counter + 1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,82,
WS_REP_DIAGRAM_BUILD,PROCEDURE,83, v_sources_tab(v_index) := v_sources_tab_tmp(i);
WS_REP_DIAGRAM_BUILD,PROCEDURE,84, v_sources_src(v_index) := v_sources_src_tmp(i);
WS_REP_DIAGRAM_BUILD,PROCEDURE,85, v_sources_lev(v_index) := v_sources_lev_tmp(i);
WS_REP_DIAGRAM_BUILD,PROCEDURE,86, v_sources_rmf(v_index) := v_sources_rmf_tmp(i);
WS_REP_DIAGRAM_BUILD,PROCEDURE,87, v_sources_cnt(v_index) := v_counter;
WS_REP_DIAGRAM_BUILD,PROCEDURE,88,
WS_REP_DIAGRAM_BUILD,PROCEDURE,89, v_found := FALSE;
WS_REP_DIAGRAM_BUILD,PROCEDURE,90,
WS_REP_DIAGRAM_BUILD,PROCEDURE,91, FOR j IN 1..v_index LOOP
WS_REP_DIAGRAM_BUILD,PROCEDURE,92,
WS_REP_DIAGRAM_BUILD,PROCEDURE,93, IF (v_sources_tab(j) = v_sources_src_tmp(i)) AND (v_sources_lev(j) <> 1) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,94,
WS_REP_DIAGRAM_BUILD,PROCEDURE,95, v_found := TRUE;
WS_REP_DIAGRAM_BUILD,PROCEDURE,96,
WS_REP_DIAGRAM_BUILD,PROCEDURE,97, IF (v_level+1 > v_sources_lev(j)) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,98, v_sources_lev(j) := v_level+1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,99, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,100,
WS_REP_DIAGRAM_BUILD,PROCEDURE,101, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,102,
WS_REP_DIAGRAM_BUILD,PROCEDURE,103, END LOOP;
WS_REP_DIAGRAM_BUILD,PROCEDURE,104,
WS_REP_DIAGRAM_BUILD,PROCEDURE,105, IF NOT v_found AND (v_sources_src(i) <> p_top_table_name) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,106, v_local_return := ws_rep_diagram_build_source(v_sources_src(v_index));
WS_REP_DIAGRAM_BUILD,PROCEDURE,107, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,108,
WS_REP_DIAGRAM_BUILD,PROCEDURE,109, END LOOP;
WS_REP_DIAGRAM_BUILD,PROCEDURE,110,
WS_REP_DIAGRAM_BUILD,PROCEDURE,111, v_return_code := 0;
WS_REP_DIAGRAM_BUILD,PROCEDURE,112,
WS_REP_DIAGRAM_BUILD,PROCEDURE,113, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,114,
WS_REP_DIAGRAM_BUILD,PROCEDURE,115, CLOSE c_sources;
WS_REP_DIAGRAM_BUILD,PROCEDURE,116,
WS_REP_DIAGRAM_BUILD,PROCEDURE,117, v_level := v_level - 1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,118,
WS_REP_DIAGRAM_BUILD,PROCEDURE,119, RETURN v_return_code;
WS_REP_DIAGRAM_BUILD,PROCEDURE,120,
WS_REP_DIAGRAM_BUILD,PROCEDURE,121, END;
WS_REP_DIAGRAM_BUILD,PROCEDURE,122,
WS_REP_DIAGRAM_BUILD,PROCEDURE,123,BEGIN
WS_REP_DIAGRAM_BUILD,PROCEDURE,124,
WS_REP_DIAGRAM_BUILD,PROCEDURE,125, IF (p_diagram_type = 2) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,126,
WS_REP_DIAGRAM_BUILD,PROCEDURE,127, SELECT MAX(oo_obj_key)
WS_REP_DIAGRAM_BUILD,PROCEDURE,128, INTO v_obj_key
WS_REP_DIAGRAM_BUILD,PROCEDURE,129, FROM ws_obj_object
WS_REP_DIAGRAM_BUILD,PROCEDURE,130, WHERE oo_name = p_top_table_name;
WS_REP_DIAGRAM_BUILD,PROCEDURE,131,
WS_REP_DIAGRAM_BUILD,PROCEDURE,132, DELETE ws_rep_diagram
WS_REP_DIAGRAM_BUILD,PROCEDURE,133, WHERE rd_diagram_type = p_diagram_type
WS_REP_DIAGRAM_BUILD,PROCEDURE,134, AND rd_user_key = p_user_key;
WS_REP_DIAGRAM_BUILD,PROCEDURE,135,
WS_REP_DIAGRAM_BUILD,PROCEDURE,136, v_sources_tab := t_sources_tab(NULL);
WS_REP_DIAGRAM_BUILD,PROCEDURE,137, v_sources_src := t_sources_src(NULL);
WS_REP_DIAGRAM_BUILD,PROCEDURE,138, v_sources_lev := t_sources_lev(NULL);
WS_REP_DIAGRAM_BUILD,PROCEDURE,139, v_sources_rmf := t_sources_rmf(NULL);
WS_REP_DIAGRAM_BUILD,PROCEDURE,140, v_sources_cnt := t_sources_cnt(NULL);
WS_REP_DIAGRAM_BUILD,PROCEDURE,141,
WS_REP_DIAGRAM_BUILD,PROCEDURE,142, v_return := ws_rep_diagram_build_source(p_top_table_name);
WS_REP_DIAGRAM_BUILD,PROCEDURE,143,
WS_REP_DIAGRAM_BUILD,PROCEDURE,144, FOR i IN 1..v_index LOOP
WS_REP_DIAGRAM_BUILD,PROCEDURE,145,
WS_REP_DIAGRAM_BUILD,PROCEDURE,146, IF (v_sources_rmf(i) = 'Y') THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,147,
WS_REP_DIAGRAM_BUILD,PROCEDURE,148, v_sources_lev(i) := v_max_level;
WS_REP_DIAGRAM_BUILD,PROCEDURE,149, v_counter := v_counter + 1;
WS_REP_DIAGRAM_BUILD,PROCEDURE,150,
WS_REP_DIAGRAM_BUILD,PROCEDURE,151, INSERT INTO ws_rep_diagram
WS_REP_DIAGRAM_BUILD,PROCEDURE,152, ( rd_diagram_type
WS_REP_DIAGRAM_BUILD,PROCEDURE,153, , rd_obj_key
WS_REP_DIAGRAM_BUILD,PROCEDURE,154, , rd_table_name
WS_REP_DIAGRAM_BUILD,PROCEDURE,155, , rd_src_table
WS_REP_DIAGRAM_BUILD,PROCEDURE,156, , rd_level_no
WS_REP_DIAGRAM_BUILD,PROCEDURE,157, , rd_remote_flag
WS_REP_DIAGRAM_BUILD,PROCEDURE,158, , rd_record_no
WS_REP_DIAGRAM_BUILD,PROCEDURE,159, , rd_src_loop_flag
WS_REP_DIAGRAM_BUILD,PROCEDURE,160, , rd_user_key)
WS_REP_DIAGRAM_BUILD,PROCEDURE,161, VALUES
WS_REP_DIAGRAM_BUILD,PROCEDURE,162, ( p_diagram_type
WS_REP_DIAGRAM_BUILD,PROCEDURE,163, , v_obj_key
WS_REP_DIAGRAM_BUILD,PROCEDURE,164, , v_sources_src(i)
WS_REP_DIAGRAM_BUILD,PROCEDURE,165, , NULL
WS_REP_DIAGRAM_BUILD,PROCEDURE,166, , v_max_level + 1
WS_REP_DIAGRAM_BUILD,PROCEDURE,167, , 'S'
WS_REP_DIAGRAM_BUILD,PROCEDURE,168, , v_counter
WS_REP_DIAGRAM_BUILD,PROCEDURE,169, , 'N'
WS_REP_DIAGRAM_BUILD,PROCEDURE,170, , p_user_key);
WS_REP_DIAGRAM_BUILD,PROCEDURE,171,
WS_REP_DIAGRAM_BUILD,PROCEDURE,172, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,173,
WS_REP_DIAGRAM_BUILD,PROCEDURE,174, IF ( v_sources_lev(i) > 1 ) AND (v_sources_tab(i) = p_top_table_name) THEN
WS_REP_DIAGRAM_BUILD,PROCEDURE,175, v_src_loop_flag := 'Y';
WS_REP_DIAGRAM_BUILD,PROCEDURE,176, ELSE
WS_REP_DIAGRAM_BUILD,PROCEDURE,177, v_src_loop_flag := 'N';
WS_REP_DIAGRAM_BUILD,PROCEDURE,178, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,179,
WS_REP_DIAGRAM_BUILD,PROCEDURE,180, INSERT INTO ws_rep_diagram
WS_REP_DIAGRAM_BUILD,PROCEDURE,181, ( rd_diagram_type
WS_REP_DIAGRAM_BUILD,PROCEDURE,182, , rd_obj_key
WS_REP_DIAGRAM_BUILD,PROCEDURE,183, , rd_table_name
WS_REP_DIAGRAM_BUILD,PROCEDURE,184, , rd_src_table
WS_REP_DIAGRAM_BUILD,PROCEDURE,185, , rd_level_no
WS_REP_DIAGRAM_BUILD,PROCEDURE,186, , rd_remote_flag
WS_REP_DIAGRAM_BUILD,PROCEDURE,187, , rd_record_no
WS_REP_DIAGRAM_BUILD,PROCEDURE,188, , rd_src_loop_flag
WS_REP_DIAGRAM_BUILD,PROCEDURE,189, , rd_user_key
WS_REP_DIAGRAM_BUILD,PROCEDURE,190, )
WS_REP_DIAGRAM_BUILD,PROCEDURE,191, VALUES
WS_REP_DIAGRAM_BUILD,PROCEDURE,192, ( p_diagram_type
WS_REP_DIAGRAM_BUILD,PROCEDURE,193, , v_obj_key
WS_REP_DIAGRAM_BUILD,PROCEDURE,194, , v_sources_tab(i)
WS_REP_DIAGRAM_BUILD,PROCEDURE,195, , v_sources_src(i)
WS_REP_DIAGRAM_BUILD,PROCEDURE,196, , v_sources_lev(i)
WS_REP_DIAGRAM_BUILD,PROCEDURE,197, , v_sources_rmf(i)
WS_REP_DIAGRAM_BUILD,PROCEDURE,198, , v_sources_cnt(i)
WS_REP_DIAGRAM_BUILD,PROCEDURE,199, , v_src_loop_flag
WS_REP_DIAGRAM_BUILD,PROCEDURE,200, , p_user_key);
WS_REP_DIAGRAM_BUILD,PROCEDURE,201,
WS_REP_DIAGRAM_BUILD,PROCEDURE,202, END LOOP;
WS_REP_DIAGRAM_BUILD,PROCEDURE,203,
WS_REP_DIAGRAM_BUILD,PROCEDURE,204, END IF;
WS_REP_DIAGRAM_BUILD,PROCEDURE,205,
WS_REP_DIAGRAM_BUILD,PROCEDURE,206,END;
WS_REP_DIAGRAM_BUILD,PROCEDURE,207,
WS_REP_DIAGRAM_BUILD,PROCEDURE,208,
WS_SCHED_STATUS,FUNCTION,1,function ws_sched_status
WS_SCHED_STATUS,FUNCTION,2, (
WS_SCHED_STATUS,FUNCTION,3, v_action IN varchar2,
WS_SCHED_STATUS,FUNCTION,4, v_sched_type IN varchar2,
WS_SCHED_STATUS,FUNCTION,5, v_sched_name IN varchar2,
WS_SCHED_STATUS,FUNCTION,6, v_sched_host IN varchar2,
WS_SCHED_STATUS,FUNCTION,7, v_sched_msg IN varchar2,
WS_SCHED_STATUS,FUNCTION,8, v_sched_username IN varchar2,
WS_SCHED_STATUS,FUNCTION,9, v_sched_interval IN number,
WS_SCHED_STATUS,FUNCTION,10, v_sched_version IN number,
WS_SCHED_STATUS,FUNCTION,11, v_sched_job_count IN number
WS_SCHED_STATUS,FUNCTION,12, )
WS_SCHED_STATUS,FUNCTION,13, Return integer
WS_SCHED_STATUS,FUNCTION,14, AUTHID CURRENT_USER
WS_SCHED_STATUS,FUNCTION,15, IS
WS_SCHED_STATUS,FUNCTION,16,
WS_SCHED_STATUS,FUNCTION,17, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_SCHED_STATUS,FUNCTION,18,
WS_SCHED_STATUS,FUNCTION,19, -- =============================================================================
WS_SCHED_STATUS,FUNCTION,20, -- DBMS Name : Oracle
WS_SCHED_STATUS,FUNCTION,21, -- Script Name : ws_sched_status
WS_SCHED_STATUS,FUNCTION,22, -- Description : Reports a schedulers status
WS_SCHED_STATUS,FUNCTION,23, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_SCHED_STATUS,FUNCTION,24, -- =============================================================================
WS_SCHED_STATUS,FUNCTION,25,
WS_SCHED_STATUS,FUNCTION,26, --=====================================================
WS_SCHED_STATUS,FUNCTION,27, -- Variables
WS_SCHED_STATUS,FUNCTION,28, --=====================================================
WS_SCHED_STATUS,FUNCTION,29, v_MsgText varchar2(1024); -- Text in audit_trail
WS_SCHED_STATUS,FUNCTION,30, v_step integer := 0; -- return code
WS_SCHED_STATUS,FUNCTION,31, v_result integer := 0; -- return code
WS_SCHED_STATUS,FUNCTION,32, v_found integer := 0; -- return code
WS_SCHED_STATUS,FUNCTION,33, v_stop_date date;
WS_SCHED_STATUS,FUNCTION,34,
WS_SCHED_STATUS,FUNCTION,35, v_SchedRec ws_wrk_scheduler%ROWTYPE;
WS_SCHED_STATUS,FUNCTION,36,
WS_SCHED_STATUS,FUNCTION,37,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_SCHED_STATUS,FUNCTION,38,BEGIN
WS_SCHED_STATUS,FUNCTION,39,
WS_SCHED_STATUS,FUNCTION,40, --=====================================================
WS_SCHED_STATUS,FUNCTION,41, -- Read in any existing record for this scheduler.
WS_SCHED_STATUS,FUNCTION,42, --=====================================================
WS_SCHED_STATUS,FUNCTION,43, BEGIN
WS_SCHED_STATUS,FUNCTION,44, v_step := 10;
WS_SCHED_STATUS,FUNCTION,45, Select * into v_SchedRec
WS_SCHED_STATUS,FUNCTION,46, From ws_wrk_scheduler
WS_SCHED_STATUS,FUNCTION,47, Where ws_name = v_sched_name;
WS_SCHED_STATUS,FUNCTION,48,
WS_SCHED_STATUS,FUNCTION,49, v_found := 1;
WS_SCHED_STATUS,FUNCTION,50,
WS_SCHED_STATUS,FUNCTION,51, EXCEPTION WHEN OTHERS THEN
WS_SCHED_STATUS,FUNCTION,52, v_found := 0;
WS_SCHED_STATUS,FUNCTION,53, END;
WS_SCHED_STATUS,FUNCTION,54,
WS_SCHED_STATUS,FUNCTION,55,
WS_SCHED_STATUS,FUNCTION,56, --=====================================================
WS_SCHED_STATUS,FUNCTION,57, -- See what our action is
WS_SCHED_STATUS,FUNCTION,58, --=====================================================
WS_SCHED_STATUS,FUNCTION,59, v_step := 15;
WS_SCHED_STATUS,FUNCTION,60, If v_action = 'START' Then
WS_SCHED_STATUS,FUNCTION,61, v_stop_date := NULL;
WS_SCHED_STATUS,FUNCTION,62, ElsIf v_Action = 'STOP' Then
WS_SCHED_STATUS,FUNCTION,63, v_stop_date := sysdate;
WS_SCHED_STATUS,FUNCTION,64, Else
WS_SCHED_STATUS,FUNCTION,65, v_stop_date := NULL;
WS_SCHED_STATUS,FUNCTION,66, End If;
WS_SCHED_STATUS,FUNCTION,67,
WS_SCHED_STATUS,FUNCTION,68, --=====================================================
WS_SCHED_STATUS,FUNCTION,69, -- If the scheduler record did not exist then create it
WS_SCHED_STATUS,FUNCTION,70, --=====================================================
WS_SCHED_STATUS,FUNCTION,71, If v_found = 0 Then
WS_SCHED_STATUS,FUNCTION,72, v_step := 20;
WS_SCHED_STATUS,FUNCTION,73, Insert into ws_wrk_scheduler (
WS_SCHED_STATUS,FUNCTION,74, ws_type_ind,
WS_SCHED_STATUS,FUNCTION,75, ws_name,
WS_SCHED_STATUS,FUNCTION,76, ws_host,
WS_SCHED_STATUS,FUNCTION,77, ws_username,
WS_SCHED_STATUS,FUNCTION,78, ws_start_date,
WS_SCHED_STATUS,FUNCTION,79, ws_active_date,
WS_SCHED_STATUS,FUNCTION,80, ws_stop_date,
WS_SCHED_STATUS,FUNCTION,81, ws_stop_msg,
WS_SCHED_STATUS,FUNCTION,82, ws_job_count,
WS_SCHED_STATUS,FUNCTION,83, ws_interval,
WS_SCHED_STATUS,FUNCTION,84, ws_version,
WS_SCHED_STATUS,FUNCTION,85, ws_poll_flag,
WS_SCHED_STATUS,FUNCTION,86, ws_shut_flag
WS_SCHED_STATUS,FUNCTION,87, ) values (
WS_SCHED_STATUS,FUNCTION,88, upper(substr(v_sched_type,1,1)),
WS_SCHED_STATUS,FUNCTION,89, v_sched_name,
WS_SCHED_STATUS,FUNCTION,90, v_sched_host,
WS_SCHED_STATUS,FUNCTION,91, v_sched_username,
WS_SCHED_STATUS,FUNCTION,92, sysdate,
WS_SCHED_STATUS,FUNCTION,93, sysdate,
WS_SCHED_STATUS,FUNCTION,94, v_stop_date,
WS_SCHED_STATUS,FUNCTION,95, v_sched_msg,
WS_SCHED_STATUS,FUNCTION,96, NULL,
WS_SCHED_STATUS,FUNCTION,97, v_sched_interval,
WS_SCHED_STATUS,FUNCTION,98, v_sched_version,
WS_SCHED_STATUS,FUNCTION,99, 0,
WS_SCHED_STATUS,FUNCTION,100, 0
WS_SCHED_STATUS,FUNCTION,101, );
WS_SCHED_STATUS,FUNCTION,102, COMMIT;
WS_SCHED_STATUS,FUNCTION,103, v_result := 1;
WS_SCHED_STATUS,FUNCTION,104,
WS_SCHED_STATUS,FUNCTION,105, --=====================================================
WS_SCHED_STATUS,FUNCTION,106, -- Scheduler record exists.
WS_SCHED_STATUS,FUNCTION,107, -- See if we are updating the active time or are
WS_SCHED_STATUS,FUNCTION,108, -- a new iteration for this scheduler
WS_SCHED_STATUS,FUNCTION,109, --=====================================================
WS_SCHED_STATUS,FUNCTION,110, Else
WS_SCHED_STATUS,FUNCTION,111, v_step := 30;
WS_SCHED_STATUS,FUNCTION,112, --=====================================================
WS_SCHED_STATUS,FUNCTION,113, -- If we have a stop date or more than .01 of a day (14.4 minutes)
WS_SCHED_STATUS,FUNCTION,114, -- since the last active date then assume a new version
WS_SCHED_STATUS,FUNCTION,115, --=====================================================
WS_SCHED_STATUS,FUNCTION,116, If v_SchedRec.ws_stop_date is NOT NULL
WS_SCHED_STATUS,FUNCTION,117, Or v_SchedRec.ws_active_date < sysdate-.01 Then
WS_SCHED_STATUS,FUNCTION,118, v_step := 40;
WS_SCHED_STATUS,FUNCTION,119, Update ws_wrk_scheduler Set
WS_SCHED_STATUS,FUNCTION,120, ws_stop_date = v_stop_date,
WS_SCHED_STATUS,FUNCTION,121, ws_stop_msg = v_sched_msg,
WS_SCHED_STATUS,FUNCTION,122, ws_start_date = sysdate,
WS_SCHED_STATUS,FUNCTION,123, ws_active_date = sysdate,
WS_SCHED_STATUS,FUNCTION,124, ws_type_ind = upper(substr(v_sched_type,1,1)),
WS_SCHED_STATUS,FUNCTION,125, ws_host = v_sched_host,
WS_SCHED_STATUS,FUNCTION,126, ws_username = v_sched_username,
WS_SCHED_STATUS,FUNCTION,127, ws_version = v_sched_version,
WS_SCHED_STATUS,FUNCTION,128, ws_job_count = 0,
WS_SCHED_STATUS,FUNCTION,129, ws_interval = v_sched_interval,
WS_SCHED_STATUS,FUNCTION,130, ws_poll_flag = 0,
WS_SCHED_STATUS,FUNCTION,131, ws_shut_flag = 0
WS_SCHED_STATUS,FUNCTION,132, Where ws_name = v_sched_name;
WS_SCHED_STATUS,FUNCTION,133, COMMIT;
WS_SCHED_STATUS,FUNCTION,134, v_result := 1;
WS_SCHED_STATUS,FUNCTION,135, Else
WS_SCHED_STATUS,FUNCTION,136, Update ws_wrk_scheduler Set
WS_SCHED_STATUS,FUNCTION,137, ws_stop_date = v_stop_date,
WS_SCHED_STATUS,FUNCTION,138, ws_stop_msg = v_sched_msg,
WS_SCHED_STATUS,FUNCTION,139, ws_active_date = sysdate,
WS_SCHED_STATUS,FUNCTION,140, ws_type_ind = upper(substr(v_sched_type,1,1)),
WS_SCHED_STATUS,FUNCTION,141, ws_host = v_sched_host,
WS_SCHED_STATUS,FUNCTION,142, ws_username = v_sched_username,
WS_SCHED_STATUS,FUNCTION,143, ws_version = v_sched_version,
WS_SCHED_STATUS,FUNCTION,144, ws_job_count = 0,
WS_SCHED_STATUS,FUNCTION,145, ws_interval = v_sched_interval,
WS_SCHED_STATUS,FUNCTION,146, ws_poll_flag = 0
WS_SCHED_STATUS,FUNCTION,147, Where ws_name = v_sched_name;
WS_SCHED_STATUS,FUNCTION,148, COMMIT;
WS_SCHED_STATUS,FUNCTION,149, v_result := 1;
WS_SCHED_STATUS,FUNCTION,150, End If;
WS_SCHED_STATUS,FUNCTION,151, End If;
WS_SCHED_STATUS,FUNCTION,152,
WS_SCHED_STATUS,FUNCTION,153, COMMIT;
WS_SCHED_STATUS,FUNCTION,154, RETURN v_result;
WS_SCHED_STATUS,FUNCTION,155,
WS_SCHED_STATUS,FUNCTION,156,EXCEPTION
WS_SCHED_STATUS,FUNCTION,157, WHEN OTHERS THEN
WS_SCHED_STATUS,FUNCTION,158, v_MsgText := 'Unhandled Exception in ws_sched_status. '||
WS_SCHED_STATUS,FUNCTION,159, ' Step ' ||v_step;
WS_SCHED_STATUS,FUNCTION,160, v_result := WsWrkAudit('F', 'Ws_Sched_Status','Ws_Sched_Status', 0,
WS_SCHED_STATUS,FUNCTION,161, v_MsgText,SQLCODE, SQLERRM, 0,0);
WS_SCHED_STATUS,FUNCTION,162, RETURN -3;
WS_SCHED_STATUS,FUNCTION,163,
WS_SCHED_STATUS,FUNCTION,164,END ws_sched_status;
WS_SCHED_STATUS,FUNCTION,165,
WS_SEC_MAINTAIN_USER,FUNCTION,1,function Ws_Sec_Maintain_User
WS_SEC_MAINTAIN_USER,FUNCTION,2, (
WS_SEC_MAINTAIN_USER,FUNCTION,3, p_option IN varchar2,
WS_SEC_MAINTAIN_USER,FUNCTION,4, p_user IN varchar2,
WS_SEC_MAINTAIN_USER,FUNCTION,5, p_role_rule IN varchar2,
WS_SEC_MAINTAIN_USER,FUNCTION,6, p_return_msg OUT varchar2
WS_SEC_MAINTAIN_USER,FUNCTION,7, )
WS_SEC_MAINTAIN_USER,FUNCTION,8, Return integer
WS_SEC_MAINTAIN_USER,FUNCTION,9, AUTHID CURRENT_USER
WS_SEC_MAINTAIN_USER,FUNCTION,10, IS
WS_SEC_MAINTAIN_USER,FUNCTION,11,
WS_SEC_MAINTAIN_USER,FUNCTION,12, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_SEC_MAINTAIN_USER,FUNCTION,13,
WS_SEC_MAINTAIN_USER,FUNCTION,14, -- =============================================================================
WS_SEC_MAINTAIN_USER,FUNCTION,15, -- DBMS Name : Oracle
WS_SEC_MAINTAIN_USER,FUNCTION,16, -- Script Name : Ws_Sec_Maintain_User
WS_SEC_MAINTAIN_USER,FUNCTION,17, -- Description : Maintain security user information
WS_SEC_MAINTAIN_USER,FUNCTION,18, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_SEC_MAINTAIN_USER,FUNCTION,19, -- =============================================================================
WS_SEC_MAINTAIN_USER,FUNCTION,20,
WS_SEC_MAINTAIN_USER,FUNCTION,21, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,22, -- Variables
WS_SEC_MAINTAIN_USER,FUNCTION,23, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,24, v_MsgText varchar2(1024); -- Text in audit_trail
WS_SEC_MAINTAIN_USER,FUNCTION,25, v_step integer := 0; -- return code
WS_SEC_MAINTAIN_USER,FUNCTION,26, v_result integer := 0; -- return code
WS_SEC_MAINTAIN_USER,FUNCTION,27, v_stmt varchar2(256);
WS_SEC_MAINTAIN_USER,FUNCTION,28, v_count integer := 0;
WS_SEC_MAINTAIN_USER,FUNCTION,29, v_role_key integer := 0;
WS_SEC_MAINTAIN_USER,FUNCTION,30, v_rule_key integer := 0;
WS_SEC_MAINTAIN_USER,FUNCTION,31, v_role varchar2(256);
WS_SEC_MAINTAIN_USER,FUNCTION,32, v_rule varchar2(256);
WS_SEC_MAINTAIN_USER,FUNCTION,33, v_user varchar2(256);
WS_SEC_MAINTAIN_USER,FUNCTION,34,
WS_SEC_MAINTAIN_USER,FUNCTION,35, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,36, -- Cursor to find all users in roles
WS_SEC_MAINTAIN_USER,FUNCTION,37, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,38, CURSOR c_role IS
WS_SEC_MAINTAIN_USER,FUNCTION,39, SELECT sr_role
WS_SEC_MAINTAIN_USER,FUNCTION,40, FROM ws_sec_role
WS_SEC_MAINTAIN_USER,FUNCTION,41, WHERE sr_role_key IN
WS_SEC_MAINTAIN_USER,FUNCTION,42, ( SELECT distinct sru_role_key
WS_SEC_MAINTAIN_USER,FUNCTION,43, FROM ws_sec_role_user
WS_SEC_MAINTAIN_USER,FUNCTION,44, WHERE UPPER(sru_user) = v_role
WS_SEC_MAINTAIN_USER,FUNCTION,45, );
WS_SEC_MAINTAIN_USER,FUNCTION,46,
WS_SEC_MAINTAIN_USER,FUNCTION,47,-- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_SEC_MAINTAIN_USER,FUNCTION,48,BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,49,
WS_SEC_MAINTAIN_USER,FUNCTION,50, v_step := 100;
WS_SEC_MAINTAIN_USER,FUNCTION,51, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,52, -- CHECK FOR INVALID OPTION
WS_SEC_MAINTAIN_USER,FUNCTION,53, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,54, IF upper(p_option) = 'DROP_FROM_ALL_ROLES'
WS_SEC_MAINTAIN_USER,FUNCTION,55, OR upper(p_option) = 'DROP_FROM_ALL_POLICY_RULES'
WS_SEC_MAINTAIN_USER,FUNCTION,56, OR upper(p_option) = 'DROP_FROM_POLICY_RULE'
WS_SEC_MAINTAIN_USER,FUNCTION,57, OR upper(p_option) = 'ADD_TO_POLICY_RULE'
WS_SEC_MAINTAIN_USER,FUNCTION,58, OR upper(p_option) = 'DROP_FROM_ROLE'
WS_SEC_MAINTAIN_USER,FUNCTION,59, OR upper(p_option) = 'ADD_TO_ROLE' THEN
WS_SEC_MAINTAIN_USER,FUNCTION,60, v_step := 110;
WS_SEC_MAINTAIN_USER,FUNCTION,61, Else
WS_SEC_MAINTAIN_USER,FUNCTION,62, p_return_msg := 'Invalid option '|| p_option||
WS_SEC_MAINTAIN_USER,FUNCTION,63, ' in call to Ws_Sec_Maintain_User. '||
WS_SEC_MAINTAIN_USER,FUNCTION,64, 'Valid options are DROP_FROM_ALL_ROLES, '||
WS_SEC_MAINTAIN_USER,FUNCTION,65, 'DROP_FROM_ALL_POLICY_RULES, '||
WS_SEC_MAINTAIN_USER,FUNCTION,66, 'DROP_FROM_ROLE, '||
WS_SEC_MAINTAIN_USER,FUNCTION,67, 'DROP_FROM_POLICY_RULE, '||
WS_SEC_MAINTAIN_USER,FUNCTION,68, 'ADD_TO_ROLE, '||
WS_SEC_MAINTAIN_USER,FUNCTION,69, 'ADD_TO_POLICY_RULE';
WS_SEC_MAINTAIN_USER,FUNCTION,70, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,71, End If;
WS_SEC_MAINTAIN_USER,FUNCTION,72,
WS_SEC_MAINTAIN_USER,FUNCTION,73,
WS_SEC_MAINTAIN_USER,FUNCTION,74, v_role := UPPER(p_role_rule);
WS_SEC_MAINTAIN_USER,FUNCTION,75, v_rule := UPPER(p_role_rule);
WS_SEC_MAINTAIN_USER,FUNCTION,76, v_user := UPPER(p_user);
WS_SEC_MAINTAIN_USER,FUNCTION,77,
WS_SEC_MAINTAIN_USER,FUNCTION,78, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,79, -- Check that the user is not null
WS_SEC_MAINTAIN_USER,FUNCTION,80, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,81, IF p_user is NULL THEN
WS_SEC_MAINTAIN_USER,FUNCTION,82, p_return_msg := 'Null user name' ||
WS_SEC_MAINTAIN_USER,FUNCTION,83, ' in call to Ws_Sec_Maintain_User. NO ACTION!!';
WS_SEC_MAINTAIN_USER,FUNCTION,84, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,85, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,86, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,87, -- Check that the role/rule is not null unless a drop from
WS_SEC_MAINTAIN_USER,FUNCTION,88, -- ALL request.
WS_SEC_MAINTAIN_USER,FUNCTION,89, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,90, IF p_role_rule is NULL THEN
WS_SEC_MAINTAIN_USER,FUNCTION,91, IF upper(p_option) = 'DROP_FROM_ALL_ROLES'
WS_SEC_MAINTAIN_USER,FUNCTION,92, OR upper(p_option) = 'DROP_FROM_ALL_POLICY_RULES' THEN
WS_SEC_MAINTAIN_USER,FUNCTION,93, p_return_msg := '';
WS_SEC_MAINTAIN_USER,FUNCTION,94, ELSE
WS_SEC_MAINTAIN_USER,FUNCTION,95, p_return_msg := 'Null role or policy rule specified' ||
WS_SEC_MAINTAIN_USER,FUNCTION,96, ' in call to Ws_Sec_Maintain_User. NO ACTION!!';
WS_SEC_MAINTAIN_USER,FUNCTION,97, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,98, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,99, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,100, -- If non null role/rule then get the key for the element
WS_SEC_MAINTAIN_USER,FUNCTION,101, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,102, ELSE
WS_SEC_MAINTAIN_USER,FUNCTION,103, IF upper(p_option) = 'DROP_FROM_ROLE'
WS_SEC_MAINTAIN_USER,FUNCTION,104, OR upper(p_option) = 'ADD_TO_ROLE' THEN
WS_SEC_MAINTAIN_USER,FUNCTION,105, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,106, -- Get the role key. Error if not found
WS_SEC_MAINTAIN_USER,FUNCTION,107, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,108, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,109, SELECT sr_role_key INTO v_role_key
WS_SEC_MAINTAIN_USER,FUNCTION,110, FROM ws_sec_role
WS_SEC_MAINTAIN_USER,FUNCTION,111, WHERE UPPER(sr_role) = v_role;
WS_SEC_MAINTAIN_USER,FUNCTION,112, EXCEPTION WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,113, v_role_key := 0;
WS_SEC_MAINTAIN_USER,FUNCTION,114, END;
WS_SEC_MAINTAIN_USER,FUNCTION,115, IF v_role_key = 0 THEN
WS_SEC_MAINTAIN_USER,FUNCTION,116, p_return_msg := 'Unable to find the role specified (' ||
WS_SEC_MAINTAIN_USER,FUNCTION,117, p_role_rule ||
WS_SEC_MAINTAIN_USER,FUNCTION,118, ') in call to Ws_Sec_Maintain_User. NO ACTION!!';
WS_SEC_MAINTAIN_USER,FUNCTION,119, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,120, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,121, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,122, IF upper(p_option) = 'DROP_FROM_POLICY_RULE'
WS_SEC_MAINTAIN_USER,FUNCTION,123, OR upper(p_option) = 'ADD_TO_POLICY_RULE' THEN
WS_SEC_MAINTAIN_USER,FUNCTION,124, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,125, -- Get the policy_rule key. Error if not found
WS_SEC_MAINTAIN_USER,FUNCTION,126, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,127, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,128, SELECT sp_pol_key INTO v_rule_key
WS_SEC_MAINTAIN_USER,FUNCTION,129, FROM ws_sec_policy
WS_SEC_MAINTAIN_USER,FUNCTION,130, WHERE UPPER(sp_pol_name) = v_rule;
WS_SEC_MAINTAIN_USER,FUNCTION,131, EXCEPTION WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,132, v_rule_key := 0;
WS_SEC_MAINTAIN_USER,FUNCTION,133, END;
WS_SEC_MAINTAIN_USER,FUNCTION,134, IF v_rule_key = 0 THEN
WS_SEC_MAINTAIN_USER,FUNCTION,135, p_return_msg := 'Unable to find the policy rule specified (' ||
WS_SEC_MAINTAIN_USER,FUNCTION,136, p_role_rule ||
WS_SEC_MAINTAIN_USER,FUNCTION,137, ') in call to Ws_Sec_Maintain_User. NO ACTION!!';
WS_SEC_MAINTAIN_USER,FUNCTION,138, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,139, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,140, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,141, IF upper(p_option) = 'DROP_FROM_ALL_ROLES'
WS_SEC_MAINTAIN_USER,FUNCTION,142, OR upper(p_option) = 'DROP_FROM_ALL_POLICY_RULES' THEN
WS_SEC_MAINTAIN_USER,FUNCTION,143, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,144, -- Should not be a role/rule specified
WS_SEC_MAINTAIN_USER,FUNCTION,145, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,146, p_return_msg := 'Role or policy rule specified when not expected (' ||
WS_SEC_MAINTAIN_USER,FUNCTION,147, p_role_rule ||
WS_SEC_MAINTAIN_USER,FUNCTION,148, ') in call to Ws_Sec_Maintain_User. NO ACTION!!';
WS_SEC_MAINTAIN_USER,FUNCTION,149, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,150, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,151, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,152,
WS_SEC_MAINTAIN_USER,FUNCTION,153, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,154, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,155, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,156, -- Process depending on the option selected.
WS_SEC_MAINTAIN_USER,FUNCTION,157, -- DROP_FROM_ALL_ROLES
WS_SEC_MAINTAIN_USER,FUNCTION,158, -- DROP_FROM_ALL_POLICY_RULES
WS_SEC_MAINTAIN_USER,FUNCTION,159, -- DROP_FROM_ROLE
WS_SEC_MAINTAIN_USER,FUNCTION,160, -- DROP_FROM_POLICY_RULE
WS_SEC_MAINTAIN_USER,FUNCTION,161, -- ADD_TO_ROLE
WS_SEC_MAINTAIN_USER,FUNCTION,162, -- ADD_TO_POLICY_RULE
WS_SEC_MAINTAIN_USER,FUNCTION,163, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,164, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,165, --=====================================================
WS_SEC_MAINTAIN_USER,FUNCTION,166, p_return_msg := '';
WS_SEC_MAINTAIN_USER,FUNCTION,167, v_result := 1;
WS_SEC_MAINTAIN_USER,FUNCTION,168,
WS_SEC_MAINTAIN_USER,FUNCTION,169, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,170, -- DROP_FROM_ALL_ROLES
WS_SEC_MAINTAIN_USER,FUNCTION,171, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,172, If upper(p_option) = 'DROP_FROM_ALL_ROLES' Then
WS_SEC_MAINTAIN_USER,FUNCTION,173, v_step := 200;
WS_SEC_MAINTAIN_USER,FUNCTION,174,
WS_SEC_MAINTAIN_USER,FUNCTION,175, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,176, -- Look through all the roles the user is in
WS_SEC_MAINTAIN_USER,FUNCTION,177, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,178, FOR v_Role in c_role LOOP
WS_SEC_MAINTAIN_USER,FUNCTION,179, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,180, -- Revoke the role from the user
WS_SEC_MAINTAIN_USER,FUNCTION,181, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,182, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,183, v_stmt := 'REVOKE '||v_role.sr_role||' FROM '||p_user;
WS_SEC_MAINTAIN_USER,FUNCTION,184, EXECUTE IMMEDIATE v_stmt;
WS_SEC_MAINTAIN_USER,FUNCTION,185, EXCEPTION WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,186, IF SQLCODE = 1951 THEN
WS_SEC_MAINTAIN_USER,FUNCTION,187, p_return_msg := p_return_msg || 'User ' || p_user||
WS_SEC_MAINTAIN_USER,FUNCTION,188, ' not granted role ' || p_role_rule ||'. ';
WS_SEC_MAINTAIN_USER,FUNCTION,189, v_result := -1;
WS_SEC_MAINTAIN_USER,FUNCTION,190, ELSE
WS_SEC_MAINTAIN_USER,FUNCTION,191, p_return_msg := p_return_msg ||
WS_SEC_MAINTAIN_USER,FUNCTION,192, 'Unexpected error when revoking role from user. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,193, SQLCODE || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,194, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,195, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,196, END;
WS_SEC_MAINTAIN_USER,FUNCTION,197, END LOOP; -- end cursor loop
WS_SEC_MAINTAIN_USER,FUNCTION,198, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,199, -- Now delete the user from the metadata
WS_SEC_MAINTAIN_USER,FUNCTION,200, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,201, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,202, DELETE FROM ws_sec_role_user
WS_SEC_MAINTAIN_USER,FUNCTION,203, WHERE upper(sru_user) = v_user;
WS_SEC_MAINTAIN_USER,FUNCTION,204, EXCEPTION WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,205, p_return_msg := p_return_msg ||
WS_SEC_MAINTAIN_USER,FUNCTION,206, 'Unexpected error in removing user from roles in metadata. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,207, SQLCODE || ' ';
WS_SEC_MAINTAIN_USER,FUNCTION,208, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,209, END;
WS_SEC_MAINTAIN_USER,FUNCTION,210, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,211, -- Return
WS_SEC_MAINTAIN_USER,FUNCTION,212, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,213, return v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,214,
WS_SEC_MAINTAIN_USER,FUNCTION,215, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,216, -- DROP_FROM_ALL_POLICY_RULES
WS_SEC_MAINTAIN_USER,FUNCTION,217, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,218, ElsIf upper(p_option) = 'DROP_FROM_ALL_POLICY_RULES' Then
WS_SEC_MAINTAIN_USER,FUNCTION,219, v_step := 300;
WS_SEC_MAINTAIN_USER,FUNCTION,220,
WS_SEC_MAINTAIN_USER,FUNCTION,221, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,222, -- Delete the user from the metadata
WS_SEC_MAINTAIN_USER,FUNCTION,223, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,224, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,225, DELETE FROM ws_sec_pol_user
WS_SEC_MAINTAIN_USER,FUNCTION,226, WHERE upper(spu_user) = v_user;
WS_SEC_MAINTAIN_USER,FUNCTION,227, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,228, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,229, p_return_msg := 'Unexpected error in removing user from policy rule. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,230, SQLCODE || ' ';
WS_SEC_MAINTAIN_USER,FUNCTION,231, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,232, END;
WS_SEC_MAINTAIN_USER,FUNCTION,233, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,234, -- Return
WS_SEC_MAINTAIN_USER,FUNCTION,235, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,236, return v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,237,
WS_SEC_MAINTAIN_USER,FUNCTION,238, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,239, -- DROP_FROM_ROLE
WS_SEC_MAINTAIN_USER,FUNCTION,240, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,241, ElsIf upper(p_option) = 'DROP_FROM_ROLE' Then
WS_SEC_MAINTAIN_USER,FUNCTION,242, v_step := 400;
WS_SEC_MAINTAIN_USER,FUNCTION,243,
WS_SEC_MAINTAIN_USER,FUNCTION,244, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,245, -- First delete the user from the metadata
WS_SEC_MAINTAIN_USER,FUNCTION,246, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,247, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,248, DELETE FROM ws_sec_role_user
WS_SEC_MAINTAIN_USER,FUNCTION,249, WHERE sru_role_key = v_role_key
WS_SEC_MAINTAIN_USER,FUNCTION,250, AND upper(sru_user) = v_user;
WS_SEC_MAINTAIN_USER,FUNCTION,251, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,252, WHEN NO_DATA_FOUND THEN
WS_SEC_MAINTAIN_USER,FUNCTION,253, p_return_msg := 'User ' || p_user||
WS_SEC_MAINTAIN_USER,FUNCTION,254, ' not found in role ' || p_role_rule || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,255, v_result := -1;
WS_SEC_MAINTAIN_USER,FUNCTION,256, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,257, p_return_msg := 'Unexpected error in removing user from role in metadata. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,258, SQLCODE || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,259, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,260, END;
WS_SEC_MAINTAIN_USER,FUNCTION,261, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,262, -- Now revoke the role from the user
WS_SEC_MAINTAIN_USER,FUNCTION,263, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,264, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,265, v_stmt := 'REVOKE '||p_role_rule||' FROM '||p_user;
WS_SEC_MAINTAIN_USER,FUNCTION,266, EXECUTE IMMEDIATE v_stmt;
WS_SEC_MAINTAIN_USER,FUNCTION,267, EXCEPTION WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,268, IF SQLCODE = -1951 THEN
WS_SEC_MAINTAIN_USER,FUNCTION,269, p_return_msg := p_return_msg || 'User ' || p_user||
WS_SEC_MAINTAIN_USER,FUNCTION,270, ' not granted role ' || p_role_rule;
WS_SEC_MAINTAIN_USER,FUNCTION,271, v_result := -1;
WS_SEC_MAINTAIN_USER,FUNCTION,272, ELSE
WS_SEC_MAINTAIN_USER,FUNCTION,273, p_return_msg := p_return_msg ||
WS_SEC_MAINTAIN_USER,FUNCTION,274, 'Unexpected error when revoking role from user. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,275, SQLCODE || ' ';
WS_SEC_MAINTAIN_USER,FUNCTION,276, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,277, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,278, END;
WS_SEC_MAINTAIN_USER,FUNCTION,279, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,280, -- Return
WS_SEC_MAINTAIN_USER,FUNCTION,281, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,282, return v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,283,
WS_SEC_MAINTAIN_USER,FUNCTION,284, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,285, -- DROP_FROM_POLICY_RULE
WS_SEC_MAINTAIN_USER,FUNCTION,286, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,287, ElsIf upper(p_option) = 'DROP_FROM_POLICY_RULE' Then
WS_SEC_MAINTAIN_USER,FUNCTION,288, v_step := 500;
WS_SEC_MAINTAIN_USER,FUNCTION,289,
WS_SEC_MAINTAIN_USER,FUNCTION,290, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,291, -- First delete the user from the metadata
WS_SEC_MAINTAIN_USER,FUNCTION,292, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,293, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,294, DELETE FROM ws_sec_pol_user
WS_SEC_MAINTAIN_USER,FUNCTION,295, WHERE spu_pol_key = v_rule_key
WS_SEC_MAINTAIN_USER,FUNCTION,296, AND upper(spu_user) = v_user;
WS_SEC_MAINTAIN_USER,FUNCTION,297, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,298, WHEN NO_DATA_FOUND THEN
WS_SEC_MAINTAIN_USER,FUNCTION,299, p_return_msg := 'User ' || p_user||
WS_SEC_MAINTAIN_USER,FUNCTION,300, ' not found in policy rule ' || p_role_rule;
WS_SEC_MAINTAIN_USER,FUNCTION,301, v_result := -1;
WS_SEC_MAINTAIN_USER,FUNCTION,302, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,303, p_return_msg := 'Unexpected error in removing user from policy rule. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,304, SQLCODE || ' ';
WS_SEC_MAINTAIN_USER,FUNCTION,305, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,306, END;
WS_SEC_MAINTAIN_USER,FUNCTION,307, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,308, -- Return
WS_SEC_MAINTAIN_USER,FUNCTION,309, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,310, return v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,311,
WS_SEC_MAINTAIN_USER,FUNCTION,312, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,313, -- ADD_TO_ROLE
WS_SEC_MAINTAIN_USER,FUNCTION,314, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,315, ElsIf upper(p_option) = 'ADD_TO_ROLE' Then
WS_SEC_MAINTAIN_USER,FUNCTION,316, v_step := 600;
WS_SEC_MAINTAIN_USER,FUNCTION,317, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,318, -- First check the user is not already in the role
WS_SEC_MAINTAIN_USER,FUNCTION,319, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,320, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,321, SELECT count(1) INTO v_count
WS_SEC_MAINTAIN_USER,FUNCTION,322, FROM ws_sec_role_user
WS_SEC_MAINTAIN_USER,FUNCTION,323, WHERE sru_role_key = v_role_key
WS_SEC_MAINTAIN_USER,FUNCTION,324, AND upper(sru_user) = v_user;
WS_SEC_MAINTAIN_USER,FUNCTION,325, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,326, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,327, p_return_msg := 'Unexpected error checking metadata ws_sec_role_user. No Action!!!. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,328, SQLCODE || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,329, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,330, RETURN v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,331, END;
WS_SEC_MAINTAIN_USER,FUNCTION,332, IF v_count <> 0 THEN
WS_SEC_MAINTAIN_USER,FUNCTION,333, p_return_msg := 'User ' ||p_user||' already in role '||
WS_SEC_MAINTAIN_USER,FUNCTION,334, p_role_rule||'. No Action!!!.';
WS_SEC_MAINTAIN_USER,FUNCTION,335, RETURN -1;
WS_SEC_MAINTAIN_USER,FUNCTION,336, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,337,
WS_SEC_MAINTAIN_USER,FUNCTION,338, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,339, -- Add the user to the metadata
WS_SEC_MAINTAIN_USER,FUNCTION,340, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,341, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,342, INSERT INTO ws_sec_role_user
WS_SEC_MAINTAIN_USER,FUNCTION,343, (sru_role_key, sru_user, sru_active)
WS_SEC_MAINTAIN_USER,FUNCTION,344, VALUES
WS_SEC_MAINTAIN_USER,FUNCTION,345, (v_role_key, p_user, 'Y');
WS_SEC_MAINTAIN_USER,FUNCTION,346, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,347, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,348, p_return_msg := 'Unexpected error inserting into ws_sec_role_user. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,349, SQLCODE || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,350, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,351, RETURN v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,352, END;
WS_SEC_MAINTAIN_USER,FUNCTION,353,
WS_SEC_MAINTAIN_USER,FUNCTION,354, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,355, -- Now grant the role
WS_SEC_MAINTAIN_USER,FUNCTION,356, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,357, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,358, v_stmt := 'GRANT '||p_role_rule||' TO '||p_user;
WS_SEC_MAINTAIN_USER,FUNCTION,359, EXECUTE IMMEDIATE v_stmt;
WS_SEC_MAINTAIN_USER,FUNCTION,360, EXCEPTION WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,361, p_return_msg := p_return_msg ||
WS_SEC_MAINTAIN_USER,FUNCTION,362, 'Unexpected error when granting role to user. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,363, SQLCODE || ' ';
WS_SEC_MAINTAIN_USER,FUNCTION,364, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,365, RETURN v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,366, END;
WS_SEC_MAINTAIN_USER,FUNCTION,367, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,368, -- Return
WS_SEC_MAINTAIN_USER,FUNCTION,369, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,370, return v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,371,
WS_SEC_MAINTAIN_USER,FUNCTION,372, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,373, -- ADD_TO_POLICY_RULE
WS_SEC_MAINTAIN_USER,FUNCTION,374, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,375, ElsIf upper(p_option) = 'ADD_TO_POLICY_RULE' Then
WS_SEC_MAINTAIN_USER,FUNCTION,376, v_step := 700;
WS_SEC_MAINTAIN_USER,FUNCTION,377, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,378, -- First check the user is not already in the rule
WS_SEC_MAINTAIN_USER,FUNCTION,379, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,380, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,381, SELECT count(1) INTO v_count
WS_SEC_MAINTAIN_USER,FUNCTION,382, FROM ws_sec_pol_user
WS_SEC_MAINTAIN_USER,FUNCTION,383, WHERE spu_pol_key = v_rule_key
WS_SEC_MAINTAIN_USER,FUNCTION,384, AND upper(spu_user) = v_user;
WS_SEC_MAINTAIN_USER,FUNCTION,385, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,386, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,387, p_return_msg := 'Unexpected error checking metadata ws_sec_pol_user. No Action!!!. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,388, SQLCODE || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,389, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,390, RETURN v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,391, END;
WS_SEC_MAINTAIN_USER,FUNCTION,392, IF v_count <> 0 THEN
WS_SEC_MAINTAIN_USER,FUNCTION,393, p_return_msg := 'User ' ||p_user||' already in policy rule '||
WS_SEC_MAINTAIN_USER,FUNCTION,394, p_role_rule||'. No Action!!!.';
WS_SEC_MAINTAIN_USER,FUNCTION,395, RETURN -1;
WS_SEC_MAINTAIN_USER,FUNCTION,396, END IF;
WS_SEC_MAINTAIN_USER,FUNCTION,397,
WS_SEC_MAINTAIN_USER,FUNCTION,398, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,399, -- Add the user to the metadata
WS_SEC_MAINTAIN_USER,FUNCTION,400, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,401, BEGIN
WS_SEC_MAINTAIN_USER,FUNCTION,402, INSERT INTO ws_sec_pol_user
WS_SEC_MAINTAIN_USER,FUNCTION,403, (spu_pol_key, spu_user, spu_active)
WS_SEC_MAINTAIN_USER,FUNCTION,404, VALUES
WS_SEC_MAINTAIN_USER,FUNCTION,405, (v_rule_key, p_user, 'Y');
WS_SEC_MAINTAIN_USER,FUNCTION,406, EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,407, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,408, p_return_msg := 'Unexpected error inserting into ws_sec_pol_user. Ora Error ' ||
WS_SEC_MAINTAIN_USER,FUNCTION,409, SQLCODE || '. ';
WS_SEC_MAINTAIN_USER,FUNCTION,410, v_result := -2;
WS_SEC_MAINTAIN_USER,FUNCTION,411, RETURN v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,412, END;
WS_SEC_MAINTAIN_USER,FUNCTION,413,
WS_SEC_MAINTAIN_USER,FUNCTION,414, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,415, -- Return
WS_SEC_MAINTAIN_USER,FUNCTION,416, --=================================================
WS_SEC_MAINTAIN_USER,FUNCTION,417, return v_result;
WS_SEC_MAINTAIN_USER,FUNCTION,418,
WS_SEC_MAINTAIN_USER,FUNCTION,419,
WS_SEC_MAINTAIN_USER,FUNCTION,420, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,421, -- INVALID OPTION
WS_SEC_MAINTAIN_USER,FUNCTION,422, --*****************************************************
WS_SEC_MAINTAIN_USER,FUNCTION,423, Else
WS_SEC_MAINTAIN_USER,FUNCTION,424, p_return_msg := 'Invalid option '|| p_option||
WS_SEC_MAINTAIN_USER,FUNCTION,425, ' in call to Ws_Sec_Maintain_User. '||
WS_SEC_MAINTAIN_USER,FUNCTION,426, 'Valid options are DROP_FROM_ALL_ROLES, '||
WS_SEC_MAINTAIN_USER,FUNCTION,427, 'DROP_FROM_ALL_POLICY_RULES, '||
WS_SEC_MAINTAIN_USER,FUNCTION,428, 'DROP_FROM_ROLE, '||
WS_SEC_MAINTAIN_USER,FUNCTION,429, 'DROP_FROM_POLICY_RULE, '||
WS_SEC_MAINTAIN_USER,FUNCTION,430, 'ADD_TO_ROLE, '||
WS_SEC_MAINTAIN_USER,FUNCTION,431, 'ADD_TO_POLICY_RULE';
WS_SEC_MAINTAIN_USER,FUNCTION,432, RETURN -2;
WS_SEC_MAINTAIN_USER,FUNCTION,433, End If;
WS_SEC_MAINTAIN_USER,FUNCTION,434,
WS_SEC_MAINTAIN_USER,FUNCTION,435, COMMIT;
WS_SEC_MAINTAIN_USER,FUNCTION,436, RETURN -3;
WS_SEC_MAINTAIN_USER,FUNCTION,437,
WS_SEC_MAINTAIN_USER,FUNCTION,438,EXCEPTION
WS_SEC_MAINTAIN_USER,FUNCTION,439, WHEN OTHERS THEN
WS_SEC_MAINTAIN_USER,FUNCTION,440, v_MsgText := 'Unhandled Exception in Ws_Sec_Maintain_User. '||
WS_SEC_MAINTAIN_USER,FUNCTION,441, ' Step ' ||v_step;
WS_SEC_MAINTAIN_USER,FUNCTION,442, p_return_msg := substr(v_MsgText,1,1023);
WS_SEC_MAINTAIN_USER,FUNCTION,443, RETURN -3;
WS_SEC_MAINTAIN_USER,FUNCTION,444,
WS_SEC_MAINTAIN_USER,FUNCTION,445,END Ws_Sec_Maintain_User;
WS_SEC_MAINTAIN_USER,FUNCTION,446,
WS_VERSION_CLEAR,FUNCTION,1,FUNCTION Ws_Version_Clear
WS_VERSION_CLEAR,FUNCTION,2, (
WS_VERSION_CLEAR,FUNCTION,3, p_sequence IN number,
WS_VERSION_CLEAR,FUNCTION,4, p_job_name IN varchar2,
WS_VERSION_CLEAR,FUNCTION,5, p_task_name IN varchar2,
WS_VERSION_CLEAR,FUNCTION,6, p_job_id IN number,
WS_VERSION_CLEAR,FUNCTION,7, p_task_id IN number,
WS_VERSION_CLEAR,FUNCTION,8, p_day_count IN number,
WS_VERSION_CLEAR,FUNCTION,9, p_keep_count IN number,
WS_VERSION_CLEAR,FUNCTION,10, p_options IN varchar2,
WS_VERSION_CLEAR,FUNCTION,11, p_return_code OUT varchar2,
WS_VERSION_CLEAR,FUNCTION,12, p_return_msg OUT varchar2
WS_VERSION_CLEAR,FUNCTION,13, )
WS_VERSION_CLEAR,FUNCTION,14, RETURN INTEGER
WS_VERSION_CLEAR,FUNCTION,15, AUTHID CURRENT_USER
WS_VERSION_CLEAR,FUNCTION,16, IS PRAGMA AUTONOMOUS_TRANSACTION;
WS_VERSION_CLEAR,FUNCTION,17,
WS_VERSION_CLEAR,FUNCTION,18, -- <<< IMPORTANT NOTICE: Please do not modify this software as doing so could cause support issues and result in additional support fees being charged.
WS_VERSION_CLEAR,FUNCTION,19,
WS_VERSION_CLEAR,FUNCTION,20, -- =============================================================================
WS_VERSION_CLEAR,FUNCTION,21, -- DBMS Name : Oracle
WS_VERSION_CLEAR,FUNCTION,22, -- Script Name : Ws_Version_Clear
WS_VERSION_CLEAR,FUNCTION,23, -- Description : Deletes old version records
WS_VERSION_CLEAR,FUNCTION,24, -- WhereScape Limited, inc. All rights reserved. (C) Copyright 1996-2019
WS_VERSION_CLEAR,FUNCTION,25, -- =============================================================================
WS_VERSION_CLEAR,FUNCTION,26,
WS_VERSION_CLEAR,FUNCTION,27, --=====================================================
WS_VERSION_CLEAR,FUNCTION,28, -- Constants
WS_VERSION_CLEAR,FUNCTION,29, --=====================================================
WS_VERSION_CLEAR,FUNCTION,30, v_ws_pro_version constant varchar(15) := '(8.4.1.0)';
WS_VERSION_CLEAR,FUNCTION,31, v_ws_obj_procedure constant number := 1;
WS_VERSION_CLEAR,FUNCTION,32, v_ws_obj_fact_kpi constant number := 2;
WS_VERSION_CLEAR,FUNCTION,33, v_ws_obj_script constant number := 3;
WS_VERSION_CLEAR,FUNCTION,34, v_ws_obj_template constant number := 4;
WS_VERSION_CLEAR,FUNCTION,35, v_ws_obj_fact constant number := 5;
WS_VERSION_CLEAR,FUNCTION,36, v_ws_obj_dim constant number := 6;
WS_VERSION_CLEAR,FUNCTION,37, v_ws_obj_stage constant number := 7;
WS_VERSION_CLEAR,FUNCTION,38, v_ws_obj_load constant number := 8;
WS_VERSION_CLEAR,FUNCTION,39, v_ws_obj_agg constant number := 9;
WS_VERSION_CLEAR,FUNCTION,40, v_ws_obj_index constant number := 10;
WS_VERSION_CLEAR,FUNCTION,41, v_ws_obj_connect constant number := 11;
WS_VERSION_CLEAR,FUNCTION,42, v_ws_obj_dim_view constant number := 12;
WS_VERSION_CLEAR,FUNCTION,43, v_ws_obj_export constant number := 13;
WS_VERSION_CLEAR,FUNCTION,44, v_ws_obj_cube constant number := 15;
WS_VERSION_CLEAR,FUNCTION,45, v_ws_obj_cube_virtual constant number := 16;
WS_VERSION_CLEAR,FUNCTION,46, v_ws_obj_report constant number := 17;
WS_VERSION_CLEAR,FUNCTION,47, v_ws_obj_view constant number := 18;
WS_VERSION_CLEAR,FUNCTION,48, v_ws_obj_join constant number := 20;
WS_VERSION_CLEAR,FUNCTION,49, v_ws_obj_retro constant number := 21;
WS_VERSION_CLEAR,FUNCTION,50, v_ws_obj_retro_copy constant number := 22;
WS_VERSION_CLEAR,FUNCTION,51,
WS_VERSION_CLEAR,FUNCTION,52, v_ws_act_drop constant number := 1;
WS_VERSION_CLEAR,FUNCTION,53, v_ws_act_create constant number := 2;
WS_VERSION_CLEAR,FUNCTION,54, v_ws_act_drop_all constant number := 3;
WS_VERSION_CLEAR,FUNCTION,55, v_ws_act_pre_drop constant number := 4;
WS_VERSION_CLEAR,FUNCTION,56, v_ws_act_load constant number := 5;
WS_VERSION_CLEAR,FUNCTION,57, v_ws_act_update constant number := 6;
WS_VERSION_CLEAR,FUNCTION,58, v_ws_act_execute constant number := 7;
WS_VERSION_CLEAR,FUNCTION,59, v_ws_act_process constant number := 8;
WS_VERSION_CLEAR,FUNCTION,60, v_ws_act_build constant number := 9;
WS_VERSION_CLEAR,FUNCTION,61, v_ws_act_build_all constant number := 10;
WS_VERSION_CLEAR,FUNCTION,62, v_ws_act_analyze constant number := 11;
WS_VERSION_CLEAR,FUNCTION,63, v_ws_act_quick_analyze constant number := 12;
WS_VERSION_CLEAR,FUNCTION,64, v_ws_act_statistics constant number := 13;
WS_VERSION_CLEAR,FUNCTION,65, v_ws_act_quick_statistics constant number := 14;
WS_VERSION_CLEAR,FUNCTION,66, v_ws_act_initial constant number := 15;
WS_VERSION_CLEAR,FUNCTION,67, v_ws_act_cube_dim constant number := 16;
WS_VERSION_CLEAR,FUNCTION,68, v_ws_act_db_dim constant number := 17;
WS_VERSION_CLEAR,FUNCTION,69, v_ws_act_custom constant number := 18;
WS_VERSION_CLEAR,FUNCTION,70, v_ws_act_truncate constant number := 19;
WS_VERSION_CLEAR,FUNCTION,71, v_ws_act_compile constant number := 20;
WS_VERSION_CLEAR,FUNCTION,72,
WS_VERSION_CLEAR,FUNCTION,73, --===============================================================
WS_VERSION_CLEAR,FUNCTION,74, -- Control variables used in most programs
WS_VERSION_CLEAR,FUNCTION,75, --===============================================================
WS_VERSION_CLEAR,FUNCTION,76, v_MsgText varchar2(1024); -- Text for audit_trail
WS_VERSION_CLEAR,FUNCTION,77, v_sql varchar2(4000); -- sql statements
WS_VERSION_CLEAR,FUNCTION,78, v_step integer := 0; -- return code
WS_VERSION_CLEAR,FUNCTION,79, v_version_delete_count integer := 0; -- no of records deleted
WS_VERSION_CLEAR,FUNCTION,80, v_version_insert_count integer := 0; -- no of records inserted
WS_VERSION_CLEAR,FUNCTION,81, v_delete_count integer := 0; -- no of records deleted
WS_VERSION_CLEAR,FUNCTION,82, v_insert_count integer := 0; -- no of records inserted
WS_VERSION_CLEAR,FUNCTION,83, v_count integer := 0; -- General counter;
WS_VERSION_CLEAR,FUNCTION,84, v_result integer := 0; -- return status
WS_VERSION_CLEAR,FUNCTION,85,
WS_VERSION_CLEAR,FUNCTION,86, --===============================================================
WS_VERSION_CLEAR,FUNCTION,87, -- General Variables
WS_VERSION_CLEAR,FUNCTION,88, --===============================================================
WS_VERSION_CLEAR,FUNCTION,89, v_version_no integer := 0; -- version no
WS_VERSION_CLEAR,FUNCTION,90, v_obj_key integer := 0; -- object key
WS_VERSION_CLEAR,FUNCTION,91, v_obj_name varchar2(64); -- object key
WS_VERSION_CLEAR,FUNCTION,92, v_creation_date date; -- creation date for record
WS_VERSION_CLEAR,FUNCTION,93, v_retain_till_date date; -- retain date
WS_VERSION_CLEAR,FUNCTION,94, v_table_name varchar2(100); -- table name
WS_VERSION_CLEAR,FUNCTION,95, v_column_name varchar2(100); -- column name
WS_VERSION_CLEAR,FUNCTION,96, v_delete_date date; -- delete date
WS_VERSION_CLEAR,FUNCTION,97, v_prev_obj_name varchar2(64); -- previous object key
WS_VERSION_CLEAR,FUNCTION,98, v_process_flag integer; -- identifies if record can be processed
WS_VERSION_CLEAR,FUNCTION,99, v_delete_sql varchar2(500); -- delete sql statement
WS_VERSION_CLEAR,FUNCTION,100, v_insert_sql varchar2(500); -- insert sql statement
WS_VERSION_CLEAR,FUNCTION,101,
WS_VERSION_CLEAR,FUNCTION,102, --===============================================================
WS_VERSION_CLEAR,FUNCTION,103, -- Cursor to get Version records
WS_VERSION_CLEAR,FUNCTION,104, --===============================================================
WS_VERSION_CLEAR,FUNCTION,105, CURSOR c_Versions is
WS_VERSION_CLEAR,FUNCTION,106, SELECT ov_version_no
WS_VERSION_CLEAR,FUNCTION,107, , ov_obj_key
WS_VERSION_CLEAR,FUNCTION,108, , ov_obj_name
WS_VERSION_CLEAR,FUNCTION,109, , ov_creation_date
WS_VERSION_CLEAR,FUNCTION,110, , ov_retain_till_date
WS_VERSION_CLEAR,FUNCTION,111, FROM ws_obj_versions
WS_VERSION_CLEAR,FUNCTION,112, ORDER BY ov_obj_name
WS_VERSION_CLEAR,FUNCTION,113, , ov_creation_date DESC;
WS_VERSION_CLEAR,FUNCTION,114,
WS_VERSION_CLEAR,FUNCTION,115, --===============================================================
WS_VERSION_CLEAR,FUNCTION,116, -- Cursor to get metadata tables for deleting versioned records
WS_VERSION_CLEAR,FUNCTION,117, --===============================================================
WS_VERSION_CLEAR,FUNCTION,118, CURSOR c_Tables is
WS_VERSION_CLEAR,FUNCTION,119, SELECT a.table_name
WS_VERSION_CLEAR,FUNCTION,120, , a.column_name
WS_VERSION_CLEAR,FUNCTION,121, FROM all_tab_columns a
WS_VERSION_CLEAR,FUNCTION,122, , ws_meta b
WS_VERSION_CLEAR,FUNCTION,123, WHERE a.table_name like 'WS_%_V'
WS_VERSION_CLEAR,FUNCTION,124, AND a.column_name like '%_VERSION_NO'
WS_VERSION_CLEAR,FUNCTION,125, AND a.OWNER = UPPER(b.meta_dss_schema);
WS_VERSION_CLEAR,FUNCTION,126,
WS_VERSION_CLEAR,FUNCTION,127,BEGIN
WS_VERSION_CLEAR,FUNCTION,128,
WS_VERSION_CLEAR,FUNCTION,129, v_step := 100;
WS_VERSION_CLEAR,FUNCTION,130,
WS_VERSION_CLEAR,FUNCTION,131, v_version_delete_count := 0;
WS_VERSION_CLEAR,FUNCTION,132, v_version_insert_count := 0;
WS_VERSION_CLEAR,FUNCTION,133, v_delete_count := 0;
WS_VERSION_CLEAR,FUNCTION,134, v_insert_count := 0;
WS_VERSION_CLEAR,FUNCTION,135, v_prev_obj_name := '_';
WS_VERSION_CLEAR,FUNCTION,136, v_count:= 0;
WS_VERSION_CLEAR,FUNCTION,137, v_process_flag := 0;
WS_VERSION_CLEAR,FUNCTION,138,
WS_VERSION_CLEAR,FUNCTION,139, --================================================================
WS_VERSION_CLEAR,FUNCTION,140, -- Check to see if need to delete based on date
WS_VERSION_CLEAR,FUNCTION,141, --================================================================
WS_VERSION_CLEAR,FUNCTION,142, IF p_day_count >= 0 THEN
WS_VERSION_CLEAR,FUNCTION,143,
WS_VERSION_CLEAR,FUNCTION,144, v_delete_date := sysdate - p_day_count;
WS_VERSION_CLEAR,FUNCTION,145,
WS_VERSION_CLEAR,FUNCTION,146, p_return_msg := 'Delete Date: ' || TO_CHAR(v_delete_date, 'DD-MON-YYYY HH24:MI:SS');
WS_VERSION_CLEAR,FUNCTION,147, v_result := WsWrkAudit('I',p_job_name, p_task_name, p_sequence,
WS_VERSION_CLEAR,FUNCTION,148, p_return_msg,SQLCODE,SQLERRM,p_task_id, p_job_id);
WS_VERSION_CLEAR,FUNCTION,149,
WS_VERSION_CLEAR,FUNCTION,150, ELSE
WS_VERSION_CLEAR,FUNCTION,151,
WS_VERSION_CLEAR,FUNCTION,152, v_delete_date := sysdate;
WS_VERSION_CLEAR,FUNCTION,153,
WS_VERSION_CLEAR,FUNCTION,154, END IF;
WS_VERSION_CLEAR,FUNCTION,155,
WS_VERSION_CLEAR,FUNCTION,156, v_step := 200;
WS_VERSION_CLEAR,FUNCTION,157,
WS_VERSION_CLEAR,FUNCTION,158, --================================================================
WS_VERSION_CLEAR,FUNCTION,159, -- Check to see if need to keep minimum number of versioned records
WS_VERSION_CLEAR,FUNCTION,160, --================================================================
WS_VERSION_CLEAR,FUNCTION,161, IF p_keep_count > 0 THEN
WS_VERSION_CLEAR,FUNCTION,162,
WS_VERSION_CLEAR,FUNCTION,163, -- log min versions to keep
WS_VERSION_CLEAR,FUNCTION,164, p_return_msg := 'Versions to Keep: ' || p_keep_count;
WS_VERSION_CLEAR,FUNCTION,165, v_result := WsWrkAudit('I',p_job_name, p_task_name, p_sequence,
WS_VERSION_CLEAR,FUNCTION,166, p_return_msg,SQLCODE,SQLERRM,p_task_id, p_job_id);
WS_VERSION_CLEAR,FUNCTION,167,
WS_VERSION_CLEAR,FUNCTION,168, END IF;
WS_VERSION_CLEAR,FUNCTION,169,
WS_VERSION_CLEAR,FUNCTION,170, v_step := 300;
WS_VERSION_CLEAR,FUNCTION,171,
WS_VERSION_CLEAR,FUNCTION,172, --================================================================
WS_VERSION_CLEAR,FUNCTION,173, -- Loop on version records
WS_VERSION_CLEAR,FUNCTION,174, --================================================================
WS_VERSION_CLEAR,FUNCTION,175, FOR v_Versions_rec in c_Versions LOOP
WS_VERSION_CLEAR,FUNCTION,176,
WS_VERSION_CLEAR,FUNCTION,177, --=============================================================
WS_VERSION_CLEAR,FUNCTION,178, -- check to see if object key has changed and reset counter
WS_VERSION_CLEAR,FUNCTION,179, --=============================================================
WS_VERSION_CLEAR,FUNCTION,180, IF v_prev_obj_name <> v_Versions_rec.ov_obj_name THEN
WS_VERSION_CLEAR,FUNCTION,181,
WS_VERSION_CLEAR,FUNCTION,182, v_prev_obj_name := v_Versions_rec.ov_obj_name;
WS_VERSION_CLEAR,FUNCTION,183, v_count := 0;
WS_VERSION_CLEAR,FUNCTION,184, v_process_flag := 0;
WS_VERSION_CLEAR,FUNCTION,185,
WS_VERSION_CLEAR,FUNCTION,186, END IF;
WS_VERSION_CLEAR,FUNCTION,187,
WS_VERSION_CLEAR,FUNCTION,188, -- increment counter for object key
WS_VERSION_CLEAR,FUNCTION,189, v_count := v_count + 1;
WS_VERSION_CLEAR,FUNCTION,190,
WS_VERSION_CLEAR,FUNCTION,191, v_step := 400;
WS_VERSION_CLEAR,FUNCTION,192,
WS_VERSION_CLEAR,FUNCTION,193, --=============================================================
WS_VERSION_CLEAR,FUNCTION,194, -- reset flag if deleting based on retain date, as
WS_VERSION_CLEAR,FUNCTION,195, -- need to chech each individual record
WS_VERSION_CLEAR,FUNCTION,196, --=============================================================
WS_VERSION_CLEAR,FUNCTION,197, IF p_day_count < 0 THEN
WS_VERSION_CLEAR,FUNCTION,198,
WS_VERSION_CLEAR,FUNCTION,199, v_process_flag := 0;
WS_VERSION_CLEAR,FUNCTION,200,
WS_VERSION_CLEAR,FUNCTION,201, END IF;
WS_VERSION_CLEAR,FUNCTION,202,
WS_VERSION_CLEAR,FUNCTION,203, v_step := 500;
WS_VERSION_CLEAR,FUNCTION,204,
WS_VERSION_CLEAR,FUNCTION,205, --=============================================================
WS_VERSION_CLEAR,FUNCTION,206, -- check to see if versioned record can be deleted
WS_VERSION_CLEAR,FUNCTION,207, --=============================================================
WS_VERSION_CLEAR,FUNCTION,208, IF v_process_flag = 0 THEN
WS_VERSION_CLEAR,FUNCTION,209,
WS_VERSION_CLEAR,FUNCTION,210, -- check to see if min versins to keep has been passed
WS_VERSION_CLEAR,FUNCTION,211, IF v_count > p_keep_count THEN
WS_VERSION_CLEAR,FUNCTION,212,
WS_VERSION_CLEAR,FUNCTION,213, -- check to see if deleting records old enough
WS_VERSION_CLEAR,FUNCTION,214, IF p_day_count >= 0 THEN
WS_VERSION_CLEAR,FUNCTION,215,
WS_VERSION_CLEAR,FUNCTION,216, IF v_delete_date >= v_Versions_rec.ov_creation_date THEN
WS_VERSION_CLEAR,FUNCTION,217,
WS_VERSION_CLEAR,FUNCTION,218, v_process_flag := 1;
WS_VERSION_CLEAR,FUNCTION,219,
WS_VERSION_CLEAR,FUNCTION,220, END IF;
WS_VERSION_CLEAR,FUNCTION,221,
WS_VERSION_CLEAR,FUNCTION,222, ELSE
WS_VERSION_CLEAR,FUNCTION,223,
WS_VERSION_CLEAR,FUNCTION,224, IF v_delete_date >= v_Versions_rec.ov_retain_till_date THEN
WS_VERSION_CLEAR,FUNCTION,225,
WS_VERSION_CLEAR,FUNCTION,226, v_process_flag := 1;
WS_VERSION_CLEAR,FUNCTION,227,
WS_VERSION_CLEAR,FUNCTION,228, END IF;
WS_VERSION_CLEAR,FUNCTION,229,
WS_VERSION_CLEAR,FUNCTION,230, END IF;
WS_VERSION_CLEAR,FUNCTION,231,
WS_VERSION_CLEAR,FUNCTION,232, END IF; -- end check for min verions to keep
WS_VERSION_CLEAR,FUNCTION,233,
WS_VERSION_CLEAR,FUNCTION,234, END IF;
WS_VERSION_CLEAR,FUNCTION,235,
WS_VERSION_CLEAR,FUNCTION,236, v_step := 600;
WS_VERSION_CLEAR,FUNCTION,237,
WS_VERSION_CLEAR,FUNCTION,238, --=============================================================
WS_VERSION_CLEAR,FUNCTION,239, -- If flag set, delete version record
WS_VERSION_CLEAR,FUNCTION,240, --=============================================================
WS_VERSION_CLEAR,FUNCTION,241, IF v_process_flag = 1 THEN
WS_VERSION_CLEAR,FUNCTION,242,
WS_VERSION_CLEAR,FUNCTION,243, --===============================================================
WS_VERSION_CLEAR,FUNCTION,244, -- Archive rows in ws_obj_versions
WS_VERSION_CLEAR,FUNCTION,245, --===============================================================
WS_VERSION_CLEAR,FUNCTION,246, EXECUTE IMMEDIATE 'INSERT INTO WX_OBJ_VERSIONS_ARCHIVE '
WS_VERSION_CLEAR,FUNCTION,247, || 'SELECT * '
WS_VERSION_CLEAR,FUNCTION,248, || 'FROM   WS_OBJ_VERSIONS '
WS_VERSION_CLEAR,FUNCTION,249, || 'WHERE  OV_VERSION_NO = :1'
WS_VERSION_CLEAR,FUNCTION,250, USING v_Versions_rec.ov_version_no;
WS_VERSION_CLEAR,FUNCTION,251,
WS_VERSION_CLEAR,FUNCTION,252, v_version_insert_count := v_version_insert_count + 1;
WS_VERSION_CLEAR,FUNCTION,253,
WS_VERSION_CLEAR,FUNCTION,254, v_step := 700;
WS_VERSION_CLEAR,FUNCTION,255,
WS_VERSION_CLEAR,FUNCTION,256, --===============================================================
WS_VERSION_CLEAR,FUNCTION,257, -- Delete rows from ws_obj_versions
WS_VERSION_CLEAR,FUNCTION,258, --===============================================================
WS_VERSION_CLEAR,FUNCTION,259, EXECUTE IMMEDIATE 'DELETE FROM WS_OBJ_VERSIONS '
WS_VERSION_CLEAR,FUNCTION,260, || 'WHERE OV_VERSION_NO = :1'
WS_VERSION_CLEAR,FUNCTION,261, USING v_Versions_rec.ov_version_no;
WS_VERSION_CLEAR,FUNCTION,262,
WS_VERSION_CLEAR,FUNCTION,263, v_version_delete_count := v_version_delete_count + 1;
WS_VERSION_CLEAR,FUNCTION,264,
WS_VERSION_CLEAR,FUNCTION,265, v_step := 800;
WS_VERSION_CLEAR,FUNCTION,266,
WS_VERSION_CLEAR,FUNCTION,267, --===============================================================
WS_VERSION_CLEAR,FUNCTION,268, -- commit every 500 versioned records
WS_VERSION_CLEAR,FUNCTION,269, --===============================================================
WS_VERSION_CLEAR,FUNCTION,270, IF MOD(v_version_delete_count, 500) = 0 THEN
WS_VERSION_CLEAR,FUNCTION,271,
WS_VERSION_CLEAR,FUNCTION,272, COMMIT;
WS_VERSION_CLEAR,FUNCTION,273,
WS_VERSION_CLEAR,FUNCTION,274, END IF;
WS_VERSION_CLEAR,FUNCTION,275,
WS_VERSION_CLEAR,FUNCTION,276, END IF;
WS_VERSION_CLEAR,FUNCTION,277,
WS_VERSION_CLEAR,FUNCTION,278, END LOOP;
WS_VERSION_CLEAR,FUNCTION,279,
WS_VERSION_CLEAR,FUNCTION,280, COMMIT;
WS_VERSION_CLEAR,FUNCTION,281,
WS_VERSION_CLEAR,FUNCTION,282, v_step := 900;
WS_VERSION_CLEAR,FUNCTION,283,
WS_VERSION_CLEAR,FUNCTION,284, --===============================================================
WS_VERSION_CLEAR,FUNCTION,285, -- delete detail version data if versions have been deleted
WS_VERSION_CLEAR,FUNCTION,286, --===============================================================
WS_VERSION_CLEAR,FUNCTION,287, IF v_version_delete_count > 0 THEN
WS_VERSION_CLEAR,FUNCTION,288,
WS_VERSION_CLEAR,FUNCTION,289, --================================================================
WS_VERSION_CLEAR,FUNCTION,290, -- Loop on version detail tables
WS_VERSION_CLEAR,FUNCTION,291, --================================================================
WS_VERSION_CLEAR,FUNCTION,292, FOR v_Tables_rec in c_Tables LOOP
WS_VERSION_CLEAR,FUNCTION,293,
WS_VERSION_CLEAR,FUNCTION,294, v_step := 1000;
WS_VERSION_CLEAR,FUNCTION,295,
WS_VERSION_CLEAR,FUNCTION,296, v_insert_count := 0;
WS_VERSION_CLEAR,FUNCTION,297,
WS_VERSION_CLEAR,FUNCTION,298, --================================================================
WS_VERSION_CLEAR,FUNCTION,299, -- If the detail table is procedure/script headers/lines
WS_VERSION_CLEAR,FUNCTION,300, -- then archive the rows before deleting
WS_VERSION_CLEAR,FUNCTION,301, --================================================================
WS_VERSION_CLEAR,FUNCTION,302, IF UPPER(v_Tables_rec.table_name) IN ('WS_PRO_HEADER_V','WS_PRO_LINE_V','WS_SCR_HEADER_V','WS_SCR_LINE_V') THEN
WS_VERSION_CLEAR,FUNCTION,303,
WS_VERSION_CLEAR,FUNCTION,304, v_step := 1100;
WS_VERSION_CLEAR,FUNCTION,305,
WS_VERSION_CLEAR,FUNCTION,306, -- generate insert SQL
WS_VERSION_CLEAR,FUNCTION,307, v_insert_sql := 'INSERT /*+ APPEND */ INTO WX' || SUBSTR(v_Tables_rec.table_name,3,28) || '_ARCHIVE '
WS_VERSION_CLEAR,FUNCTION,308, ||'SELECT * '
WS_VERSION_CLEAR,FUNCTION,309, ||'FROM   '|| v_Tables_rec.table_name ||' a '
WS_VERSION_CLEAR,FUNCTION,310, ||'WHERE NOT EXISTS (SELECT 1 '
WS_VERSION_CLEAR,FUNCTION,311, ||'                  FROM   ws_obj_versions b '
WS_VERSION_CLEAR,FUNCTION,312, ||'                  WHERE  a.'|| v_Tables_rec.column_name ||' = b.ov_version_no)';
WS_VERSION_CLEAR,FUNCTION,313,
WS_VERSION_CLEAR,FUNCTION,314, EXECUTE IMMEDIATE v_insert_sql;
WS_VERSION_CLEAR,FUNCTION,315,
WS_VERSION_CLEAR,FUNCTION,316, v_insert_count := SQL%ROWCOUNT;
WS_VERSION_CLEAR,FUNCTION,317,
WS_VERSION_CLEAR,FUNCTION,318, IF v_insert_count > 0 THEN
WS_VERSION_CLEAR,FUNCTION,319,
WS_VERSION_CLEAR,FUNCTION,320, v_MsgText := v_insert_count ||' records archived to '
WS_VERSION_CLEAR,FUNCTION,321, || 'WX' || SUBSTR(v_Tables_rec.table_name,3,28) || '_ARCHIVE';
WS_VERSION_CLEAR,FUNCTION,322, v_result := WsWrkAudit('I',p_job_name, p_task_name, p_sequence,
WS_VERSION_CLEAR,FUNCTION,323, v_MsgText,SQLCODE,SQLERRM,p_task_id, p_job_id);
WS_VERSION_CLEAR,FUNCTION,324,
WS_VERSION_CLEAR,FUNCTION,325, COMMIT;
WS_VERSION_CLEAR,FUNCTION,326,
WS_VERSION_CLEAR,FUNCTION,327, END IF;
WS_VERSION_CLEAR,FUNCTION,328,
WS_VERSION_CLEAR,FUNCTION,329, END IF;
WS_VERSION_CLEAR,FUNCTION,330,
WS_VERSION_CLEAR,FUNCTION,331, v_step := 1200;
WS_VERSION_CLEAR,FUNCTION,332,
WS_VERSION_CLEAR,FUNCTION,333, v_delete_count := 0;
WS_VERSION_CLEAR,FUNCTION,334,
WS_VERSION_CLEAR,FUNCTION,335, -- generate delete SQL
WS_VERSION_CLEAR,FUNCTION,336, v_delete_sql := 'DELETE FROM '|| v_Tables_rec.table_name ||' a '
WS_VERSION_CLEAR,FUNCTION,337, ||'WHERE NOT EXISTS (SELECT 1 '
WS_VERSION_CLEAR,FUNCTION,338, ||'                  FROM   ws_obj_versions b '
WS_VERSION_CLEAR,FUNCTION,339, ||'                  WHERE  a.'|| v_Tables_rec.column_name ||' = b.ov_version_no)';
WS_VERSION_CLEAR,FUNCTION,340,
WS_VERSION_CLEAR,FUNCTION,341, EXECUTE IMMEDIATE v_delete_sql;
WS_VERSION_CLEAR,FUNCTION,342,
WS_VERSION_CLEAR,FUNCTION,343, v_delete_count := SQL%ROWCOUNT;
WS_VERSION_CLEAR,FUNCTION,344,
WS_VERSION_CLEAR,FUNCTION,345, IF v_delete_count > 0 THEN
WS_VERSION_CLEAR,FUNCTION,346,
WS_VERSION_CLEAR,FUNCTION,347, v_MsgText := v_delete_count ||' records deleted from '
WS_VERSION_CLEAR,FUNCTION,348, || v_Tables_rec.table_name;
WS_VERSION_CLEAR,FUNCTION,349, v_result := WsWrkAudit('I',p_job_name, p_task_name, p_sequence,
WS_VERSION_CLEAR,FUNCTION,350, v_MsgText,SQLCODE,SQLERRM,p_task_id, p_job_id);
WS_VERSION_CLEAR,FUNCTION,351,
WS_VERSION_CLEAR,FUNCTION,352, COMMIT;
WS_VERSION_CLEAR,FUNCTION,353,
WS_VERSION_CLEAR,FUNCTION,354, END IF;
WS_VERSION_CLEAR,FUNCTION,355,
WS_VERSION_CLEAR,FUNCTION,356, END LOOP;
WS_VERSION_CLEAR,FUNCTION,357,
WS_VERSION_CLEAR,FUNCTION,358, END IF;
WS_VERSION_CLEAR,FUNCTION,359,
WS_VERSION_CLEAR,FUNCTION,360, v_step := 1300;
WS_VERSION_CLEAR,FUNCTION,361,
WS_VERSION_CLEAR,FUNCTION,362, --===============================================================
WS_VERSION_CLEAR,FUNCTION,363, --All Done report the results and return.
WS_VERSION_CLEAR,FUNCTION,364, --===============================================================
WS_VERSION_CLEAR,FUNCTION,365, COMMIT;
WS_VERSION_CLEAR,FUNCTION,366,
WS_VERSION_CLEAR,FUNCTION,367, v_step := 1400;
WS_VERSION_CLEAR,FUNCTION,368, p_return_code := 'S';
WS_VERSION_CLEAR,FUNCTION,369, p_return_msg := 'Version Records deleted: ' || v_version_delete_count;
WS_VERSION_CLEAR,FUNCTION,370,
WS_VERSION_CLEAR,FUNCTION,371, RETURN 1;
WS_VERSION_CLEAR,FUNCTION,372,
WS_VERSION_CLEAR,FUNCTION,373,EXCEPTION
WS_VERSION_CLEAR,FUNCTION,374,--=================================================================
WS_VERSION_CLEAR,FUNCTION,375,-- Unhandled Exception. Return with Fatal Error
WS_VERSION_CLEAR,FUNCTION,376,--=================================================================
WS_VERSION_CLEAR,FUNCTION,377,WHEN OTHERS THEN
WS_VERSION_CLEAR,FUNCTION,378, p_return_code := 'W';
WS_VERSION_CLEAR,FUNCTION,379, p_return_msg := 'Unhandled Exception in Ws_Version_Clear '|| v_ws_pro_version ||
WS_VERSION_CLEAR,FUNCTION,380, ' Step ' ||v_step || ' '||SQLERRM;
WS_VERSION_CLEAR,FUNCTION,381, v_result := WsWrkAudit('F',p_job_name, p_task_name, p_sequence,
WS_VERSION_CLEAR,FUNCTION,382, p_return_msg,SQLCODE,SQLERRM,p_task_id, p_job_id);
WS_VERSION_CLEAR,FUNCTION,383, RETURN -3;
WS_VERSION_CLEAR,FUNCTION,384,
WS_VERSION_CLEAR,FUNCTION,385,END Ws_Version_Clear;
WS_VERSION_CLEAR,FUNCTION,386,
