<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<database_function_set name="Default Netezza" xmlns="http://www.wherescape.com/xml/red" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.wherescape.com/xml/red ./Database%20Function%20Set.xsd">

  <database>Netezza</database>

  <meta_version>1</meta_version>

  <functional_groups>
    <functional_group name="Number">
      <functions>
        <function name="Absolute Value (ABS)">
          <description>Returns the absolute value of the number. Essentialy converts all values to positive\r\nExample: ABS(load_sales.tax)</description>
          <syntax>ABS(numeric_column)</syntax>
          <model>ABS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Ceiling (CEIL)">
          <description>Returns the smallest integer or whole number that is greater than or equal to the value supplied\r\nExample: CEIL(load_sales.tax)</description>
          <syntax>CEIL(numeric_column)</syntax>
          <model>CEIL(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Cosine (COS)">
          <description>Returns the trignometric cosine for an angle expressed in radians.\r\nExample: COS(load_sales.value)</description>
          <syntax>COS(numeric_column)</syntax>
          <model>COS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Exponential (EXP)">
          <description>Returns e raised to the specified power where e = 2.71828182845905.\r\nExample: EXP(3)</description>
          <syntax>EXP(n)</syntax>
          <model>EXP(n)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>5</default_column_end>
        </function>
        <function name="Floor (FLOOR)">
          <description>Returns the smallest integer or whole number that is less than or equal to the value supplied\r\nExample: FLOOR(load_sales.tax)</description>
          <syntax>FLOOR(numeric_column)</syntax>
          <model>FLOOR(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Natural Logarithm (LN)">
          <description>Returns the natural, or base 'e' logarithm of the supplied value\r\nExample: LN(10.34)</description>
          <syntax>LN(n)</syntax>
          <model>LN(n)</model>
          <default_column_start>3</default_column_start>
          <default_column_end>4</default_column_end>
        </function>
        <function name="Base 10 Logarithm (LOG)">
          <description>Returns the base10 logarithm of the supplied value\r\nExample: LOG(10,100)</description>
          <syntax>LOG(base,number)</syntax>
          <model>LOG(base,number)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>15</default_column_end>
        </function>
        <function name="Modulus (MOD)">
          <description>Returns the remainder of a value divided by a divisor.\r\nExample: MOD(load_sales.boxes,4).</description>
          <syntax>MOD(numeric_column,divisor)</syntax>
          <model>MOD(numeric_column,divisor)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="If Null Value (NVL)">
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.boxes,0).</description>
          <syntax>NVL(numeric_column,default_value)</syntax>
          <model>NVL(numeric_column,default_value)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Raise to Exponent (POW)">
          <description>Returns the value raised to the exponent.\r\nExample: POW(2,3) = 8</description>
          <syntax>POW(numeric_column,exponent)</syntax>
          <model>POW(numeric_column,exponent)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Round (ROUND)">
          <description>Returns the value rounded to a given number of digits of precision.\r\nExample: ROUND(12.399,1) = 12.4</description>
          <syntax>ROUND(numeric_column)</syntax>
          <model>ROUND(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Sign (SIGN)">
          <description>Returns either 0, 1, or -1 depending on the passed value. Zero if the passed vlaue is zero.\r\nExample: SIGN(load_sales.value)</description>
          <syntax>SIGN(numeric_column)</syntax>
          <model>SIGN(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Sine (SIN)">
          <description>Returns the trignometric sine for an angle expressed in radians.\r\nExample: SIN(load_sales.value)</description>
          <syntax>SIN(numeric_column)</syntax>
          <model>SIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Square Root (SQRT)">
          <description>Returns the square root of the value supplied.\r\nExample: SQRT(load_sales.value)</description>
          <syntax>SQRT(numeric_column)</syntax>
          <model>SQRT(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Tangent (TAN)">
          <description>Returns the trignometric tangent for an angle expressed in radians.\r\nExample: TAN(load_sales.value)</description>
          <syntax>TAN(numeric_column)</syntax>
          <model>TAN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Truncate (TRUNC)">
          <description>Returns the value truncated to a given number of digits of precision.\r\nExample: TRUNC(12.399,1) = 12.3</description>
          <syntax>TRUNC(numeric_column)</syntax>
          <model>TRUNC(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="String">
      <functions>
        <function name="ASCII value (ASCII)">
          <description>Returns the ascii value of the first character in the string\r\nExample: ASCII(load_customer.name)</description>
          <syntax>ASCII(string_column)</syntax>
          <model>ASCII(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Character (CHR)">
          <description>Returns a character whose ASCII value is the passed integer.\r\nExample: CHR(65)</description>
          <syntax>CHR(integer)</syntax>
          <model>CHR(integer)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>11</default_column_end>
        </function>
        <function name="If Null Value (NVL)">
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.boxes,0).</description>
          <syntax>NVL(string_column,default_value)</syntax>
          <model>NVL(string_column,default_value)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="Initial Capital (INITCAP)">
          <description>Returns a string where the first letter of every word of a string column is converted to upper case.\r\nExample: INITCAP(load_customer.name)</description>
          <syntax>INITCAP(string_column)</syntax>
          <model>INITCAP(string_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Both Trim (BTRIM)">
          <description>Returns a string where all occurrences of the specified characters are removed from both ends of the string.\r\nBy default white spaces are removed when removal characters are not specified.\r\nExample: BTRIM(load_customer.name,'+-=')</description>
          <syntax>BTRIM(string_column [ ,'character' ] )</syntax>
          <model>BTRIM(string_column [ ,'character' ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Length (LENGTH)">
          <description>Returns an integer value containing the number of characters in the string column.\r\nExample: LENGTH(load_customer.name)</description>
          <syntax>LENGTH(string_column)</syntax>
          <model>LENGTH(string_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Locate (INSTR)">
          <description>Returns an integer value containing the starting position of the search string, or zero if the search string is not found.\r\nExample: INSTR(load_customer.name,'smith',1,1)</description>
          <syntax>INSTR(string_column,'search string' [ ,start position [ , occurrence ] ] )</syntax>
          <model>INSTR(string_column,'search string' [ ,start position [ , occurrence ] ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Lower (LOWER)">
          <description>Returns a string where every character in the passed column data is converted to lower case.\r\nExample: LOWER(load_customer.name)</description>
          <syntax>LOWER(string_column)</syntax>
          <model>LOWER(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Left Pad (LPAD)">
          <description>Returns a string which is the passed column data padded to the left with either spaces or the set of characters provided.\r\nThe pad characters are added to achieve the length specified.\r\nExample: LPAD(load_customer.name,60,'.')</description>
          <syntax>LPAD(string_column,length [, 'character'])</syntax>
          <model>LPAD(string_column,length [, 'character'])</model>
          <default_column_start>5</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Left Trim (LTRIM)">
          <description>Returns a string which is the passed column data where all of the leading characters specified have been removed.\r\nBy default white spaces are removed.\r\nExample: LTRIM(load_customer.name,'+-=')</description>
          <syntax>LTRIM(string_column [ ,'character' ] )</syntax>
          <model>LTRIM(string_column [ ,'character' ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Right Pad (RPAD)">
          <description>Returns a string which is the passed column data padded to the right with either spaces or the set of characters provided.\r\nThe pad characters are added to achieve the length specified.\r\nExample: LPAD(load_customer.name,60,'.')</description>
          <syntax>RPAD(string_column,length [ , 'character' ] )</syntax>
          <model>RPAD(string_column,length [ , 'character' ] )</model>
          <default_column_start>5</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Right Trim (RTRIM)">
          <description>Returns a string which is the passed column data where all of the trailing characters specified have been removed.\r\nBy default white spaces are removed.\r\nExample: RTRIM(load_customer.name,'+-=')</description>
          <syntax>RTRIM(string_column [ ,'character' ] )</syntax>
          <model>RTRIM(string_column [ ,'character' ] )</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Sounds Like (NYSIIS)">
          <description>Used in a comparison situation. This function returns a sound code that can be used to compare against a second sound code.\r\nUses the New York State Identification and Intelligence System (NYSIIS) variation of Soundex.\r\nExample: CASE WHEN NYSIIS(load_customer.last_name) = NYSIIS('smith') THEN 'smith'\r\nELSE load_customer.last_name END</description>
          <syntax>NYSIIS(string_column)</syntax>
          <model>NYSIIS(string_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Sub String (SUBSTR)">
          <description>Returns a sub string of the passed column data. The start position and length of the substring are normally supplied.\r\nExample: SUBSTR(load_customer.name,INSTR(load_customer.name,' ')+1,10)</description>
          <syntax>SUBSTR(string_column, start [ ,count ] )</syntax>
          <model>SUBSTR(string_column, start [ ,count ] )</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Translate (TRANSLATE)">
          <description>Returns a string where characters have been replaced based on a positional matching of characters in the 'if' string\r\nwith characters in the 'then' string.\r\nExample: TRANSLATE(load_customer.name,'ABCDEFG','abcdefg')</description>
          <syntax>TRANSLATE(string_column, if, then )</syntax>
          <model>TRANSLATE(string_column, if, then )</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Upper (UPPER)">
          <description>Returns a string where every character in the passed column data is converted to upper case.\r\nExample: UPPER(load_customer.name)</description>
          <syntax>UPPER(string_column)</syntax>
          <model>UPPER(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Date">
      <functions>
        <function name="Add Months (ADD_MONTHS)">
          <description>Returns a date which has had the specified number of months added to it.\r\nExample: ADD_MONTHS(load_customer.start_date,36)</description>
          <syntax>ADD_MONTHS(date_column,number_of_months)</syntax>
          <model>ADD_MONTHS(date_column,number_of_months)</model>
          <default_column_start>11</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="Last Day of Month (LAST_DAY)">
          <description>Returns the date of the last day of the month that the supplied date is in.\r\nExample: LAST_DAY(load_sample.date1)</description>
          <syntax>LAST_DAY(date_column)</syntax>
          <model>LAST_DAY(date_column)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Months Diff. (MONTHS_BETWEEN)">
          <description>Returns the number of months or part months between two dates.\r\nExample: MONTHS_BETWEEN(load_sample.date1,load_sample.date2)</description>
          <syntax>MONTHS_BETWEEN(date_column, date_column)</syntax>
          <model>MONTHS_BETWEEN(date_column, date_column)</model>
          <default_column_start>15</default_column_start>
          <default_column_end>26</default_column_end>
        </function>
        <function name="Next Day (NEXT_DAY)">
          <description>Returns the date of the next day (i.e. Monday, Tuesday...) after the supplied date.\r\nExample: NEXT_DAY(load_sample.date1,'Sunday')</description>
          <syntax>NEXT_DAY(date_column,'day_of_week')</syntax>
          <model>NEXT_DAY(date_column,'day_of_week')</model>
          <default_column_start>9</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="System Datetime (CURRENT_TIMESTAMP)">
          <description>Returns the current system date and time.\r\nExample: CURRENT_TIMESTAMP</description>
          <syntax>CURRENT_TIMESTAMP</syntax>
          <model>CURRENT_TIMESTAMP</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="System Date (CURRENT_DATE)">
          <description>Returns the current system date (without time).\r\nExample: CURRENT_DATE</description>
          <syntax>CURRENT_DATE</syntax>
          <model>CURRENT_DATE</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="Truncate Datetime (DATE_TRUNC)">
          <description>Truncates a timestamp, date, or time to a specified precision of 'YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE', or 'SECOND'. \r\nExample to return the date truncated to the start of the day: Example: DATE_TRUNC('DAY',load_sample.date1)</description>
          <syntax>DATE_TRUNC('PRECISION',date_column)</syntax>
          <model>DATE_TRUNC('PRECISION',date_column)</model>
          <default_column_start>23</default_column_start>
          <default_column_end>34</default_column_end>
        </function>
        <function name="Extract Datetime (EXTRACT)">
          <description>Returns a numeric datetime or time component from a datetime or interval value.\r\nComponents are: epoch, year, quarter, month, week, day, dow, doy, hour, minute, second, millisecond, microsecond.\r\nExample: EXTRACT(DAY FROM TIMESTAMP '2013-12-25 14:00:00') returns 25.</description>
          <syntax>EXTRACT(component from datetime)</syntax>
          <model>EXTRACT(component from datetime)</model>
          <default_column_start>23</default_column_start>
          <default_column_end>31</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Conversion">
      <functions>
        <function name="Case Statement (CASE)">
          <description>Allows the use of IF ... THEN ... ELSE logic.\r\nExample: CASE WHEN load_sample.temp1 &gt; load_sample_temp2 THEN 'Hot' ELSE 'Cold' END</description>
          <syntax>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</syntax>
          <model>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</model>
          <default_column_start>6</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="Decode (DECODE)">
          <description>Returns the value that matches the specified criteria.\r\nExample: DECODE(load_sample.temp1,10,'Okay',9,'Cold',11,'Hot,'Unknown')</description>
          <syntax>DECODE(column, criteria,result [,criteria,result...] ,default)</syntax>
          <model>DECODE(column, criteria,result [,criteria,result...] ,default)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>13</default_column_end>
        </function>
        <function name="If Null Value (NVL)">
          <description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.boxes,0).</description>
          <syntax>NVL(column,default_value)</syntax>
          <model>NVL(column,default_value)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>10</default_column_end>
        </function>
        <function name="To Character (TO_CHAR)">
          <description>Returns a string from either a number or date that is converted using the specified format mask.\r\nExample: TO_CHAR(load_inventory.date1,'YYYYMMDD')</description>
          <syntax>TO_CHAR(numeric_column or date_column, format)</syntax>
          <model>TO_CHAR(column, format)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>14</default_column_end>
        </function>
        <function name="To Number (TO_NUMBER)">
          <description>Returns a number having converted from a character string.\r\nExample: TO_NUMBER(load_inventory.position)</description>
          <syntax>TO_NUMBER(string_column)</syntax>
          <model>TO_NUMBER(string_column)</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="To Date (TO_DATE)">
          <description>Returns a date from a string that is converted using the specified format mask.\r\nExample: TO_DATE(load_inventory.date_ymd,'YYYYMMDD')</description>
          <syntax>TO_DATE(string_column, format)</syntax>
          <model>TO_DATE(string_column, format)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="To Timestamp (TO_TIMESTAMP)">
          <description>Returns a timestamp from a string that is converted using the specified format mask.\r\nExample: TO_TIMESTAMP(load_inventory.date_ymd,'YYYYMMDD')</description>
          <syntax>TO_TIMESTAMP(string_column, format)</syntax>
          <model>TO_TIMESTAMP(string_column, format)</model>
          <default_column_start>13</default_column_start>
          <default_column_end>26</default_column_end>
        </function>
        <function name="Translate (TRANSLATE)">
          <description>Returns a string where characters have been replaced based on a positional matching of characters in the 'if' string\r\nwith characters in the 'then' string.\r\nExample: TRANSLATE(load_customer.name,'ABCDEFG','abcdefg')</description>
          <syntax>TRANSLATE(string_column, if, then )</syntax>
          <model>TRANSLATE(string_column, if, then )</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Cast as Type (CAST)">
          <description>Returns the column converted to the specified data type and precision.\r\nExample: CAST(load_inventory.size AS VARCHAR(20))</description>
          <syntax>CAST(column AS data_type)</syntax>
          <model>CAST(column AS data_type)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>11</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Aggregate">
      <functions>
        <function name="Average (AVG)">
          <description>Returns the average value for the supplied column.\r\nExample: AVG(load_inventory.temp1)</description>
          <syntax>AVG(numeric_column)</syntax>
          <model>AVG(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Count (COUNT)">
          <description>Returns the count of the number of non null values for the column.\r\nExample: COUNT(load_inventory.temp1)</description>
          <syntax>COUNT(column)</syntax>
          <model>COUNT(column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="Maximum (MAX)">
          <description>Returns the maximum value from the supplied column.\r\nExample: MAX(load_inventory.temp1)</description>
          <syntax>MAX(numeric_column)</syntax>
          <model>MAX(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Minimum (MIN)">
          <description>Returns the minimum value from the supplied column.\r\nExample: MIN(load_inventory.temp1)</description>
          <syntax>MIN(numeric_column)</syntax>
          <model>MIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Standard Deviation (STDDEV)">
          <description>Returns the standard deviation for the supplied column.\r\nExample: STDDEV(load_inventory.temp1)</description>
          <syntax>STDDEV(numeric_column)</syntax>
          <model>STDDEV(numeric_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Sum (SUM)">
          <description>Returns the summed values from the supplied column.\r\nExample: SUM(load_inventory.temp1)</description>
          <syntax>SUM(numeric_column)</syntax>
          <model>SUM(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Variance (VARIANCE)">
          <description>Returns the variance for the supplied column.\r\nExample: VARIANCE(load_inventory.temp1)</description>
          <syntax>VARIANCE(numeric_column)</syntax>
          <model>VARIANCE(numeric_column)</model>
          <default_column_start>9</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Operator">
      <functions>
        <function name="+">
          <description>Inserts the plus operator to allow addition of two numbers.\r\nExample: load_sales.base + load_sales.gst</description>
          <syntax>+</syntax>
          <model>+</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="-">
          <description>Inserts the minus operator to allow subtraction of two numbers.\r\nExample: load_sales.base - load_sales.gst</description>
          <syntax>-</syntax>
          <model>-</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="/">
          <description>Inserts the divide operator to allow division of two numbers.\r\nExample: load_sales.base / load_sales.gst</description>
          <syntax>/</syntax>
          <model>/</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="*">
          <description>Inserts the multiply operator to allow multiplication of two numbers.\r\nExample: load_sales.base * load_sales.gst</description>
          <syntax>*</syntax>
          <model>*</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="||">
          <description>Inserts the concatenation operator to combine two strings.\r\nExample: load_customer.first_name || ' ' || load_customer.last_name</description>
          <syntax>||</syntax>
          <model>||</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=" ">
          <description>Inserts the space character for clarity or other purposes.</description>
          <syntax> </syntax>
          <model> </model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="(">
          <description>Inserts the open bracket, used for setting precedence in result evaluation.</description>
          <syntax>(</syntax>
          <model>(</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=")">
          <description>Inserts the close bracket, used for setting precedence in result evaluation.</description>
          <syntax>)</syntax>
          <model>)</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
      </functions>
    </functional_group>
  </functional_groups>

</database_function_set>
