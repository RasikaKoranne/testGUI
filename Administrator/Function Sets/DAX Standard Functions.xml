<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<database_function_set name="Default DAX" xmlns="http://www.wherescape.com/xml/red" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.wherescape.com/xml/red ./Database%20Function%20Set.xsd">
    <database>DAX</database>
    <meta_version>1</meta_version>
    <functional_groups>
        <functional_group name="Date and Time">
            <functions>
                <function name="Calendar">
                    <description>Returns a table with a single column named "Date" that contains a contiguous set of dates. The range of dates is from the specified start date to the specified end date, inclusive of those two dates.</description>
                    <syntax>CALENDAR(start_date, end_date)</syntax>
                    <model>CALENDAR(start_date, end_date)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Calendarauto">
                    <description>Returns a table with a single column named "Date" that contains a contiguous set of dates. The range of dates is calculated automatically based on data in the model.</description>
                    <syntax>CALENDARAUTO(fiscal_year_end_month)</syntax>
                    <model>CALENDARAUTO(fiscal_year_end_month)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>34</default_column_end>
                </function>
                <function name="Date">
                    <description>Returns the specified date in datetime format.</description>
                    <syntax>DATE(year, month, day)</syntax>
                    <model>DATE(year, month, day)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Datediff">
                    <description>Returns the count of interval boundaries crossed between two dates.</description>
                    <syntax>DATEDIFF(start_date, end_date, interval)</syntax>
                    <model>DATEDIFF(start_date, end_date, interval)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Datevalue">
                    <description>Converts a date in the form of text to a date in datetime format.</description>
                    <syntax>DATEVALUE(date_text)</syntax>
                    <model>DATEVALUE(date_text)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Day">
                    <description>Returns the day of the month, a number from 1 to 31.</description>
                    <syntax>DAY(date)</syntax>
                    <model>DAY(date)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>8</default_column_end>
                </function>
                <function name="Edate">
                    <description>Returns the date that is the indicated number of months before or after the start date. Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue.</description>
                    <syntax>EDATE(start_date, months)</syntax>
                    <model>EDATE(start_date, months)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Eomonth">
                    <description>Returns the date in datetime format of the last day of the month, before or after a specified number of months. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month.</description>
                    <syntax>EOMONTH(start_date, months)</syntax>
                    <model>EOMONTH(start_date, months)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Hour">
                    <description>Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).</description>
                    <syntax>HOUR(datetime)</syntax>
                    <model>HOUR(datetime)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Minute">
                    <description>Returns the minute as a number from 0 to 59, given a date and time value.</description>
                    <syntax>MINUTE(datetime)</syntax>
                    <model>MINUTE(datetime)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Month">
                    <description>Returns the month as a number from 1 (January) to 12 (December).</description>
                    <syntax>MONTH(datetime)</syntax>
                    <model>MONTH(datetime)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Now">
                    <description>Returns the current date and time in datetime format.</description>
                    <syntax>NOW()</syntax>
                    <model>NOW()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="Second">
                    <description>Returns the seconds of a time value, as a number from 0 to 59.</description>
                    <syntax>SECOND(time)</syntax>
                    <model>SECOND(time)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Time">
                    <description>Converts hours, minutes, and seconds given as numbers to a time in datetime format.</description>
                    <syntax>TIME(hour, minute, second)</syntax>
                    <model>TIME(hour, minute, second)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Timevalue">
                    <description>Converts a time in text format to a time in datetime format.</description>
                    <syntax>TIMEVALUE(time_text)</syntax>
                    <model>TIMEVALUE(time_text)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Today">
                    <description>Returns the current date.</description>
                    <syntax>TODAY()</syntax>
                    <model>TODAY()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="Weekday">
                    <description>Returns a number from 1 to 7 identifying the day of the week of a date. By default the day ranges from 1 (Sunday) to 7 (Saturday).</description>
                    <syntax>WEEKDAY(date, return_type)</syntax>
                    <model>WEEKDAY(date, return_type)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Weeknum">
                    <description>Returns the week number for the given date and year according to the return_type value. The week number indicates where the week falls numerically within a year.</description>
                    <syntax>WEEKNUM(date, return_type)</syntax>
                    <model>WEEKNUM(date, return_type)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Year">
                    <description>Returns the year of a date as a four digit integer in the range 1900-9999.</description>
                    <syntax>YEAR(date)</syntax>
                    <model>YEAR(date)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Yearfrac">
                    <description>Calculates the fraction of the year represented by the number of whole days between two dates. Use the YEARFRAC worksheet function to identify the proportion of a whole year's benefits or obligations to assign to a specific term.</description>
                    <syntax>YEARFRAC(start_date, end_date, basis)</syntax>
                    <model>YEARFRAC(start_date, end_date, basis)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Time Intelligence">
            <functions>
                <function name="Closingbalancemonth">
                    <description>Evaluates the expression at the last date of the month in the current context.</description>
                    <syntax>CLOSINGBALANCEMONTH(expression, dates, filter)</syntax>
                    <model>CLOSINGBALANCEMONTH(expression, dates, filter)</model>
                    <default_column_start>20</default_column_start>
                    <default_column_end>30</default_column_end>
                </function>
                <function name="Closingbalancequarter">
                    <description>Evaluates the expression at the last date of the quarter in the current context.</description>
                    <syntax>CLOSINGBALANCEQUARTER(expression, dates, filter)</syntax>
                    <model>CLOSINGBALANCEQUARTER(expression, dates, filter)</model>
                    <default_column_start>22</default_column_start>
                    <default_column_end>32</default_column_end>
                </function>
                <function name="Closingbalanceyear">
                    <description>Evaluates the expression at the last date of the year in the current context.</description>
                    <syntax>CLOSINGBALANCEYEAR(expression, dates, filter, year_end_date)</syntax>
                    <model>CLOSINGBALANCEYEAR(expression, dates, filter, year_end_date)</model>
                    <default_column_start>19</default_column_start>
                    <default_column_end>29</default_column_end>
                </function>
                <function name="Dateadd">
                    <description>Returns a table that contains a column of dates, shifted either forward or backward in time by the specified number of intervals from the dates in the current context.</description>
                    <syntax>DATEADD(dates, number_of_intervals, interval)</syntax>
                    <model>DATEADD(dates, number_of_intervals, interval)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Datesbetween">
                    <description>Returns a table that contains a column of dates that begins with the start_date and continues until the end_date.</description>
                    <syntax>DATESBETWEEN(dates, start_date, end_date)</syntax>
                    <model>DATESBETWEEN(dates, start_date, end_date)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Datesinperiod">
                    <description>Returns a table that contains a column of dates that begins with the start_date and continues for the specified number_of_intervals.</description>
                    <syntax>DATESINPERIOD(dates, start_date, number_of_intervals, interval)</syntax>
                    <model>DATESINPERIOD(dates, start_date, number_of_intervals, interval)</model>
                    <default_column_start>14</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Datesmtd">
                    <description>Returns a table that contains a column of the dates for the month to date, in the current context.</description>
                    <syntax>DATESMTD(dates)</syntax>
                    <model>DATESMTD(dates)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Datesqtd">
                    <description>Returns a table that contains a column of the dates for the quarter to date, in the current context.</description>
                    <syntax>DATESQTD(dates)</syntax>
                    <model>DATESQTD(dates)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Datesytd">
                    <description>Returns a table that contains a column of the dates for the year to date, in the current context.</description>
                    <syntax>DATESYTD(dates, year_end_date)</syntax>
                    <model>DATESYTD(dates, year_end_date)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Endofmonth">
                    <description>Returns the last date of the month in the current context for the specified column of dates.</description>
                    <syntax>ENDOFMONTH(dates)</syntax>
                    <model>ENDOFMONTH(dates)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Endofquarter">
                    <description>Returns the last date of the quarter in the current context for the specified column of dates.</description>
                    <syntax>ENDOFQUARTER(dates)</syntax>
                    <model>ENDOFQUARTER(dates)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Endofyear">
                    <description>Returns the last date of the year in the current context for the specified column of dates.</description>
                    <syntax>ENDOFYEAR(dates, year_end_date)</syntax>
                    <model>ENDOFYEAR(dates, year_end_date)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Firstdate">
                    <description>Returns the first date in the current context for the specified column of dates.</description>
                    <syntax>FIRSTDATE(dates)</syntax>
                    <model>FIRSTDATE(dates)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Firstnonblank">
                    <description>Returns the first value in the column, column, filtered by the current context, where the expression is not blank.</description>
                    <syntax>FIRSTNONBLANK(column, expression)</syntax>
                    <model>FIRSTNONBLANK(column, expression)</model>
                    <default_column_start>14</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Lastdate">
                    <description>Returns the last date in the current context for the specified column of dates.</description>
                    <syntax>LASTDATE(dates)</syntax>
                    <model>LASTDATE(dates)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Lastnonblank">
                    <description>Returns the last value in the column, column, filtered by the current context, where the expression is not blank.</description>
                    <syntax>LASTNONBLANK(column, expression)</syntax>
                    <model>LASTNONBLANK(column, expression)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Nextday">
                    <description>Returns a table that contains a column of all dates from the next day, based on the first date specified in the dates column in the current context.</description>
                    <syntax>NEXTDAY(dates)</syntax>
                    <model>NEXTDAY(dates)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Nextmonth">
                    <description>Returns a table that contains a column of all dates from the next month, based on the first date in the dates column in the current context.</description>
                    <syntax>NEXTMONTH(dates)</syntax>
                    <model>NEXTMONTH(dates)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Nextquarter">
                    <description>Returns a table that contains a column of all dates in the next quarter, based on the first date specified in the dates column, in the current context.</description>
                    <syntax>NEXTQUARTER(dates)</syntax>
                    <model>NEXTQUARTER(dates)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Nextyear">
                    <description>Returns a table that contains a column of all dates in the next year, based on the first date in the dates column, in the current context.</description>
                    <syntax>NEXTYEAR(dates, year_end_date)</syntax>
                    <model>NEXTYEAR(dates, year_end_date)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Openingbalancemonth">
                    <description>Evaluates the expression at the first date of the month in the current context.</description>
                    <syntax>OPENINGBALANCEMONTH(expression, dates, filter)</syntax>
                    <model>OPENINGBALANCEMONTH(expression, dates, filter)</model>
                    <default_column_start>20</default_column_start>
                    <default_column_end>30</default_column_end>
                </function>
                <function name="Openingbalancequarter">
                    <description>Evaluates the expression at the first date of the quarter, in the current context.</description>
                    <syntax>OPENINGBALANCEQUARTER(expression, dates, filter)</syntax>
                    <model>OPENINGBALANCEQUARTER(expression, dates, filter)</model>
                    <default_column_start>22</default_column_start>
                    <default_column_end>32</default_column_end>
                </function>
                <function name="Openingbalanceyear">
                    <description>Evaluates the expression at the first date of the year in the current context.</description>
                    <syntax>OPENINGBALANCEYEAR(expression, dates, filter, year_end_date)</syntax>
                    <model>OPENINGBALANCEYEAR(expression, dates, filter, year_end_date)</model>
                    <default_column_start>19</default_column_start>
                    <default_column_end>29</default_column_end>
                </function>
                <function name="Parallelperiod">
                    <description>Returns a table that contains a column of dates that represents a period parallel to the dates in the specified dates column, in the current context, with the dates shifted a number of intervals either forward in time or back in time.</description>
                    <syntax>PARALLELPERIOD(dates, number_of_intervals, interval)</syntax>
                    <model>PARALLELPERIOD(dates, number_of_intervals, interval)</model>
                    <default_column_start>15</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Previousday">
                    <description>Returns a table that contains a column of all dates representing the day that is previous to the first date in the dates column, in the current context.</description>
                    <syntax>PREVIOUSDAY(dates)</syntax>
                    <model>PREVIOUSDAY(dates)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Previousmonth">
                    <description>Returns a table that contains a column of all dates from the previous month, based on the first date in the dates column, in the current context.</description>
                    <syntax>PREVIOUSMONTH(dates)</syntax>
                    <model>PREVIOUSMONTH(dates)</model>
                    <default_column_start>14</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Previousquarter">
                    <description>Returns a table that contains a column of all dates from the previous quarter, based on the first date in the dates column, in the current context.</description>
                    <syntax>PREVIOUSQUARTER(dates)</syntax>
                    <model>PREVIOUSQUARTER(dates)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Previousyear">
                    <description>Returns a table that contains a column of all dates from the previous year, given the last date in the dates column, in the current context.</description>
                    <syntax>PREVIOUSYEAR(dates, year_end_date)</syntax>
                    <model>PREVIOUSYEAR(dates, year_end_date)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Sameperiodlastyear">
                    <description>Returns a table that contains a column of dates shifted one year back in time from the dates in the specified dates column, in the current context.</description>
                    <syntax>SAMEPERIODLASTYEAR(dates)</syntax>
                    <model>SAMEPERIODLASTYEAR(dates)</model>
                    <default_column_start>19</default_column_start>
                    <default_column_end>24</default_column_end>
                </function>
                <function name="Startofmonth">
                    <description>Returns the first date of the month in the current context for the specified column of dates.</description>
                    <syntax>STARTOFMONTH(dates)</syntax>
                    <model>STARTOFMONTH(dates)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Startofquarter">
                    <description>Returns the first date of the quarter in the current context for the specified column of dates.</description>
                    <syntax>STARTOFQUARTER(dates)</syntax>
                    <model>STARTOFQUARTER(dates)</model>
                    <default_column_start>15</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Startofyear">
                    <description>Returns the first date of the year in the current context for the specified column of dates.</description>
                    <syntax>STARTOFYEAR(dates)</syntax>
                    <model>STARTOFYEAR(dates)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Totalmtd">
                    <description>Evaluates the value of the expression for the month to date, in the current context.</description>
                    <syntax>TOTALMTD(expression, dates, filter)</syntax>
                    <model>TOTALMTD(expression, dates, filter)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Totalqtd">
                    <description>Evaluates the value of the expression for the dates in the quarter to date, in the current context.</description>
                    <syntax>TOTALQTD(expression, dates, filter)</syntax>
                    <model>TOTALQTD(expression, dates, filter)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Totalytd">
                    <description>Evaluates the year-to-date value of the expression in the current context.</description>
                    <syntax>TOTALYTD(expression, dates, filter, year_end_date)</syntax>
                    <model>TOTALYTD(expression, dates, filter, year_end_date)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Filter">
            <functions>
                <function name="Addmissingitems">
                    <description>Adds combinations of items from multiple columns to a table if they do not already exist. The determination of which item combinations to add is based on referencing source columns which contain all the possible values for the columns.</description>
                    <syntax>ADDMISSINGITEMS(showAllColumn, showAllColumn..., table, groupingColumn, groupingColumn..., filterTable...)</syntax>
                    <model>ADDMISSINGITEMS(showAllColumn, showAllColumn..., table, groupingColumn, groupingColumn..., filterTable...)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>29</default_column_end>
                </function>
                <function name="All">
                    <description>Returns all the rows in a table, or all the values in a column, ignoring any filters that might have been applied. This function is useful for clearing filters and creating calculations on all the rows in a table.</description>
                    <syntax>ALL(table | column, column, column, ...)</syntax>
                    <model>ALL(table | column, column, column, ...)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Allexcept">
                    <description>Removes all context filters in the table except filters that have been applied to the specified columns.</description>
                    <syntax>ALLEXCEPT(table, column, column, ...)</syntax>
                    <model>ALLEXCEPT(table, column, column, ...)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Allnoblankrow">
                    <description>From the parent table of a relationship, returns all rows but the blank row, or all distinct values of a column but the blank row, and disregards any context filters that might exist.</description>
                    <syntax>ALLNOBLANKROW(table | column)</syntax>
                    <model>ALLNOBLANKROW(table | column)</model>
                    <default_column_start>14</default_column_start>
                    <default_column_end>28</default_column_end>
                </function>
                <function name="Allselected">
                    <description>Removes context filters from columns and rows in the current query, while retaining all other context filters or explicit filters.</description>
                    <syntax>ALLSELECTED(table | column)</syntax>
                    <model>ALLSELECTED(table | column)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>26</default_column_end>
                </function>
                <function name="Calculate">
                    <description>Evaluates an expression in a context that is modified by the specified filters.</description>
                    <syntax>CALCULATE(expression, filter1, filter2...)</syntax>
                    <model>CALCULATE(expression, filter1, filter2...)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Calculatetable">
                    <description>Evaluates a table expression in a context modified by the given filters.</description>
                    <syntax>CALCULATETABLE(expression, filter1, filter2...)</syntax>
                    <model>CALCULATETABLE(expression, filter1, filter2...)</model>
                    <default_column_start>15</default_column_start>
                    <default_column_end>25</default_column_end>
                </function>
                <function name="Distinct">
                    <description>Returns a one-column table that contains the distinct values from the specified column. In other words, duplicate values are removed and only unique values are returned.</description>
                    <syntax>DISTINCT(column)</syntax>
                    <model>DISTINCT(column)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Earlier">
                    <description>Returns the current value of the specified column in an outer evaluation pass of the mentioned column.</description>
                    <syntax>EARLIER(column, number)</syntax>
                    <model>EARLIER(column, number)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Earliest">
                    <description>Returns the current value of the specified column in an outer evaluation pass of the specified column.</description>
                    <syntax>EARLIEST(column)</syntax>
                    <model>EARLIEST(column)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Filter">
                    <description>Returns a table that represents a subset of another table or expression.</description>
                    <syntax>FILTER(table, filter)</syntax>
                    <model>FILTER(table, filter)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Filters">
                    <description>Returns the values that are directly applied as filters to column.</description>
                    <syntax>FILTERS(column)</syntax>
                    <model>FILTERS(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Hasonefilter">
                    <description>Returns TRUE when the number of directly filtered values on column is one; otherwise returns FALSE.</description>
                    <syntax>HASONEFILTER(column)</syntax>
                    <model>HASONEFILTER(column)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>19</default_column_end>
                </function>
                <function name="Hasonevalue">
                    <description>Returns TRUE when the context for column has been filtered down to one distinct value only. Otherwise is FALSE.</description>
                    <syntax>HASONEVALUE(column)</syntax>
                    <model>HASONEVALUE(column)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Iscrossfiltered">
                    <description>Returns TRUE when column or another column in the same or related table is being filtered.</description>
                    <syntax>ISCROSSFILTERED(column)</syntax>
                    <model>ISCROSSFILTERED(column)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>22</default_column_end>
                </function>
                <function name="Isfiltered">
                    <description>Returns TRUE when column is being filtered directly. If there is no filter on the column or if the filtering happens because a different column in the same table or in a related table is being filtered then the function returns FALSE.</description>
                    <syntax>ISFILTERED(column)</syntax>
                    <model>ISFILTERED(column)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Keepfilters">
                    <description>Modifies how filters are applied while evaluating a CALCULATE or CALCULATETABLE function.</description>
                    <syntax>KEEPFILTERS(expression)</syntax>
                    <model>KEEPFILTERS(expression)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>22</default_column_end>
                </function>
                <function name="Related">
                    <description>Returns a related value from another table.</description>
                    <syntax>RELATED(column)</syntax>
                    <model>RELATED(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Relatedtable">
                    <description>Evaluates a table expression in a context modified by the given filters.</description>
                    <syntax>RELATEDTABLE(table)</syntax>
                    <model>RELATEDTABLE(table)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Substitutewithindex">
                    <description>Returns a table which represents a left semijoin of the two tables supplied as arguments.</description>
                    <syntax>SUBSTITUTEWITHINDEX(table, indexcolumn, indexColumnsTable, orderBy_expression, order, orderBy_expression, order...)</syntax>
                    <model>SUBSTITUTEWITHINDEX(table, indexcolumn, indexColumnsTable, orderBy_expression, order, orderBy_expression, order...)</model>
                    <default_column_start>20</default_column_start>
                    <default_column_end>25</default_column_end>
                </function>
                <function name="Userelationship">
                    <description>Specifies the relationship to be used in a specific calculation as the one that exists between column1 and column2.</description>
                    <syntax>USERELATIONSHIP(column1, column2)</syntax>
                    <model>USERELATIONSHIP(column1, column2)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>23</default_column_end>
                </function>
                <function name="Values">
                    <description>Returns a one-column table that contains the distinct values from the specified table or column. In other words, duplicate values are removed and only unique values are returned.</description>
                    <syntax>VALUES(tableOrcolumn)</syntax>
                    <model>VALUES(tableOrcolumn)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Information">
            <functions>
                <function name="Contains">
                    <description>Returns true if values for all referred columns exist, or are contained, in those columns; otherwise, the function returns false.</description>
                    <syntax>CONTAINS(table, column, value, column, value...)</syntax>
                    <model>CONTAINS(table, column, value, column, value...)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Customdata">
                    <description>Returns the content of the CustomData property in the connection string.</description>
                    <syntax>CUSTOMDATA()</syntax>
                    <model>CUSTOMDATA()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="Isblank">
                    <description>Checks whether a value is blank, and returns TRUE or FALSE.</description>
                    <syntax>ISBLANK(value)</syntax>
                    <model>ISBLANK(value)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Iserror">
                    <description>Checks whether a value is an error, and returns TRUE or FALSE.</description>
                    <syntax>ISERROR(value)</syntax>
                    <model>ISERROR(value)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Iseven">
                    <description>Returns TRUE if number is even, or FALSE if number is odd.</description>
                    <syntax>ISEVEN(value)</syntax>
                    <model>ISEVEN(value)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Islogical">
                    <description>Checks whether a value is a logical value, (TRUE or FALSE), and returns TRUE or FALSE.</description>
                    <syntax>ISLOGICAL(value)</syntax>
                    <model>ISLOGICAL(value)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Isnontext">
                    <description>Checks if a value is not text (blank cells are not text), and returns TRUE or FALSE.</description>
                    <syntax>ISNONTEXT(value)</syntax>
                    <model>ISNONTEXT(value)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Isnumber">
                    <description>Checks whether a value is a number, and returns TRUE or FALSE.</description>
                    <syntax>ISNUMBER(value)</syntax>
                    <model>ISNUMBER(value)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Isodd">
                    <description>Returns TRUE if number is odd, or FALSE if number is even.</description>
                    <syntax>ISODD(value)</syntax>
                    <model>ISODD(value)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Isonorafter">
                    <description>A boolean function that emulates the behavior of a 'Start At' clause and returns true for a row that meets all of the condition parameters.</description>
                    <syntax>ISONORAFTER(scalar_expression, scalar_expression>sort_order, scalar_expression, scalar_expression, sort_order, ...)</syntax>
                    <model>ISONORAFTER(scalar_expression, scalar_expression>sort_order, scalar_expression, scalar_expression, sort_order, ...)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>29</default_column_end>
                </function>
                <function name="Istext">
                    <description>Checks if a value is text, and returns TRUE or FALSE.</description>
                    <syntax>ISTEXT(value)</syntax>
                    <model>ISTEXT(value)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Lookupvalue">
                    <description>Returns the value in result_column for the row that meets all criteria specified by search_column and search_value.</description>
                    <syntax>LOOKUPVALUE(result_column, search_column, search_value, search_column, search_value...)</syntax>
                    <model>LOOKUPVALUE(result_column, search_column, search_value, search_column, search_value...)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>25</default_column_end>
                </function>
                <function name="Username">
                    <description>Returns the domain name and username from the credentials given to the system at connection time</description>
                    <syntax>USERNAME()</syntax>
                    <model>USERNAME()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Logical">
            <functions>
                <function name="And">
                    <description>Checks whether both arguments are TRUE, and returns TRUE if both arguments are TRUE. Otherwise returns false.</description>
                    <syntax>AND(logical1, logical2)</syntax>
                    <model>AND(logical1, logical2)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="False">
                    <description>Returns the logical value FALSE.</description>
                    <syntax>FALSE()</syntax>
                    <model>FALSE()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="If">
                    <description>Checks if a condition provided as the first argument is met. Returns one value if the condition is TRUE, and returns another value if the condition is FALSE.</description>
                    <syntax>IF(logical_test, value_if_true, value_if_false)</syntax>
                    <model>IF(logical_test, value_if_true, value_if_false)</model>
                    <default_column_start>3</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Iferror">
                    <description>Evaluates an expression and returns a specified value if the expression returns an error; otherwise returns the value of the expression itself.</description>
                    <syntax>IFERROR(value, value_if_error)</syntax>
                    <model>IFERROR(value, value_if_error)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Not">
                    <description>Changes FALSE to TRUE, or TRUE to FALSE.</description>
                    <syntax>NOT(logical)</syntax>
                    <model>NOT(logical)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Or">
                    <description>Checks whether one of the arguments is TRUE to return TRUE. The function returns FALSE if both arguments are FALSE.</description>
                    <syntax>OR(logical1, logical2)</syntax>
                    <model>OR(logical1, logical2)</model>
                    <default_column_start>3</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Switch">
                    <description>Evaluates an expression against a list of values and returns one of multiple possible result expressions.</description>
                    <syntax>SWITCH(expression, value, result, value, result..., else>)</syntax>
                    <model>SWITCH(expression, value, result, value, result..., else>)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="True">
                    <description>Returns the logical value TRUE.</description>
                    <syntax>TRUE()</syntax>
                    <model>TRUE()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Math and Trig">
            <functions>
                <function name="Abs">
                    <description>Returns the absolute value of a number.</description>
                    <syntax>ABS(number)</syntax>
                    <model>ABS(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Acos">
                    <description>Returns the arccosine, or inverse cosine, of a number. The arccosine is the angle whose cosine is number. The returned angle is given in radians in the range 0 (zero) to pi.</description>
                    <syntax>ACOS(number)</syntax>
                    <model>ACOS(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Acosh">
                    <description>Returns the inverse hyperbolic cosine of a number. The number must be greater than or equal to 1. The inverse hyperbolic cosine is the value whose hyperbolic cosine is number, so ACOSH(COSH(number)) equals number.</description>
                    <syntax>ACOSH(number)</syntax>
                    <model>ACOSH(number)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Asin">
                    <description>Returns the arcsine, or inverse sine, of a number. The arcsine is the angle whose sine is number. The returned angle is given in radians in the range -pi/2 to pi/2.</description>
                    <syntax>ASIN(number)</syntax>
                    <model>ASIN(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Asinh">
                    <description>Returns the inverse hyperbolic sine of a number. The inverse hyperbolic sine is the value whose hyperbolic sine is number, so ASINH(SINH(number)) equals number.</description>
                    <syntax>ASINH(number)</syntax>
                    <model>ASINH(number)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Atan">
                    <description>Returns the arctangent, or inverse tangent, of a number. The arctangent is the angle whose tangent is number. The returned angle is given in radians in the range -pi/2 to pi/2.</description>
                    <syntax>ATAN(number)</syntax>
                    <model>ATAN(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Atanh">
                    <description>Returns the inverse hyperbolic tangent of a number. Number must be between -1 and 1 (excluding -1 and 1). The inverse hyperbolic tangent is the value whose hyperbolic tangent is number, so ATANH(TANH(number)) equals number.</description>
                    <syntax>ATANH(number)</syntax>
                    <model>ATANH(number)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Ceiling">
                    <description>Rounds a number up, to the nearest integer or to the nearest multiple of significance.</description>
                    <syntax>CEILING(number, significance)</syntax>
                    <model>CEILING(number, significance)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Combin">
                    <description>Returns the number of combinations for a given number of items. Use COMBIN to determine the total possible number of groups for a given number of items.</description>
                    <syntax>COMBIN(number, number_chosen)</syntax>
                    <model>COMBIN(number, number_chosen)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Combina">
                    <description>Returns the number of combinations (with repetitions) for a given number of items.</description>
                    <syntax>COMBINA(number, number_chosen)</syntax>
                    <model>COMBINA(number, number_chosen)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Cos">
                    <description>Returns the cosine of the given angle.</description>
                    <syntax>COS(number)</syntax>
                    <model>COS(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Cosh">
                    <description>Returns the hyperbolic cosine of a number.</description>
                    <syntax>COSH(number)</syntax>
                    <model>COSH(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Currency">
                    <description>Evaluates the argument and returns the result as currency data type.</description>
                    <syntax>CURRENCY(value)</syntax>
                    <model>CURRENCY(value)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Degrees">
                    <description>Converts radians into degrees.</description>
                    <syntax>DEGREES(angle)</syntax>
                    <model>DEGREES(angle)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Divide">
                    <description>Performs division and returns alternate result or BLANK() on division by 0.</description>
                    <syntax>DIVIDE(numerator, denominator, alternateresult>)</syntax>
                    <model>DIVIDE(numerator, denominator, alternateresult>)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Even">
                    <description>Returns number rounded up to the nearest even integer.</description>
                    <syntax>EVEN(number)</syntax>
                    <model>EVEN(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Exp">
                    <description>Returns e raised to the power of a given number. The constant e equals 2.71828182845904, the base of the natural logarithm.</description>
                    <syntax>EXP(number)</syntax>
                    <model>EXP(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Fact">
                    <description>Returns the factorial of a number, equal to the series 1*2*3*...* , ending in the given number.</description>
                    <syntax>FACT(number)</syntax>
                    <model>FACT(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Floor">
                    <description>Rounds a number down, toward zero, to the nearest multiple of significance.</description>
                    <syntax>FLOOR(number, significance)</syntax>
                    <model>FLOOR(number, significance)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Gcd">
                    <description>Returns the greatest common divisor of two or more integers. The greatest common divisor is the largest integer that divides both number1 and number2 without a remainder.</description>
                    <syntax>GCD(number1, number2, ...)</syntax>
                    <model>GCD(number1, number2, ...)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Int">
                    <description>Rounds a number down to the nearest integer.</description>
                    <syntax>INT(number)</syntax>
                    <model>INT(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Iso.Ceiling">
                    <description>Rounds a number up, to the nearest integer or to the nearest multiple of significance.</description>
                    <syntax>ISO.CEILING(number, significance>)</syntax>
                    <model>ISO.CEILING(number, significance>)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Lcm">
                    <description>Returns the least common multiple of integers. The least common multiple is the smallest positive integer that is a multiple of all integer arguments number1, number2, and so on.</description>
                    <syntax>LCM(number1, number2, ...)</syntax>
                    <model>LCM(number1, number2, ...)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Ln">
                    <description>Returns the natural logarithm of a number. Natural logarithms are based on the constant e (2.71828182845904).</description>
                    <syntax>LN(number)</syntax>
                    <model>LN(number)</model>
                    <default_column_start>3</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Log">
                    <description>Returns the logarithm of a number to the base you specify.</description>
                    <syntax>LOG(number, base)</syntax>
                    <model>LOG(number, base)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Log10">
                    <description>Returns the base-10 logarithm of a number.</description>
                    <syntax>LOG10(number)</syntax>
                    <model>LOG10(number)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Mod">
                    <description>Returns the remainder after a number is divided by a divisor. The result always has the same sign as the divisor.</description>
                    <syntax>MOD(number, divisor)</syntax>
                    <model>MOD(number, divisor)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Mround">
                    <description>Returns a number rounded to the desired multiple.</description>
                    <syntax>MROUND(number, multiple)</syntax>
                    <model>MROUND(number, multiple)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Odd">
                    <description>Returns number rounded up to the nearest odd integer.</description>
                    <syntax>ODD(number)</syntax>
                    <model>ODD(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Pi">
                    <description>Returns the value of Pi, 3.14159265358979, accurate to 15 digits.</description>
                    <syntax>PI()</syntax>
                    <model>PI()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="Power">
                    <description>Returns the result of a number raised to a power.</description>
                    <syntax>POWER(number, power)</syntax>
                    <model>POWER(number, power)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Product">
                    <description>Returns the product of the numbers in a column.</description>
                    <syntax>PRODUCT(column)</syntax>
                    <model>PRODUCT(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Productx">
                    <description>Returns the product of an expression evaluated for each row in a table.</description>
                    <syntax>PRODUCTX(table, expression)</syntax>
                    <model>PRODUCTX(table, expression)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Quotient">
                    <description>Performs division and returns only the integer portion of the division result. Use this function when you want to discard the remainder of division.</description>
                    <syntax>QUOTIENT(numerator, denominator)</syntax>
                    <model>QUOTIENT(numerator, denominator)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Radians">
                    <description>Converts degrees to radians.</description>
                    <syntax>RADIANS(angle)</syntax>
                    <model>RADIANS(angle)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Rand">
                    <description>Returns a random number greater than or equal to 0 and less than 1, evenly distributed. The number that is returned changes each time the cell containing this function is recalculated.</description>
                    <syntax>RAND()</syntax>
                    <model>RAND()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="Randbetween">
                    <description>Returns a random number in the range between two numbers you specify.</description>
                    <syntax>RANDBETWEEN(bottom, top)</syntax>
                    <model>RANDBETWEEN(bottom, top)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Round">
                    <description>Rounds a number to the specified number of digits.</description>
                    <syntax>ROUND(number, num_digits)</syntax>
                    <model>ROUND(number, num_digits)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Rounddown">
                    <description>Rounds a number down, toward zero.</description>
                    <syntax>ROUNDDOWN(number, num_digits)</syntax>
                    <model>ROUNDDOWN(number, num_digits)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Roundup">
                    <description>Rounds a number up, away from 0 (zero).</description>
                    <syntax>ROUNDUP(number, num_digits)</syntax>
                    <model>ROUNDUP(number, num_digits)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Sign">
                    <description>Determines the sign of a number, the result of a calculation, or a value in a column. The function returns 1 if the number is positive, 0 (zero) if the number is zero, or -1 if the number is negative.</description>
                    <syntax>SIGN(number)</syntax>
                    <model>SIGN(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Sqrt">
                    <description>Returns the square root of a number.</description>
                    <syntax>SQRT(number)</syntax>
                    <model>SQRT(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Sum">
                    <description>Adds all the numbers in a column.</description>
                    <syntax>SUM(column)</syntax>
                    <model>SUM(column)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Sumx">
                    <description>Returns the sum of an expression evaluated for each row in a table.</description>
                    <syntax>SUMX(table, expression)</syntax>
                    <model>SUMX(table, expression)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Trunc">
                    <description>Truncates a number to an integer by removing the decimal, or fractional, part of the number.</description>
                    <syntax>TRUNC(number, num_digits)</syntax>
                    <model>TRUNC(number, num_digits)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Parent/Child">
            <functions>
                <function name="Path">
                    <description>Returns a delimited text string with the identifiers of all the parents of the current identifier, starting with the oldest and continuing until current.</description>
                    <syntax>PATH(ID_column, parent_column)</syntax>
                    <model>PATH(ID_column, parent_column)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Pathcontains">
                    <description>Returns TRUE if the specified item exists within the specified path.</description>
                    <syntax>PATHCONTAINS(path, item)</syntax>
                    <model>PATHCONTAINS(path, item)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Pathitem">
                    <description>Returns the item at the specified position from a string resulting from evaluation of a PATH function. Positions are counted from left to right.</description>
                    <syntax>PATHITEM(path, position, type>)</syntax>
                    <model>PATHITEM(path, position, type>)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Pathitemreverse">
                    <description>Returns the item at the specified position from a string resulting from evaluation of a PATH function. Positions are counted backwards from right to left.</description>
                    <syntax>PATHITEMREVERSE(path, position, type>)</syntax>
                    <model>PATHITEMREVERSE(path, position, type>)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Pathlength">
                    <description>Returns the number of parents to the specified item in a given PATH result, including self.</description>
                    <syntax>PATHLENGTH(path)</syntax>
                    <model>PATHLENGTH(path)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Statistical">
            <functions>
                <function name="Addcolumns">
                    <description>Adds calculated columns to the given table or table expression.</description>
                    <syntax>ADDCOLUMNS(table, name, expression, name, expression...)</syntax>
                    <model>ADDCOLUMNS(table, name, expression, name, expression...)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Average">
                    <description>Returns the average (arithmetic mean) of all the numbers in a column.</description>
                    <syntax>AVERAGE(column)</syntax>
                    <model>AVERAGE(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Averagea">
                    <description>Returns the average (arithmetic mean) of the values in a column. Handles text and non-numeric values.</description>
                    <syntax>AVERAGEA(column)</syntax>
                    <model>AVERAGEA(column)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Averagex">
                    <description>Calculates the average (arithmetic mean) of a set of expressions evaluated over a table.</description>
                    <syntax>AVERAGEX(table, expression)</syntax>
                    <model>AVERAGEX(table, expression)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Beta.dist">
                    <description>Returns the beta distribution. The beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.</description>
                    <syntax>BETA.DIST(x, alpha, beta, cumulative, A, B)</syntax>
                    <model>BETA.DIST(x, alpha, beta, cumulative, A, B)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Beta.inv">
                    <description>Returns the inverse of the beta cumulative probability density function (BETA.DIST).</description>
                    <syntax>BETA.INV(probability, alpha, beta, A, B)</syntax>
                    <model>BETA.INV(probability, alpha, beta, A, B)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Chisq.inv">
                    <description>Returns the inverse of the left-tailed probability of the chi-squared distribution.</description>
                    <syntax>CHISQ.INV(probability, deg_freedom)</syntax>
                    <model>CHISQ.INV(probability, deg_freedom)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Chisq.inv.rt">
                    <description>Returns the inverse of the right-tailed probability of the chi-squared distribution.</description>
                    <syntax>CHISQ.INV.RT(probability, deg_freedom)</syntax>
                    <model>CHISQ.INV.RT(probability, deg_freedom)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>24</default_column_end>
                </function>
                <function name="Confidence.norm">
                    <description>The confidence interval is a range of values. Your sample mean, x, is at the center of this range and the range is x +/- CONFIDENCE.NORM.</description>
                    <syntax>CONFIDENCE.NORM(alpha, standard_dev, size)</syntax>
                    <model>CONFIDENCE.NORM(alpha, standard_dev, size)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Confidence.t">
                    <description>Returns the confidence interval for a population mean, using a Student's t distribution.</description>
                    <syntax>CONFIDENCE.T(alpha, standard_dev, size)</syntax>
                    <model>CONFIDENCE.T(alpha, standard_dev, size)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Count">
                    <description>The COUNT function counts the number of cells in a column that contain numbers.</description>
                    <syntax>COUNT(column)</syntax>
                    <model>COUNT(column)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Counta">
                    <description>The COUNTA function counts the number of cells in a column that are not empty. It counts not just rows that contain numeric values, but also rows that contain nonblank values, including text, dates, and logical values.</description>
                    <syntax>COUNTA(column)</syntax>
                    <model>COUNTA(column)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Countax">
                    <description>The COUNTAX function counts nonblank results when evaluating the result of an expression over a table.</description>
                    <syntax>COUNTAX(table, expression)</syntax>
                    <model>COUNTAX(table, expression)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Countblank">
                    <description>Counts the number of blank cells in a column.</description>
                    <syntax>COUNTBLANK(column)</syntax>
                    <model>COUNTBLANK(column)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Countrows">
                    <description>The COUNTROWS function counts the number of rows in the specified table, or in a table defined by an expression.</description>
                    <syntax>COUNTROWS(table)</syntax>
                    <model>COUNTROWS(table)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Countx">
                    <description>Counts the number of rows that contain a number or an expression that evaluates to a number, when evaluating an expression over a table.</description>
                    <syntax>COUNTX(table, expression)</syntax>
                    <model>COUNTX(table, expression)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Crossjoin">
                    <description>Returns a table that contains the Cartesian product of all rows from all tables in the arguments. The columns in the new table are all the columns in all the argument tables.</description>
                    <syntax>CROSSJOIN(table, table, table...)</syntax>
                    <model>CROSSJOIN(table, table, table...)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Distinctcount">
                    <description>The DISTINCTCOUNT function counts the number of different cells in a column of numbers.</description>
                    <syntax>DISTINCTCOUNT(column)</syntax>
                    <model>DISTINCTCOUNT(column)</model>
                    <default_column_start>14</default_column_start>
                    <default_column_end>20</default_column_end>
                </function>
                <function name="Expon.dist">
                    <description>Returns the exponential distribution. Use EXPON.DIST to model the time between events, such as how long an automated bank teller takes to deliver cash. For example, you can use EXPON.DIST to determine the probability that the process takes at most 1 minute.</description>
                    <syntax>EXPON.DIST(x, lambda, cumulative)</syntax>
                    <model>EXPON.DIST(x, lambda, cumulative)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Generate">
                    <description>Returns a table with the Cartesian product between each row in table1 and the table that results from evaluating table2 in the context of the current row from table1.</description>
                    <syntax>GENERATE(table1, table2)</syntax>
                    <model>GENERATE(table1, table2)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Generateall">
                    <description>Returns a table with the Cartesian product between each row in table1 and the table that results from evaluating table2 in the context of the current row from table1.</description>
                    <syntax>GENERATEALL(table1, table2)</syntax>
                    <model>GENERATEALL(table1, table2)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Geomean">
                    <description>Returns the geometric mean of the numbers in a column.</description>
                    <syntax>GEOMEAN(column)</syntax>
                    <model>GEOMEAN(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Geomeanx">
                    <description>Returns the geometric mean of an expression evaluated for each row in a table.</description>
                    <syntax>GEOMEANX(table, expression)</syntax>
                    <model>GEOMEANX(table, expression)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Max">
                    <description>Returns the largest numeric value in a column.</description>
                    <syntax>MAX(column)</syntax>
                    <model>MAX(column)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Maxa">
                    <description>Returns the largest value in a column. Logical values and blanks are counted.</description>
                    <syntax>MAXA(column)</syntax>
                    <model>MAXA(column)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Maxx">
                    <description>Evaluates an expression for each row of a table and returns the largest numeric value.</description>
                    <syntax>MAXX(table, expression)</syntax>
                    <model>MAXX(table, expression)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Median">
                    <description>Returns the median of numbers in a column.</description>
                    <syntax>MEDIAN(column)</syntax>
                    <model>MEDIAN(column)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Medianx">
                    <description>Returns the median number of an expression evaluated for each row in a table.</description>
                    <syntax>MEDIANX(table, expression)</syntax>
                    <model>MEDIANX(table, expression)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Min">
                    <description>Returns the smallest numeric value in a column. Ignores logical values and text.</description>
                    <syntax>MIN(column)</syntax>
                    <model>MIN(column)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Mina">
                    <description>Returns the smallest value in a column, including any logical values and numbers represented as text.</description>
                    <syntax>MINA(column)</syntax>
                    <model>MINA(column)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Minx">
                    <description>Returns the smallest numeric value that results from evaluating an expression for each row of a table.</description>
                    <syntax>MINX(table, expression)</syntax>
                    <model>MINX(table, expression)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Percentile.exc">
                    <description>Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.</description>
                    <syntax>PERCENTILE.EXC(column, k)</syntax>
                    <model>PERCENTILE.EXC(column, k)</model>
                    <default_column_start>15</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Percentile.inc">
                    <description>Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.</description>
                    <syntax>PERCENTILE.INC(column, k)</syntax>
                    <model>PERCENTILE.INC(column, k)</model>
                    <default_column_start>15</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Percentilex.exc">
                    <description>Returns the percentile number of an expression evaluated for each row in a table.</description>
                    <syntax>PERCENTILEX.EXC(table, expression, k)</syntax>
                    <model>PERCENTILEX.EXC(table, expression, k)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Percentilex.inc">
                    <description>Returns the percentile number of an expression evaluated for each row in a table.</description>
                    <syntax>PERCENTILEX.INC(table, expression, k)</syntax>
                    <model>PERCENTILEX.INC(table, expression, k)</model>
                    <default_column_start>16</default_column_start>
                    <default_column_end>21</default_column_end>
                </function>
                <function name="Permut">
                    <description>Returns the number of permutations for a given number of objects that can be selected from number objects.</description>
                    <syntax>PERMUT(number, number_chosen)</syntax>
                    <model>PERMUT(number, number_chosen)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Poisson.dist">
                    <description>Returns the Poisson distribution. A common application of the Poisson distribution is predicting the number of events over a specific time, such as the number of cars arriving at a toll plaza in 1 minute.</description>
                    <syntax>POISSON.DIST(x, mean, cumulative)</syntax>
                    <model>POISSON.DIST(x, mean, cumulative)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Rank.eq">
                    <description>Returns the ranking of a number in a list of numbers.</description>
                    <syntax>RANK.EQ(value, columnName, order>)</syntax>
                    <model>RANK.EQ(value, columnName, order>)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Rankx">
                    <description>Returns the ranking of a number in a list of numbers for each row in the table argument.</description>
                    <syntax>RANKX(table, expression, value, order, ties)</syntax>
                    <model>RANKX(table, expression, value, order, ties)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Row">
                    <description>Returns a table with a single row containing values that result from the expressions given to each column.</description>
                    <syntax>ROW(name, expression, name, expression...)</syntax>
                    <model>ROW(name, expression, name, expression...)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>8</default_column_end>
                </function>
                <function name="Sample">
                    <description>Returns a sample of N rows from the specified table.</description>
                    <syntax>SAMPLE(n_value, table, orderBy_expression, order, orderBy_expression, order...)</syntax>
                    <model>SAMPLE(n_value, table, orderBy_expression, order, orderBy_expression, order...)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Sin">
                    <description>Returns the sine of the given angle.</description>
                    <syntax>SIN(number)</syntax>
                    <model>SIN(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Sinh">
                    <description>Returns the hyperbolic sine of a number.</description>
                    <syntax>SINH(number)</syntax>
                    <model>SINH(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Stdev.p">
                    <description>Returns the standard deviation of the entire population.</description>
                    <syntax>STDEV.P(column)</syntax>
                    <model>STDEV.P(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Stdev.s">
                    <description>Returns the standard deviation of a sample population.</description>
                    <syntax>STDEV.S(column)</syntax>
                    <model>STDEV.S(column)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Stdevx.p">
                    <description>Returns the standard deviation of the entire population.</description>
                    <syntax>STDEVX.P(table, expression)</syntax>
                    <model>STDEVX.P(table, expression)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Stdevx.s">
                    <description>Returns the standard deviation of a sample population.</description>
                    <syntax>STDEVX.S(table, expression)</syntax>
                    <model>STDEVX.S(table, expression)</model>
                    <default_column_start>9</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Sqrtpi">
                    <description>Returns the square root of (number * pi).</description>
                    <syntax>SQRTPI(number)</syntax>
                    <model>SQRTPI(number)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Summarize">
                    <description>Returns a summary table for the requested totals over a set of groups.</description>
                    <syntax>SUMMARIZE(table, groupBy_columnName, groupBy_columnName..., name, expression...)</syntax>
                    <model>SUMMARIZE(table, groupBy_columnName, groupBy_columnName..., name, expression...)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Tan">
                    <description>Returns the tangent of the given angle.</description>
                    <syntax>TAN(number)</syntax>
                    <model>TAN(number)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Tanh">
                    <description>Returns the hyperbolic tangent of a number.</description>
                    <syntax>TANH(number)</syntax>
                    <model>TANH(number)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Topn">
                    <description>Returns the hyperbolic tangent of a number.</description>
                    <syntax>TOPN(n_value, table, orderBy_expression, order, orderBy_expression, order...)</syntax>
                    <model>TOPN(n_value, table, orderBy_expression, order, orderBy_expression, order...)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Var.p">
                    <description>Returns the variance of the entire population.</description>
                    <syntax>VAR.P(column)</syntax>
                    <model>VAR.P(column)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Var.s">
                    <description>Returns the variance of a sample population.</description>
                    <syntax>VAR.S(column)</syntax>
                    <model>VAR.S(column)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Varx.p">
                    <description>Returns the variance of the entire population.</description>
                    <syntax>VARX.P(table, expression)</syntax>
                    <model>VARX.P(table, expression)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Varx.s">
                    <description>Returns the variance of a sample population.</description>
                    <syntax>VARX.S(table, expression)</syntax>
                    <model>VARX.S(table, expression)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Xirr">
                    <description>Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic.</description>
                    <syntax>XIRR(table, values, dates, guess)</syntax>
                    <model>XIRR(table, values, dates, guess)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Xnpv">
                    <description>Returns the present value for a schedule of cash flows that is not necessarily periodic.</description>
                    <syntax>XNPV(table, values, dates, rate)</syntax>
                    <model>XNPV(table, values, dates, rate)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Text">
            <functions>
                <function name="Blank">
                    <description>Returns a blank.</description>
                    <syntax>BLANK()</syntax>
                    <model>BLANK()</model>
                    <default_column_start>0</default_column_start>
                    <default_column_end>0</default_column_end>
                </function>
                <function name="Code">
                    <description>Returns a numeric code for the first character in a text string. The returned code corresponds to the character set used by your computer.</description>
                    <syntax>CODE(text)</syntax>
                    <model>CODE(text)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Concatenate">
                    <description>Joins two text strings into one text string.</description>
                    <syntax>CONCATENATE(text1, text2)</syntax>
                    <model>CONCATENATE(text1, text2)</model>
                    <default_column_start>12</default_column_start>
                    <default_column_end>17</default_column_end>
                </function>
                <function name="Concatenatex">
                    <description>Concatenates the result of an expression evaluated for each row in a table.</description>
                    <syntax>CONCATENATEX(table, expression, delimiter)</syntax>
                    <model>CONCATENATEX(table, expression, delimiter)</model>
                    <default_column_start>13</default_column_start>
                    <default_column_end>18</default_column_end>
                </function>
                <function name="Exact">
                    <description>Compares two text strings and returns TRUE if they are exactly the same, FALSE otherwise. EXACT is case-sensitive but ignores formatting differences.</description>
                    <syntax>EXACT(text1, text2)</syntax>
                    <model>EXACT(text1, text2)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>11</default_column_end>
                </function>
                <function name="Find">
                    <description>Returns the starting position of one text string within another text string. FIND is case-sensitive.</description>
                    <syntax>FIND(find_text, within_text, start_num, NotFoundValue)</syntax>
                    <model>FIND(find_text, within_text, start_num, NotFoundValue)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>14</default_column_end>
                </function>
                <function name="Fixed">
                    <description>Rounds a number to the specified number of decimals and returns the result as text. You can specify that the result be returned with or without commas.</description>
                    <syntax>FIXED(number, decimals, no_commas)</syntax>
                    <model>FIXED(number, decimals, no_commas)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Format">
                    <description>Converts a value to text according to the specified format.</description>
                    <syntax>FORMAT(value, format_string)</syntax>
                    <model>FORMAT(value, format_string)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>12</default_column_end>
                </function>
                <function name="Left">
                    <description>Returns the specified number of characters from the start of a text string.</description>
                    <syntax>LEFT(text, num_chars)</syntax>
                    <model>LEFT(text, num_chars)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Len">
                    <description>Returns the number of characters in a text string.</description>
                    <syntax>LEN(text)</syntax>
                    <model>LEN(text)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>8</default_column_end>
                </function>
                <function name="Lower">
                    <description>Converts all letters in a text string to lowercase.</description>
                    <syntax>LOWER(text)</syntax>
                    <model>LOWER(text)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Mid">
                    <description>Returns a string of characters from the middle of a text string, given a starting position and length.</description>
                    <syntax>MID(text, start_num, num_chars)</syntax>
                    <model>MID(text, start_num, num_chars)</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>8</default_column_end>
                </function>
                <function name="Replace">
                    <description>REPLACE replaces part of a text string, based on the number of characters you specify, with a different text string.</description>
                    <syntax>REPLACE(old_text, start_num, num_chars, new_text)</syntax>
                    <model>REPLACE(old_text, start_num, num_chars, new_text)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Rept">
                    <description>Repeats text a given number of times. Use REPT to fill a cell with a number of instances of a text string.</description>
                    <syntax>REPT(text, num_times)</syntax>
                    <model>REPT(text, num_times)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Right">
                    <description>RIGHT returns the last character or characters in a text string, based on the number of characters you specify.</description>
                    <syntax>RIGHT(text, num_chars)</syntax>
                    <model>RIGHT(text, num_chars)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Search">
                    <description>Returns the number of the character at which a specific character or text string is first found, reading left to right. Search is case-insensitive and accent sensitive.</description>
                    <syntax>SEARCH(find_text, within_text, start_num, NotFoundValue)</syntax>
                    <model>SEARCH(find_text, within_text, start_num, NotFoundValue)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>16</default_column_end>
                </function>
                <function name="Substitute">
                    <description>Replaces existing text with new text in a text string.</description>
                    <syntax>SUBSTITUTE(text, old_text, new_text, instance_num)</syntax>
                    <model>SUBSTITUTE(text, old_text, new_text, instance_num)</model>
                    <default_column_start>11</default_column_start>
                    <default_column_end>15</default_column_end>
                </function>
                <function name="Trim">
                    <description>Removes all spaces from text except for single spaces between words.</description>
                    <syntax>TRIM(text)</syntax>
                    <model>TRIM(text)</model>
                    <default_column_start>5</default_column_start>
                    <default_column_end>9</default_column_end>
                </function>
                <function name="Upper">
                    <description>Converts all letters in a text string to uppercase.</description>
                    <syntax>UPPER(text)</syntax>
                    <model>UPPER(text)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
                <function name="Value">
                    <description>Converts a text string that represents a number to a number.</description>
                    <syntax>VALUE(text)</syntax>
                    <model>VALUE(text)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>10</default_column_end>
                </function>
            </functions>
        </functional_group>
        <functional_group name="Other">
            <functions>
                <function name="Except">
                    <description>Returns the rows of one table which do not appear in another table.</description>
                    <syntax>EXCEPT(table_expression1, table_expression2)</syntax>
                    <model>EXCEPT(table_expression1, table_expression2)</model>
                    <default_column_start>7</default_column_start>
                    <default_column_end>24</default_column_end>
                </function>
                <function name="Groupby">
                    <description>The GROUPBY function is similar to the SUMMARIZE function. However, GROUPBY does not do an implicit CALCULATE for any extension columns that it adds.</description>
                    <syntax>GROUPBY(table, groupBy_columnName1, name, expression...)</syntax>
                    <model>GROUPBY(table, groupBy_columnName1, name, expression...)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>13</default_column_end>
                </function>
                <function name="Intersect">
                    <description>Returns the row intersection of two tables, retaining duplicates.</description>
                    <syntax>INTERSECT(table_expression1, table_expression2)</syntax>
                    <model>INTERSECT(table_expression1, table_expression2)</model>
                    <default_column_start>10</default_column_start>
                    <default_column_end>27</default_column_end>
                </function>
                <function name="Isempty">
                    <description>Checks if a table is empty.</description>
                    <syntax>ISEMPTY(table_expression)</syntax>
                    <model>ISEMPTY(table_expression)</model>
                    <default_column_start>8</default_column_start>
                    <default_column_end>24</default_column_end>
                </function>
                <function name="Naturalinnerjoin">
                    <description>Performs an inner join of a table with another table. The tables are joined on common columns (by name) in the two tables. If the two tables have no common column names, an error is returned.</description>
                    <syntax>NATURALINNERJOIN(leftJoinTable, rightJoinTable)</syntax>
                    <model>NATURALINNERJOIN(leftJoinTable, rightJoinTable)</model>
                    <default_column_start>17</default_column_start>
                    <default_column_end>30</default_column_end>
                </function>
                <function name="Naturalleftouterjoin">
                    <description>Performs an inner join of a table with another table. The tables are joined on common columns (by name) in the two tables. If the two tables have no common column names, an error is returned.</description>
                    <syntax>NATURALLEFTOUTERJOIN(leftJoinTable, rightJoinTable)</syntax>
                    <model>NATURALLEFTOUTERJOIN(leftJoinTable, rightJoinTable)</model>
                    <default_column_start>21</default_column_start>
                    <default_column_end>34</default_column_end>
                </function>
                <function name="Summarizecolumns">
                    <description>Returns a summary table over a set of groups.</description>
                    <syntax>SUMMARIZECOLUMNS(groupBy_columnName, groupBy_columnName ..., filterTable..., name, expression...)</syntax>
                    <model>SUMMARIZECOLUMNS(groupBy_columnName, groupBy_columnName ..., filterTable..., name, expression...)</model>
                    <default_column_start>17</default_column_start>
                    <default_column_end>35</default_column_end>
                </function>
                <function name="Union">
                    <description>Creates a union (join) table from a pair of tables.</description>
                    <syntax>UNION(table_expression1, table_expression2, table_expression...)</syntax>
                    <model>UNION(table_expression1, table_expression2, table_expression...)</model>
                    <default_column_start>6</default_column_start>
                    <default_column_end>23</default_column_end>
                </function>
                <function name="Var">
                    <description>Stores the result of an expression as a named variable, which can then be passed as an argument to other measure expressions.</description>
                    <syntax>VAR name = expression</syntax>
                    <model>VAR name = expression</model>
                    <default_column_start>4</default_column_start>
                    <default_column_end>8</default_column_end>
                </function>
            </functions>
        </functional_group>
    </functional_groups>
</database_function_set>
