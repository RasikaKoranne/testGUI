<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<database_function_set name="Default ANSI" xmlns="http://www.wherescape.com/xml/red" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.wherescape.com/xml/red ./Database%20Function%20Set.xsd">

  <database>ANSI</database>

  <meta_version>1</meta_version>

  <functional_groups>
    <functional_group name="Number">
      <functions>
        <function name="Absolute Value (ABS)">
          <description>Returns the absolute value of the number. Essentially converts all values to positive.\r\nExample: ABS(load_sales.tax)</description>
          <syntax>ABS(numeric_column)</syntax>
          <model>ABS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Ceiling (CEILING)">
          <description>Returns the smallest integer or whole number that is greater than or equal to the value supplied\r\nExample: CEILING(load_sales.tax)</description>
          <syntax>CEILING(numeric_column)</syntax>
          <model>CEILING(numeric_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>22</default_column_end>
        </function>
        <function name="Cosine (COS)">
          <description>Returns the trigonometric cosine for an angle expressed in radians.\r\nExample: COS(load_sales.value)</description>
          <syntax>COS(numeric_column)</syntax>
          <model>COS(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Exponent (EXP)">
          <description>Returns e raised to the specified power. e = 2.718281828...\r\nExample: EXP(3)</description>
          <syntax>EXP(numeric_column)</syntax>
          <model>EXP(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Floor (FLOOR)">
          <description>Returns the smallest integer or whole number that is less than or equal to the value supplied.\r\nExample: FLOOR(load_sales.tax)</description>
          <syntax>FLOOR(numeric_column)</syntax>
          <model>FLOOR(numeric_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Natural Logarithm (LOG)">
          <description>Returns the natural, or base 'e' logarithm of the supplied value.\r\nExample: LOG(10.34)</description>
          <syntax>LOG(numeric_column)</syntax>
          <model>LOG(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Base 10 Logarithm (LOG10)">
          <description>Returns the base10 logarithm of the supplied value.\r\nExample: LOG10(100)</description>
          <syntax>LOG10(number)</syntax>
          <model>LOG10(number)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="Raise to Exponent (POWER)">
          <description>Returns the value raise to the exponent.\r\nExample: POWER(3,3) = 27</description>
          <syntax>POWER(numeric_column,exponent)</syntax>
          <model>POWER(numeric_column,exponent)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Round (ROUND)">
          <description>Returns the value rounded to a given number of digits of precision.\r\nExample: ROUND(12.399,1) = 12.4</description>
          <syntax>ROUND(numeric_column,precision)</syntax>
          <model>ROUND(numeric_column,precision)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Sine (SIN)">
          <description>Returns the trigonometric sine for an angle expressed in radians.\r\nExample: SIN(load_sales.value)</description>
          <syntax>SIN(numeric_column)</syntax>
          <model>SIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Square Root (SQRT)">
          <description>Returns the square root of the value supplied.\r\nExample: SQRT(load_sales.value)</description>
          <syntax>SQRT(numeric_column)</syntax>
          <model>SQRT(numeric_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Tangent (TAN)">
          <description>Returns the trigonometric tangent for an angle expressed in radians.\r\nExample: TAN(load_sales.value)</description>
          <syntax>TAN(numeric_column)</syntax>
          <model>TAN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Truncate (ROUND)">
          <description>Returns the value truncated to a given number of digits of precision. Any non-zero value in function will cause a truncation.\r\nExample: ROUND(12.399,1,1) = 12.3</description>
          <syntax>ROUND(numeric_column,precision, function)</syntax>
          <model>ROUND(numeric_column,precision, function)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="String">
      <functions>
        <function name="ASCII value (ASCII)">
          <description>Returns the ascii value of the first character in the string.\r\nExample: ASCII(load_customer.name)</description>
          <syntax>ASCII(string_column)</syntax>
          <model>ASCII(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Character (CHAR)">
          <description>Returns a character whose ASCII value is the passed integer.\r\nExample: CHAR(65)</description>
          <syntax>CHAR(integer)</syntax>
          <model>CHAR(integer)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="Length (LENGTH)">
          <description>Returns an integer value containing the number of characters in the string column.\r\nExample: LENGTH(load_customer.name)</description>
          <syntax>LENGTH(string_column)</syntax>
          <model>LENGTH(string_column)</model>
          <default_column_start>7</default_column_start>
          <default_column_end>20</default_column_end>
        </function>
        <function name="Lowercase (LCASE)">
          <description>Returns a string where every character in the passed column data is converted to lower case.\r\nExample: LCASE(load_customer.name)</description>
          <syntax>LCASE(string_column)</syntax>
          <model>LCASE(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Left (LEFT)">
          <description>Returns a string which is the leftmost characters of the passed column.\r\nExample: LEFT(load_customer.name,60)</description>
          <syntax>LEFT(string_column,size)</syntax>
          <model>LEFT(string_column,size)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Left Trim (LTRIM)">
          <description>Returns a string which is the passed column data where all of the leading white spaces are removed.\r\nExample: LTRIM(load_customer.name)</description>
          <syntax>LTRIM(string_column)</syntax>
          <model>LTRIM(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Replace (REPLACE)">
          <description>Returns a string where all occurrences of the 'if' string are replaced with the 'then string.\r\nIf no 'then' string is supplied all occurrences of the 'if' string are deleted.\r\nExample: REPLACE(load_customer.name,'SMYTH','SMITH')</description>
          <syntax>REPLACE(string_column,if,then)</syntax>
          <model>REPLACE(string_column,if,then)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Reverse (REVERSE)">
          <description>Returns a string with the characters in reverse order. (e.g. SMITH becomes HTIMS).\r\nExample: REVERSE(load_customer.name)</description>
          <syntax>REVERSE(string_column)</syntax>
          <model>REVERSE(string_column)</model>
          <default_column_start>8</default_column_start>
          <default_column_end>21</default_column_end>
        </function>
        <function name="Right (RIGHT)">
          <description>Returns a string which is the rightmost characters of the passed column.\r\nExample: RIGHT(load_customer.name,60)</description>
          <syntax>RIGHT(string_column,size)</syntax>
          <model>RIGHT(string_column,size)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Right Trim (RTRIM)">
          <description>Returns a string which is the passed column data where all of the trailing white spaces are removed.\r\nExample: RTRIM(load_customer.name)</description>
          <syntax>RTRIM(string_column)</syntax>
          <model>RTRIM(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
        <function name="Space (SPACE)">
          <description>This function returns a string of spaces of the length specified.\r\nExample: SPACE(10)</description>
          <syntax>SPACE(size)</syntax>
          <model>SPACE(size)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>10</default_column_end>
        </function>
        <function name="Sub String (SUBSTRING)">
          <description>Returns a sub string of the passed column data. The start position and length of the substring are supplied.\r\nExample: SUBSTRING(load_customer.name,CHARINDEX(' ',load_customer.name)+1,10)</description>
          <syntax>SUBSTRING(string_column, start ,count )</syntax>
          <model>SUBSTRING(string_column, start ,count )</model>
          <default_column_start>10</default_column_start>
          <default_column_end>23</default_column_end>
        </function>
        <function name="Uppercase (UCASE)">
          <description>Returns a string where every character in the passed column data is converted to upper case.\r\nExample: UCASE(load_customer.name)</description>
          <syntax>UCASE(string_column)</syntax>
          <model>UCASE(string_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>19</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Date">
      <functions>
        <function name="Add Date parts (DATEADD)">
          <description>Returns a date which has a number of date parts added to the supplied date.\r\nDate parts are Year,quarter,Month,dayofyear,Day,Week,Hour,minute,second,millisecond\r\nExample: DATEADD(Day,23,load_customer.start_date)</description>
          <syntax>DATEADD(date_part, count, date_column)</syntax>
          <model>DATEADD(date_part, count, date_column)</model>
          <default_column_start>26</default_column_start>
          <default_column_end>37</default_column_end>
        </function>
        <function name="Day (DAY)">
          <description>Returns the numeric day part of a date column.\r\nExample: DAY(load_customer.start_date)</description>
          <syntax>DAY(date_column)</syntax>
          <model>DAY(date_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>15</default_column_end>
        </function>
        <function name="Month (MONTH)">
          <description>Returns the numeric month part of a date column.\r\nExample: MONTH(load_customer.start_date)</description>
          <syntax>MONTH(date_column)</syntax>
          <model>MONTH(date_column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>17</default_column_end>
        </function>
        <function name="System Date (GETDATE)">
          <description>Returns the current system date time.\r\nExample: GETDATE()</description>
          <syntax>GETDATE()</syntax>
          <model>GETDATE()</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="Year (YEAR)">
          <description>Returns the numeric year part of a date column.\r\nExample: YEAR(load_customer.start_date)</description>
          <syntax>YEAR(date_column)</syntax>
          <model>YEAR(date_column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>16</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Aggregate">
      <functions>
        <function name="Average (AVG)">
          <description>Returns the average value for the supplied column.\r\nExample: AVG(load_inventory.temp1)</description>
          <syntax>AVG(numeric_column)</syntax>
          <model>AVG(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Count (COUNT)">
          <description>Returns the count of the number of non-null values for the column.\r\nExample: COUNT(load_inventory.temp1)</description>
          <syntax>COUNT(column)</syntax>
          <model>COUNT(column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="First (FIRST)">
          <description>Returns the first value of the selected column.\r\nExample: FIRST(load_inventory.temp1)</description>
          <syntax>FIRST(column)</syntax>
          <model>FIRST(column)</model>
          <default_column_start>6</default_column_start>
          <default_column_end>12</default_column_end>
        </function>
        <function name="Last (LAST)">
          <description>Returns the last value of the selected column.\r\nExample: LAST(load_inventory.temp1)</description>
          <syntax>LAST(column)</syntax>
          <model>LAST(column)</model>
          <default_column_start>5</default_column_start>
          <default_column_end>11</default_column_end>
        </function>
        <function name="Maximum (MAX)">
          <description>Returns the maximum value from the supplied column.\r\nExample: MAX(load_inventory.temp1)</description>
          <syntax>MAX(numeric_column)</syntax>
          <model>MAX(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Minimum (MIN)">
          <description>Returns the minimum value from the supplied column.\r\nExample: MIN(load_inventory.temp1)</description>
          <syntax>MIN(numeric_column)</syntax>
          <model>MIN(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
        <function name="Sum (SUM)">
          <description>Returns the summed values from the supplied column.\r\nExample: SUM(load_inventory.temp1)</description>
          <syntax>SUM(numeric_column)</syntax>
          <model>SUM(numeric_column)</model>
          <default_column_start>4</default_column_start>
          <default_column_end>18</default_column_end>
        </function>
      </functions>
    </functional_group>
    <functional_group name="Operator">
      <functions>
        <function name="+">
          <description>Inserts the concatenation operator to allow adding of two strings.\r\nExample: load_customer.first_name + ' ' +load_customer.last_name</description>
          <syntax>+</syntax>
          <model>+</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="-">
          <description>Inserts the minus operator to allow subtraction of two numbers.\r\nExample: load_sales.base - load_sales.gst</description>
          <syntax>-</syntax>
          <model>-</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="/">
          <description>Inserts the divide operator to allow division of two numbers.\r\nExample: load_sales.base / load_sales.gst</description>
          <syntax>/</syntax>
          <model>/</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="*">
          <description>Inserts the multiply operator to allow multiplication of two numbers.\r\nExample: load_sales.base * load_sales.gst</description>
          <syntax>*</syntax>
          <model>*</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=" ">
          <description>Inserts the space character for clarity or other purposes.</description>
          <syntax> </syntax>
          <model> </model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name="(">
          <description>Inserts the open bracket, used for setting precedence in result evaluation.</description>
          <syntax>(</syntax>
          <model>(</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
        <function name=")">
          <description>Inserts the close bracket, used for setting precedence in result evaluation.</description>
          <syntax>)</syntax>
          <model>)</model>
          <default_column_start>0</default_column_start>
          <default_column_end>0</default_column_end>
        </function>
      </functions>
    </functional_group>
  </functional_groups>

</database_function_set>
