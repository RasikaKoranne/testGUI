define({"165":{y:0,u:"../Content/Teradata/Loading Data Teradata/Apache Sqoop Load Teradata.htm",l:-1,t:"Apache Sqoop Load",i:0.00085884420954181,a:"The Apache Sqoop load type enables loading data directly from Hive/HDFS to any (non-Hive) targets, however, for loading data directly from Hive into Teradata, it is recommended to use the TPT functionality instead. When processing Teradata loads from Hive/HDFS using Apache Sqoop, WhereScape ..."},"166":{y:0,u:"../Content/Teradata/Loading Data Teradata/Handling Missing Source Columns Teradata.htm",l:-1,t:"Handling Missing Source Columns",i:0.00085884420954181,a:"By default, a load fails if a source column that is to be loaded does not exist. This default action can be modified by using the Non mandatory source column feature of a load table. When this feature is enabled, the load process checks all source columns, and if any are found to be missing—the ..."},"167":{y:0,u:"../Content/User Guide/Loading Data/Load Table Transformations.htm",l:-1,t:"Load Table Transformations",i:0.00246727912228737,a:"Load Table Transformations Each load table column can have a transformation associated with it.  Refer to  Transformations  and  Load Table Column Transformations  for details."},"168":{y:0,u:"../Content/User Guide/Loading Data/Post-Load Procedures.htm",l:-1,t:"Post-Load Procedures",i:0.00085884420954181,a:"If a procedure name is entered in the Post Load Procedure drop-down field of a Load table\u0027s Properties, then this procedure will be executed after the load has completed and after any after transformations have occurred. Click the Rebuild button to start the process of generating a new procedure. ..."},"169":{y:0,u:"../Content/User Guide/Loading Data/Changing Load Connection and Schema.htm",l:-1,t:"Changing Load Connection and Schema",i:0.00231053219625795,a:"The connection associated with a load table can be changed through the Properties of that table. Connections can also be changed in bulk by using the following process: Double-click the Load table object group in the left pane. This displays all the Load tables in the middle pane. Select the Load ..."},"170":{y:0,u:"../Content/User Guide/Dimensions/Dimensions.htm",l:-1,t:"Dimensions",i:0.00085884420954181,a:"Dimensions    "},"171":{y:0,u:"../Content/User Guide/Dimensions/Dim Overview.htm",l:-1,t:"Dimensions Overview",i:0.00085884420954181,a:"A dimension table is normally defined, for our purposes, as a table that enables us to constrain queries on the fact table. A dimension is built from the Data Warehouse connection. Unless you are doing a retro-fit of an existing system, dimensions are typically built from one or more load tables. ..."},"172":{y:0,u:"../Content/User Guide/Dimensions/Building a Dimension.htm",l:-1,t:"Building a Dimension",i:0.00164871630597685,a:"Dimensions are often sourced from one table in the base application. In many cases, there are also codes that require description lookups to complete the de-normalization of the dimensional data.  The process for building a dimension is the same for most other tables and begins with the drag and ..."},"173":{y:0,u:"../Content/User Guide/Dimensions/Gen Dim Update Proc.htm",l:-1,t:"Generating the Dimension Update Procedure",i:0.00205408159929346,a:"Once a dimension has been defined in the meta data and created in the database, an update procedure can be generated to handle the joining of any tables and the update of the dimension records. The zero key row WhereScape RED by default, inserts a record into the dimension with an artificial key ..."},"174":{y:0,u:"../Content/User Guide/Dimensions/Dim Artificial Keys.htm",l:-1,t:"Dimension Artificial Keys",i:0.00104135509538482,a:"The artificial (surrogate) key for a dimension is set via a sequence in Oracle and an identity column in SQL Server and DB2.  This artificial key normally, and by default, starts at one and progresses as far as is required.   A WhereScape standard for the creation of special rows in the dimension is ..."},"175":{y:0,u:"../Content/User Guide/Dimensions/Dim Col Properties.htm",l:-1,t:"Dimension Column Properties",i:0.00133088493555044,a:"Each dimension column has a set of associated properties. The definition of each property is described below: A sample Properties screen is as follows: General Physical Definition Meta Definition Code Generation Source Details Changing a Column Name  If the Column name or Data type is changed for a ..."},"176":{y:0,u:"../Content/User Guide/Dimensions/Dim Col Transforms.htm",l:-1,t:"Dimension Column Transformations",i:0.00308908222368013,a:"Each Dimension table column can have a transformation associated with it. The transformation is included in the generated procedure and is executed as part of the procedure update.  The transformation must therefore be a valid SQL construct that can be included in a Select statement. For example, we ..."},"177":{y:0,u:"../Content/User Guide/Dimensions/Dim Hierarchies.htm",l:-1,t:"Dimension Hierarchies",i:0.00127379312416995,a:"The various hierarchies associated with a dimension can be recorded in the WhereScape RED metadata. These hierarchies are often not used in any form, except to provide documentary completeness.   When used in conjunction with the hierarchy maintenance utility, these dimension hierarchies add a ..."},"178":{y:0,u:"../Content/User Guide/Dimensions/Adding a Dim Hierarchy.htm",l:-1,t:"Adding a Dimension Hierarchy",i:0.00085884420954181,a:"Any number of hierarchies can be created against a dimension. There is no restriction on the form of the hierarchy.  To add a new hierarchy, right-click the dimension table in the left pane and select Hierarchies \u003e Add Hierarchy.  The following window appears. Enter a meaningful name for the ..."},"179":{y:0,u:"../Content/User Guide/Dimensions/Using a Maintned Hierar.htm",l:-1,t:"Using a Maintained Hierarchy",i:0.00085884420954181,a:"Once a hierarchy has been added to a dimension, it can be maintained externally by the hierarchy maintenance utility if the Maintained attribute is set. The process for maintaining this hierarchy externally and using it as a source system to the data warehouse is as follows. Grant the user that is ..."},"180":{y:0,u:"../Content/User Guide/Dimensions/Snowflake.htm",l:-1,t:"Snowflake",i:0.00085884420954181,a:"Snowflake schemas normalize dimensions to eliminate redundancy; that is, the dimension data has been grouped into multiple tables instead of one large table.  For example, a product dimension table in a star schema might be EDW 3NF into a products table, a product_category table, and a ..."},"181":{y:0,u:"../Content/User Guide/Dimensions/Creating a Snowflake.htm",l:-1,t:"Creating a Snowflake",i:0.00085884420954181,a:"A snowflake dimensional structure is supported by WhereScape RED.  A snowflake can be created for EDW 3NF or partially EDW 3NF dimension tables, by including the surrogate key of the parent dimension in the child dimension.  In the example below, the dim_state table represents the parent dimension.  ..."},"182":{y:0,u:"../Content/User Guide/Dimensions/Dim Lang Mapping.htm",l:-1,t:"Dimension Language Mapping",i:0.00085884420954181,a:"The Dimension Properties screen has a Language Mapping tab.  Select the language from the drop-down list. Enter the translations for the Business Display Name and the Description in the chosen language.  The translations for these fields can then be pushed through into OLAP cubes. To add a language ..."},"183":{y:0,u:"../Content/User Guide/Staging/Staging.htm",l:-1,t:"Staging",i:0.00085884420954181,a:"Stage tables are used to transform the data to a star schema or third normal form model. A stage table can be a fact or an EDW 3NF table that only contains change data or a work table. In star schema data warehouses, the stage table brings all the dimensional joins together in preparation for ..."},"184":{y:0,u:"../Content/User Guide/Staging/Building the Stage Table.htm",l:-1,t:"Building the Stage Table",i:0.00104135509538482,a:"Building the stage table is potentially the most challenging part of the overall task of building a data warehouse analysis area. Most of the effort required is in the design phase, in terms of knowing what data needs to come into the fact table that will ultimately be built. This section assumes ..."},"185":{y:0,u:"../Content/User Guide/Staging/Gen the Stage Update Proc.htm",l:-1,t:"Generating the Staging Update Procedure",i:0.00159495508570479,a:"Once a stage table has been defined in the metadata and created in the database, an update procedure can be generated to handle the joining of any tables and the lookup of the dimension table artificial keys.  Generating a Procedure To generate a procedure, right-click on the stage table in the left ..."},"186":{y:0,u:"../Content/User Guide/Staging/Stage Table Col Props.htm",l:-1,t:"Stage Table Column Properties",i:0.000980518133437148,a:"Each Stage table column has a set of associated properties. The definition of each property is defined below: If the Column name or Data type is changed for a column, then the metadata will differ from the table as recorded in the database.  Use the Validate \u003e Validate Table Create Status menu ..."},"187":{y:0,u:"../Content/Teradata/Staging Teradata/Stage Tbl Cust Proc Teradata.htm",l:-1,t:"Stage Table Custom Procedure",i:0.00085884420954181,a:"A second procedure can be created on every stage table. This is called the custom procedure. Rather than modifying the generated procedure, it is often more practical to make additions to the generated code in a separate procedure. This allows for regeneration of the staging table\u0027s update procedure ..."},"188":{y:0,u:"../Content/User Guide/Staging/Stage Table Col Transforms.htm",l:-1,t:"Stage Table Column Transformations",i:0.00127557977337526,a:"Each Stage table column can have a transformation associated with it. The transformation will be included in the generated procedure and will be executed as part of the procedure update.  The transformation must therefore be a valid SQL construct that can be included in a Select statement.  For ..."},"189":{y:0,u:"../Content/Teradata/Staging Teradata/Perm Stage Tbls Teradata.htm",l:-1,t:"Permanent Stage Tables",i:0.00085884420954181,a:"Normally Stage tables have all data removed from them at the start of their update procedure. Sometimes it\u0027s necessary to hold more than a single set of data in a stage table. Permanent Stage tables allow this. By default, a Permanent Stage table update does not start with all data being removed. ..."},"190":{y:0,u:"../Content/Teradata/Staging Teradata/Gen Perm Stage Tbls Upd Proc Teradata.htm",l:-1,t:"Generating the Permanent Stage Table Update Procedure",i:0.00085884420954181,a:"Generating a Procedure To generate a procedure, right-click on the stage table in the left pane and select Properties.  From the Update Procedure drop-down list, select (Build Procedure...).  Click OK to update the properties and start the process of generating the new procedure. A series of prompts ..."},"191":{y:0,u:"../Content/User Guide/Data Store Objects/Data Store Objects.htm",l:-1,t:"Data Store Objects",i:0.00085884420954181,a:"Data Store Objects    "},"192":{y:0,u:"../Content/User Guide/Data Store Objects/Data Store Obj Overview.htm",l:-1,t:"Overview",i:0.00085884420954181,a:"A Data Store Object is a data warehouse object used to store any type of data for later processing.  In WhereScape RED, Data Store objects have many of the code generating attributes of Stage, Dimension and Fact tables. Data Store objects can be thought of as a source system for the data warehouse.  ..."},"193":{y:0,u:"../Content/User Guide/Data Store Objects/Build Data Store Obj.htm",l:-1,t:"Building a Data Store Object",i:0.00110219205733249,a:"Data Store Objects are often sourced from one table in the base application.  The process for building a Data Store Object begins with the drag and drop of the load or stage table that contains the bulk of the Data Store Object\u0027s information. Drag and Drop Create a Data Store Object target by ..."},"194":{y:0,u:"../Content/User Guide/Data Store Objects/Gen Data Store Upd Proc.htm",l:-1,t:"Generating the Data Store Update Procedure",i:0.00141449162798641,a:"Once a Data Store object has been defined in the metadata and created in the database, an update procedure can be generated to handle the joining of any tables and the update of the Data Store object. Generating a Procedure To generate a procedure: Right-click the Data Store object in the left pane ..."},"195":{y:0,u:"../Content/User Guide/Data Store Objects/Data Store Artificial Keys.htm",l:-1,t:"Data Store Artificial Keys",i:0.00085884420954181,a:"By default, Data Store Objects in WhereScape RED do not have an artificial (surrogate) key.  Artificial keys can be added manually but if needed could indicate Data Store Objects are not the correct WhereScape RED object for this table (perhaps an EDW 3NF Table would be more appropriate).  There is ..."},"196":{y:0,u:"../Content/User Guide/Data Store Objects/Data Store Col Props.htm",l:-1,t:"Data Store Column Properties",i:0.00129281770409107,a:"Each Data Store Object column has a set of associated properties. The definition of each property is described below: If the Column name or Data type is changed for a column then the metadata will differ from the table as recorded in the database.  Use the Validate/Validate Table Create Status menu ..."},"197":{y:0,u:"../Content/User Guide/Data Store Objects/Data Store Obj Col Transforms.htm",l:-1,t:"Data Store Object Column Transformations",i:0.00085884420954181,a:"Each Data Store Object column can have a transformation associated with it. The transformation is included in the generated procedure and is executed as part of the procedure update.  The transformation must therefore be a valid SQL construct that can be included in a Select statement.  For example, ..."},"198":{y:0,u:"../Content/User Guide/EDW 3NF Tables/EDW 3NF Tables.htm",l:-1,t:"EDW 3NF Tables",i:0.00158888775291384,a:"EDW 3NF Tables  "},"199":{y:0,u:"../Content/User Guide/EDW 3NF Tables/EDW 3NF Table Overview.htm",l:-1,t:"EDW 3NF Table Overview",i:0.00085884420954181,a:"An EDW 3NF Table is a data warehouse object used to build third normal form enterprise data warehouses.  In WhereScape RED, EDW 3NF objects have many of the code generating attributes of Stage, Dimension and Fact tables.  Third normal form enterprise data warehouses can be thought of as a source ..."},"200":{y:0,u:"../Content/User Guide/EDW 3NF Tables/Building an EDW 3NF Table.htm",l:-1,t:"Building an EDW 3NF Table",i:0.00104135509538482,a:"EDW 3NF tables are often sourced from one table in the base application. The process for building an EDW 3NF table begins with the drag and drop of the Load or Stage table that contains the bulk of the EDW 3NF table\u0027s information. Drag and Drop Create an EDW 3NF table target by double-clicking  the ..."},"201":{y:0,u:"../Content/User Guide/EDW 3NF Tables/Gen the EDW 3NF Upd Proc.htm",l:-1,t:"Generating the EDW 3NF Update Procedure",i:0.00133641673532293,a:"Once an EDW 3NF object has been defined in the metadata and created in the database, an update procedure can be generated to handle the joining of any tables and the update of the EDW 3NF object. Generating a Procedure To generate a procedure: Right-click the EDW 3NF object in the left pane and ..."},"202":{y:0,u:"../Content/Teradata/EDW 3NF Tables Teradata/EDW3NF Tbl Art Keys Teradata.htm",l:-1,t:"EDW 3NF Table Artificial Keys",i:0.00085884420954181,a:"By default, EDW 3NF tables in WhereScape RED do not have an artificial (surrogate) key. Artificial keys can be added manually.  The quickest way to do this is to add an extra column to the EDW 3NF table by using either Add Column or Copy Column. There is also an option for artificial keys to be ..."},"203":{y:0,u:"../Content/User Guide/EDW 3NF Tables/EDW 3NF Table Col Props.htm",l:-1,t:"EDW 3NF Table Column Properties",i:0.00127557977337526,a:"Each EDW 3NF table column has a set of associated properties. The definition of each property is described below: If the Column name or Data type is changed for a column then the metadata will differ from the table as recorded in the database.  Use the Validate \u003e Validate Table Create Status menu ..."},"204":{y:0,u:"../Content/User Guide/EDW 3NF Tables/EDW 3NF Tbl Col Transforms.htm",l:-1,t:"EDW 3NF Table Column Transformations",i:0.00194312991356674,a:"Each EDW 3NF table column can have a transformation associated with it. The transformation will be included in the generated procedure and will be executed as part of the procedure update.  The transformation must therefore be a valid SQL construct that can be included in a Select statement.  For ..."},"205":{y:0,u:"../Content/User Guide/Data Vaults/Data Vaults.htm",l:-1,t:"Data Vaults",i:0.00649373804346461,a:"The Data Vault system is an alternative approach to modeling an enterprise data warehouse that has been gaining popularity among organizations.  The Data Vault data warehouse architecture was invented by Dan Linstedt to provide an alternative to the traditional data warehouse modeling approach that ..."},"206":{y:0,u:"../Content/User Guide/Data Vaults/Data Vault Functions and Features.htm",l:-1,t:"Data Vault Functions and Features",i:0.00085884420954181,a:"Data Vault Functions and Features The following describe the WhereScape RED functions and features that are used for building Data Vault objects (Hub, Link and Satellite) to create a Data Vault model. "},"207":{y:0,u:"../Content/User Guide/Data Vaults/Load Table Meta Data Columns .htm",l:-1,t:"Load Table Meta Data Columns",i:0.00085884420954181,a:"The option to add default meta data columns to a new Load table object in WhereScape RED.    If the option Add meta data columns to table is selected, two DSS columns (dss_record_source and dss_load_date) are included in the meta data for the table and are populated by transformations. Note that ..."},"208":{y:0,u:"../Content/User Guide/Data Vaults/Data Vault Stage Table.htm",l:-1,t:"Data Vault Stage Table",i:0.00085884420954181,a:"WhereScape RED provides the option to create Data Vault Stage objects that are used to define the source columns for the Hub, Link and Change hash key columns.   The Data Vault Stage option can be selected from Table Type drop-down of the Stage Table Properties screen. This object type is created ..."},"209":{y:0,u:"../Content/User Guide/Data Vaults/Hash Key Generation Wizard.htm",l:-1,t:"Hash Key Generation Wizard",i:0.00466975325226054,a:"This Wizard is launched when building a Stage table with Table Type of Data Vault Stage. It enables you to specify the source columns to be used in defining the Hub, Link and Change hash key columns. The generated Hash Keys are used to build the Hub, Link and Satellite objects in WhereScape RED. The ..."},"210":{y:0,u:"../Content/User Guide/Data Vaults/Hub Link and Satellite Creation.htm",l:-1,t:"Hub, Link and Satellite Creation Wizard",i:0.00085884420954181,a:"This Wizard is launched when building a Data Vault object (Hub, Link or Satellite table) by dragging and dropping the source Data Vault Stage table from the right pane to the middle pane.  The detailed steps for using this Wizard is described  Creating the Hub, Link and Satellite Tables ."},"211":{y:0,u:"../Content/User Guide/Data Vaults/Data Vault Templates.htm",l:-1,t:"Data Vault Templates",i:0.0117528886762766,a:"Templates are used to generate update procedures for Data Vault objects. Users must select a template to use when generating the update procedure for Data Vault objects created in WhereScape RED.  The SQL Server Data Vault templates are described below: wsl_sqlserver_proc_dv_stage – this template ..."},"212":{y:0,u:"../Content/User Guide/Data Vaults/Data Vault Settings.htm",l:-1,t:"Data Vault Settings",i:0.0027821491501439,a:"Settings for Data Vault objects can be configured from the Tools \u003e Options screen. Object Types Settings The Default Sub Type for Stage Table Objects drop-down includes the Data Vault Stage option.   Configure this setting, if you want to set Data Vault Stage to be the default Table Type in the ..."},"213":{y:0,u:"../Content/User Guide/Data Vaults/Table Column Properties.htm",l:-1,t:"Table Column Properties",i:0.00085884420954181,a:"The Key Type field drop-down include options for Data Vault hash keys, e.g. Change Hash Key (c), Hub Hash Key (h) and Link Hash Key (l). Hash Key source information are also displayed for these key types. Hash Key Sources – displays the source columns that are used to generate the selected Hub, Link ..."},"214":{y:0,u:"../Content/User Guide/Data Vaults/Maintain Hash Key Columns.htm",l:-1,t:"Maintain Hash Key Columns",i:0.00085884420954181,a:"The context menu for Stage Table objects, listed in the left pane provides an option for maintaining Data Vault hash key columns.  You can review the composition of existing hash keys for a Data Vault Stage table (Hub, Link and Satellite) and create additional hash keys by selecting the Maintain DV ..."},"215":{y:0,u:"../Content/User Guide/Data Vaults/Building Data Vault Objects.htm",l:-1,t:"Building Data Vault Objects",i:0.00085884420954181,a:"To build Data Vault objects (Hub, Link and Satellite) in WhereScape RED, involves the following procedures. Creating Load Tables with the required DSS columns. Creating Data Vault Stage tables. Generating update procedures for the Stage table via templates. Creating the Hub, Link and Satellite ..."},"216":{y:0,u:"../Content/User Guide/Data Vaults/Creating Load Tables.htm",l:-1,t:"Creating Load Tables",i:0.00085884420954181,a:"The following describe the steps for creating a Load table: Browse to the source system connection required (Browse \u003e Source Tables). Double-click the Load Table object group in the left pane, the middle pane displays a list of existing Load tables.   Click the source table from the right pane and ..."},"217":{y:0,u:"../Content/User Guide/Data Vaults/Creating Data Vault Stage.htm",l:-1,t:"Creating Data Vault Stage Tables",i:0.00965078395908052,a:"The following describe the steps for creating a Data Vault Stage table:  Browse to the Data Warehouse (click Browse \u003e Data Warehouse) connection to create the Data Vault Stage table. Double-click the Stage object group in the left pane, the middle pane displays a list of existing Stage tables.   ..."},"218":{y:0,u:"../Content/User Guide/Data Vaults/Generating Update Procedures for the Data Vault Stage Table.htm",l:-1,t:"Generating Update Procedures for the Data Vault Stage Table",i:0.00327485382244628,a:"After successfully defining and creating the Data Vault Stage table, you can generate the update procedure via a template to populate the table.   Click the Rebuild button in the table Properties screen to launch the procedure generation Wizard to populate the table. On the Processing tab of Table ..."},"219":{y:0,u:"../Content/User Guide/Data Vaults/Creating the Hub, Link and Satellite Tables.htm",l:-1,t:"Creating the Hub, Link and Satellite Tables",i:0.00158888775291384,a:"After successfully creating and populating the Data Vault Stage table, you can now create the Hub, Link and Satellite tables. The Hub, Link and Change hash keys information stored in the Data Vault Stage table is used by the Wizard for building these Data Vault objects.   Creating the Hub table The ..."},"220":{y:0,u:"../Content/User Guide/Data Vaults/Generating Update Procedures for Hub, Link and Satellite Tables.htm",l:-1,t:"Generating Update Procedures for Hub, Link and Satellite Tables",i:0.00720494981011031,a:"The following describe the steps for generating update procedures via a template. Hub table  After successfully defining and creating the Hub table, you can generate the update procedure via a template to populate the table.   Click the Rebuild button in the table Properties screen to launch the ..."},"221":{y:0,u:"../Content/User Guide/Data Vaults/Changing the Data Vault Hash.htm",l:-1,t:"Changing the Data Vault Hash Key Function in WhereScape RED 6.9.1.0 and above",i:0.00664828550084427,a:"WhereScape RED ships templates (refer to  Data Vault Templates ) to generate the procedures for Data Vault objects, if the customer’s license includes Data Vault object support for  SQL Server, Oracle or Teradata database platforms.  Included in the Data Vault utility (wsl_\u003cdatabase\u003e_utility_dv) ..."},"222":{y:0,u:"../Content/User Guide/Custom Objects.htm",l:-1,t:"Custom Objects",i:0.00085884420954181,a:"Custom1 and Custom2 objects are user defined objects. These Object types can be renamed in the Tools \u003e Options \u003e Object Types \u003e Object Names menu. A Custom object license is required for these object types. Custom objects have the same options and properties as EDW 3NF tables. Refer to  EDW 3NF ..."},"223":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Tables Teradata.htm",l:-1,t:"Model Tables",i:0.00085884420954181,a:"Model Tables  "},"224":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Tables Overview Teradata.htm",l:-1,t:"Model Tables Overview",i:0.00085884420954181,a:"Model objects are used to create EDW 3NF models in an enterprise data warehouse. They can contain surrogate keys to other model tables.  A model is built from the Data Warehouse connection. Unless you are doing a retro-fit of an existing system, model tables are typically built from one or more ..."},"225":{y:0,u:"../Content/Teradata/Model Tables Teradata/Bldng Model Tbl Teradata.htm",l:-1,t:"Building a Model Table",i:0.00085884420954181,a:"Model Tables are often sourced from one table in the base application. The process for building a model table is the same for most other tables and begins with the drag and drop of the stage table that contains the bulk of the model information. Drag and Drop Create a model target by double clicking ..."},"226":{y:0,u:"../Content/Teradata/Model Tables Teradata/Gen Model Tbl Upd Proc Teradata.htm",l:-1,t:"Generating the Model Table Update Procedure",i:0.00085884420954181,a:"Once a model table has been defined in the metadata and created in the data base an update procedure can be generated to handle the joining of any tables and the update of the model table records. Generating a Procedure To generate a procedure, right-click on the model table in the left pane and ..."},"227":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Tbl Art Keys Teradata.htm",l:-1,t:"Model Table Artificial Keys",i:0.00085884420954181,a:"Model Table Artificial Keys The artificial (surrogate) key for a model table is set via an identity column. This artificial key normally, and by default, starts at one and progresses as far as is required.  A WhereScape standard for the creation of special rows in the model table is as follows:  "},"228":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Tbl Custom Proc Teradata.htm",l:-1,t:"Model Table Custom Procedure",i:0.00085884420954181,a:"A second procedure can be created on every model table. This is called the custom procedure. Rather than modifying the generated procedure, it is often more practical to make additions to the generated code in a separate procedure. This enables the regeneration of the model table\u0027s update procedure ..."},"229":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Hist Tbls Teradata.htm",l:-1,t:"Model History Tables",i:0.00085884420954181,a:"Model history tables are a special type of model table where new records are created when certain identified columns in the model table change.  With any model table we identify a business key that uniquely identifies the model table records. For example, in a product model table, the product code ..."},"230":{y:0,u:"../Content/Teradata/Model Tables Teradata/Gen Hist Tbl Upd Proc Teradata.htm",l:-1,t:"Generating History Table Update Procedures",i:0.00085884420954181,a:"Business Key definition This is almost identical to standard model tables. An additional check-box, Source System supplied Start and End dates is supplied. This enables you to specify a start and end dates in the source data. Source System supplied Start and End dates If Source System supplied Start ..."},"231":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Tbl Col Props Teradata.htm",l:-1,t:"Model Table Column Properties",i:0.000980518133437148,a:"Each model table column has a set of associated properties. The definition of each property is described below: If the Column name or Data type is changed for a column then the metadata will differ from the table as recorded in the database. Use the Validate\u003eValidate Table Create Status menu option ..."},"232":{y:0,u:"../Content/Teradata/Model Tables Teradata/Model Tbl Col Transforms.htm",l:-1,t:"Model Table Column Transformations",i:0.00085884420954181,a:"Each model table column can have a transformation associated with it. The transformation will be included in the generated procedure and will be executed as part of the procedure update. The transformation must therefore be a valid SQL construct that can be included in a Select statement. For ..."},"233":{y:0,u:"../Content/Teradata/Fact Tables/Fact Tables Teradata.htm",l:-1,t:"Fact Tables",i:0.00085884420954181,a:"A Fact Table is normally defined, for our purposes, as a table with facts (measures) and dimensional keys that allow the linking of multiple dimensions. It is normally illustrated in the form of a Star Schema with the central fact table and the outlying dimensions. The ultimate goal of the Fact ..."},});