define({"447":{y:0,u:"../Content/User Guide/Callable Routines/Intro_Callable Routines.htm",l:-1,t:"Introduction to Callable Routines",i:0.00085884420954181,a:"Introduction to Callable Routines"},"448":{y:0,u:"../Content/User Guide/Callable Routines/Callable Routines API.htm",l:-1,t:"Callable Routines API",i:0.00085884420954181,a:"Callable Routines API WhereScape RED callable routines provide an Application Program Interface (API) to the WhereScape RED metadata using the following SQL-invoked routines:"},"449":{y:0,u:"../Content/User Guide/Callable Routines/Callable Routines per RDBMS.htm",l:-1,t:"Callable Routines per RDBMS",i:0.00085884420954181,a:"Each WhereScape RED Callable Routine exists in the database as either a Stored Procedure or a User-defined Function that can be invoked from SQL. A Callable Procedure is invoked by a SQL call/execute statement and a Callable Function is invoked in a SQL SELECT statement or a value expression. The ..."},"450":{y:0,u:"../Content/User Guide/Callable Routines/Names Qualifier.htm",l:-1,t:"Callable Routines Names Qualifier",i:0.00085884420954181,a:"The WhereScape RED Callable Routines can be invoked using the unqualified routine name for SQL Server and Oracle. However, for Teradata and DB2 it is necessary to qualify the routine name with the owner/schema of the WhereScape RED metadata repository. All RED-generated procedures in a Teradata or ..."},"451":{y:0,u:"../Content/User Guide/Callable Routines/Common Input.htm",l:-1,t:"Callable Routines Common Input",i:0.0180638664477774,a:"The following input parameters are common to most of the WhereScape RED Callable Routines, which are primarily used for integration with the WhereScape RED Scheduler. Note Typically, the parameter names of the WhereScape RED Callable Routines use a p_ prefix as indicated but in some routines a v_ ..."},"452":{y:0,u:"../Content/User Guide/Callable Routines/Callable Routines Invocation.htm",l:-1,t:"Callable Routines Invocation",i:0.00085884420954181,a:"This chapter includes examples of each WhereScape RED Callable Routine to illustrate how to invoke the routine for each RDBMS along with the necessary variable declarations. Typically, the routines are executed from a Stored Procedure so the routine‑specific examples illustrate that scenario and use ..."},"453":{y:0,u:"../Content/User Guide/Callable Routines/Alt_Invocation Methods.htm",l:-1,t:"Alternative Invocation Methods",i:0.00085884420954181,a:"Alternative Invocation Methods  "},"454":{y:0,u:"../Content/User Guide/Callable Routines/Invocation via ODBC.htm",l:-1,t:"Invocation via ODBC",i:0.00085884420954181,a:"The following examples illustrate how to invoke a WhereScape RED Callable Routine via an ODBC connection (using a tool, such as WhereScape SQL Admin), which uses both input and output parameters. The examples work for a SQL Server RED repository but for another RDBMS the routine name may need to be ..."},"455":{y:0,u:"../Content/User Guide/Callable Routines/Invocation _Command-Line.htm",l:-1,t:"Invocation via the Command-Line",i:0.00085884420954181,a:"Each WhereScape RED Callable Routine can also be invoked from the command-line using an RDBMS-specific tool such as: These tools can be used to invoke a WhereScape RED Callable Routine by connecting to the database, executing SQL statements, and disconnecting from the database. Refer to the ..."},"456":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Api_Glossary.htm",l:-1,t:"Ws_Api_Glossary",i:0.000917247693011572,a:"Ws_Api_Glossary Synopsis Adds an entry to the documentation glossary. Description Adds the specified entry to the documentation glossary, which is included in documentation that is subsequently generated by WhereScape RED. Input Output  "},"457":{y:0,u:"../Content/User Guide/Callable Routines/API_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Api_Glossary Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Api_Glossary"},"458":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Connect_Replace.htm",l:-1,t:"Ws_Connect_Replace",i:0.0016472912363836,a:"Ws_Connect_Replace Synopsis Replaces the contents of a connection with the details from another connection. Description Copies the details of the specified Source connection to the specified Target connection. Input Output"},"459":{y:0,u:"../Content/User Guide/Callable Routines/Connect_Teradata.htm",l:-1,t:"Connect_Teradata",i:0.00085884420954181,a:"  Teradata Teradata Parameters: Ws_Connect_Replace Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Connect_Replace  "},"460":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Abort.htm",l:-1,t:"Ws_Job_Abort",i:0.000917247693011572,a:"Ws_Job_Abort Synopsis Aborts a job if it is in a running state. Description Aborts the specified job if it is in a running state, which changes it to a failed state, fails all running tasks, and holds all waiting tasks. Input  "},"461":{y:0,u:"../Content/User Guide/Callable Routines/Abort_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Abort Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Abort"},"462":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Clear_Archive.htm",l:-1,t:"Ws_Job_Clear_Archive",i:0.000917247693011572,a:"Synopsis Purges archived job logs that are older than the specified age in days. Description Deletes job-related logs that were previously archived (into the WX_WRK_AUDIT_ARCHIVE and WX_WRK_ERROR_ARCHIVE tables via a RED Scheduler and/or RED callable routines, such as Ws_Job_Clear_Logs and ..."},"463":{y:0,u:"../Content/User Guide/Callable Routines/Archive_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Clear_Archive Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Clear_Archive  "},"464":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Clear_Logs.htm",l:-1,t:"Ws_Job_Clear_Logs",i:0.000917247693011572,a:"Synopsis Archives job logs when the maximum number of current logs to retain is exceeded. Description Moves job-related logs from the current log tables (such as WS_WRK_AUDIT_LOG and WS_WRK_ERROR_LOG) to the corresponding archive log tables (such as WX_WRK_AUDIT_ARCHIVE and WX_WRK_ERROR_ARCHIVE) ..."},"465":{y:0,u:"../Content/User Guide/Callable Routines/Clear_Logs_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Clear_Logs Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Clear_Logs  "},"466":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Clear_Logs_By_Date.htm",l:-1,t:"Ws_Job_Clear_Logs_By_Date",i:0.000917247693011572,a:"Synopsis Archives job logs that are older than the specified age in days. Description Moves job-related logs from the current log tables (such as WS_WRK_AUDIT_LOG and WS_WRK_ERROR_LOG) to the corresponding archive log tables (such as WX_WRK_AUDIT_ARCHIVE and WX_WRK_ERROR_ARCHIVE) depending on their ..."},"467":{y:0,u:"../Content/User Guide/Callable Routines/Logs_By_Date_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Clear_Logs_By_Date Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Clear_Logs_By_Date"},"468":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Create.htm",l:-1,t:"Ws_Job_Create",i:0.000917247693011572,a:"Synopsis Creates a job based on an existing job and optionally starts it immediately. Description Creates a job from the specified existing job, if it is in either a holding or waiting state. The new job can be started immediately. Typically, this routine is used to create \u0026 start a job from within ..."},"469":{y:0,u:"../Content/User Guide/Callable Routines/Job_Create_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Create Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Create"},"470":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_CreateWait.htm",l:-1,t:"Ws_Job_CreateWait",i:0.000917247693011572,a:"Synopsis Creates a job based on an existing job and schedules it to start later. Description Creates a job from the specified existing job, if it is in either a holding or waiting state. The new job is scheduled to start later at the specified release time. Typically, this routine is used to create ..."},"471":{y:0,u:"../Content/User Guide/Callable Routines/CreateWait_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_CreateWait Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_CreateWait"},"472":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Dependency.htm",l:-1,t:"Ws_Job_Dependency",i:0.000917247693011572,a:"Synopsis Adds or removes a child-to-parent dependency between two jobs to control the child job. Description Adds or removes a child-to-parent dependency between two jobs to control the child job. The dependent child job can be defined to fail (if necessary) when the parent job does not complete ..."},"473":{y:0,u:"../Content/User Guide/Callable Routines/Job_Dependency_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Dependency Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Dependency  "},"474":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Release.htm",l:-1,t:"Ws_Job_Release",i:0.000917247693011572,a:"Synopsis Starts a job if it is in a holding or waiting state. Description Releases the specified job, if it is in a holding or waiting state, which sets the start time to the current time so that it starts immediately. Typically, this routine is used to start a job from within another job or via a ..."},"475":{y:0,u:"../Content/User Guide/Callable Routines/Job_Release_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Release Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Release  "},"476":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Restart.htm",l:-1,t:"Ws_Job_Restart",i:0.000917247693011572,a:"Synopsis Starts a job if it is in a failed state. Description Releases the specified job if it is in a failed state, which sets the start time to the current time so that it starts immediately. This routine can be executed as part of a database start-up sequence to restart each failed job that may ..."},"477":{y:0,u:"../Content/User Guide/Callable Routines/Job_Restart_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Restart Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Restart  "},"478":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Schedule.htm",l:-1,t:"Ws_Job_Schedule",i:0.000917247693011572,a:"Ws_Job_Schedule Synopsis Schedules a job if it is in a holding or waiting state. Description Schedules the specified job if it is in a holding or waiting state, which will start at the specified time. Typically, this routine is used to schedule a job from within another job. Input Output  "},"479":{y:0,u:"../Content/User Guide/Callable Routines/Schedule_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Schedule Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Schedule  "},"480":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Job_Status.htm",l:-1,t:"Ws_Job_Status",i:0.000917247693011572,a:"Ws_Job_Status Synopsis Returns the current status of a job. Description Returns the current status of the specified job, as recorded by a WhereScape RED Scheduler. Typically, this routine is used by a third-party scheduler or a user-defined procedure/script to check on a job. Input Output    "},"481":{y:0,u:"../Content/User Guide/Callable Routines/Job_Status_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Job_Status Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Job_Status  "},"482":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Load_Change.htm",l:-1,t:"Ws_Load_Change",i:0.000917247693011572,a:"Ws_Load_Change Synopsis Changes the Connection or Schema of a load table. Description Changes either the Connection or the Schema of the specified load table. Only the Connection or Schema can be changed so two calls are required to change both. Input Output"},"483":{y:0,u:"../Content/User Guide/Callable Routines/Load_Change_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Load_Change Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Load_Change"},"484":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Maintain_Indexes.htm",l:-1,t:"Ws_Maintain_Indexes",i:0.00128226946469758,a:"Synopsis Drops and/or builds database indexes that are defined in the WhereScape RED metadata. Description Drops and/or builds indexes for a specified table or a specified index. Only indexes that are defined in the WhereScape RED metadata are supported. Typically, this routine is used by a ..."},"485":{y:0,u:"../Content/User Guide/Callable Routines/Indexes_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Maintain_Indexes Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Maintain_Indexes  "},"486":{y:0,u:"../Content/User Guide/Callable Routines/Ws_Version_Clear.htm",l:-1,t:"Ws_Version_Clear",i:0.000917247693011572,a:"Synopsis Purges metadata versions for all objects that do not meet the specified retention criteria. Description Deletes metadata versions for all objects that do not meet the specified retention criteria, which can be specified as the minimum number of versions to retain per object and/or the ..."},"487":{y:0,u:"../Content/User Guide/Callable Routines/Clear_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: Ws_Version_Clear Callable Routine Type: PROCEDURE. Teradata Examples: Ws_Version_Clear"},"488":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterRead.htm",l:-1,t:"WsParameterRead",i:0.00122749983554087,a:"Synopsis Returns the value and comment (for most RDBMS) of a WhereScape RED metadata Parameter. Description Returns the value and comment (for most RDBMS) of the specified parameter from the DSS_PARAMETER metadata table. For SQL Server, Teradata, and DB2 this routine is a PROCEDURE that returns both ..."},"489":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterRead_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsParameterRead Callable Routine Type: PROCEDURE. Teradata Examples: WsParameterRead"},"490":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterReadF.htm",l:-1,t:"WsParameterReadF",i:0.00122749983554087,a:"Synopsis Returns the value of a WhereScape RED metadata Parameter [SQL Server only]. Description Returns the value of the specified parameter from the DSS_PARAMETER metadata table. This routine is a FUNCTION that is only available for SQL Server. For SQL Server, Teradata, and DB2 there is a ..."},"491":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterReadG.htm",l:-1,t:"WsParameterReadG",i:0.00122749983554087,a:"Synopsis Returns the value of a \"global\" WhereScape RED metadata Parameter that relates to a load table. Description Returns the value of an internal parameter that is defined and populated by WhereScape RED, which is available to a procedure that is currently processing a load table. The supported ..."},"492":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterReadG_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsParameterReadG Callable Routine Type: PROCEDURE. Teradata Examples: WsParameterReadG"},"493":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterWrite.htm",l:-1,t:"WsParameterWrite",i:0.00122749983554087,a:"Synopsis Updates the value and comment of a WhereScape RED metadata Parameter or creates it. Description Updates the value and comment of the specified parameter in the DSS_PARAMETER metadata table. If the specified parameter is not found, then it is added. Typically, this routine is used by ..."},"494":{y:0,u:"../Content/User Guide/Callable Routines/WsParameterWrite_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsParameterWrite Callable Routine Type: PROCEDURE. Teradata Examples: WsParameterWrite"},"495":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkAudit.htm",l:-1,t:"WsWrkAudit",i:0.000917247693011572,a:"Synopsis Records a message in the Audit Log. Description Adds the specified message to the WS_WRK_AUDIT_LOG workflow metadata table, which is referred to as the Audit Log or Audit Trail. A variety of message types are supported such as Information, Warning, and Error that are included in the ..."},"496":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkAudit_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsWrkAudit Callable Routine Type: PROCEDURE. Teradata Examples: WsWrkAudit"},"497":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkAuditBulk.htm",l:-1,t:"WsWrkAuditBulk",i:0.000917247693011572,a:"Synopsis Records multiple messages in the Audit Log. Description Adds the specified multiple messages to the WS_WRK_AUDIT_LOG workflow metadata table, which is referred to as the Audit Log or Audit Trail. A variety of message types are supported, such as Information, Warning, and Error that are ..."},"498":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkAuditBulk_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsWrkAuditBulk Callable Routine Type: PROCEDURE. Teradata Examples: WsWrkAuditBulk"},"499":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkError.htm",l:-1,t:"WsWrkError",i:0.000917247693011572,a:"Synopsis Records a message in the Error/Detail Log. Description Adds the specified message to the WS_WRK_ERROR_LOG workflow metadata table, which is referred to as the Error Log or Detail Log. A variety of message types are supported such as Information, Warning, and Error that are included in the ..."},"500":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkError_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsWrkError Callable Routine Type: PROCEDURE. Teradata Examples: WsWrkError"},"501":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkErrorBulk.htm",l:-1,t:"WsWrkErrorBulk",i:0.000917247693011572,a:"Synopsis Records multiple messages in the Error/Detail Log. Description Adds the specified multiple messages to the WS_WRK_ERROR_LOG workflow metadata table, which is referred to as the Error Log or Detail Log. A variety of message types are supported such as Information, Warning, and Error that are ..."},"502":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkErrorBulk_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsWrkErrorBulk Callable Routine Type: PROCEDURE. Teradata Examples: WsWrkErrorBulk"},"503":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkTask.htm",l:-1,t:"WsWrkTask",i:0.000917247693011572,a:"Synopsis Updates row counts for a task in the Task Log. Description Updates row counts for the specified task in the Task Log. Task Log messages (and row counts) are accessible via the \"Scheduler\" tab/window and/or the WS_ADMIN_V_TASK view of the WS_WRK_TASK_RUN and WS_WRK_TASK_LOG tables. This ..."},"504":{y:0,u:"../Content/User Guide/Callable Routines/WsWrkTask_Teradata.htm",l:-1,t:"Teradata",i:0.00085884420954181,a:"Teradata Teradata Parameters: WsWrkTask Callable Routine Type: PROCEDURE. Teradata Examples: WsWrkTask"},"505":{y:0,u:"../Content/User Guide/Ws_admin_v Views/Ws_admin_v Views.htm",l:-1,t:"Ws_admin_v Views",i:0.00085884420954181,a:"Ws_admin_v Views Admin views provide a means of interacting with the WhereScape RED metadata from within your chosen reporting tools. The following admin views are available:  "},"506":{y:0,u:"../Content/User Guide/Ws_admin_v Views/Ws_admin_v_audit.htm",l:-1,t:"Ws_admin_v_audit",i:0.00085884420954181,a:"Ws_admin_v_audit This Audit view is created using columns from the ws_wrk_audit_log table. Columns The following columns are created:  "},"507":{y:0,u:"../Content/User Guide/Ws_admin_v Views/Ws_admin_v_error.htm",l:-1,t:"Ws_admin_v_error",i:0.00085884420954181,a:"Ws_admin_v_error This Error view is created using columns from the ws_wrk_error_log table. Columns The following columns are created:"},"508":{y:0,u:"../Content/User Guide/Ws_admin_v Views/Ws_admin_v_sched.htm",l:-1,t:"Ws_admin_v_sched",i:0.00085884420954181,a:"Ws_admin_v_sched This Scheduled Job view is created from the ws_wrk_job_log table. Columns The following columns are created:  "},"509":{y:0,u:"../Content/User Guide/Ws_admin_v Views/Ws_admin_v_task.htm",l:-1,t:"Ws_admin_v_task",i:0.00085884420954181,a:"Ws_admin_v_task This Task view is created from the ws_wrk_task_run and ws_wrk_task_log tables. Columns The following columns are created:  "},"510":{y:0,u:"../Content/User Guide/Retrofitting/Retrofitting.htm",l:-1,t:"Retrofitting",i:0.00085884420954181,a:"WhereScape RED includes an advanced retrofit capability that can be used to: Migrate an existing data warehouse from one relational database to another (known as fork-lifting). Load a data model from a modeling tool. Retrofitting is achieved using the Retro object type in WhereScape RED and the ..."},"511":{y:0,u:"../Content/User Guide/Retrofitting/Migrating the Data Warehouse Database Platform.htm",l:-1,t:"Migrating the Data Warehouse Database Platform",i:0.00110219205733249,a:"WhereScape RED has an advanced retrofitting wizard for migrating an existing data warehouse from one relational database to another. The process to migrate an existing data warehouse includes: Creating a connection object to the existing warehouse database. Creating Retro objects based on the source ..."},"512":{y:0,u:"../Content/Teradata/Retrofitting/Importing a Data Model.htm",l:-1,t:"Importing a Data Model",i:0.00085884420954181,a:"WhereScape RED provides functionality for importing data models from modeling tools. The process to import a model is: Create the physical data model in the modeling tool. Generate DDL for the physical model in the modeling tool. Run the DDL in the data warehouse database to create empty versions of ..."},"513":{y:0,u:"../Content/User Guide/Retrofitting/Re Targeting Source Tables.htm",l:-1,t:"Re-Targeting Source Tables",i:0.00117114378019573,a:"Objects that have been retrofitted into the WhereScape RED meta data have themselves as their source table: They can be re-targeted to the correct source table(s) using the WhereScape RED re-target wizard as follows. Right-click a table object in the left pane and select Change Column(s). Select the ..."},"514":{y:0,u:"../Content/User Guide/Retrofitting/Retro Column Properties.htm",l:-1,t:"Retro Column Properties",i:0.00085884420954181,a:"Each Retro column has a set of associated properties. The definition of each property is defined below. If the Column name or Data type is changed for a column then the metadata will differ from the table as recorded in the database. Use the Validate \u003e Validate Table Create Status menu option to ..."},"515":{y:0,u:"../Content/User Guide/Retrofitting/Retro Column Properties Screen.htm",l:-1,t:"Retro Column Properties Screen",i:0.00085884420954181,a:"Retro Column Properties Screen A sample Properties screen is as follows:"},"516":{y:0,u:"../Content/User Guide/Retrofitting/Retro Column Transformations.htm",l:-1,t:"Retro Column Transformations",i:0.00085884420954181,a:"Retro Column Transformations It is possible to do transformations on Retro table columns. It is recommended that transformations are not performed on columns that are dimension keys or the business keys for the table. The transformation screen is as follows: Refer to  Transformations  for details.  "},"517":{y:0,u:"../Content/User Guide/Relationship Maintenance/Relationship Maintenance.htm",l:-1,t:"Relationship Maintenance",i:0.00184389676391749,a:"Relationship Maintenance is available for the maintenance of joins between objects; providing a way to record joins between tables when surrogate keys are not being used. This functionality then enables the generation of Links Diagrams for these objects.  Relationship Maintenance options are ..."},"518":{y:0,u:"../Content/User Guide/Relationship Maintenance/Add Relationship.htm",l:-1,t:"Add Relationship",i:0.00085884420954181,a:"To add a relationship, right-click on the object in the Object Pane and select Relationships \u003e Add Relationships. The following window is displayed. For each object in the relationship, type in the following details: Once you have entered the details for the join, the joined columns are displayed in ..."},"519":{y:0,u:"../Content/User Guide/Relationship Maintenance/List Relationships.htm",l:-1,t:"List Relationships",i:0.00085884420954181,a:"To view relationship for an object, right-click the object from the Object Pane and select Relationships \u003e List Relationships. The relationships for the selected object are displayed in the Drop Target Pane (middle pane). Multi-column joins are shaded when one join is selected. Right-clicking on a ..."},"520":{y:0,u:"../Content/User Guide/Relationship Maintenance/Generate Relationships.htm",l:-1,t:"Generate Relationships",i:0.00085884420954181,a:"Generate Relationships To generate relationships in metadata for an object, right-click the object from the Object Pane and select Relationships \u003e Generate Relationships. Results are shown in the Results Pane."},"521":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrate WS RED in Exstng Warehse.htm",l:-1,t:"Integrating WhereScape RED into an Existing Warehouse",i:0.00085884420954181,a:"Two main options exist in terms of bringing WhereScape RED into an existing data warehouse environment: Rebuild tables and procedures with WhereScape RED. Integrating existing tables and procedures into WhereScape RED. Both options require manual coding changes to stored procedures. The main ..."},"522":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Rebuilding.htm",l:-1,t:"Rebuilding",i:0.00122386598122782,a:"The rebuild process essentially is a total re-creation of the data warehouse. One of the major impacts of such an approach is the end user layer, or rather the effect on the end user tools and saved queries and reports that are currently in use. The redesign or redeployment of this interface to the ..."},"523":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating.htm",l:-1,t:"Integrating",i:0.00122386598122782,a:"The integrate process The steps in the integrate process are: Create a test environment (database user) with the existing data warehouse tables loaded. Load a copy of the WhereScape metadata repository into this test environment. Refer to the RED Installation Guide for instructions on how to load a ..."},"524":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating Host Scripts.htm",l:-1,t:"Integrating, Host Scripts",i:0.00100746225186419,a:"Existing host scripts (either UNIX or Windows) can be brought into the WhereScape RED metadata. To incorporate an existing script the process is as follows: Create a Host Script object using WhereScape RED. In the left pane, right-click a project or the All Objects project and select New Object.  In ..."},"525":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating Select a Tbl Type.htm",l:-1,t:"Integrating, Selecting a Table Type",i:0.00100746225186419,a:"When integrating existing tables there may not be a clear decision as to which table type to use. As a guideline, the following groupings can be considered. Temporary tables: Load tables Stage tables Permanent tables: Dimension tables Fact tables Aggregate tables Although these table groups have ..."},"526":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating, Questions.htm",l:-1,t:"Integrating, Questions",i:0.00100746225186419,a:"When a table within the data warehouse schema, that is unknown to WhereScape RED, is dropped onto a table target the following dialog appears. If this is an integrate then click Yes to proceed with the integrate process. The standard New Object dialog appears and it would be advisable to leave the ..."},"527":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating Procedures.htm",l:-1,t:"Integrating, Procedures",i:0.00217613707337284,a:"  The procedures managed by the WhereScape scheduler require the following standards. Parameters The procedure must have the following parameters in the following order: The input parameters are passed to the procedure by the scheduler. If the procedure is called outside the scheduler then the ..."},"528":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating Views.htm",l:-1,t:"Integrating, Views",i:0.00085884420954181,a:"When integrating views an additional step is required if you want WhereScape RED to be able to recreate the view.   The view will be mapped correctly and the Get Key function can still be built. This step is only required if the view is to be re-created. Change the source column on the artificial ..."},"529":{y:0,u:"../Content/User Guide/Integrating into existing Warehouse/Integrating, WS Tables.htm",l:-1,t:"Integrating, WhereScape Tables",i:0.00085884420954181,a:"Integrating, WhereScape Tables When integrating WhereScape generated tables and views a number of additional considerations need to be taken. Change the properties of all such columns. The key type should be set to 1, and the primary business key checkbox should be set.    "},"530":{y:0,u:"../Content/User Guide/Upgrading RED.htm",l:-1,t:"Upgrading RED",i:0.00085884420954181,a:"Upgrading RED The upgrading of RED is discussed at some length in the Installation and Administration Guide."},});